// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/custom_action/custom_action.proto)

#include <iomanip>

#include "custom_action_impl.h"
#include "plugins/custom_action/custom_action.h"

namespace mavsdk {

using ActionToExecute = CustomAction::ActionToExecute;
using Command = CustomAction::Command;
using Parameter = CustomAction::Parameter;
using Stage = CustomAction::Stage;
using ActionMetadata = CustomAction::ActionMetadata;

CustomAction::CustomAction(System& system) :
    PluginBase(),
    _impl{std::make_unique<CustomActionImpl>(system)}
{}

CustomAction::CustomAction(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<CustomActionImpl>(system)}
{}

CustomAction::~CustomAction() {}

void CustomAction::set_custom_action_async(
    ActionToExecute action_to_execute, const ResultCallback callback)
{
    _impl->set_custom_action_async(action_to_execute, callback);
}

CustomAction::Result CustomAction::set_custom_action(ActionToExecute action_to_execute) const
{
    return _impl->set_custom_action(action_to_execute);
}

CustomAction::CustomActionHandle
CustomAction::subscribe_custom_action(const CustomActionCallback& callback)
{
    return _impl->subscribe_custom_action(callback);
}

void CustomAction::unsubscribe_custom_action(CustomActionHandle handle)
{
    _impl->unsubscribe_custom_action(handle);
}

CustomAction::ActionToExecute CustomAction::custom_action() const
{
    return _impl->custom_action();
}

CustomAction::CustomActionCancellationHandle
CustomAction::subscribe_custom_action_cancellation(const CustomActionCancellationCallback& callback)
{
    return _impl->subscribe_custom_action_cancellation(callback);
}

void CustomAction::unsubscribe_custom_action_cancellation(CustomActionCancellationHandle handle)
{
    _impl->unsubscribe_custom_action_cancellation(handle);
}

bool CustomAction::custom_action_cancellation() const
{
    return _impl->custom_action_cancellation();
}

void CustomAction::respond_custom_action_async(
    ActionToExecute action_to_execute, Result custom_action_result, const ResultCallback callback)
{
    _impl->respond_custom_action_async(action_to_execute, custom_action_result, callback);
}

CustomAction::Result CustomAction::respond_custom_action(
    ActionToExecute action_to_execute, Result custom_action_result) const
{
    return _impl->respond_custom_action(action_to_execute, custom_action_result);
}

void CustomAction::custom_action_metadata_async(
    ActionToExecute action_to_execute,
    std::string file_path,
    const CustomActionMetadataCallback callback)
{
    _impl->custom_action_metadata_async(action_to_execute, file_path, callback);
}

std::pair<CustomAction::Result, CustomAction::ActionMetadata>
CustomAction::custom_action_metadata(ActionToExecute action_to_execute, std::string file_path) const
{
    return _impl->custom_action_metadata(action_to_execute, file_path);
}

void CustomAction::execute_custom_action_stage_async(Stage stage, const ResultCallback callback)
{
    _impl->execute_custom_action_stage_async(stage, callback);
}

CustomAction::Result CustomAction::execute_custom_action_stage(Stage stage) const
{
    return _impl->execute_custom_action_stage(stage);
}

void CustomAction::execute_custom_action_global_script_async(
    std::string global_script, const ResultCallback callback)
{
    _impl->execute_custom_action_global_script_async(global_script, callback);
}

CustomAction::Result
CustomAction::execute_custom_action_global_script(std::string global_script) const
{
    return _impl->execute_custom_action_global_script(global_script);
}

bool operator==(const CustomAction::ActionToExecute& lhs, const CustomAction::ActionToExecute& rhs)
{
    return (rhs.id == lhs.id) &&
           ((std::isnan(rhs.timeout) && std::isnan(lhs.timeout)) || rhs.timeout == lhs.timeout) &&
           ((std::isnan(rhs.progress) && std::isnan(lhs.progress)) || rhs.progress == lhs.progress);
}

std::ostream& operator<<(std::ostream& str, CustomAction::ActionToExecute const& action_to_execute)
{
    str << std::setprecision(15);
    str << "action_to_execute:" << '\n' << "{\n";
    str << "    id: " << action_to_execute.id << '\n';
    str << "    timeout: " << action_to_execute.timeout << '\n';
    str << "    progress: " << action_to_execute.progress << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, CustomAction::Command::CommandType const& command_type)
{
    switch (command_type) {
        case CustomAction::Command::CommandType::Long:
            return str << "Long";
        case CustomAction::Command::CommandType::Int:
            return str << "Int";
        default:
            return str << "Unknown";
    }
}
bool operator==(const CustomAction::Command& lhs, const CustomAction::Command& rhs)
{
    return (rhs.type == lhs.type) && (rhs.target_system_id == lhs.target_system_id) &&
           (rhs.target_component_id == lhs.target_component_id) && (rhs.frame == lhs.frame) &&
           (rhs.command == lhs.command) &&
           ((std::isnan(rhs.param1) && std::isnan(lhs.param1)) || rhs.param1 == lhs.param1) &&
           ((std::isnan(rhs.param2) && std::isnan(lhs.param2)) || rhs.param2 == lhs.param2) &&
           ((std::isnan(rhs.param3) && std::isnan(lhs.param3)) || rhs.param3 == lhs.param3) &&
           ((std::isnan(rhs.param4) && std::isnan(lhs.param4)) || rhs.param4 == lhs.param4) &&
           ((std::isnan(rhs.param5) && std::isnan(lhs.param5)) || rhs.param5 == lhs.param5) &&
           ((std::isnan(rhs.param6) && std::isnan(lhs.param6)) || rhs.param6 == lhs.param6) &&
           ((std::isnan(rhs.param7) && std::isnan(lhs.param7)) || rhs.param7 == lhs.param7) &&
           (rhs.is_local == lhs.is_local);
}

std::ostream& operator<<(std::ostream& str, CustomAction::Command const& command)
{
    str << std::setprecision(15);
    str << "command:" << '\n' << "{\n";
    str << "    type: " << command.type << '\n';
    str << "    target_system_id: " << command.target_system_id << '\n';
    str << "    target_component_id: " << command.target_component_id << '\n';
    str << "    frame: " << command.frame << '\n';
    str << "    command: " << command.command << '\n';
    str << "    param1: " << command.param1 << '\n';
    str << "    param2: " << command.param2 << '\n';
    str << "    param3: " << command.param3 << '\n';
    str << "    param4: " << command.param4 << '\n';
    str << "    param5: " << command.param5 << '\n';
    str << "    param6: " << command.param6 << '\n';
    str << "    param7: " << command.param7 << '\n';
    str << "    is_local: " << command.is_local << '\n';
    str << '}';
    return str;
}

std::ostream&
operator<<(std::ostream& str, CustomAction::Parameter::ParameterType const& parameter_type)
{
    switch (parameter_type) {
        case CustomAction::Parameter::ParameterType::Int:
            return str << "Int";
        case CustomAction::Parameter::ParameterType::Float:
            return str << "Float";
        default:
            return str << "Unknown";
    }
}
bool operator==(const CustomAction::Parameter& lhs, const CustomAction::Parameter& rhs)
{
    return (rhs.type == lhs.type) && (rhs.name == lhs.name) &&
           ((std::isnan(rhs.value) && std::isnan(lhs.value)) || rhs.value == lhs.value);
}

std::ostream& operator<<(std::ostream& str, CustomAction::Parameter const& parameter)
{
    str << std::setprecision(15);
    str << "parameter:" << '\n' << "{\n";
    str << "    type: " << parameter.type << '\n';
    str << "    name: " << parameter.name << '\n';
    str << "    value: " << parameter.value << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(
    std::ostream& str,
    CustomAction::Stage::StateTransitionCondition const& state_transition_condition)
{
    switch (state_transition_condition) {
        case CustomAction::Stage::StateTransitionCondition::OnResultSuccess:
            return str << "On Result Success";
        case CustomAction::Stage::StateTransitionCondition::OnTimeout:
            return str << "On Timeout";
        case CustomAction::Stage::StateTransitionCondition::OnLandingComplete:
            return str << "On Landing Complete";
        case CustomAction::Stage::StateTransitionCondition::OnTakeoffComplete:
            return str << "On Takeoff Complete";
        case CustomAction::Stage::StateTransitionCondition::OnModeChange:
            return str << "On Mode Change";
        case CustomAction::Stage::StateTransitionCondition::OnCustomConditionTrue:
            return str << "On Custom Condition True";
        case CustomAction::Stage::StateTransitionCondition::OnCustomConditionFalse:
            return str << "On Custom Condition False";
        default:
            return str << "Unknown";
    }
}
bool operator==(const CustomAction::Stage& lhs, const CustomAction::Stage& rhs)
{
    return (rhs.command == lhs.command) && (rhs.script == lhs.script) &&
           (rhs.parameter_set == lhs.parameter_set) &&
           (rhs.state_transition_condition == lhs.state_transition_condition) &&
           ((std::isnan(rhs.timeout) && std::isnan(lhs.timeout)) || rhs.timeout == lhs.timeout);
}

std::ostream& operator<<(std::ostream& str, CustomAction::Stage const& stage)
{
    str << std::setprecision(15);
    str << "stage:" << '\n' << "{\n";
    str << "    command: " << stage.command << '\n';
    str << "    script: " << stage.script << '\n';
    str << "    parameter_set: " << stage.parameter_set << '\n';
    str << "    state_transition_condition: " << stage.state_transition_condition << '\n';
    str << "    timeout: " << stage.timeout << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(
    std::ostream& str,
    CustomAction::ActionMetadata::ActionCompleteCondition const& action_complete_condition)
{
    switch (action_complete_condition) {
        case CustomAction::ActionMetadata::ActionCompleteCondition::OnLastStageComplete:
            return str << "On Last Stage Complete";
        case CustomAction::ActionMetadata::ActionCompleteCondition::OnTimeout:
            return str << "On Timeout";
        case CustomAction::ActionMetadata::ActionCompleteCondition::OnResultSuccess:
            return str << "On Result Success";
        case CustomAction::ActionMetadata::ActionCompleteCondition::OnCustomConditionTrue:
            return str << "On Custom Condition True";
        case CustomAction::ActionMetadata::ActionCompleteCondition::OnCustomConditionFalse:
            return str << "On Custom Condition False";
        default:
            return str << "Unknown";
    }
}
bool operator==(const CustomAction::ActionMetadata& lhs, const CustomAction::ActionMetadata& rhs)
{
    return (rhs.id == lhs.id) && (rhs.action_name == lhs.action_name) &&
           (rhs.action_description == lhs.action_description) &&
           (rhs.global_script == lhs.global_script) &&
           ((std::isnan(rhs.global_timeout) && std::isnan(lhs.global_timeout)) ||
            rhs.global_timeout == lhs.global_timeout) &&
           (rhs.action_complete_condition == lhs.action_complete_condition) &&
           (rhs.stages == lhs.stages);
}

std::ostream& operator<<(std::ostream& str, CustomAction::ActionMetadata const& action_metadata)
{
    str << std::setprecision(15);
    str << "action_metadata:" << '\n' << "{\n";
    str << "    id: " << action_metadata.id << '\n';
    str << "    action_name: " << action_metadata.action_name << '\n';
    str << "    action_description: " << action_metadata.action_description << '\n';
    str << "    global_script: " << action_metadata.global_script << '\n';
    str << "    global_timeout: " << action_metadata.global_timeout << '\n';
    str << "    action_complete_condition: " << action_metadata.action_complete_condition << '\n';
    str << "    stages: [";
    for (auto it = action_metadata.stages.begin(); it != action_metadata.stages.end(); ++it) {
        str << *it;
        str << (it + 1 != action_metadata.stages.end() ? ", " : "]\n");
    }
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, CustomAction::Result const& result)
{
    switch (result) {
        case CustomAction::Result::Unknown:
            return str << "Unknown";
        case CustomAction::Result::Success:
            return str << "Success";
        case CustomAction::Result::Error:
            return str << "Error";
        case CustomAction::Result::Timeout:
            return str << "Timeout";
        case CustomAction::Result::Unsupported:
            return str << "Unsupported";
        case CustomAction::Result::InProgress:
            return str << "In Progress";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk