// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/obstacle_avoidance/obstacle_avoidance.proto)

#include <iomanip>

#include "obstacle_avoidance_impl.h"
#include "plugins/obstacle_avoidance/obstacle_avoidance.h"

namespace mavsdk {




ObstacleAvoidance::ObstacleAvoidance(System& system) : PluginBase(), _impl{std::make_unique<ObstacleAvoidanceImpl>(system)} {}

ObstacleAvoidance::ObstacleAvoidance(std::shared_ptr<System> system) : PluginBase(), _impl{std::make_unique<ObstacleAvoidanceImpl>(system)} {}

ObstacleAvoidance::~ObstacleAvoidance() {}



void ObstacleAvoidance::start_async(const ResultCallback callback)
{
    _impl->start_async(callback);
}



ObstacleAvoidance::Result ObstacleAvoidance::start() const
{
    return _impl->start();
}



void ObstacleAvoidance::stop_async(const ResultCallback callback)
{
    _impl->stop_async(callback);
}



ObstacleAvoidance::Result ObstacleAvoidance::stop() const
{
    return _impl->stop();
}



void ObstacleAvoidance::restart_async(const ResultCallback callback)
{
    _impl->restart_async(callback);
}



ObstacleAvoidance::Result ObstacleAvoidance::restart() const
{
    return _impl->restart();
}



void ObstacleAvoidance::state_enable_async(const ResultCallback callback)
{
    _impl->state_enable_async(callback);
}



ObstacleAvoidance::Result ObstacleAvoidance::state_enable() const
{
    return _impl->state_enable();
}



void ObstacleAvoidance::state_disable_async(const ResultCallback callback)
{
    _impl->state_disable_async(callback);
}



ObstacleAvoidance::Result ObstacleAvoidance::state_disable() const
{
    return _impl->state_disable();
}




std::ostream& operator<<(std::ostream& str, ObstacleAvoidance::Result const& result)
{
    switch (result) {
        case ObstacleAvoidance::Result::Unknown:
            return str << "Unknown";
        case ObstacleAvoidance::Result::Success:
            return str << "Success";
        case ObstacleAvoidance::Result::NoSystem:
            return str << "No System";
        case ObstacleAvoidance::Result::ConnectionError:
            return str << "Connection Error";
        case ObstacleAvoidance::Result::Busy:
            return str << "Busy";
        case ObstacleAvoidance::Result::CommandDenied:
            return str << "Command Denied";
        case ObstacleAvoidance::Result::Timeout:
            return str << "Timeout";
        default:
            return str << "Unknown";
    }
}




} // namespace mavsdk