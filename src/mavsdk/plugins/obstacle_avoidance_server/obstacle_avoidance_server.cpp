// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/obstacle_avoidance_server/obstacle_avoidance_server.proto)

#include <iomanip>

#include "obstacle_avoidance_server_impl.h"
#include "plugins/obstacle_avoidance_server/obstacle_avoidance_server.h"

namespace mavsdk {

using Control = ObstacleAvoidanceServer::Control;

ObstacleAvoidanceServer::ObstacleAvoidanceServer(
    std::shared_ptr<ServerComponent> server_component) :
    ServerPluginBase(),
    _impl{std::make_unique<ObstacleAvoidanceServerImpl>(server_component)}
{}

ObstacleAvoidanceServer::~ObstacleAvoidanceServer() {}

ObstacleAvoidanceServer::ControlHandle
ObstacleAvoidanceServer::subscribe_control(const ControlCallback& callback)
{
    return _impl->subscribe_control(callback);
}

void ObstacleAvoidanceServer::unsubscribe_control(ControlHandle handle)
{
    _impl->unsubscribe_control(handle);
}

ObstacleAvoidanceServer::Control ObstacleAvoidanceServer::control() const
{
    return _impl->control();
}

std::ostream&
operator<<(std::ostream& str, ObstacleAvoidanceServer::Control::ControlType const& control_type)
{
    switch (control_type) {
        case ObstacleAvoidanceServer::Control::ControlType::Unknown:
            return str << "Unknown";
        case ObstacleAvoidanceServer::Control::ControlType::Start:
            return str << "Start";
        case ObstacleAvoidanceServer::Control::ControlType::Stop:
            return str << "Stop";
        case ObstacleAvoidanceServer::Control::ControlType::Restart:
            return str << "Restart";
        case ObstacleAvoidanceServer::Control::ControlType::Enable:
            return str << "Enable";
        case ObstacleAvoidanceServer::Control::ControlType::Disable:
            return str << "Disable";
        default:
            return str << "Unknown";
    }
}
bool operator==(
    const ObstacleAvoidanceServer::Control& lhs, const ObstacleAvoidanceServer::Control& rhs)
{
    return (rhs.control_type == lhs.control_type);
}

std::ostream& operator<<(std::ostream& str, ObstacleAvoidanceServer::Control const& control)
{
    str << std::setprecision(15);
    str << "control:" << '\n' << "{\n";
    str << "    control_type: " << control.control_type << '\n';
    str << '}';
    return str;
}

} // namespace mavsdk