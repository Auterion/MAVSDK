// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action/action.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_action_2faction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_action_2faction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_action_2faction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_action_2faction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_action_2faction_2eproto;
namespace mavsdk {
namespace rpc {
namespace action {
class ActionResult;
struct ActionResultDefaultTypeInternal;
extern ActionResultDefaultTypeInternal _ActionResult_default_instance_;
class ArmRequest;
struct ArmRequestDefaultTypeInternal;
extern ArmRequestDefaultTypeInternal _ArmRequest_default_instance_;
class ArmResponse;
struct ArmResponseDefaultTypeInternal;
extern ArmResponseDefaultTypeInternal _ArmResponse_default_instance_;
class DisarmRequest;
struct DisarmRequestDefaultTypeInternal;
extern DisarmRequestDefaultTypeInternal _DisarmRequest_default_instance_;
class DisarmResponse;
struct DisarmResponseDefaultTypeInternal;
extern DisarmResponseDefaultTypeInternal _DisarmResponse_default_instance_;
class DoOrbitRequest;
struct DoOrbitRequestDefaultTypeInternal;
extern DoOrbitRequestDefaultTypeInternal _DoOrbitRequest_default_instance_;
class DoOrbitResponse;
struct DoOrbitResponseDefaultTypeInternal;
extern DoOrbitResponseDefaultTypeInternal _DoOrbitResponse_default_instance_;
class GetMaximumSpeedRequest;
struct GetMaximumSpeedRequestDefaultTypeInternal;
extern GetMaximumSpeedRequestDefaultTypeInternal _GetMaximumSpeedRequest_default_instance_;
class GetMaximumSpeedResponse;
struct GetMaximumSpeedResponseDefaultTypeInternal;
extern GetMaximumSpeedResponseDefaultTypeInternal _GetMaximumSpeedResponse_default_instance_;
class GetReturnToLaunchAltitudeRequest;
struct GetReturnToLaunchAltitudeRequestDefaultTypeInternal;
extern GetReturnToLaunchAltitudeRequestDefaultTypeInternal _GetReturnToLaunchAltitudeRequest_default_instance_;
class GetReturnToLaunchAltitudeResponse;
struct GetReturnToLaunchAltitudeResponseDefaultTypeInternal;
extern GetReturnToLaunchAltitudeResponseDefaultTypeInternal _GetReturnToLaunchAltitudeResponse_default_instance_;
class GetTakeoffAltitudeRequest;
struct GetTakeoffAltitudeRequestDefaultTypeInternal;
extern GetTakeoffAltitudeRequestDefaultTypeInternal _GetTakeoffAltitudeRequest_default_instance_;
class GetTakeoffAltitudeResponse;
struct GetTakeoffAltitudeResponseDefaultTypeInternal;
extern GetTakeoffAltitudeResponseDefaultTypeInternal _GetTakeoffAltitudeResponse_default_instance_;
class GotoLocationRequest;
struct GotoLocationRequestDefaultTypeInternal;
extern GotoLocationRequestDefaultTypeInternal _GotoLocationRequest_default_instance_;
class GotoLocationResponse;
struct GotoLocationResponseDefaultTypeInternal;
extern GotoLocationResponseDefaultTypeInternal _GotoLocationResponse_default_instance_;
class HoldRequest;
struct HoldRequestDefaultTypeInternal;
extern HoldRequestDefaultTypeInternal _HoldRequest_default_instance_;
class HoldResponse;
struct HoldResponseDefaultTypeInternal;
extern HoldResponseDefaultTypeInternal _HoldResponse_default_instance_;
class KillRequest;
struct KillRequestDefaultTypeInternal;
extern KillRequestDefaultTypeInternal _KillRequest_default_instance_;
class KillResponse;
struct KillResponseDefaultTypeInternal;
extern KillResponseDefaultTypeInternal _KillResponse_default_instance_;
class LandRequest;
struct LandRequestDefaultTypeInternal;
extern LandRequestDefaultTypeInternal _LandRequest_default_instance_;
class LandResponse;
struct LandResponseDefaultTypeInternal;
extern LandResponseDefaultTypeInternal _LandResponse_default_instance_;
class RebootRequest;
struct RebootRequestDefaultTypeInternal;
extern RebootRequestDefaultTypeInternal _RebootRequest_default_instance_;
class RebootResponse;
struct RebootResponseDefaultTypeInternal;
extern RebootResponseDefaultTypeInternal _RebootResponse_default_instance_;
class ReturnToLaunchRequest;
struct ReturnToLaunchRequestDefaultTypeInternal;
extern ReturnToLaunchRequestDefaultTypeInternal _ReturnToLaunchRequest_default_instance_;
class ReturnToLaunchResponse;
struct ReturnToLaunchResponseDefaultTypeInternal;
extern ReturnToLaunchResponseDefaultTypeInternal _ReturnToLaunchResponse_default_instance_;
class SetActuatorRequest;
struct SetActuatorRequestDefaultTypeInternal;
extern SetActuatorRequestDefaultTypeInternal _SetActuatorRequest_default_instance_;
class SetActuatorResponse;
struct SetActuatorResponseDefaultTypeInternal;
extern SetActuatorResponseDefaultTypeInternal _SetActuatorResponse_default_instance_;
class SetCurrentSpeedRequest;
struct SetCurrentSpeedRequestDefaultTypeInternal;
extern SetCurrentSpeedRequestDefaultTypeInternal _SetCurrentSpeedRequest_default_instance_;
class SetCurrentSpeedResponse;
struct SetCurrentSpeedResponseDefaultTypeInternal;
extern SetCurrentSpeedResponseDefaultTypeInternal _SetCurrentSpeedResponse_default_instance_;
class SetMaximumSpeedRequest;
struct SetMaximumSpeedRequestDefaultTypeInternal;
extern SetMaximumSpeedRequestDefaultTypeInternal _SetMaximumSpeedRequest_default_instance_;
class SetMaximumSpeedResponse;
struct SetMaximumSpeedResponseDefaultTypeInternal;
extern SetMaximumSpeedResponseDefaultTypeInternal _SetMaximumSpeedResponse_default_instance_;
class SetReturnToLaunchAltitudeRequest;
struct SetReturnToLaunchAltitudeRequestDefaultTypeInternal;
extern SetReturnToLaunchAltitudeRequestDefaultTypeInternal _SetReturnToLaunchAltitudeRequest_default_instance_;
class SetReturnToLaunchAltitudeResponse;
struct SetReturnToLaunchAltitudeResponseDefaultTypeInternal;
extern SetReturnToLaunchAltitudeResponseDefaultTypeInternal _SetReturnToLaunchAltitudeResponse_default_instance_;
class SetTakeoffAltitudeRequest;
struct SetTakeoffAltitudeRequestDefaultTypeInternal;
extern SetTakeoffAltitudeRequestDefaultTypeInternal _SetTakeoffAltitudeRequest_default_instance_;
class SetTakeoffAltitudeResponse;
struct SetTakeoffAltitudeResponseDefaultTypeInternal;
extern SetTakeoffAltitudeResponseDefaultTypeInternal _SetTakeoffAltitudeResponse_default_instance_;
class ShutdownRequest;
struct ShutdownRequestDefaultTypeInternal;
extern ShutdownRequestDefaultTypeInternal _ShutdownRequest_default_instance_;
class ShutdownResponse;
struct ShutdownResponseDefaultTypeInternal;
extern ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
class TakeoffRequest;
struct TakeoffRequestDefaultTypeInternal;
extern TakeoffRequestDefaultTypeInternal _TakeoffRequest_default_instance_;
class TakeoffResponse;
struct TakeoffResponseDefaultTypeInternal;
extern TakeoffResponseDefaultTypeInternal _TakeoffResponse_default_instance_;
class TerminateRequest;
struct TerminateRequestDefaultTypeInternal;
extern TerminateRequestDefaultTypeInternal _TerminateRequest_default_instance_;
class TerminateResponse;
struct TerminateResponseDefaultTypeInternal;
extern TerminateResponseDefaultTypeInternal _TerminateResponse_default_instance_;
class TransitionToFixedwingRequest;
struct TransitionToFixedwingRequestDefaultTypeInternal;
extern TransitionToFixedwingRequestDefaultTypeInternal _TransitionToFixedwingRequest_default_instance_;
class TransitionToFixedwingResponse;
struct TransitionToFixedwingResponseDefaultTypeInternal;
extern TransitionToFixedwingResponseDefaultTypeInternal _TransitionToFixedwingResponse_default_instance_;
class TransitionToMulticopterRequest;
struct TransitionToMulticopterRequestDefaultTypeInternal;
extern TransitionToMulticopterRequestDefaultTypeInternal _TransitionToMulticopterRequest_default_instance_;
class TransitionToMulticopterResponse;
struct TransitionToMulticopterResponseDefaultTypeInternal;
extern TransitionToMulticopterResponseDefaultTypeInternal _TransitionToMulticopterResponse_default_instance_;
}  // namespace action
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::action::ActionResult* Arena::CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(Arena*);
template<> ::mavsdk::rpc::action::ArmRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::ArmRequest>(Arena*);
template<> ::mavsdk::rpc::action::ArmResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::ArmResponse>(Arena*);
template<> ::mavsdk::rpc::action::DisarmRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::DisarmRequest>(Arena*);
template<> ::mavsdk::rpc::action::DisarmResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::DisarmResponse>(Arena*);
template<> ::mavsdk::rpc::action::DoOrbitRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::DoOrbitRequest>(Arena*);
template<> ::mavsdk::rpc::action::DoOrbitResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::DoOrbitResponse>(Arena*);
template<> ::mavsdk::rpc::action::GetMaximumSpeedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::GetMaximumSpeedRequest>(Arena*);
template<> ::mavsdk::rpc::action::GetMaximumSpeedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::GetMaximumSpeedResponse>(Arena*);
template<> ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest>(Arena*);
template<> ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse>(Arena*);
template<> ::mavsdk::rpc::action::GetTakeoffAltitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::GetTakeoffAltitudeRequest>(Arena*);
template<> ::mavsdk::rpc::action::GetTakeoffAltitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::GetTakeoffAltitudeResponse>(Arena*);
template<> ::mavsdk::rpc::action::GotoLocationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::GotoLocationRequest>(Arena*);
template<> ::mavsdk::rpc::action::GotoLocationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::GotoLocationResponse>(Arena*);
template<> ::mavsdk::rpc::action::HoldRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::HoldRequest>(Arena*);
template<> ::mavsdk::rpc::action::HoldResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::HoldResponse>(Arena*);
template<> ::mavsdk::rpc::action::KillRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::KillRequest>(Arena*);
template<> ::mavsdk::rpc::action::KillResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::KillResponse>(Arena*);
template<> ::mavsdk::rpc::action::LandRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::LandRequest>(Arena*);
template<> ::mavsdk::rpc::action::LandResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::LandResponse>(Arena*);
template<> ::mavsdk::rpc::action::RebootRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::RebootRequest>(Arena*);
template<> ::mavsdk::rpc::action::RebootResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::RebootResponse>(Arena*);
template<> ::mavsdk::rpc::action::ReturnToLaunchRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::ReturnToLaunchRequest>(Arena*);
template<> ::mavsdk::rpc::action::ReturnToLaunchResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::ReturnToLaunchResponse>(Arena*);
template<> ::mavsdk::rpc::action::SetActuatorRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetActuatorRequest>(Arena*);
template<> ::mavsdk::rpc::action::SetActuatorResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetActuatorResponse>(Arena*);
template<> ::mavsdk::rpc::action::SetCurrentSpeedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetCurrentSpeedRequest>(Arena*);
template<> ::mavsdk::rpc::action::SetCurrentSpeedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetCurrentSpeedResponse>(Arena*);
template<> ::mavsdk::rpc::action::SetMaximumSpeedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetMaximumSpeedRequest>(Arena*);
template<> ::mavsdk::rpc::action::SetMaximumSpeedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetMaximumSpeedResponse>(Arena*);
template<> ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest>(Arena*);
template<> ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse>(Arena*);
template<> ::mavsdk::rpc::action::SetTakeoffAltitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetTakeoffAltitudeRequest>(Arena*);
template<> ::mavsdk::rpc::action::SetTakeoffAltitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::SetTakeoffAltitudeResponse>(Arena*);
template<> ::mavsdk::rpc::action::ShutdownRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::ShutdownRequest>(Arena*);
template<> ::mavsdk::rpc::action::ShutdownResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::ShutdownResponse>(Arena*);
template<> ::mavsdk::rpc::action::TakeoffRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::TakeoffRequest>(Arena*);
template<> ::mavsdk::rpc::action::TakeoffResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::TakeoffResponse>(Arena*);
template<> ::mavsdk::rpc::action::TerminateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::TerminateRequest>(Arena*);
template<> ::mavsdk::rpc::action::TerminateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::TerminateResponse>(Arena*);
template<> ::mavsdk::rpc::action::TransitionToFixedwingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::TransitionToFixedwingRequest>(Arena*);
template<> ::mavsdk::rpc::action::TransitionToFixedwingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::TransitionToFixedwingResponse>(Arena*);
template<> ::mavsdk::rpc::action::TransitionToMulticopterRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::action::TransitionToMulticopterRequest>(Arena*);
template<> ::mavsdk::rpc::action::TransitionToMulticopterResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::action::TransitionToMulticopterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace action {

enum ActionResult_Result : int {
  ActionResult_Result_RESULT_UNKNOWN = 0,
  ActionResult_Result_RESULT_SUCCESS = 1,
  ActionResult_Result_RESULT_NO_SYSTEM = 2,
  ActionResult_Result_RESULT_CONNECTION_ERROR = 3,
  ActionResult_Result_RESULT_BUSY = 4,
  ActionResult_Result_RESULT_COMMAND_DENIED = 5,
  ActionResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
  ActionResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED = 7,
  ActionResult_Result_RESULT_TIMEOUT = 8,
  ActionResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
  ActionResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT = 10,
  ActionResult_Result_RESULT_PARAMETER_ERROR = 11,
  ActionResult_Result_RESULT_UNSUPPORTED = 12,
  ActionResult_Result_RESULT_FAILED = 13,
  ActionResult_Result_ActionResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ActionResult_Result_ActionResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ActionResult_Result_IsValid(int value);
constexpr ActionResult_Result ActionResult_Result_Result_MIN = ActionResult_Result_RESULT_UNKNOWN;
constexpr ActionResult_Result ActionResult_Result_Result_MAX = ActionResult_Result_RESULT_FAILED;
constexpr int ActionResult_Result_Result_ARRAYSIZE = ActionResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionResult_Result_descriptor();
template<typename T>
inline const std::string& ActionResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionResult_Result_descriptor(), enum_t_value);
}
inline bool ActionResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionResult_Result>(
    ActionResult_Result_descriptor(), name, value);
}
enum OrbitYawBehavior : int {
  ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TO_CIRCLE_CENTER = 0,
  ORBIT_YAW_BEHAVIOR_HOLD_INITIAL_HEADING = 1,
  ORBIT_YAW_BEHAVIOR_UNCONTROLLED = 2,
  ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TANGENT_TO_CIRCLE = 3,
  ORBIT_YAW_BEHAVIOR_RC_CONTROLLED = 4,
  OrbitYawBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrbitYawBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrbitYawBehavior_IsValid(int value);
constexpr OrbitYawBehavior OrbitYawBehavior_MIN = ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TO_CIRCLE_CENTER;
constexpr OrbitYawBehavior OrbitYawBehavior_MAX = ORBIT_YAW_BEHAVIOR_RC_CONTROLLED;
constexpr int OrbitYawBehavior_ARRAYSIZE = OrbitYawBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrbitYawBehavior_descriptor();
template<typename T>
inline const std::string& OrbitYawBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrbitYawBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrbitYawBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrbitYawBehavior_descriptor(), enum_t_value);
}
inline bool OrbitYawBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrbitYawBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrbitYawBehavior>(
    OrbitYawBehavior_descriptor(), name, value);
}
// ===================================================================

class ArmRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.ArmRequest) */ {
 public:
  inline ArmRequest() : ArmRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmRequest(const ArmRequest& from);
  ArmRequest(ArmRequest&& from) noexcept
    : ArmRequest() {
    *this = ::std::move(from);
  }

  inline ArmRequest& operator=(const ArmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmRequest& operator=(ArmRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmRequest* internal_default_instance() {
    return reinterpret_cast<const ArmRequest*>(
               &_ArmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArmRequest& a, ArmRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.ArmRequest";
  }
  protected:
  explicit ArmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.ArmRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class ArmResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.ArmResponse) */ {
 public:
  inline ArmResponse() : ArmResponse(nullptr) {}
  ~ArmResponse() override;
  explicit PROTOBUF_CONSTEXPR ArmResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmResponse(const ArmResponse& from);
  ArmResponse(ArmResponse&& from) noexcept
    : ArmResponse() {
    *this = ::std::move(from);
  }

  inline ArmResponse& operator=(const ArmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmResponse& operator=(ArmResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmResponse* internal_default_instance() {
    return reinterpret_cast<const ArmResponse*>(
               &_ArmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArmResponse& a, ArmResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ArmResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.ArmResponse";
  }
  protected:
  explicit ArmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.ArmResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class DisarmRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.DisarmRequest) */ {
 public:
  inline DisarmRequest() : DisarmRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DisarmRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisarmRequest(const DisarmRequest& from);
  DisarmRequest(DisarmRequest&& from) noexcept
    : DisarmRequest() {
    *this = ::std::move(from);
  }

  inline DisarmRequest& operator=(const DisarmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisarmRequest& operator=(DisarmRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisarmRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisarmRequest* internal_default_instance() {
    return reinterpret_cast<const DisarmRequest*>(
               &_DisarmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DisarmRequest& a, DisarmRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisarmRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisarmRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisarmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisarmRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DisarmRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DisarmRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.DisarmRequest";
  }
  protected:
  explicit DisarmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.DisarmRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class DisarmResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.DisarmResponse) */ {
 public:
  inline DisarmResponse() : DisarmResponse(nullptr) {}
  ~DisarmResponse() override;
  explicit PROTOBUF_CONSTEXPR DisarmResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisarmResponse(const DisarmResponse& from);
  DisarmResponse(DisarmResponse&& from) noexcept
    : DisarmResponse() {
    *this = ::std::move(from);
  }

  inline DisarmResponse& operator=(const DisarmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisarmResponse& operator=(DisarmResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisarmResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisarmResponse* internal_default_instance() {
    return reinterpret_cast<const DisarmResponse*>(
               &_DisarmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DisarmResponse& a, DisarmResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisarmResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisarmResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisarmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisarmResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisarmResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DisarmResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisarmResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.DisarmResponse";
  }
  protected:
  explicit DisarmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.DisarmResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class TakeoffRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.TakeoffRequest) */ {
 public:
  inline TakeoffRequest() : TakeoffRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TakeoffRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakeoffRequest(const TakeoffRequest& from);
  TakeoffRequest(TakeoffRequest&& from) noexcept
    : TakeoffRequest() {
    *this = ::std::move(from);
  }

  inline TakeoffRequest& operator=(const TakeoffRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeoffRequest& operator=(TakeoffRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakeoffRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakeoffRequest* internal_default_instance() {
    return reinterpret_cast<const TakeoffRequest*>(
               &_TakeoffRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TakeoffRequest& a, TakeoffRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TakeoffRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeoffRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakeoffRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakeoffRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TakeoffRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TakeoffRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.TakeoffRequest";
  }
  protected:
  explicit TakeoffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.TakeoffRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class TakeoffResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.TakeoffResponse) */ {
 public:
  inline TakeoffResponse() : TakeoffResponse(nullptr) {}
  ~TakeoffResponse() override;
  explicit PROTOBUF_CONSTEXPR TakeoffResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakeoffResponse(const TakeoffResponse& from);
  TakeoffResponse(TakeoffResponse&& from) noexcept
    : TakeoffResponse() {
    *this = ::std::move(from);
  }

  inline TakeoffResponse& operator=(const TakeoffResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeoffResponse& operator=(TakeoffResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakeoffResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakeoffResponse* internal_default_instance() {
    return reinterpret_cast<const TakeoffResponse*>(
               &_TakeoffResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TakeoffResponse& a, TakeoffResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TakeoffResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeoffResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakeoffResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakeoffResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TakeoffResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TakeoffResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeoffResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.TakeoffResponse";
  }
  protected:
  explicit TakeoffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.TakeoffResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class LandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.LandRequest) */ {
 public:
  inline LandRequest() : LandRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandRequest(const LandRequest& from);
  LandRequest(LandRequest&& from) noexcept
    : LandRequest() {
    *this = ::std::move(from);
  }

  inline LandRequest& operator=(const LandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandRequest& operator=(LandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandRequest* internal_default_instance() {
    return reinterpret_cast<const LandRequest*>(
               &_LandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LandRequest& a, LandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LandRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LandRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.LandRequest";
  }
  protected:
  explicit LandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.LandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class LandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.LandResponse) */ {
 public:
  inline LandResponse() : LandResponse(nullptr) {}
  ~LandResponse() override;
  explicit PROTOBUF_CONSTEXPR LandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandResponse(const LandResponse& from);
  LandResponse(LandResponse&& from) noexcept
    : LandResponse() {
    *this = ::std::move(from);
  }

  inline LandResponse& operator=(const LandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandResponse& operator=(LandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandResponse* internal_default_instance() {
    return reinterpret_cast<const LandResponse*>(
               &_LandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LandResponse& a, LandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LandResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.LandResponse";
  }
  protected:
  explicit LandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.LandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class RebootRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.RebootRequest) */ {
 public:
  inline RebootRequest() : RebootRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RebootRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebootRequest(const RebootRequest& from);
  RebootRequest(RebootRequest&& from) noexcept
    : RebootRequest() {
    *this = ::std::move(from);
  }

  inline RebootRequest& operator=(const RebootRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebootRequest& operator=(RebootRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RebootRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebootRequest* internal_default_instance() {
    return reinterpret_cast<const RebootRequest*>(
               &_RebootRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RebootRequest& a, RebootRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RebootRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebootRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RebootRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RebootRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RebootRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RebootRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.RebootRequest";
  }
  protected:
  explicit RebootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.RebootRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class RebootResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.RebootResponse) */ {
 public:
  inline RebootResponse() : RebootResponse(nullptr) {}
  ~RebootResponse() override;
  explicit PROTOBUF_CONSTEXPR RebootResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebootResponse(const RebootResponse& from);
  RebootResponse(RebootResponse&& from) noexcept
    : RebootResponse() {
    *this = ::std::move(from);
  }

  inline RebootResponse& operator=(const RebootResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebootResponse& operator=(RebootResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RebootResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebootResponse* internal_default_instance() {
    return reinterpret_cast<const RebootResponse*>(
               &_RebootResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RebootResponse& a, RebootResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RebootResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebootResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RebootResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RebootResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RebootResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RebootResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebootResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.RebootResponse";
  }
  protected:
  explicit RebootResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.RebootResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class ShutdownRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.ShutdownRequest) */ {
 public:
  inline ShutdownRequest() : ShutdownRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ShutdownRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutdownRequest(const ShutdownRequest& from);
  ShutdownRequest(ShutdownRequest&& from) noexcept
    : ShutdownRequest() {
    *this = ::std::move(from);
  }

  inline ShutdownRequest& operator=(const ShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownRequest& operator=(ShutdownRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutdownRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutdownRequest* internal_default_instance() {
    return reinterpret_cast<const ShutdownRequest*>(
               &_ShutdownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ShutdownRequest& a, ShutdownRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShutdownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShutdownRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShutdownRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShutdownRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.ShutdownRequest";
  }
  protected:
  explicit ShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.ShutdownRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class ShutdownResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.ShutdownResponse) */ {
 public:
  inline ShutdownResponse() : ShutdownResponse(nullptr) {}
  ~ShutdownResponse() override;
  explicit PROTOBUF_CONSTEXPR ShutdownResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutdownResponse(const ShutdownResponse& from);
  ShutdownResponse(ShutdownResponse&& from) noexcept
    : ShutdownResponse() {
    *this = ::std::move(from);
  }

  inline ShutdownResponse& operator=(const ShutdownResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownResponse& operator=(ShutdownResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutdownResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutdownResponse* internal_default_instance() {
    return reinterpret_cast<const ShutdownResponse*>(
               &_ShutdownResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ShutdownResponse& a, ShutdownResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShutdownResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShutdownResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShutdownResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShutdownResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.ShutdownResponse";
  }
  protected:
  explicit ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.ShutdownResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class TerminateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.TerminateRequest) */ {
 public:
  inline TerminateRequest() : TerminateRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TerminateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminateRequest(const TerminateRequest& from);
  TerminateRequest(TerminateRequest&& from) noexcept
    : TerminateRequest() {
    *this = ::std::move(from);
  }

  inline TerminateRequest& operator=(const TerminateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminateRequest& operator=(TerminateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminateRequest* internal_default_instance() {
    return reinterpret_cast<const TerminateRequest*>(
               &_TerminateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TerminateRequest& a, TerminateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TerminateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TerminateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.TerminateRequest";
  }
  protected:
  explicit TerminateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.TerminateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class TerminateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.TerminateResponse) */ {
 public:
  inline TerminateResponse() : TerminateResponse(nullptr) {}
  ~TerminateResponse() override;
  explicit PROTOBUF_CONSTEXPR TerminateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminateResponse(const TerminateResponse& from);
  TerminateResponse(TerminateResponse&& from) noexcept
    : TerminateResponse() {
    *this = ::std::move(from);
  }

  inline TerminateResponse& operator=(const TerminateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminateResponse& operator=(TerminateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminateResponse* internal_default_instance() {
    return reinterpret_cast<const TerminateResponse*>(
               &_TerminateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TerminateResponse& a, TerminateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TerminateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TerminateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.TerminateResponse";
  }
  protected:
  explicit TerminateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.TerminateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class KillRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.KillRequest) */ {
 public:
  inline KillRequest() : KillRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR KillRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KillRequest(const KillRequest& from);
  KillRequest(KillRequest&& from) noexcept
    : KillRequest() {
    *this = ::std::move(from);
  }

  inline KillRequest& operator=(const KillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillRequest& operator=(KillRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KillRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KillRequest* internal_default_instance() {
    return reinterpret_cast<const KillRequest*>(
               &_KillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(KillRequest& a, KillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KillRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KillRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KillRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KillRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.KillRequest";
  }
  protected:
  explicit KillRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.KillRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class KillResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.KillResponse) */ {
 public:
  inline KillResponse() : KillResponse(nullptr) {}
  ~KillResponse() override;
  explicit PROTOBUF_CONSTEXPR KillResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KillResponse(const KillResponse& from);
  KillResponse(KillResponse&& from) noexcept
    : KillResponse() {
    *this = ::std::move(from);
  }

  inline KillResponse& operator=(const KillResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillResponse& operator=(KillResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KillResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KillResponse* internal_default_instance() {
    return reinterpret_cast<const KillResponse*>(
               &_KillResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(KillResponse& a, KillResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KillResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KillResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KillResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KillResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KillResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.KillResponse";
  }
  protected:
  explicit KillResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.KillResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class ReturnToLaunchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.ReturnToLaunchRequest) */ {
 public:
  inline ReturnToLaunchRequest() : ReturnToLaunchRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReturnToLaunchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnToLaunchRequest(const ReturnToLaunchRequest& from);
  ReturnToLaunchRequest(ReturnToLaunchRequest&& from) noexcept
    : ReturnToLaunchRequest() {
    *this = ::std::move(from);
  }

  inline ReturnToLaunchRequest& operator=(const ReturnToLaunchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnToLaunchRequest& operator=(ReturnToLaunchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnToLaunchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnToLaunchRequest* internal_default_instance() {
    return reinterpret_cast<const ReturnToLaunchRequest*>(
               &_ReturnToLaunchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReturnToLaunchRequest& a, ReturnToLaunchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnToLaunchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnToLaunchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReturnToLaunchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReturnToLaunchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReturnToLaunchRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReturnToLaunchRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.ReturnToLaunchRequest";
  }
  protected:
  explicit ReturnToLaunchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.ReturnToLaunchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class ReturnToLaunchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.ReturnToLaunchResponse) */ {
 public:
  inline ReturnToLaunchResponse() : ReturnToLaunchResponse(nullptr) {}
  ~ReturnToLaunchResponse() override;
  explicit PROTOBUF_CONSTEXPR ReturnToLaunchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnToLaunchResponse(const ReturnToLaunchResponse& from);
  ReturnToLaunchResponse(ReturnToLaunchResponse&& from) noexcept
    : ReturnToLaunchResponse() {
    *this = ::std::move(from);
  }

  inline ReturnToLaunchResponse& operator=(const ReturnToLaunchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnToLaunchResponse& operator=(ReturnToLaunchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnToLaunchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnToLaunchResponse* internal_default_instance() {
    return reinterpret_cast<const ReturnToLaunchResponse*>(
               &_ReturnToLaunchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReturnToLaunchResponse& a, ReturnToLaunchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnToLaunchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnToLaunchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReturnToLaunchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReturnToLaunchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnToLaunchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReturnToLaunchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnToLaunchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.ReturnToLaunchResponse";
  }
  protected:
  explicit ReturnToLaunchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.ReturnToLaunchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class GotoLocationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.GotoLocationRequest) */ {
 public:
  inline GotoLocationRequest() : GotoLocationRequest(nullptr) {}
  ~GotoLocationRequest() override;
  explicit PROTOBUF_CONSTEXPR GotoLocationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GotoLocationRequest(const GotoLocationRequest& from);
  GotoLocationRequest(GotoLocationRequest&& from) noexcept
    : GotoLocationRequest() {
    *this = ::std::move(from);
  }

  inline GotoLocationRequest& operator=(const GotoLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GotoLocationRequest& operator=(GotoLocationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GotoLocationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GotoLocationRequest* internal_default_instance() {
    return reinterpret_cast<const GotoLocationRequest*>(
               &_GotoLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GotoLocationRequest& a, GotoLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GotoLocationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GotoLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GotoLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GotoLocationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GotoLocationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GotoLocationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GotoLocationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.GotoLocationRequest";
  }
  protected:
  explicit GotoLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kYawDegFieldNumber = 4,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 3;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.GotoLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class GotoLocationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.GotoLocationResponse) */ {
 public:
  inline GotoLocationResponse() : GotoLocationResponse(nullptr) {}
  ~GotoLocationResponse() override;
  explicit PROTOBUF_CONSTEXPR GotoLocationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GotoLocationResponse(const GotoLocationResponse& from);
  GotoLocationResponse(GotoLocationResponse&& from) noexcept
    : GotoLocationResponse() {
    *this = ::std::move(from);
  }

  inline GotoLocationResponse& operator=(const GotoLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GotoLocationResponse& operator=(GotoLocationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GotoLocationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GotoLocationResponse* internal_default_instance() {
    return reinterpret_cast<const GotoLocationResponse*>(
               &_GotoLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GotoLocationResponse& a, GotoLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GotoLocationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GotoLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GotoLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GotoLocationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GotoLocationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GotoLocationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GotoLocationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.GotoLocationResponse";
  }
  protected:
  explicit GotoLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.GotoLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class DoOrbitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.DoOrbitRequest) */ {
 public:
  inline DoOrbitRequest() : DoOrbitRequest(nullptr) {}
  ~DoOrbitRequest() override;
  explicit PROTOBUF_CONSTEXPR DoOrbitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoOrbitRequest(const DoOrbitRequest& from);
  DoOrbitRequest(DoOrbitRequest&& from) noexcept
    : DoOrbitRequest() {
    *this = ::std::move(from);
  }

  inline DoOrbitRequest& operator=(const DoOrbitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoOrbitRequest& operator=(DoOrbitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoOrbitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoOrbitRequest* internal_default_instance() {
    return reinterpret_cast<const DoOrbitRequest*>(
               &_DoOrbitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DoOrbitRequest& a, DoOrbitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DoOrbitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoOrbitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoOrbitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoOrbitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoOrbitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DoOrbitRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoOrbitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.DoOrbitRequest";
  }
  protected:
  explicit DoOrbitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusMFieldNumber = 1,
    kVelocityMsFieldNumber = 2,
    kLatitudeDegFieldNumber = 5,
    kLongitudeDegFieldNumber = 6,
    kAbsoluteAltitudeMFieldNumber = 7,
    kYawBehaviorFieldNumber = 3,
  };
  // float radius_m = 1;
  void clear_radius_m();
  float radius_m() const;
  void set_radius_m(float value);
  private:
  float _internal_radius_m() const;
  void _internal_set_radius_m(float value);
  public:

  // float velocity_ms = 2;
  void clear_velocity_ms();
  float velocity_ms() const;
  void set_velocity_ms(float value);
  private:
  float _internal_velocity_ms() const;
  void _internal_set_velocity_ms(float value);
  public:

  // double latitude_deg = 5 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 6 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // double absolute_altitude_m = 7 [(.mavsdk.options.default_value) = "NaN"];
  void clear_absolute_altitude_m();
  double absolute_altitude_m() const;
  void set_absolute_altitude_m(double value);
  private:
  double _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(double value);
  public:

  // .mavsdk.rpc.action.OrbitYawBehavior yaw_behavior = 3;
  void clear_yaw_behavior();
  ::mavsdk::rpc::action::OrbitYawBehavior yaw_behavior() const;
  void set_yaw_behavior(::mavsdk::rpc::action::OrbitYawBehavior value);
  private:
  ::mavsdk::rpc::action::OrbitYawBehavior _internal_yaw_behavior() const;
  void _internal_set_yaw_behavior(::mavsdk::rpc::action::OrbitYawBehavior value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.DoOrbitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float radius_m_;
  float velocity_ms_;
  double latitude_deg_;
  double longitude_deg_;
  double absolute_altitude_m_;
  int yaw_behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class DoOrbitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.DoOrbitResponse) */ {
 public:
  inline DoOrbitResponse() : DoOrbitResponse(nullptr) {}
  ~DoOrbitResponse() override;
  explicit PROTOBUF_CONSTEXPR DoOrbitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoOrbitResponse(const DoOrbitResponse& from);
  DoOrbitResponse(DoOrbitResponse&& from) noexcept
    : DoOrbitResponse() {
    *this = ::std::move(from);
  }

  inline DoOrbitResponse& operator=(const DoOrbitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoOrbitResponse& operator=(DoOrbitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoOrbitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoOrbitResponse* internal_default_instance() {
    return reinterpret_cast<const DoOrbitResponse*>(
               &_DoOrbitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DoOrbitResponse& a, DoOrbitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DoOrbitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoOrbitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoOrbitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoOrbitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoOrbitResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DoOrbitResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoOrbitResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.DoOrbitResponse";
  }
  protected:
  explicit DoOrbitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.DoOrbitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class HoldRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.HoldRequest) */ {
 public:
  inline HoldRequest() : HoldRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HoldRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HoldRequest(const HoldRequest& from);
  HoldRequest(HoldRequest&& from) noexcept
    : HoldRequest() {
    *this = ::std::move(from);
  }

  inline HoldRequest& operator=(const HoldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldRequest& operator=(HoldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HoldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HoldRequest* internal_default_instance() {
    return reinterpret_cast<const HoldRequest*>(
               &_HoldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(HoldRequest& a, HoldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HoldRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HoldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HoldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HoldRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HoldRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HoldRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.HoldRequest";
  }
  protected:
  explicit HoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.HoldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class HoldResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.HoldResponse) */ {
 public:
  inline HoldResponse() : HoldResponse(nullptr) {}
  ~HoldResponse() override;
  explicit PROTOBUF_CONSTEXPR HoldResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HoldResponse(const HoldResponse& from);
  HoldResponse(HoldResponse&& from) noexcept
    : HoldResponse() {
    *this = ::std::move(from);
  }

  inline HoldResponse& operator=(const HoldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldResponse& operator=(HoldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HoldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HoldResponse* internal_default_instance() {
    return reinterpret_cast<const HoldResponse*>(
               &_HoldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(HoldResponse& a, HoldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HoldResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HoldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HoldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HoldResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HoldResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HoldResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HoldResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.HoldResponse";
  }
  protected:
  explicit HoldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.HoldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetActuatorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetActuatorRequest) */ {
 public:
  inline SetActuatorRequest() : SetActuatorRequest(nullptr) {}
  ~SetActuatorRequest() override;
  explicit PROTOBUF_CONSTEXPR SetActuatorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetActuatorRequest(const SetActuatorRequest& from);
  SetActuatorRequest(SetActuatorRequest&& from) noexcept
    : SetActuatorRequest() {
    *this = ::std::move(from);
  }

  inline SetActuatorRequest& operator=(const SetActuatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActuatorRequest& operator=(SetActuatorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActuatorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActuatorRequest* internal_default_instance() {
    return reinterpret_cast<const SetActuatorRequest*>(
               &_SetActuatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetActuatorRequest& a, SetActuatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActuatorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActuatorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetActuatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetActuatorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetActuatorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetActuatorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActuatorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetActuatorRequest";
  }
  protected:
  explicit SetActuatorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetActuatorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t index_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetActuatorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetActuatorResponse) */ {
 public:
  inline SetActuatorResponse() : SetActuatorResponse(nullptr) {}
  ~SetActuatorResponse() override;
  explicit PROTOBUF_CONSTEXPR SetActuatorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetActuatorResponse(const SetActuatorResponse& from);
  SetActuatorResponse(SetActuatorResponse&& from) noexcept
    : SetActuatorResponse() {
    *this = ::std::move(from);
  }

  inline SetActuatorResponse& operator=(const SetActuatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActuatorResponse& operator=(SetActuatorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActuatorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActuatorResponse* internal_default_instance() {
    return reinterpret_cast<const SetActuatorResponse*>(
               &_SetActuatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetActuatorResponse& a, SetActuatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActuatorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActuatorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetActuatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetActuatorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetActuatorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetActuatorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActuatorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetActuatorResponse";
  }
  protected:
  explicit SetActuatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetActuatorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class TransitionToFixedwingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.TransitionToFixedwingRequest) */ {
 public:
  inline TransitionToFixedwingRequest() : TransitionToFixedwingRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TransitionToFixedwingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitionToFixedwingRequest(const TransitionToFixedwingRequest& from);
  TransitionToFixedwingRequest(TransitionToFixedwingRequest&& from) noexcept
    : TransitionToFixedwingRequest() {
    *this = ::std::move(from);
  }

  inline TransitionToFixedwingRequest& operator=(const TransitionToFixedwingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionToFixedwingRequest& operator=(TransitionToFixedwingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitionToFixedwingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitionToFixedwingRequest* internal_default_instance() {
    return reinterpret_cast<const TransitionToFixedwingRequest*>(
               &_TransitionToFixedwingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(TransitionToFixedwingRequest& a, TransitionToFixedwingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionToFixedwingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitionToFixedwingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitionToFixedwingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitionToFixedwingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TransitionToFixedwingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TransitionToFixedwingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.TransitionToFixedwingRequest";
  }
  protected:
  explicit TransitionToFixedwingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.TransitionToFixedwingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class TransitionToFixedwingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.TransitionToFixedwingResponse) */ {
 public:
  inline TransitionToFixedwingResponse() : TransitionToFixedwingResponse(nullptr) {}
  ~TransitionToFixedwingResponse() override;
  explicit PROTOBUF_CONSTEXPR TransitionToFixedwingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitionToFixedwingResponse(const TransitionToFixedwingResponse& from);
  TransitionToFixedwingResponse(TransitionToFixedwingResponse&& from) noexcept
    : TransitionToFixedwingResponse() {
    *this = ::std::move(from);
  }

  inline TransitionToFixedwingResponse& operator=(const TransitionToFixedwingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionToFixedwingResponse& operator=(TransitionToFixedwingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitionToFixedwingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitionToFixedwingResponse* internal_default_instance() {
    return reinterpret_cast<const TransitionToFixedwingResponse*>(
               &_TransitionToFixedwingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(TransitionToFixedwingResponse& a, TransitionToFixedwingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionToFixedwingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitionToFixedwingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitionToFixedwingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitionToFixedwingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransitionToFixedwingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransitionToFixedwingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitionToFixedwingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.TransitionToFixedwingResponse";
  }
  protected:
  explicit TransitionToFixedwingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.TransitionToFixedwingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class TransitionToMulticopterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.TransitionToMulticopterRequest) */ {
 public:
  inline TransitionToMulticopterRequest() : TransitionToMulticopterRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TransitionToMulticopterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitionToMulticopterRequest(const TransitionToMulticopterRequest& from);
  TransitionToMulticopterRequest(TransitionToMulticopterRequest&& from) noexcept
    : TransitionToMulticopterRequest() {
    *this = ::std::move(from);
  }

  inline TransitionToMulticopterRequest& operator=(const TransitionToMulticopterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionToMulticopterRequest& operator=(TransitionToMulticopterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitionToMulticopterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitionToMulticopterRequest* internal_default_instance() {
    return reinterpret_cast<const TransitionToMulticopterRequest*>(
               &_TransitionToMulticopterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TransitionToMulticopterRequest& a, TransitionToMulticopterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionToMulticopterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitionToMulticopterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitionToMulticopterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitionToMulticopterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TransitionToMulticopterRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TransitionToMulticopterRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.TransitionToMulticopterRequest";
  }
  protected:
  explicit TransitionToMulticopterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.TransitionToMulticopterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class TransitionToMulticopterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.TransitionToMulticopterResponse) */ {
 public:
  inline TransitionToMulticopterResponse() : TransitionToMulticopterResponse(nullptr) {}
  ~TransitionToMulticopterResponse() override;
  explicit PROTOBUF_CONSTEXPR TransitionToMulticopterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitionToMulticopterResponse(const TransitionToMulticopterResponse& from);
  TransitionToMulticopterResponse(TransitionToMulticopterResponse&& from) noexcept
    : TransitionToMulticopterResponse() {
    *this = ::std::move(from);
  }

  inline TransitionToMulticopterResponse& operator=(const TransitionToMulticopterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionToMulticopterResponse& operator=(TransitionToMulticopterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitionToMulticopterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitionToMulticopterResponse* internal_default_instance() {
    return reinterpret_cast<const TransitionToMulticopterResponse*>(
               &_TransitionToMulticopterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(TransitionToMulticopterResponse& a, TransitionToMulticopterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionToMulticopterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitionToMulticopterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitionToMulticopterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitionToMulticopterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransitionToMulticopterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransitionToMulticopterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitionToMulticopterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.TransitionToMulticopterResponse";
  }
  protected:
  explicit TransitionToMulticopterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.TransitionToMulticopterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class GetTakeoffAltitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.GetTakeoffAltitudeRequest) */ {
 public:
  inline GetTakeoffAltitudeRequest() : GetTakeoffAltitudeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetTakeoffAltitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTakeoffAltitudeRequest(const GetTakeoffAltitudeRequest& from);
  GetTakeoffAltitudeRequest(GetTakeoffAltitudeRequest&& from) noexcept
    : GetTakeoffAltitudeRequest() {
    *this = ::std::move(from);
  }

  inline GetTakeoffAltitudeRequest& operator=(const GetTakeoffAltitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTakeoffAltitudeRequest& operator=(GetTakeoffAltitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTakeoffAltitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTakeoffAltitudeRequest* internal_default_instance() {
    return reinterpret_cast<const GetTakeoffAltitudeRequest*>(
               &_GetTakeoffAltitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetTakeoffAltitudeRequest& a, GetTakeoffAltitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTakeoffAltitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTakeoffAltitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTakeoffAltitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTakeoffAltitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetTakeoffAltitudeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetTakeoffAltitudeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.GetTakeoffAltitudeRequest";
  }
  protected:
  explicit GetTakeoffAltitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.GetTakeoffAltitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class GetTakeoffAltitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.GetTakeoffAltitudeResponse) */ {
 public:
  inline GetTakeoffAltitudeResponse() : GetTakeoffAltitudeResponse(nullptr) {}
  ~GetTakeoffAltitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTakeoffAltitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTakeoffAltitudeResponse(const GetTakeoffAltitudeResponse& from);
  GetTakeoffAltitudeResponse(GetTakeoffAltitudeResponse&& from) noexcept
    : GetTakeoffAltitudeResponse() {
    *this = ::std::move(from);
  }

  inline GetTakeoffAltitudeResponse& operator=(const GetTakeoffAltitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTakeoffAltitudeResponse& operator=(GetTakeoffAltitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTakeoffAltitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTakeoffAltitudeResponse* internal_default_instance() {
    return reinterpret_cast<const GetTakeoffAltitudeResponse*>(
               &_GetTakeoffAltitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetTakeoffAltitudeResponse& a, GetTakeoffAltitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTakeoffAltitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTakeoffAltitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTakeoffAltitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTakeoffAltitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTakeoffAltitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTakeoffAltitudeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTakeoffAltitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.GetTakeoffAltitudeResponse";
  }
  protected:
  explicit GetTakeoffAltitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
    kAltitudeFieldNumber = 2,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // float altitude = 2;
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);
  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.GetTakeoffAltitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  float altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetTakeoffAltitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetTakeoffAltitudeRequest) */ {
 public:
  inline SetTakeoffAltitudeRequest() : SetTakeoffAltitudeRequest(nullptr) {}
  ~SetTakeoffAltitudeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetTakeoffAltitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTakeoffAltitudeRequest(const SetTakeoffAltitudeRequest& from);
  SetTakeoffAltitudeRequest(SetTakeoffAltitudeRequest&& from) noexcept
    : SetTakeoffAltitudeRequest() {
    *this = ::std::move(from);
  }

  inline SetTakeoffAltitudeRequest& operator=(const SetTakeoffAltitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTakeoffAltitudeRequest& operator=(SetTakeoffAltitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTakeoffAltitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTakeoffAltitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SetTakeoffAltitudeRequest*>(
               &_SetTakeoffAltitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SetTakeoffAltitudeRequest& a, SetTakeoffAltitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTakeoffAltitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTakeoffAltitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTakeoffAltitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTakeoffAltitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTakeoffAltitudeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTakeoffAltitudeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTakeoffAltitudeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetTakeoffAltitudeRequest";
  }
  protected:
  explicit SetTakeoffAltitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAltitudeFieldNumber = 1,
  };
  // float altitude = 1;
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);
  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetTakeoffAltitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetTakeoffAltitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetTakeoffAltitudeResponse) */ {
 public:
  inline SetTakeoffAltitudeResponse() : SetTakeoffAltitudeResponse(nullptr) {}
  ~SetTakeoffAltitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetTakeoffAltitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTakeoffAltitudeResponse(const SetTakeoffAltitudeResponse& from);
  SetTakeoffAltitudeResponse(SetTakeoffAltitudeResponse&& from) noexcept
    : SetTakeoffAltitudeResponse() {
    *this = ::std::move(from);
  }

  inline SetTakeoffAltitudeResponse& operator=(const SetTakeoffAltitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTakeoffAltitudeResponse& operator=(SetTakeoffAltitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTakeoffAltitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTakeoffAltitudeResponse* internal_default_instance() {
    return reinterpret_cast<const SetTakeoffAltitudeResponse*>(
               &_SetTakeoffAltitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SetTakeoffAltitudeResponse& a, SetTakeoffAltitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTakeoffAltitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTakeoffAltitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTakeoffAltitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTakeoffAltitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTakeoffAltitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTakeoffAltitudeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTakeoffAltitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetTakeoffAltitudeResponse";
  }
  protected:
  explicit SetTakeoffAltitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetTakeoffAltitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class GetMaximumSpeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.GetMaximumSpeedRequest) */ {
 public:
  inline GetMaximumSpeedRequest() : GetMaximumSpeedRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetMaximumSpeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMaximumSpeedRequest(const GetMaximumSpeedRequest& from);
  GetMaximumSpeedRequest(GetMaximumSpeedRequest&& from) noexcept
    : GetMaximumSpeedRequest() {
    *this = ::std::move(from);
  }

  inline GetMaximumSpeedRequest& operator=(const GetMaximumSpeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMaximumSpeedRequest& operator=(GetMaximumSpeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMaximumSpeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMaximumSpeedRequest* internal_default_instance() {
    return reinterpret_cast<const GetMaximumSpeedRequest*>(
               &_GetMaximumSpeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetMaximumSpeedRequest& a, GetMaximumSpeedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMaximumSpeedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMaximumSpeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMaximumSpeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMaximumSpeedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetMaximumSpeedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetMaximumSpeedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.GetMaximumSpeedRequest";
  }
  protected:
  explicit GetMaximumSpeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.GetMaximumSpeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class GetMaximumSpeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.GetMaximumSpeedResponse) */ {
 public:
  inline GetMaximumSpeedResponse() : GetMaximumSpeedResponse(nullptr) {}
  ~GetMaximumSpeedResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMaximumSpeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMaximumSpeedResponse(const GetMaximumSpeedResponse& from);
  GetMaximumSpeedResponse(GetMaximumSpeedResponse&& from) noexcept
    : GetMaximumSpeedResponse() {
    *this = ::std::move(from);
  }

  inline GetMaximumSpeedResponse& operator=(const GetMaximumSpeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMaximumSpeedResponse& operator=(GetMaximumSpeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMaximumSpeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMaximumSpeedResponse* internal_default_instance() {
    return reinterpret_cast<const GetMaximumSpeedResponse*>(
               &_GetMaximumSpeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetMaximumSpeedResponse& a, GetMaximumSpeedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMaximumSpeedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMaximumSpeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMaximumSpeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMaximumSpeedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMaximumSpeedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMaximumSpeedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMaximumSpeedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.GetMaximumSpeedResponse";
  }
  protected:
  explicit GetMaximumSpeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
    kSpeedFieldNumber = 2,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // float speed = 2;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.GetMaximumSpeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetMaximumSpeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetMaximumSpeedRequest) */ {
 public:
  inline SetMaximumSpeedRequest() : SetMaximumSpeedRequest(nullptr) {}
  ~SetMaximumSpeedRequest() override;
  explicit PROTOBUF_CONSTEXPR SetMaximumSpeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMaximumSpeedRequest(const SetMaximumSpeedRequest& from);
  SetMaximumSpeedRequest(SetMaximumSpeedRequest&& from) noexcept
    : SetMaximumSpeedRequest() {
    *this = ::std::move(from);
  }

  inline SetMaximumSpeedRequest& operator=(const SetMaximumSpeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMaximumSpeedRequest& operator=(SetMaximumSpeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMaximumSpeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMaximumSpeedRequest* internal_default_instance() {
    return reinterpret_cast<const SetMaximumSpeedRequest*>(
               &_SetMaximumSpeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SetMaximumSpeedRequest& a, SetMaximumSpeedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMaximumSpeedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMaximumSpeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMaximumSpeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMaximumSpeedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetMaximumSpeedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetMaximumSpeedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMaximumSpeedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetMaximumSpeedRequest";
  }
  protected:
  explicit SetMaximumSpeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
  };
  // float speed = 1;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetMaximumSpeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetMaximumSpeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetMaximumSpeedResponse) */ {
 public:
  inline SetMaximumSpeedResponse() : SetMaximumSpeedResponse(nullptr) {}
  ~SetMaximumSpeedResponse() override;
  explicit PROTOBUF_CONSTEXPR SetMaximumSpeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMaximumSpeedResponse(const SetMaximumSpeedResponse& from);
  SetMaximumSpeedResponse(SetMaximumSpeedResponse&& from) noexcept
    : SetMaximumSpeedResponse() {
    *this = ::std::move(from);
  }

  inline SetMaximumSpeedResponse& operator=(const SetMaximumSpeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMaximumSpeedResponse& operator=(SetMaximumSpeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMaximumSpeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMaximumSpeedResponse* internal_default_instance() {
    return reinterpret_cast<const SetMaximumSpeedResponse*>(
               &_SetMaximumSpeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SetMaximumSpeedResponse& a, SetMaximumSpeedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMaximumSpeedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMaximumSpeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMaximumSpeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMaximumSpeedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetMaximumSpeedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetMaximumSpeedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMaximumSpeedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetMaximumSpeedResponse";
  }
  protected:
  explicit SetMaximumSpeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetMaximumSpeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class GetReturnToLaunchAltitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.GetReturnToLaunchAltitudeRequest) */ {
 public:
  inline GetReturnToLaunchAltitudeRequest() : GetReturnToLaunchAltitudeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetReturnToLaunchAltitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReturnToLaunchAltitudeRequest(const GetReturnToLaunchAltitudeRequest& from);
  GetReturnToLaunchAltitudeRequest(GetReturnToLaunchAltitudeRequest&& from) noexcept
    : GetReturnToLaunchAltitudeRequest() {
    *this = ::std::move(from);
  }

  inline GetReturnToLaunchAltitudeRequest& operator=(const GetReturnToLaunchAltitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReturnToLaunchAltitudeRequest& operator=(GetReturnToLaunchAltitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReturnToLaunchAltitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReturnToLaunchAltitudeRequest* internal_default_instance() {
    return reinterpret_cast<const GetReturnToLaunchAltitudeRequest*>(
               &_GetReturnToLaunchAltitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetReturnToLaunchAltitudeRequest& a, GetReturnToLaunchAltitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReturnToLaunchAltitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReturnToLaunchAltitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReturnToLaunchAltitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReturnToLaunchAltitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetReturnToLaunchAltitudeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetReturnToLaunchAltitudeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.GetReturnToLaunchAltitudeRequest";
  }
  protected:
  explicit GetReturnToLaunchAltitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.GetReturnToLaunchAltitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class GetReturnToLaunchAltitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse) */ {
 public:
  inline GetReturnToLaunchAltitudeResponse() : GetReturnToLaunchAltitudeResponse(nullptr) {}
  ~GetReturnToLaunchAltitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR GetReturnToLaunchAltitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReturnToLaunchAltitudeResponse(const GetReturnToLaunchAltitudeResponse& from);
  GetReturnToLaunchAltitudeResponse(GetReturnToLaunchAltitudeResponse&& from) noexcept
    : GetReturnToLaunchAltitudeResponse() {
    *this = ::std::move(from);
  }

  inline GetReturnToLaunchAltitudeResponse& operator=(const GetReturnToLaunchAltitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReturnToLaunchAltitudeResponse& operator=(GetReturnToLaunchAltitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReturnToLaunchAltitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReturnToLaunchAltitudeResponse* internal_default_instance() {
    return reinterpret_cast<const GetReturnToLaunchAltitudeResponse*>(
               &_GetReturnToLaunchAltitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetReturnToLaunchAltitudeResponse& a, GetReturnToLaunchAltitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReturnToLaunchAltitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReturnToLaunchAltitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReturnToLaunchAltitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReturnToLaunchAltitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReturnToLaunchAltitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetReturnToLaunchAltitudeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReturnToLaunchAltitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse";
  }
  protected:
  explicit GetReturnToLaunchAltitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
    kRelativeAltitudeMFieldNumber = 2,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // float relative_altitude_m = 2;
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  float relative_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetReturnToLaunchAltitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest) */ {
 public:
  inline SetReturnToLaunchAltitudeRequest() : SetReturnToLaunchAltitudeRequest(nullptr) {}
  ~SetReturnToLaunchAltitudeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetReturnToLaunchAltitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetReturnToLaunchAltitudeRequest(const SetReturnToLaunchAltitudeRequest& from);
  SetReturnToLaunchAltitudeRequest(SetReturnToLaunchAltitudeRequest&& from) noexcept
    : SetReturnToLaunchAltitudeRequest() {
    *this = ::std::move(from);
  }

  inline SetReturnToLaunchAltitudeRequest& operator=(const SetReturnToLaunchAltitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReturnToLaunchAltitudeRequest& operator=(SetReturnToLaunchAltitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetReturnToLaunchAltitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetReturnToLaunchAltitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SetReturnToLaunchAltitudeRequest*>(
               &_SetReturnToLaunchAltitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SetReturnToLaunchAltitudeRequest& a, SetReturnToLaunchAltitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReturnToLaunchAltitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetReturnToLaunchAltitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetReturnToLaunchAltitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetReturnToLaunchAltitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetReturnToLaunchAltitudeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetReturnToLaunchAltitudeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReturnToLaunchAltitudeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest";
  }
  protected:
  explicit SetReturnToLaunchAltitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeAltitudeMFieldNumber = 1,
  };
  // float relative_altitude_m = 1;
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float relative_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetReturnToLaunchAltitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse) */ {
 public:
  inline SetReturnToLaunchAltitudeResponse() : SetReturnToLaunchAltitudeResponse(nullptr) {}
  ~SetReturnToLaunchAltitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetReturnToLaunchAltitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetReturnToLaunchAltitudeResponse(const SetReturnToLaunchAltitudeResponse& from);
  SetReturnToLaunchAltitudeResponse(SetReturnToLaunchAltitudeResponse&& from) noexcept
    : SetReturnToLaunchAltitudeResponse() {
    *this = ::std::move(from);
  }

  inline SetReturnToLaunchAltitudeResponse& operator=(const SetReturnToLaunchAltitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReturnToLaunchAltitudeResponse& operator=(SetReturnToLaunchAltitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetReturnToLaunchAltitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetReturnToLaunchAltitudeResponse* internal_default_instance() {
    return reinterpret_cast<const SetReturnToLaunchAltitudeResponse*>(
               &_SetReturnToLaunchAltitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SetReturnToLaunchAltitudeResponse& a, SetReturnToLaunchAltitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReturnToLaunchAltitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetReturnToLaunchAltitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetReturnToLaunchAltitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetReturnToLaunchAltitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetReturnToLaunchAltitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetReturnToLaunchAltitudeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReturnToLaunchAltitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse";
  }
  protected:
  explicit SetReturnToLaunchAltitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentSpeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetCurrentSpeedRequest) */ {
 public:
  inline SetCurrentSpeedRequest() : SetCurrentSpeedRequest(nullptr) {}
  ~SetCurrentSpeedRequest() override;
  explicit PROTOBUF_CONSTEXPR SetCurrentSpeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCurrentSpeedRequest(const SetCurrentSpeedRequest& from);
  SetCurrentSpeedRequest(SetCurrentSpeedRequest&& from) noexcept
    : SetCurrentSpeedRequest() {
    *this = ::std::move(from);
  }

  inline SetCurrentSpeedRequest& operator=(const SetCurrentSpeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentSpeedRequest& operator=(SetCurrentSpeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCurrentSpeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCurrentSpeedRequest* internal_default_instance() {
    return reinterpret_cast<const SetCurrentSpeedRequest*>(
               &_SetCurrentSpeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SetCurrentSpeedRequest& a, SetCurrentSpeedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentSpeedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentSpeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCurrentSpeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCurrentSpeedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCurrentSpeedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCurrentSpeedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentSpeedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetCurrentSpeedRequest";
  }
  protected:
  explicit SetCurrentSpeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedMSFieldNumber = 1,
  };
  // float speed_m_s = 1;
  void clear_speed_m_s();
  float speed_m_s() const;
  void set_speed_m_s(float value);
  private:
  float _internal_speed_m_s() const;
  void _internal_set_speed_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetCurrentSpeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float speed_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentSpeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.SetCurrentSpeedResponse) */ {
 public:
  inline SetCurrentSpeedResponse() : SetCurrentSpeedResponse(nullptr) {}
  ~SetCurrentSpeedResponse() override;
  explicit PROTOBUF_CONSTEXPR SetCurrentSpeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCurrentSpeedResponse(const SetCurrentSpeedResponse& from);
  SetCurrentSpeedResponse(SetCurrentSpeedResponse&& from) noexcept
    : SetCurrentSpeedResponse() {
    *this = ::std::move(from);
  }

  inline SetCurrentSpeedResponse& operator=(const SetCurrentSpeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentSpeedResponse& operator=(SetCurrentSpeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCurrentSpeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCurrentSpeedResponse* internal_default_instance() {
    return reinterpret_cast<const SetCurrentSpeedResponse*>(
               &_SetCurrentSpeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SetCurrentSpeedResponse& a, SetCurrentSpeedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentSpeedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentSpeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCurrentSpeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCurrentSpeedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCurrentSpeedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCurrentSpeedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentSpeedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.SetCurrentSpeedResponse";
  }
  protected:
  explicit SetCurrentSpeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.action.ActionResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::action::ActionResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::action::ActionResult* release_action_result();
  ::mavsdk::rpc::action::ActionResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result);
  private:
  const ::mavsdk::rpc::action::ActionResult& _internal_action_result() const;
  ::mavsdk::rpc::action::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::action::ActionResult* action_result);
  ::mavsdk::rpc::action::ActionResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.SetCurrentSpeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::action::ActionResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// -------------------------------------------------------------------

class ActionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action.ActionResult) */ {
 public:
  inline ActionResult() : ActionResult(nullptr) {}
  ~ActionResult() override;
  explicit PROTOBUF_CONSTEXPR ActionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionResult(const ActionResult& from);
  ActionResult(ActionResult&& from) noexcept
    : ActionResult() {
    *this = ::std::move(from);
  }

  inline ActionResult& operator=(const ActionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionResult& operator=(ActionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionResult* internal_default_instance() {
    return reinterpret_cast<const ActionResult*>(
               &_ActionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ActionResult& a, ActionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActionResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.action.ActionResult";
  }
  protected:
  explicit ActionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActionResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    ActionResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    ActionResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    ActionResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    ActionResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    ActionResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    ActionResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN =
    ActionResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
  static constexpr Result RESULT_COMMAND_DENIED_NOT_LANDED =
    ActionResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED;
  static constexpr Result RESULT_TIMEOUT =
    ActionResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN =
    ActionResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
  static constexpr Result RESULT_NO_VTOL_TRANSITION_SUPPORT =
    ActionResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT;
  static constexpr Result RESULT_PARAMETER_ERROR =
    ActionResult_Result_RESULT_PARAMETER_ERROR;
  static constexpr Result RESULT_UNSUPPORTED =
    ActionResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_FAILED =
    ActionResult_Result_RESULT_FAILED;
  static inline bool Result_IsValid(int value) {
    return ActionResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ActionResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ActionResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ActionResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ActionResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ActionResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return ActionResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.action.ActionResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::action::ActionResult_Result result() const;
  void set_result(::mavsdk::rpc::action::ActionResult_Result value);
  private:
  ::mavsdk::rpc::action::ActionResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::action::ActionResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.action.ActionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2faction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArmRequest

// -------------------------------------------------------------------

// ArmResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool ArmResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool ArmResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void ArmResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& ArmResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& ArmResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.ArmResponse.action_result)
  return _internal_action_result();
}
inline void ArmResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.ArmResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* ArmResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* ArmResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.ArmResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* ArmResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* ArmResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.ArmResponse.action_result)
  return _msg;
}
inline void ArmResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.ArmResponse.action_result)
}

// -------------------------------------------------------------------

// DisarmRequest

// -------------------------------------------------------------------

// DisarmResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool DisarmResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool DisarmResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void DisarmResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& DisarmResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& DisarmResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.DisarmResponse.action_result)
  return _internal_action_result();
}
inline void DisarmResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.DisarmResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* DisarmResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* DisarmResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.DisarmResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* DisarmResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* DisarmResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.DisarmResponse.action_result)
  return _msg;
}
inline void DisarmResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.DisarmResponse.action_result)
}

// -------------------------------------------------------------------

// TakeoffRequest

// -------------------------------------------------------------------

// TakeoffResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool TakeoffResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool TakeoffResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void TakeoffResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& TakeoffResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& TakeoffResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.TakeoffResponse.action_result)
  return _internal_action_result();
}
inline void TakeoffResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.TakeoffResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* TakeoffResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* TakeoffResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.TakeoffResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* TakeoffResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* TakeoffResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.TakeoffResponse.action_result)
  return _msg;
}
inline void TakeoffResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.TakeoffResponse.action_result)
}

// -------------------------------------------------------------------

// LandRequest

// -------------------------------------------------------------------

// LandResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool LandResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool LandResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void LandResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& LandResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& LandResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.LandResponse.action_result)
  return _internal_action_result();
}
inline void LandResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.LandResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* LandResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* LandResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.LandResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* LandResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* LandResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.LandResponse.action_result)
  return _msg;
}
inline void LandResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.LandResponse.action_result)
}

// -------------------------------------------------------------------

// RebootRequest

// -------------------------------------------------------------------

// RebootResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool RebootResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool RebootResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void RebootResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& RebootResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& RebootResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.RebootResponse.action_result)
  return _internal_action_result();
}
inline void RebootResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.RebootResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* RebootResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* RebootResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.RebootResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* RebootResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* RebootResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.RebootResponse.action_result)
  return _msg;
}
inline void RebootResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.RebootResponse.action_result)
}

// -------------------------------------------------------------------

// ShutdownRequest

// -------------------------------------------------------------------

// ShutdownResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool ShutdownResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool ShutdownResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void ShutdownResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& ShutdownResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& ShutdownResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.ShutdownResponse.action_result)
  return _internal_action_result();
}
inline void ShutdownResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.ShutdownResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* ShutdownResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* ShutdownResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.ShutdownResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* ShutdownResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* ShutdownResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.ShutdownResponse.action_result)
  return _msg;
}
inline void ShutdownResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.ShutdownResponse.action_result)
}

// -------------------------------------------------------------------

// TerminateRequest

// -------------------------------------------------------------------

// TerminateResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool TerminateResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool TerminateResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void TerminateResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& TerminateResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& TerminateResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.TerminateResponse.action_result)
  return _internal_action_result();
}
inline void TerminateResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.TerminateResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* TerminateResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* TerminateResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.TerminateResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* TerminateResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* TerminateResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.TerminateResponse.action_result)
  return _msg;
}
inline void TerminateResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.TerminateResponse.action_result)
}

// -------------------------------------------------------------------

// KillRequest

// -------------------------------------------------------------------

// KillResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool KillResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool KillResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void KillResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& KillResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& KillResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.KillResponse.action_result)
  return _internal_action_result();
}
inline void KillResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.KillResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* KillResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* KillResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.KillResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* KillResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* KillResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.KillResponse.action_result)
  return _msg;
}
inline void KillResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.KillResponse.action_result)
}

// -------------------------------------------------------------------

// ReturnToLaunchRequest

// -------------------------------------------------------------------

// ReturnToLaunchResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool ReturnToLaunchResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool ReturnToLaunchResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void ReturnToLaunchResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& ReturnToLaunchResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& ReturnToLaunchResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.ReturnToLaunchResponse.action_result)
  return _internal_action_result();
}
inline void ReturnToLaunchResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.ReturnToLaunchResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* ReturnToLaunchResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* ReturnToLaunchResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.ReturnToLaunchResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* ReturnToLaunchResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* ReturnToLaunchResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.ReturnToLaunchResponse.action_result)
  return _msg;
}
inline void ReturnToLaunchResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.ReturnToLaunchResponse.action_result)
}

// -------------------------------------------------------------------

// GotoLocationRequest

// double latitude_deg = 1;
inline void GotoLocationRequest::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double GotoLocationRequest::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double GotoLocationRequest::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GotoLocationRequest.latitude_deg)
  return _internal_latitude_deg();
}
inline void GotoLocationRequest::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void GotoLocationRequest::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.GotoLocationRequest.latitude_deg)
}

// double longitude_deg = 2;
inline void GotoLocationRequest::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double GotoLocationRequest::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double GotoLocationRequest::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GotoLocationRequest.longitude_deg)
  return _internal_longitude_deg();
}
inline void GotoLocationRequest::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void GotoLocationRequest::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.GotoLocationRequest.longitude_deg)
}

// float absolute_altitude_m = 3;
inline void GotoLocationRequest::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float GotoLocationRequest::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float GotoLocationRequest::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GotoLocationRequest.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void GotoLocationRequest::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void GotoLocationRequest::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.GotoLocationRequest.absolute_altitude_m)
}

// float yaw_deg = 4;
inline void GotoLocationRequest::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float GotoLocationRequest::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float GotoLocationRequest::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GotoLocationRequest.yaw_deg)
  return _internal_yaw_deg();
}
inline void GotoLocationRequest::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void GotoLocationRequest::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.GotoLocationRequest.yaw_deg)
}

// -------------------------------------------------------------------

// GotoLocationResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool GotoLocationResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool GotoLocationResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void GotoLocationResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& GotoLocationResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& GotoLocationResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GotoLocationResponse.action_result)
  return _internal_action_result();
}
inline void GotoLocationResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.GotoLocationResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* GotoLocationResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* GotoLocationResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.GotoLocationResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* GotoLocationResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* GotoLocationResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.GotoLocationResponse.action_result)
  return _msg;
}
inline void GotoLocationResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.GotoLocationResponse.action_result)
}

// -------------------------------------------------------------------

// DoOrbitRequest

// float radius_m = 1;
inline void DoOrbitRequest::clear_radius_m() {
  radius_m_ = 0;
}
inline float DoOrbitRequest::_internal_radius_m() const {
  return radius_m_;
}
inline float DoOrbitRequest::radius_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.DoOrbitRequest.radius_m)
  return _internal_radius_m();
}
inline void DoOrbitRequest::_internal_set_radius_m(float value) {
  
  radius_m_ = value;
}
inline void DoOrbitRequest::set_radius_m(float value) {
  _internal_set_radius_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.DoOrbitRequest.radius_m)
}

// float velocity_ms = 2;
inline void DoOrbitRequest::clear_velocity_ms() {
  velocity_ms_ = 0;
}
inline float DoOrbitRequest::_internal_velocity_ms() const {
  return velocity_ms_;
}
inline float DoOrbitRequest::velocity_ms() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.DoOrbitRequest.velocity_ms)
  return _internal_velocity_ms();
}
inline void DoOrbitRequest::_internal_set_velocity_ms(float value) {
  
  velocity_ms_ = value;
}
inline void DoOrbitRequest::set_velocity_ms(float value) {
  _internal_set_velocity_ms(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.DoOrbitRequest.velocity_ms)
}

// .mavsdk.rpc.action.OrbitYawBehavior yaw_behavior = 3;
inline void DoOrbitRequest::clear_yaw_behavior() {
  yaw_behavior_ = 0;
}
inline ::mavsdk::rpc::action::OrbitYawBehavior DoOrbitRequest::_internal_yaw_behavior() const {
  return static_cast< ::mavsdk::rpc::action::OrbitYawBehavior >(yaw_behavior_);
}
inline ::mavsdk::rpc::action::OrbitYawBehavior DoOrbitRequest::yaw_behavior() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.DoOrbitRequest.yaw_behavior)
  return _internal_yaw_behavior();
}
inline void DoOrbitRequest::_internal_set_yaw_behavior(::mavsdk::rpc::action::OrbitYawBehavior value) {
  
  yaw_behavior_ = value;
}
inline void DoOrbitRequest::set_yaw_behavior(::mavsdk::rpc::action::OrbitYawBehavior value) {
  _internal_set_yaw_behavior(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.DoOrbitRequest.yaw_behavior)
}

// double latitude_deg = 5 [(.mavsdk.options.default_value) = "NaN"];
inline void DoOrbitRequest::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double DoOrbitRequest::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double DoOrbitRequest::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.DoOrbitRequest.latitude_deg)
  return _internal_latitude_deg();
}
inline void DoOrbitRequest::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void DoOrbitRequest::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.DoOrbitRequest.latitude_deg)
}

// double longitude_deg = 6 [(.mavsdk.options.default_value) = "NaN"];
inline void DoOrbitRequest::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double DoOrbitRequest::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double DoOrbitRequest::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.DoOrbitRequest.longitude_deg)
  return _internal_longitude_deg();
}
inline void DoOrbitRequest::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void DoOrbitRequest::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.DoOrbitRequest.longitude_deg)
}

// double absolute_altitude_m = 7 [(.mavsdk.options.default_value) = "NaN"];
inline void DoOrbitRequest::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline double DoOrbitRequest::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline double DoOrbitRequest::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.DoOrbitRequest.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void DoOrbitRequest::_internal_set_absolute_altitude_m(double value) {
  
  absolute_altitude_m_ = value;
}
inline void DoOrbitRequest::set_absolute_altitude_m(double value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.DoOrbitRequest.absolute_altitude_m)
}

// -------------------------------------------------------------------

// DoOrbitResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool DoOrbitResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool DoOrbitResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void DoOrbitResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& DoOrbitResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& DoOrbitResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.DoOrbitResponse.action_result)
  return _internal_action_result();
}
inline void DoOrbitResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.DoOrbitResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* DoOrbitResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* DoOrbitResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.DoOrbitResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* DoOrbitResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* DoOrbitResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.DoOrbitResponse.action_result)
  return _msg;
}
inline void DoOrbitResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.DoOrbitResponse.action_result)
}

// -------------------------------------------------------------------

// HoldRequest

// -------------------------------------------------------------------

// HoldResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool HoldResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool HoldResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void HoldResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& HoldResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& HoldResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.HoldResponse.action_result)
  return _internal_action_result();
}
inline void HoldResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.HoldResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* HoldResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* HoldResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.HoldResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* HoldResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* HoldResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.HoldResponse.action_result)
  return _msg;
}
inline void HoldResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.HoldResponse.action_result)
}

// -------------------------------------------------------------------

// SetActuatorRequest

// int32 index = 1;
inline void SetActuatorRequest::clear_index() {
  index_ = 0;
}
inline int32_t SetActuatorRequest::_internal_index() const {
  return index_;
}
inline int32_t SetActuatorRequest::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetActuatorRequest.index)
  return _internal_index();
}
inline void SetActuatorRequest::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void SetActuatorRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.SetActuatorRequest.index)
}

// float value = 2;
inline void SetActuatorRequest::clear_value() {
  value_ = 0;
}
inline float SetActuatorRequest::_internal_value() const {
  return value_;
}
inline float SetActuatorRequest::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetActuatorRequest.value)
  return _internal_value();
}
inline void SetActuatorRequest::_internal_set_value(float value) {
  
  value_ = value;
}
inline void SetActuatorRequest::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.SetActuatorRequest.value)
}

// -------------------------------------------------------------------

// SetActuatorResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool SetActuatorResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool SetActuatorResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void SetActuatorResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& SetActuatorResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& SetActuatorResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetActuatorResponse.action_result)
  return _internal_action_result();
}
inline void SetActuatorResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.SetActuatorResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* SetActuatorResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetActuatorResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.SetActuatorResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetActuatorResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* SetActuatorResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.SetActuatorResponse.action_result)
  return _msg;
}
inline void SetActuatorResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.SetActuatorResponse.action_result)
}

// -------------------------------------------------------------------

// TransitionToFixedwingRequest

// -------------------------------------------------------------------

// TransitionToFixedwingResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool TransitionToFixedwingResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool TransitionToFixedwingResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void TransitionToFixedwingResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& TransitionToFixedwingResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& TransitionToFixedwingResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.TransitionToFixedwingResponse.action_result)
  return _internal_action_result();
}
inline void TransitionToFixedwingResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.TransitionToFixedwingResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* TransitionToFixedwingResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* TransitionToFixedwingResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.TransitionToFixedwingResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* TransitionToFixedwingResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* TransitionToFixedwingResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.TransitionToFixedwingResponse.action_result)
  return _msg;
}
inline void TransitionToFixedwingResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.TransitionToFixedwingResponse.action_result)
}

// -------------------------------------------------------------------

// TransitionToMulticopterRequest

// -------------------------------------------------------------------

// TransitionToMulticopterResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool TransitionToMulticopterResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool TransitionToMulticopterResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void TransitionToMulticopterResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& TransitionToMulticopterResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& TransitionToMulticopterResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.TransitionToMulticopterResponse.action_result)
  return _internal_action_result();
}
inline void TransitionToMulticopterResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.TransitionToMulticopterResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* TransitionToMulticopterResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* TransitionToMulticopterResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.TransitionToMulticopterResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* TransitionToMulticopterResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* TransitionToMulticopterResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.TransitionToMulticopterResponse.action_result)
  return _msg;
}
inline void TransitionToMulticopterResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.TransitionToMulticopterResponse.action_result)
}

// -------------------------------------------------------------------

// GetTakeoffAltitudeRequest

// -------------------------------------------------------------------

// GetTakeoffAltitudeResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool GetTakeoffAltitudeResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool GetTakeoffAltitudeResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void GetTakeoffAltitudeResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& GetTakeoffAltitudeResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& GetTakeoffAltitudeResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GetTakeoffAltitudeResponse.action_result)
  return _internal_action_result();
}
inline void GetTakeoffAltitudeResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.GetTakeoffAltitudeResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* GetTakeoffAltitudeResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* GetTakeoffAltitudeResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.GetTakeoffAltitudeResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* GetTakeoffAltitudeResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* GetTakeoffAltitudeResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.GetTakeoffAltitudeResponse.action_result)
  return _msg;
}
inline void GetTakeoffAltitudeResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.GetTakeoffAltitudeResponse.action_result)
}

// float altitude = 2;
inline void GetTakeoffAltitudeResponse::clear_altitude() {
  altitude_ = 0;
}
inline float GetTakeoffAltitudeResponse::_internal_altitude() const {
  return altitude_;
}
inline float GetTakeoffAltitudeResponse::altitude() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GetTakeoffAltitudeResponse.altitude)
  return _internal_altitude();
}
inline void GetTakeoffAltitudeResponse::_internal_set_altitude(float value) {
  
  altitude_ = value;
}
inline void GetTakeoffAltitudeResponse::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.GetTakeoffAltitudeResponse.altitude)
}

// -------------------------------------------------------------------

// SetTakeoffAltitudeRequest

// float altitude = 1;
inline void SetTakeoffAltitudeRequest::clear_altitude() {
  altitude_ = 0;
}
inline float SetTakeoffAltitudeRequest::_internal_altitude() const {
  return altitude_;
}
inline float SetTakeoffAltitudeRequest::altitude() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetTakeoffAltitudeRequest.altitude)
  return _internal_altitude();
}
inline void SetTakeoffAltitudeRequest::_internal_set_altitude(float value) {
  
  altitude_ = value;
}
inline void SetTakeoffAltitudeRequest::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.SetTakeoffAltitudeRequest.altitude)
}

// -------------------------------------------------------------------

// SetTakeoffAltitudeResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool SetTakeoffAltitudeResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool SetTakeoffAltitudeResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void SetTakeoffAltitudeResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& SetTakeoffAltitudeResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& SetTakeoffAltitudeResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetTakeoffAltitudeResponse.action_result)
  return _internal_action_result();
}
inline void SetTakeoffAltitudeResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.SetTakeoffAltitudeResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* SetTakeoffAltitudeResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetTakeoffAltitudeResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.SetTakeoffAltitudeResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetTakeoffAltitudeResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* SetTakeoffAltitudeResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.SetTakeoffAltitudeResponse.action_result)
  return _msg;
}
inline void SetTakeoffAltitudeResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.SetTakeoffAltitudeResponse.action_result)
}

// -------------------------------------------------------------------

// GetMaximumSpeedRequest

// -------------------------------------------------------------------

// GetMaximumSpeedResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool GetMaximumSpeedResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool GetMaximumSpeedResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void GetMaximumSpeedResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& GetMaximumSpeedResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& GetMaximumSpeedResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GetMaximumSpeedResponse.action_result)
  return _internal_action_result();
}
inline void GetMaximumSpeedResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.GetMaximumSpeedResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* GetMaximumSpeedResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* GetMaximumSpeedResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.GetMaximumSpeedResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* GetMaximumSpeedResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* GetMaximumSpeedResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.GetMaximumSpeedResponse.action_result)
  return _msg;
}
inline void GetMaximumSpeedResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.GetMaximumSpeedResponse.action_result)
}

// float speed = 2;
inline void GetMaximumSpeedResponse::clear_speed() {
  speed_ = 0;
}
inline float GetMaximumSpeedResponse::_internal_speed() const {
  return speed_;
}
inline float GetMaximumSpeedResponse::speed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GetMaximumSpeedResponse.speed)
  return _internal_speed();
}
inline void GetMaximumSpeedResponse::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void GetMaximumSpeedResponse::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.GetMaximumSpeedResponse.speed)
}

// -------------------------------------------------------------------

// SetMaximumSpeedRequest

// float speed = 1;
inline void SetMaximumSpeedRequest::clear_speed() {
  speed_ = 0;
}
inline float SetMaximumSpeedRequest::_internal_speed() const {
  return speed_;
}
inline float SetMaximumSpeedRequest::speed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetMaximumSpeedRequest.speed)
  return _internal_speed();
}
inline void SetMaximumSpeedRequest::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void SetMaximumSpeedRequest::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.SetMaximumSpeedRequest.speed)
}

// -------------------------------------------------------------------

// SetMaximumSpeedResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool SetMaximumSpeedResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool SetMaximumSpeedResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void SetMaximumSpeedResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& SetMaximumSpeedResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& SetMaximumSpeedResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetMaximumSpeedResponse.action_result)
  return _internal_action_result();
}
inline void SetMaximumSpeedResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.SetMaximumSpeedResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* SetMaximumSpeedResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetMaximumSpeedResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.SetMaximumSpeedResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetMaximumSpeedResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* SetMaximumSpeedResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.SetMaximumSpeedResponse.action_result)
  return _msg;
}
inline void SetMaximumSpeedResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.SetMaximumSpeedResponse.action_result)
}

// -------------------------------------------------------------------

// GetReturnToLaunchAltitudeRequest

// -------------------------------------------------------------------

// GetReturnToLaunchAltitudeResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool GetReturnToLaunchAltitudeResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool GetReturnToLaunchAltitudeResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void GetReturnToLaunchAltitudeResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& GetReturnToLaunchAltitudeResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& GetReturnToLaunchAltitudeResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse.action_result)
  return _internal_action_result();
}
inline void GetReturnToLaunchAltitudeResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* GetReturnToLaunchAltitudeResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* GetReturnToLaunchAltitudeResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* GetReturnToLaunchAltitudeResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* GetReturnToLaunchAltitudeResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse.action_result)
  return _msg;
}
inline void GetReturnToLaunchAltitudeResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse.action_result)
}

// float relative_altitude_m = 2;
inline void GetReturnToLaunchAltitudeResponse::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float GetReturnToLaunchAltitudeResponse::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float GetReturnToLaunchAltitudeResponse::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void GetReturnToLaunchAltitudeResponse::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void GetReturnToLaunchAltitudeResponse::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse.relative_altitude_m)
}

// -------------------------------------------------------------------

// SetReturnToLaunchAltitudeRequest

// float relative_altitude_m = 1;
inline void SetReturnToLaunchAltitudeRequest::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float SetReturnToLaunchAltitudeRequest::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float SetReturnToLaunchAltitudeRequest::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void SetReturnToLaunchAltitudeRequest::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void SetReturnToLaunchAltitudeRequest::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest.relative_altitude_m)
}

// -------------------------------------------------------------------

// SetReturnToLaunchAltitudeResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool SetReturnToLaunchAltitudeResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool SetReturnToLaunchAltitudeResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void SetReturnToLaunchAltitudeResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& SetReturnToLaunchAltitudeResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& SetReturnToLaunchAltitudeResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse.action_result)
  return _internal_action_result();
}
inline void SetReturnToLaunchAltitudeResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* SetReturnToLaunchAltitudeResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetReturnToLaunchAltitudeResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetReturnToLaunchAltitudeResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* SetReturnToLaunchAltitudeResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse.action_result)
  return _msg;
}
inline void SetReturnToLaunchAltitudeResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse.action_result)
}

// -------------------------------------------------------------------

// SetCurrentSpeedRequest

// float speed_m_s = 1;
inline void SetCurrentSpeedRequest::clear_speed_m_s() {
  speed_m_s_ = 0;
}
inline float SetCurrentSpeedRequest::_internal_speed_m_s() const {
  return speed_m_s_;
}
inline float SetCurrentSpeedRequest::speed_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetCurrentSpeedRequest.speed_m_s)
  return _internal_speed_m_s();
}
inline void SetCurrentSpeedRequest::_internal_set_speed_m_s(float value) {
  
  speed_m_s_ = value;
}
inline void SetCurrentSpeedRequest::set_speed_m_s(float value) {
  _internal_set_speed_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.SetCurrentSpeedRequest.speed_m_s)
}

// -------------------------------------------------------------------

// SetCurrentSpeedResponse

// .mavsdk.rpc.action.ActionResult action_result = 1;
inline bool SetCurrentSpeedResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool SetCurrentSpeedResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void SetCurrentSpeedResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::action::ActionResult& SetCurrentSpeedResponse::_internal_action_result() const {
  const ::mavsdk::rpc::action::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::action::ActionResult&>(
      ::mavsdk::rpc::action::_ActionResult_default_instance_);
}
inline const ::mavsdk::rpc::action::ActionResult& SetCurrentSpeedResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.SetCurrentSpeedResponse.action_result)
  return _internal_action_result();
}
inline void SetCurrentSpeedResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::action::ActionResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action.SetCurrentSpeedResponse.action_result)
}
inline ::mavsdk::rpc::action::ActionResult* SetCurrentSpeedResponse::release_action_result() {
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetCurrentSpeedResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.SetCurrentSpeedResponse.action_result)
  
  ::mavsdk::rpc::action::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::action::ActionResult* SetCurrentSpeedResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::action::ActionResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::action::ActionResult* SetCurrentSpeedResponse::mutable_action_result() {
  ::mavsdk::rpc::action::ActionResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.SetCurrentSpeedResponse.action_result)
  return _msg;
}
inline void SetCurrentSpeedResponse::set_allocated_action_result(::mavsdk::rpc::action::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.SetCurrentSpeedResponse.action_result)
}

// -------------------------------------------------------------------

// ActionResult

// .mavsdk.rpc.action.ActionResult.Result result = 1;
inline void ActionResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::action::ActionResult_Result ActionResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::action::ActionResult_Result >(result_);
}
inline ::mavsdk::rpc::action::ActionResult_Result ActionResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.ActionResult.result)
  return _internal_result();
}
inline void ActionResult::_internal_set_result(::mavsdk::rpc::action::ActionResult_Result value) {
  
  result_ = value;
}
inline void ActionResult::set_result(::mavsdk::rpc::action::ActionResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.ActionResult.result)
}

// string result_str = 2;
inline void ActionResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& ActionResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.action.ActionResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActionResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.action.ActionResult.result_str)
}
inline std::string* ActionResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action.ActionResult.result_str)
  return _s;
}
inline const std::string& ActionResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void ActionResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ActionResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* ActionResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.action.ActionResult.result_str)
  return result_str_.Release();
}
inline void ActionResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action.ActionResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace action
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::action::ActionResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::action::ActionResult_Result>() {
  return ::mavsdk::rpc::action::ActionResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::action::OrbitYawBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::action::OrbitYawBehavior>() {
  return ::mavsdk::rpc::action::OrbitYawBehavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_action_2faction_2eproto
