// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action_server/action_server.proto

#include "action_server/action_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace action_server {
PROTOBUF_CONSTEXPR SetAllowTakeoffRequest::SetAllowTakeoffRequest(
    ::_pbi::ConstantInitialized)
  : allow_takeoff_(false){}
struct SetAllowTakeoffRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAllowTakeoffRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAllowTakeoffRequestDefaultTypeInternal() {}
  union {
    SetAllowTakeoffRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAllowTakeoffRequestDefaultTypeInternal _SetAllowTakeoffRequest_default_instance_;
PROTOBUF_CONSTEXPR SetArmableRequest::SetArmableRequest(
    ::_pbi::ConstantInitialized)
  : armable_(false)
  , force_armable_(false){}
struct SetArmableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetArmableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetArmableRequestDefaultTypeInternal() {}
  union {
    SetArmableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetArmableRequestDefaultTypeInternal _SetArmableRequest_default_instance_;
PROTOBUF_CONSTEXPR SetDisarmableRequest::SetDisarmableRequest(
    ::_pbi::ConstantInitialized)
  : disarmable_(false)
  , force_disarmable_(false){}
struct SetDisarmableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetDisarmableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetDisarmableRequestDefaultTypeInternal() {}
  union {
    SetDisarmableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetDisarmableRequestDefaultTypeInternal _SetDisarmableRequest_default_instance_;
PROTOBUF_CONSTEXPR SetAllowableFlightModesRequest::SetAllowableFlightModesRequest(
    ::_pbi::ConstantInitialized)
  : flight_modes_(nullptr){}
struct SetAllowableFlightModesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAllowableFlightModesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAllowableFlightModesRequestDefaultTypeInternal() {}
  union {
    SetAllowableFlightModesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAllowableFlightModesRequestDefaultTypeInternal _SetAllowableFlightModesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAllowableFlightModesRequest::GetAllowableFlightModesRequest(
    ::_pbi::ConstantInitialized){}
struct GetAllowableFlightModesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAllowableFlightModesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAllowableFlightModesRequestDefaultTypeInternal() {}
  union {
    GetAllowableFlightModesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAllowableFlightModesRequestDefaultTypeInternal _GetAllowableFlightModesRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeArmDisarmRequest::SubscribeArmDisarmRequest(
    ::_pbi::ConstantInitialized){}
struct SubscribeArmDisarmRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeArmDisarmRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeArmDisarmRequestDefaultTypeInternal() {}
  union {
    SubscribeArmDisarmRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeArmDisarmRequestDefaultTypeInternal _SubscribeArmDisarmRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeFlightModeChangeRequest::SubscribeFlightModeChangeRequest(
    ::_pbi::ConstantInitialized){}
struct SubscribeFlightModeChangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeFlightModeChangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeFlightModeChangeRequestDefaultTypeInternal() {}
  union {
    SubscribeFlightModeChangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeFlightModeChangeRequestDefaultTypeInternal _SubscribeFlightModeChangeRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeTakeoffRequest::SubscribeTakeoffRequest(
    ::_pbi::ConstantInitialized){}
struct SubscribeTakeoffRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeTakeoffRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeTakeoffRequestDefaultTypeInternal() {}
  union {
    SubscribeTakeoffRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeTakeoffRequestDefaultTypeInternal _SubscribeTakeoffRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeLandRequest::SubscribeLandRequest(
    ::_pbi::ConstantInitialized){}
struct SubscribeLandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeLandRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeLandRequestDefaultTypeInternal() {}
  union {
    SubscribeLandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeLandRequestDefaultTypeInternal _SubscribeLandRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeRebootRequest::SubscribeRebootRequest(
    ::_pbi::ConstantInitialized){}
struct SubscribeRebootRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRebootRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRebootRequestDefaultTypeInternal() {}
  union {
    SubscribeRebootRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRebootRequestDefaultTypeInternal _SubscribeRebootRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeShutdownRequest::SubscribeShutdownRequest(
    ::_pbi::ConstantInitialized){}
struct SubscribeShutdownRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeShutdownRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeShutdownRequestDefaultTypeInternal() {}
  union {
    SubscribeShutdownRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeShutdownRequestDefaultTypeInternal _SubscribeShutdownRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeTerminateRequest::SubscribeTerminateRequest(
    ::_pbi::ConstantInitialized){}
struct SubscribeTerminateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeTerminateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeTerminateRequestDefaultTypeInternal() {}
  union {
    SubscribeTerminateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeTerminateRequestDefaultTypeInternal _SubscribeTerminateRequest_default_instance_;
PROTOBUF_CONSTEXPR ArmDisarmResponse::ArmDisarmResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr)
  , arm_(nullptr){}
struct ArmDisarmResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArmDisarmResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArmDisarmResponseDefaultTypeInternal() {}
  union {
    ArmDisarmResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArmDisarmResponseDefaultTypeInternal _ArmDisarmResponse_default_instance_;
PROTOBUF_CONSTEXPR FlightModeChangeResponse::FlightModeChangeResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr)
  , flight_mode_(0)
{}
struct FlightModeChangeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightModeChangeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightModeChangeResponseDefaultTypeInternal() {}
  union {
    FlightModeChangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightModeChangeResponseDefaultTypeInternal _FlightModeChangeResponse_default_instance_;
PROTOBUF_CONSTEXPR TakeoffResponse::TakeoffResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr)
  , takeoff_(false){}
struct TakeoffResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TakeoffResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TakeoffResponseDefaultTypeInternal() {}
  union {
    TakeoffResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TakeoffResponseDefaultTypeInternal _TakeoffResponse_default_instance_;
PROTOBUF_CONSTEXPR LandResponse::LandResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr)
  , land_(false){}
struct LandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LandResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LandResponseDefaultTypeInternal() {}
  union {
    LandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LandResponseDefaultTypeInternal _LandResponse_default_instance_;
PROTOBUF_CONSTEXPR RebootResponse::RebootResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr)
  , reboot_(false){}
struct RebootResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RebootResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RebootResponseDefaultTypeInternal() {}
  union {
    RebootResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RebootResponseDefaultTypeInternal _RebootResponse_default_instance_;
PROTOBUF_CONSTEXPR ShutdownResponse::ShutdownResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr)
  , shutdown_(false){}
struct ShutdownResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShutdownResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShutdownResponseDefaultTypeInternal() {}
  union {
    ShutdownResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
PROTOBUF_CONSTEXPR TerminateResponse::TerminateResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr)
  , terminate_(false){}
struct TerminateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminateResponseDefaultTypeInternal() {}
  union {
    TerminateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminateResponseDefaultTypeInternal _TerminateResponse_default_instance_;
PROTOBUF_CONSTEXPR SetArmableResponse::SetArmableResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr){}
struct SetArmableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetArmableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetArmableResponseDefaultTypeInternal() {}
  union {
    SetArmableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetArmableResponseDefaultTypeInternal _SetArmableResponse_default_instance_;
PROTOBUF_CONSTEXPR SetDisarmableResponse::SetDisarmableResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr){}
struct SetDisarmableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetDisarmableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetDisarmableResponseDefaultTypeInternal() {}
  union {
    SetDisarmableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetDisarmableResponseDefaultTypeInternal _SetDisarmableResponse_default_instance_;
PROTOBUF_CONSTEXPR SetAllowableFlightModesResponse::SetAllowableFlightModesResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr){}
struct SetAllowableFlightModesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAllowableFlightModesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAllowableFlightModesResponseDefaultTypeInternal() {}
  union {
    SetAllowableFlightModesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAllowableFlightModesResponseDefaultTypeInternal _SetAllowableFlightModesResponse_default_instance_;
PROTOBUF_CONSTEXPR SetAllowTakeoffResponse::SetAllowTakeoffResponse(
    ::_pbi::ConstantInitialized)
  : action_server_result_(nullptr){}
struct SetAllowTakeoffResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAllowTakeoffResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAllowTakeoffResponseDefaultTypeInternal() {}
  union {
    SetAllowTakeoffResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAllowTakeoffResponseDefaultTypeInternal _SetAllowTakeoffResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAllowableFlightModesResponse::GetAllowableFlightModesResponse(
    ::_pbi::ConstantInitialized)
  : flight_modes_(nullptr){}
struct GetAllowableFlightModesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAllowableFlightModesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAllowableFlightModesResponseDefaultTypeInternal() {}
  union {
    GetAllowableFlightModesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAllowableFlightModesResponseDefaultTypeInternal _GetAllowableFlightModesResponse_default_instance_;
PROTOBUF_CONSTEXPR AllowableFlightModes::AllowableFlightModes(
    ::_pbi::ConstantInitialized)
  : can_auto_mode_(false)
  , can_guided_mode_(false)
  , can_stabilize_mode_(false){}
struct AllowableFlightModesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowableFlightModesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowableFlightModesDefaultTypeInternal() {}
  union {
    AllowableFlightModes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowableFlightModesDefaultTypeInternal _AllowableFlightModes_default_instance_;
PROTOBUF_CONSTEXPR ArmDisarm::ArmDisarm(
    ::_pbi::ConstantInitialized)
  : arm_(false)
  , force_(false){}
struct ArmDisarmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArmDisarmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArmDisarmDefaultTypeInternal() {}
  union {
    ArmDisarm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArmDisarmDefaultTypeInternal _ArmDisarm_default_instance_;
PROTOBUF_CONSTEXPR ActionServerResult::ActionServerResult(
    ::_pbi::ConstantInitialized)
  : result_str_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(0)
{}
struct ActionServerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionServerResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionServerResultDefaultTypeInternal() {}
  union {
    ActionServerResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionServerResultDefaultTypeInternal _ActionServerResult_default_instance_;
}  // namespace action_server
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_action_5fserver_2faction_5fserver_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_action_5fserver_2faction_5fserver_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_action_5fserver_2faction_5fserver_2eproto = nullptr;

const uint32_t TableStruct_action_5fserver_2faction_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetAllowTakeoffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetAllowTakeoffRequest, allow_takeoff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetArmableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetArmableRequest, armable_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetArmableRequest, force_armable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetDisarmableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetDisarmableRequest, disarmable_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetDisarmableRequest, force_disarmable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, flight_modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SubscribeArmDisarmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SubscribeTakeoffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SubscribeLandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SubscribeRebootRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SubscribeShutdownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SubscribeTerminateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ArmDisarmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ArmDisarmResponse, action_server_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ArmDisarmResponse, arm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::FlightModeChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::FlightModeChangeResponse, action_server_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::FlightModeChangeResponse, flight_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::TakeoffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::TakeoffResponse, action_server_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::TakeoffResponse, takeoff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::LandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::LandResponse, action_server_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::LandResponse, land_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::RebootResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::RebootResponse, action_server_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::RebootResponse, reboot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ShutdownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ShutdownResponse, action_server_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ShutdownResponse, shutdown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::TerminateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::TerminateResponse, action_server_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::TerminateResponse, terminate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetArmableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetArmableResponse, action_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetDisarmableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetDisarmableResponse, action_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetAllowableFlightModesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetAllowableFlightModesResponse, action_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetAllowTakeoffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::SetAllowTakeoffResponse, action_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::GetAllowableFlightModesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::GetAllowableFlightModesResponse, flight_modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::AllowableFlightModes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::AllowableFlightModes, can_auto_mode_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::AllowableFlightModes, can_guided_mode_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::AllowableFlightModes, can_stabilize_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ArmDisarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ArmDisarm, arm_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ArmDisarm, force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ActionServerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ActionServerResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::action_server::ActionServerResult, result_str_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::action_server::SetAllowTakeoffRequest)},
  { 7, -1, -1, sizeof(::mavsdk::rpc::action_server::SetArmableRequest)},
  { 15, -1, -1, sizeof(::mavsdk::rpc::action_server::SetDisarmableRequest)},
  { 23, -1, -1, sizeof(::mavsdk::rpc::action_server::SetAllowableFlightModesRequest)},
  { 30, -1, -1, sizeof(::mavsdk::rpc::action_server::GetAllowableFlightModesRequest)},
  { 36, -1, -1, sizeof(::mavsdk::rpc::action_server::SubscribeArmDisarmRequest)},
  { 42, -1, -1, sizeof(::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest)},
  { 48, -1, -1, sizeof(::mavsdk::rpc::action_server::SubscribeTakeoffRequest)},
  { 54, -1, -1, sizeof(::mavsdk::rpc::action_server::SubscribeLandRequest)},
  { 60, -1, -1, sizeof(::mavsdk::rpc::action_server::SubscribeRebootRequest)},
  { 66, -1, -1, sizeof(::mavsdk::rpc::action_server::SubscribeShutdownRequest)},
  { 72, -1, -1, sizeof(::mavsdk::rpc::action_server::SubscribeTerminateRequest)},
  { 78, -1, -1, sizeof(::mavsdk::rpc::action_server::ArmDisarmResponse)},
  { 86, -1, -1, sizeof(::mavsdk::rpc::action_server::FlightModeChangeResponse)},
  { 94, -1, -1, sizeof(::mavsdk::rpc::action_server::TakeoffResponse)},
  { 102, -1, -1, sizeof(::mavsdk::rpc::action_server::LandResponse)},
  { 110, -1, -1, sizeof(::mavsdk::rpc::action_server::RebootResponse)},
  { 118, -1, -1, sizeof(::mavsdk::rpc::action_server::ShutdownResponse)},
  { 126, -1, -1, sizeof(::mavsdk::rpc::action_server::TerminateResponse)},
  { 134, -1, -1, sizeof(::mavsdk::rpc::action_server::SetArmableResponse)},
  { 141, -1, -1, sizeof(::mavsdk::rpc::action_server::SetDisarmableResponse)},
  { 148, -1, -1, sizeof(::mavsdk::rpc::action_server::SetAllowableFlightModesResponse)},
  { 155, -1, -1, sizeof(::mavsdk::rpc::action_server::SetAllowTakeoffResponse)},
  { 162, -1, -1, sizeof(::mavsdk::rpc::action_server::GetAllowableFlightModesResponse)},
  { 169, -1, -1, sizeof(::mavsdk::rpc::action_server::AllowableFlightModes)},
  { 178, -1, -1, sizeof(::mavsdk::rpc::action_server::ArmDisarm)},
  { 186, -1, -1, sizeof(::mavsdk::rpc::action_server::ActionServerResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::action_server::_SetAllowTakeoffRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SetArmableRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SetDisarmableRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SetAllowableFlightModesRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_GetAllowableFlightModesRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SubscribeArmDisarmRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SubscribeFlightModeChangeRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SubscribeTakeoffRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SubscribeLandRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SubscribeRebootRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SubscribeShutdownRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SubscribeTerminateRequest_default_instance_._instance,
  &::mavsdk::rpc::action_server::_ArmDisarmResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_FlightModeChangeResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_TakeoffResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_LandResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_RebootResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_ShutdownResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_TerminateResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SetArmableResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SetDisarmableResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SetAllowableFlightModesResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_SetAllowTakeoffResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_GetAllowableFlightModesResponse_default_instance_._instance,
  &::mavsdk::rpc::action_server::_AllowableFlightModes_default_instance_._instance,
  &::mavsdk::rpc::action_server::_ArmDisarm_default_instance_._instance,
  &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_._instance,
};

const char descriptor_table_protodef_action_5fserver_2faction_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!action_server/action_server.proto\022\030mav"
  "sdk.rpc.action_server\032\024mavsdk_options.pr"
  "oto\"/\n\026SetAllowTakeoffRequest\022\025\n\rallow_t"
  "akeoff\030\001 \001(\010\";\n\021SetArmableRequest\022\017\n\007arm"
  "able\030\001 \001(\010\022\025\n\rforce_armable\030\002 \001(\010\"D\n\024Set"
  "DisarmableRequest\022\022\n\ndisarmable\030\001 \001(\010\022\030\n"
  "\020force_disarmable\030\002 \001(\010\"f\n\036SetAllowableF"
  "lightModesRequest\022D\n\014flight_modes\030\001 \001(\0132"
  "..mavsdk.rpc.action_server.AllowableFlig"
  "htModes\" \n\036GetAllowableFlightModesReques"
  "t\"\033\n\031SubscribeArmDisarmRequest\"\"\n Subscr"
  "ibeFlightModeChangeRequest\"\031\n\027SubscribeT"
  "akeoffRequest\"\026\n\024SubscribeLandRequest\"\030\n"
  "\026SubscribeRebootRequest\"\032\n\030SubscribeShut"
  "downRequest\"\033\n\031SubscribeTerminateRequest"
  "\"\221\001\n\021ArmDisarmResponse\022J\n\024action_server_"
  "result\030\001 \001(\0132,.mavsdk.rpc.action_server."
  "ActionServerResult\0220\n\003arm\030\002 \001(\0132#.mavsdk"
  ".rpc.action_server.ArmDisarm\"\241\001\n\030FlightM"
  "odeChangeResponse\022J\n\024action_server_resul"
  "t\030\001 \001(\0132,.mavsdk.rpc.action_server.Actio"
  "nServerResult\0229\n\013flight_mode\030\002 \001(\0162$.mav"
  "sdk.rpc.action_server.FlightMode\"n\n\017Take"
  "offResponse\022J\n\024action_server_result\030\001 \001("
  "\0132,.mavsdk.rpc.action_server.ActionServe"
  "rResult\022\017\n\007takeoff\030\002 \001(\010\"h\n\014LandResponse"
  "\022J\n\024action_server_result\030\001 \001(\0132,.mavsdk."
  "rpc.action_server.ActionServerResult\022\014\n\004"
  "land\030\002 \001(\010\"l\n\016RebootResponse\022J\n\024action_s"
  "erver_result\030\001 \001(\0132,.mavsdk.rpc.action_s"
  "erver.ActionServerResult\022\016\n\006reboot\030\002 \001(\010"
  "\"p\n\020ShutdownResponse\022J\n\024action_server_re"
  "sult\030\001 \001(\0132,.mavsdk.rpc.action_server.Ac"
  "tionServerResult\022\020\n\010shutdown\030\002 \001(\010\"r\n\021Te"
  "rminateResponse\022J\n\024action_server_result\030"
  "\001 \001(\0132,.mavsdk.rpc.action_server.ActionS"
  "erverResult\022\021\n\tterminate\030\002 \001(\010\"`\n\022SetArm"
  "ableResponse\022J\n\024action_server_result\030\001 \001"
  "(\0132,.mavsdk.rpc.action_server.ActionServ"
  "erResult\"c\n\025SetDisarmableResponse\022J\n\024act"
  "ion_server_result\030\001 \001(\0132,.mavsdk.rpc.act"
  "ion_server.ActionServerResult\"m\n\037SetAllo"
  "wableFlightModesResponse\022J\n\024action_serve"
  "r_result\030\001 \001(\0132,.mavsdk.rpc.action_serve"
  "r.ActionServerResult\"e\n\027SetAllowTakeoffR"
  "esponse\022J\n\024action_server_result\030\001 \001(\0132,."
  "mavsdk.rpc.action_server.ActionServerRes"
  "ult\"g\n\037GetAllowableFlightModesResponse\022D"
  "\n\014flight_modes\030\001 \001(\0132..mavsdk.rpc.action"
  "_server.AllowableFlightModes\"b\n\024Allowabl"
  "eFlightModes\022\025\n\rcan_auto_mode\030\001 \001(\010\022\027\n\017c"
  "an_guided_mode\030\002 \001(\010\022\032\n\022can_stabilize_mo"
  "de\030\003 \001(\010\"\'\n\tArmDisarm\022\013\n\003arm\030\001 \001(\010\022\r\n\005fo"
  "rce\030\002 \001(\010\"\351\003\n\022ActionServerResult\022C\n\006resu"
  "lt\030\001 \001(\01623.mavsdk.rpc.action_server.Acti"
  "onServerResult.Result\022\022\n\nresult_str\030\002 \001("
  "\t\"\371\002\n\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESU"
  "LT_SUCCESS\020\001\022\024\n\020RESULT_NO_SYSTEM\020\002\022\033\n\027RE"
  "SULT_CONNECTION_ERROR\020\003\022\017\n\013RESULT_BUSY\020\004"
  "\022\031\n\025RESULT_COMMAND_DENIED\020\005\022.\n*RESULT_CO"
  "MMAND_DENIED_LANDED_STATE_UNKNOWN\020\006\022$\n R"
  "ESULT_COMMAND_DENIED_NOT_LANDED\020\007\022\022\n\016RES"
  "ULT_TIMEOUT\020\010\022*\n&RESULT_VTOL_TRANSITION_"
  "SUPPORT_UNKNOWN\020\t\022%\n!RESULT_NO_VTOL_TRAN"
  "SITION_SUPPORT\020\n\022\032\n\026RESULT_PARAMETER_ERR"
  "OR\020\013\022\017\n\013RESULT_NEXT\020\014*\353\002\n\nFlightMode\022\027\n\023"
  "FLIGHT_MODE_UNKNOWN\020\000\022\025\n\021FLIGHT_MODE_REA"
  "DY\020\001\022\027\n\023FLIGHT_MODE_TAKEOFF\020\002\022\024\n\020FLIGHT_"
  "MODE_HOLD\020\003\022\027\n\023FLIGHT_MODE_MISSION\020\004\022 \n\034"
  "FLIGHT_MODE_RETURN_TO_LAUNCH\020\005\022\024\n\020FLIGHT"
  "_MODE_LAND\020\006\022\030\n\024FLIGHT_MODE_OFFBOARD\020\007\022\031"
  "\n\025FLIGHT_MODE_FOLLOW_ME\020\010\022\026\n\022FLIGHT_MODE"
  "_MANUAL\020\t\022\026\n\022FLIGHT_MODE_ALTCTL\020\n\022\026\n\022FLI"
  "GHT_MODE_POSCTL\020\013\022\024\n\020FLIGHT_MODE_ACRO\020\014\022"
  "\032\n\026FLIGHT_MODE_STABILIZED\020\r2\235\014\n\023ActionSe"
  "rverService\022~\n\022SubscribeArmDisarm\0223.mavs"
  "dk.rpc.action_server.SubscribeArmDisarmR"
  "equest\032+.mavsdk.rpc.action_server.ArmDis"
  "armResponse\"\004\200\265\030\0000\001\022\223\001\n\031SubscribeFlightM"
  "odeChange\022:.mavsdk.rpc.action_server.Sub"
  "scribeFlightModeChangeRequest\0322.mavsdk.r"
  "pc.action_server.FlightModeChangeRespons"
  "e\"\004\200\265\030\0000\001\022x\n\020SubscribeTakeoff\0221.mavsdk.r"
  "pc.action_server.SubscribeTakeoffRequest"
  "\032).mavsdk.rpc.action_server.TakeoffRespo"
  "nse\"\004\200\265\030\0000\001\022o\n\rSubscribeLand\022..mavsdk.rp"
  "c.action_server.SubscribeLandRequest\032&.m"
  "avsdk.rpc.action_server.LandResponse\"\004\200\265"
  "\030\0000\001\022u\n\017SubscribeReboot\0220.mavsdk.rpc.act"
  "ion_server.SubscribeRebootRequest\032(.mavs"
  "dk.rpc.action_server.RebootResponse\"\004\200\265\030"
  "\0000\001\022{\n\021SubscribeShutdown\0222.mavsdk.rpc.ac"
  "tion_server.SubscribeShutdownRequest\032*.m"
  "avsdk.rpc.action_server.ShutdownResponse"
  "\"\004\200\265\030\0000\001\022~\n\022SubscribeTerminate\0223.mavsdk."
  "rpc.action_server.SubscribeTerminateRequ"
  "est\032+.mavsdk.rpc.action_server.Terminate"
  "Response\"\004\200\265\030\0000\001\022|\n\017SetAllowTakeoff\0220.ma"
  "vsdk.rpc.action_server.SetAllowTakeoffRe"
  "quest\0321.mavsdk.rpc.action_server.SetAllo"
  "wTakeoffResponse\"\004\200\265\030\001\022m\n\nSetArmable\022+.m"
  "avsdk.rpc.action_server.SetArmableReques"
  "t\032,.mavsdk.rpc.action_server.SetArmableR"
  "esponse\"\004\200\265\030\001\022v\n\rSetDisarmable\022..mavsdk."
  "rpc.action_server.SetDisarmableRequest\032/"
  ".mavsdk.rpc.action_server.SetDisarmableR"
  "esponse\"\004\200\265\030\001\022\224\001\n\027SetAllowableFlightMode"
  "s\0228.mavsdk.rpc.action_server.SetAllowabl"
  "eFlightModesRequest\0329.mavsdk.rpc.action_"
  "server.SetAllowableFlightModesResponse\"\004"
  "\200\265\030\001\022\224\001\n\027GetAllowableFlightModes\0228.mavsd"
  "k.rpc.action_server.GetAllowableFlightMo"
  "desRequest\0329.mavsdk.rpc.action_server.Ge"
  "tAllowableFlightModesResponse\"\004\200\265\030\001B,\n\027i"
  "o.mavsdk.action_serverB\021ActionServerProt"
  "ob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_action_5fserver_2faction_5fserver_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_action_5fserver_2faction_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_action_5fserver_2faction_5fserver_2eproto = {
    false, false, 4609, descriptor_table_protodef_action_5fserver_2faction_5fserver_2eproto,
    "action_server/action_server.proto",
    &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once, descriptor_table_action_5fserver_2faction_5fserver_2eproto_deps, 1, 27,
    schemas, file_default_instances, TableStruct_action_5fserver_2faction_5fserver_2eproto::offsets,
    file_level_metadata_action_5fserver_2faction_5fserver_2eproto, file_level_enum_descriptors_action_5fserver_2faction_5fserver_2eproto,
    file_level_service_descriptors_action_5fserver_2faction_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter() {
  return &descriptor_table_action_5fserver_2faction_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_action_5fserver_2faction_5fserver_2eproto(&descriptor_table_action_5fserver_2faction_5fserver_2eproto);
namespace mavsdk {
namespace rpc {
namespace action_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionServerResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_5fserver_2faction_5fserver_2eproto);
  return file_level_enum_descriptors_action_5fserver_2faction_5fserver_2eproto[0];
}
bool ActionServerResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActionServerResult_Result ActionServerResult::RESULT_UNKNOWN;
constexpr ActionServerResult_Result ActionServerResult::RESULT_SUCCESS;
constexpr ActionServerResult_Result ActionServerResult::RESULT_NO_SYSTEM;
constexpr ActionServerResult_Result ActionServerResult::RESULT_CONNECTION_ERROR;
constexpr ActionServerResult_Result ActionServerResult::RESULT_BUSY;
constexpr ActionServerResult_Result ActionServerResult::RESULT_COMMAND_DENIED;
constexpr ActionServerResult_Result ActionServerResult::RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
constexpr ActionServerResult_Result ActionServerResult::RESULT_COMMAND_DENIED_NOT_LANDED;
constexpr ActionServerResult_Result ActionServerResult::RESULT_TIMEOUT;
constexpr ActionServerResult_Result ActionServerResult::RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
constexpr ActionServerResult_Result ActionServerResult::RESULT_NO_VTOL_TRANSITION_SUPPORT;
constexpr ActionServerResult_Result ActionServerResult::RESULT_PARAMETER_ERROR;
constexpr ActionServerResult_Result ActionServerResult::RESULT_NEXT;
constexpr ActionServerResult_Result ActionServerResult::Result_MIN;
constexpr ActionServerResult_Result ActionServerResult::Result_MAX;
constexpr int ActionServerResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_5fserver_2faction_5fserver_2eproto);
  return file_level_enum_descriptors_action_5fserver_2faction_5fserver_2eproto[1];
}
bool FlightMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SetAllowTakeoffRequest::_Internal {
 public:
};

SetAllowTakeoffRequest::SetAllowTakeoffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
}
SetAllowTakeoffRequest::SetAllowTakeoffRequest(const SetAllowTakeoffRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allow_takeoff_ = from.allow_takeoff_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
}

inline void SetAllowTakeoffRequest::SharedCtor() {
allow_takeoff_ = false;
}

SetAllowTakeoffRequest::~SetAllowTakeoffRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAllowTakeoffRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetAllowTakeoffRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAllowTakeoffRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_takeoff_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAllowTakeoffRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool allow_takeoff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          allow_takeoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAllowTakeoffRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_takeoff = 1;
  if (this->_internal_allow_takeoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_takeoff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
  return target;
}

size_t SetAllowTakeoffRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool allow_takeoff = 1;
  if (this->_internal_allow_takeoff() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAllowTakeoffRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAllowTakeoffRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAllowTakeoffRequest::GetClassData() const { return &_class_data_; }

void SetAllowTakeoffRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAllowTakeoffRequest *>(to)->MergeFrom(
      static_cast<const SetAllowTakeoffRequest &>(from));
}


void SetAllowTakeoffRequest::MergeFrom(const SetAllowTakeoffRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_allow_takeoff() != 0) {
    _internal_set_allow_takeoff(from._internal_allow_takeoff());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAllowTakeoffRequest::CopyFrom(const SetAllowTakeoffRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAllowTakeoffRequest::IsInitialized() const {
  return true;
}

void SetAllowTakeoffRequest::InternalSwap(SetAllowTakeoffRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(allow_takeoff_, other->allow_takeoff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAllowTakeoffRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[0]);
}

// ===================================================================

class SetArmableRequest::_Internal {
 public:
};

SetArmableRequest::SetArmableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SetArmableRequest)
}
SetArmableRequest::SetArmableRequest(const SetArmableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&armable_, &from.armable_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_armable_) -
    reinterpret_cast<char*>(&armable_)) + sizeof(force_armable_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SetArmableRequest)
}

inline void SetArmableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&armable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_armable_) -
    reinterpret_cast<char*>(&armable_)) + sizeof(force_armable_));
}

SetArmableRequest::~SetArmableRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.SetArmableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetArmableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetArmableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetArmableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.SetArmableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&armable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_armable_) -
      reinterpret_cast<char*>(&armable_)) + sizeof(force_armable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetArmableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool armable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          armable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool force_armable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          force_armable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetArmableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.SetArmableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool armable = 1;
  if (this->_internal_armable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_armable(), target);
  }

  // bool force_armable = 2;
  if (this->_internal_force_armable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force_armable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.SetArmableRequest)
  return target;
}

size_t SetArmableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.SetArmableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool armable = 1;
  if (this->_internal_armable() != 0) {
    total_size += 1 + 1;
  }

  // bool force_armable = 2;
  if (this->_internal_force_armable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetArmableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetArmableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetArmableRequest::GetClassData() const { return &_class_data_; }

void SetArmableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetArmableRequest *>(to)->MergeFrom(
      static_cast<const SetArmableRequest &>(from));
}


void SetArmableRequest::MergeFrom(const SetArmableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.SetArmableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_armable() != 0) {
    _internal_set_armable(from._internal_armable());
  }
  if (from._internal_force_armable() != 0) {
    _internal_set_force_armable(from._internal_force_armable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetArmableRequest::CopyFrom(const SetArmableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.SetArmableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetArmableRequest::IsInitialized() const {
  return true;
}

void SetArmableRequest::InternalSwap(SetArmableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetArmableRequest, force_armable_)
      + sizeof(SetArmableRequest::force_armable_)
      - PROTOBUF_FIELD_OFFSET(SetArmableRequest, armable_)>(
          reinterpret_cast<char*>(&armable_),
          reinterpret_cast<char*>(&other->armable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetArmableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[1]);
}

// ===================================================================

class SetDisarmableRequest::_Internal {
 public:
};

SetDisarmableRequest::SetDisarmableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SetDisarmableRequest)
}
SetDisarmableRequest::SetDisarmableRequest(const SetDisarmableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&disarmable_, &from.disarmable_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_disarmable_) -
    reinterpret_cast<char*>(&disarmable_)) + sizeof(force_disarmable_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SetDisarmableRequest)
}

inline void SetDisarmableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disarmable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_disarmable_) -
    reinterpret_cast<char*>(&disarmable_)) + sizeof(force_disarmable_));
}

SetDisarmableRequest::~SetDisarmableRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.SetDisarmableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetDisarmableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetDisarmableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDisarmableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.SetDisarmableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&disarmable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_disarmable_) -
      reinterpret_cast<char*>(&disarmable_)) + sizeof(force_disarmable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDisarmableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool disarmable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          disarmable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool force_disarmable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          force_disarmable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetDisarmableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.SetDisarmableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disarmable = 1;
  if (this->_internal_disarmable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_disarmable(), target);
  }

  // bool force_disarmable = 2;
  if (this->_internal_force_disarmable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force_disarmable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.SetDisarmableRequest)
  return target;
}

size_t SetDisarmableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.SetDisarmableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool disarmable = 1;
  if (this->_internal_disarmable() != 0) {
    total_size += 1 + 1;
  }

  // bool force_disarmable = 2;
  if (this->_internal_force_disarmable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetDisarmableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetDisarmableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetDisarmableRequest::GetClassData() const { return &_class_data_; }

void SetDisarmableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetDisarmableRequest *>(to)->MergeFrom(
      static_cast<const SetDisarmableRequest &>(from));
}


void SetDisarmableRequest::MergeFrom(const SetDisarmableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.SetDisarmableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_disarmable() != 0) {
    _internal_set_disarmable(from._internal_disarmable());
  }
  if (from._internal_force_disarmable() != 0) {
    _internal_set_force_disarmable(from._internal_force_disarmable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetDisarmableRequest::CopyFrom(const SetDisarmableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.SetDisarmableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDisarmableRequest::IsInitialized() const {
  return true;
}

void SetDisarmableRequest::InternalSwap(SetDisarmableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetDisarmableRequest, force_disarmable_)
      + sizeof(SetDisarmableRequest::force_disarmable_)
      - PROTOBUF_FIELD_OFFSET(SetDisarmableRequest, disarmable_)>(
          reinterpret_cast<char*>(&disarmable_),
          reinterpret_cast<char*>(&other->disarmable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDisarmableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[2]);
}

// ===================================================================

class SetAllowableFlightModesRequest::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::AllowableFlightModes& flight_modes(const SetAllowableFlightModesRequest* msg);
};

const ::mavsdk::rpc::action_server::AllowableFlightModes&
SetAllowableFlightModesRequest::_Internal::flight_modes(const SetAllowableFlightModesRequest* msg) {
  return *msg->flight_modes_;
}
SetAllowableFlightModesRequest::SetAllowableFlightModesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
}
SetAllowableFlightModesRequest::SetAllowableFlightModesRequest(const SetAllowableFlightModesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flight_modes()) {
    flight_modes_ = new ::mavsdk::rpc::action_server::AllowableFlightModes(*from.flight_modes_);
  } else {
    flight_modes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
}

inline void SetAllowableFlightModesRequest::SharedCtor() {
flight_modes_ = nullptr;
}

SetAllowableFlightModesRequest::~SetAllowableFlightModesRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAllowableFlightModesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete flight_modes_;
}

void SetAllowableFlightModesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAllowableFlightModesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && flight_modes_ != nullptr) {
    delete flight_modes_;
  }
  flight_modes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAllowableFlightModesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flight_modes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAllowableFlightModesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
  if (this->_internal_has_flight_modes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::flight_modes(this),
        _Internal::flight_modes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
  return target;
}

size_t SetAllowableFlightModesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
  if (this->_internal_has_flight_modes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flight_modes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAllowableFlightModesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAllowableFlightModesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAllowableFlightModesRequest::GetClassData() const { return &_class_data_; }

void SetAllowableFlightModesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAllowableFlightModesRequest *>(to)->MergeFrom(
      static_cast<const SetAllowableFlightModesRequest &>(from));
}


void SetAllowableFlightModesRequest::MergeFrom(const SetAllowableFlightModesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flight_modes()) {
    _internal_mutable_flight_modes()->::mavsdk::rpc::action_server::AllowableFlightModes::MergeFrom(from._internal_flight_modes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAllowableFlightModesRequest::CopyFrom(const SetAllowableFlightModesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAllowableFlightModesRequest::IsInitialized() const {
  return true;
}

void SetAllowableFlightModesRequest::InternalSwap(SetAllowableFlightModesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(flight_modes_, other->flight_modes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAllowableFlightModesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[3]);
}

// ===================================================================

class GetAllowableFlightModesRequest::_Internal {
 public:
};

GetAllowableFlightModesRequest::GetAllowableFlightModesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.GetAllowableFlightModesRequest)
}
GetAllowableFlightModesRequest::GetAllowableFlightModesRequest(const GetAllowableFlightModesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.GetAllowableFlightModesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAllowableFlightModesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAllowableFlightModesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetAllowableFlightModesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[4]);
}

// ===================================================================

class SubscribeArmDisarmRequest::_Internal {
 public:
};

SubscribeArmDisarmRequest::SubscribeArmDisarmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SubscribeArmDisarmRequest)
}
SubscribeArmDisarmRequest::SubscribeArmDisarmRequest(const SubscribeArmDisarmRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SubscribeArmDisarmRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeArmDisarmRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeArmDisarmRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeArmDisarmRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[5]);
}

// ===================================================================

class SubscribeFlightModeChangeRequest::_Internal {
 public:
};

SubscribeFlightModeChangeRequest::SubscribeFlightModeChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest)
}
SubscribeFlightModeChangeRequest::SubscribeFlightModeChangeRequest(const SubscribeFlightModeChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeFlightModeChangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeFlightModeChangeRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeFlightModeChangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[6]);
}

// ===================================================================

class SubscribeTakeoffRequest::_Internal {
 public:
};

SubscribeTakeoffRequest::SubscribeTakeoffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SubscribeTakeoffRequest)
}
SubscribeTakeoffRequest::SubscribeTakeoffRequest(const SubscribeTakeoffRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SubscribeTakeoffRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeTakeoffRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeTakeoffRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeTakeoffRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[7]);
}

// ===================================================================

class SubscribeLandRequest::_Internal {
 public:
};

SubscribeLandRequest::SubscribeLandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SubscribeLandRequest)
}
SubscribeLandRequest::SubscribeLandRequest(const SubscribeLandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SubscribeLandRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeLandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeLandRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeLandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[8]);
}

// ===================================================================

class SubscribeRebootRequest::_Internal {
 public:
};

SubscribeRebootRequest::SubscribeRebootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SubscribeRebootRequest)
}
SubscribeRebootRequest::SubscribeRebootRequest(const SubscribeRebootRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SubscribeRebootRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRebootRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRebootRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRebootRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[9]);
}

// ===================================================================

class SubscribeShutdownRequest::_Internal {
 public:
};

SubscribeShutdownRequest::SubscribeShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SubscribeShutdownRequest)
}
SubscribeShutdownRequest::SubscribeShutdownRequest(const SubscribeShutdownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SubscribeShutdownRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeShutdownRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeShutdownRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeShutdownRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[10]);
}

// ===================================================================

class SubscribeTerminateRequest::_Internal {
 public:
};

SubscribeTerminateRequest::SubscribeTerminateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SubscribeTerminateRequest)
}
SubscribeTerminateRequest::SubscribeTerminateRequest(const SubscribeTerminateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SubscribeTerminateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeTerminateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeTerminateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeTerminateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[11]);
}

// ===================================================================

class ArmDisarmResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const ArmDisarmResponse* msg);
  static const ::mavsdk::rpc::action_server::ArmDisarm& arm(const ArmDisarmResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
ArmDisarmResponse::_Internal::action_server_result(const ArmDisarmResponse* msg) {
  return *msg->action_server_result_;
}
const ::mavsdk::rpc::action_server::ArmDisarm&
ArmDisarmResponse::_Internal::arm(const ArmDisarmResponse* msg) {
  return *msg->arm_;
}
ArmDisarmResponse::ArmDisarmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.ArmDisarmResponse)
}
ArmDisarmResponse::ArmDisarmResponse(const ArmDisarmResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  if (from._internal_has_arm()) {
    arm_ = new ::mavsdk::rpc::action_server::ArmDisarm(*from.arm_);
  } else {
    arm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.ArmDisarmResponse)
}

inline void ArmDisarmResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_server_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arm_) -
    reinterpret_cast<char*>(&action_server_result_)) + sizeof(arm_));
}

ArmDisarmResponse::~ArmDisarmResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.ArmDisarmResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArmDisarmResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
  if (this != internal_default_instance()) delete arm_;
}

void ArmDisarmResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArmDisarmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.ArmDisarmResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && arm_ != nullptr) {
    delete arm_;
  }
  arm_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArmDisarmResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.action_server.ArmDisarm arm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArmDisarmResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.ArmDisarmResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.action_server.ArmDisarm arm = 2;
  if (this->_internal_has_arm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::arm(this),
        _Internal::arm(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.ArmDisarmResponse)
  return target;
}

size_t ArmDisarmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.ArmDisarmResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  // .mavsdk.rpc.action_server.ArmDisarm arm = 2;
  if (this->_internal_has_arm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arm_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArmDisarmResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArmDisarmResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArmDisarmResponse::GetClassData() const { return &_class_data_; }

void ArmDisarmResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ArmDisarmResponse *>(to)->MergeFrom(
      static_cast<const ArmDisarmResponse &>(from));
}


void ArmDisarmResponse::MergeFrom(const ArmDisarmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.ArmDisarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  if (from._internal_has_arm()) {
    _internal_mutable_arm()->::mavsdk::rpc::action_server::ArmDisarm::MergeFrom(from._internal_arm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArmDisarmResponse::CopyFrom(const ArmDisarmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.ArmDisarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmDisarmResponse::IsInitialized() const {
  return true;
}

void ArmDisarmResponse::InternalSwap(ArmDisarmResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArmDisarmResponse, arm_)
      + sizeof(ArmDisarmResponse::arm_)
      - PROTOBUF_FIELD_OFFSET(ArmDisarmResponse, action_server_result_)>(
          reinterpret_cast<char*>(&action_server_result_),
          reinterpret_cast<char*>(&other->action_server_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArmDisarmResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[12]);
}

// ===================================================================

class FlightModeChangeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const FlightModeChangeResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
FlightModeChangeResponse::_Internal::action_server_result(const FlightModeChangeResponse* msg) {
  return *msg->action_server_result_;
}
FlightModeChangeResponse::FlightModeChangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.FlightModeChangeResponse)
}
FlightModeChangeResponse::FlightModeChangeResponse(const FlightModeChangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  flight_mode_ = from.flight_mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.FlightModeChangeResponse)
}

inline void FlightModeChangeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_server_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flight_mode_) -
    reinterpret_cast<char*>(&action_server_result_)) + sizeof(flight_mode_));
}

FlightModeChangeResponse::~FlightModeChangeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.FlightModeChangeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightModeChangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void FlightModeChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlightModeChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.FlightModeChangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  flight_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightModeChangeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.action_server.FlightMode flight_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flight_mode(static_cast<::mavsdk::rpc::action_server::FlightMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightModeChangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.FlightModeChangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.action_server.FlightMode flight_mode = 2;
  if (this->_internal_flight_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_flight_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.FlightModeChangeResponse)
  return target;
}

size_t FlightModeChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.FlightModeChangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  // .mavsdk.rpc.action_server.FlightMode flight_mode = 2;
  if (this->_internal_flight_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flight_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightModeChangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlightModeChangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightModeChangeResponse::GetClassData() const { return &_class_data_; }

void FlightModeChangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlightModeChangeResponse *>(to)->MergeFrom(
      static_cast<const FlightModeChangeResponse &>(from));
}


void FlightModeChangeResponse::MergeFrom(const FlightModeChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.FlightModeChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  if (from._internal_flight_mode() != 0) {
    _internal_set_flight_mode(from._internal_flight_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightModeChangeResponse::CopyFrom(const FlightModeChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.FlightModeChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightModeChangeResponse::IsInitialized() const {
  return true;
}

void FlightModeChangeResponse::InternalSwap(FlightModeChangeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightModeChangeResponse, flight_mode_)
      + sizeof(FlightModeChangeResponse::flight_mode_)
      - PROTOBUF_FIELD_OFFSET(FlightModeChangeResponse, action_server_result_)>(
          reinterpret_cast<char*>(&action_server_result_),
          reinterpret_cast<char*>(&other->action_server_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightModeChangeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[13]);
}

// ===================================================================

class TakeoffResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const TakeoffResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
TakeoffResponse::_Internal::action_server_result(const TakeoffResponse* msg) {
  return *msg->action_server_result_;
}
TakeoffResponse::TakeoffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.TakeoffResponse)
}
TakeoffResponse::TakeoffResponse(const TakeoffResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  takeoff_ = from.takeoff_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.TakeoffResponse)
}

inline void TakeoffResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_server_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&takeoff_) -
    reinterpret_cast<char*>(&action_server_result_)) + sizeof(takeoff_));
}

TakeoffResponse::~TakeoffResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.TakeoffResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TakeoffResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void TakeoffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TakeoffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.TakeoffResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  takeoff_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TakeoffResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool takeoff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          takeoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TakeoffResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.TakeoffResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  // bool takeoff = 2;
  if (this->_internal_takeoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_takeoff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.TakeoffResponse)
  return target;
}

size_t TakeoffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.TakeoffResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  // bool takeoff = 2;
  if (this->_internal_takeoff() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TakeoffResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TakeoffResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TakeoffResponse::GetClassData() const { return &_class_data_; }

void TakeoffResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TakeoffResponse *>(to)->MergeFrom(
      static_cast<const TakeoffResponse &>(from));
}


void TakeoffResponse::MergeFrom(const TakeoffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.TakeoffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  if (from._internal_takeoff() != 0) {
    _internal_set_takeoff(from._internal_takeoff());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TakeoffResponse::CopyFrom(const TakeoffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.TakeoffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeoffResponse::IsInitialized() const {
  return true;
}

void TakeoffResponse::InternalSwap(TakeoffResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TakeoffResponse, takeoff_)
      + sizeof(TakeoffResponse::takeoff_)
      - PROTOBUF_FIELD_OFFSET(TakeoffResponse, action_server_result_)>(
          reinterpret_cast<char*>(&action_server_result_),
          reinterpret_cast<char*>(&other->action_server_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TakeoffResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[14]);
}

// ===================================================================

class LandResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const LandResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
LandResponse::_Internal::action_server_result(const LandResponse* msg) {
  return *msg->action_server_result_;
}
LandResponse::LandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.LandResponse)
}
LandResponse::LandResponse(const LandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  land_ = from.land_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.LandResponse)
}

inline void LandResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_server_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&land_) -
    reinterpret_cast<char*>(&action_server_result_)) + sizeof(land_));
}

LandResponse::~LandResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.LandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void LandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.LandResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  land_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool land = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          land_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LandResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.LandResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  // bool land = 2;
  if (this->_internal_land() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_land(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.LandResponse)
  return target;
}

size_t LandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.LandResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  // bool land = 2;
  if (this->_internal_land() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LandResponse::GetClassData() const { return &_class_data_; }

void LandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LandResponse *>(to)->MergeFrom(
      static_cast<const LandResponse &>(from));
}


void LandResponse::MergeFrom(const LandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.LandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  if (from._internal_land() != 0) {
    _internal_set_land(from._internal_land());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LandResponse::CopyFrom(const LandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.LandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandResponse::IsInitialized() const {
  return true;
}

void LandResponse::InternalSwap(LandResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LandResponse, land_)
      + sizeof(LandResponse::land_)
      - PROTOBUF_FIELD_OFFSET(LandResponse, action_server_result_)>(
          reinterpret_cast<char*>(&action_server_result_),
          reinterpret_cast<char*>(&other->action_server_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[15]);
}

// ===================================================================

class RebootResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const RebootResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
RebootResponse::_Internal::action_server_result(const RebootResponse* msg) {
  return *msg->action_server_result_;
}
RebootResponse::RebootResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.RebootResponse)
}
RebootResponse::RebootResponse(const RebootResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  reboot_ = from.reboot_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.RebootResponse)
}

inline void RebootResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_server_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reboot_) -
    reinterpret_cast<char*>(&action_server_result_)) + sizeof(reboot_));
}

RebootResponse::~RebootResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.RebootResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RebootResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void RebootResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RebootResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.RebootResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  reboot_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RebootResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reboot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          reboot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RebootResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.RebootResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  // bool reboot = 2;
  if (this->_internal_reboot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_reboot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.RebootResponse)
  return target;
}

size_t RebootResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.RebootResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  // bool reboot = 2;
  if (this->_internal_reboot() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RebootResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RebootResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RebootResponse::GetClassData() const { return &_class_data_; }

void RebootResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RebootResponse *>(to)->MergeFrom(
      static_cast<const RebootResponse &>(from));
}


void RebootResponse::MergeFrom(const RebootResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.RebootResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  if (from._internal_reboot() != 0) {
    _internal_set_reboot(from._internal_reboot());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RebootResponse::CopyFrom(const RebootResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.RebootResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebootResponse::IsInitialized() const {
  return true;
}

void RebootResponse::InternalSwap(RebootResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RebootResponse, reboot_)
      + sizeof(RebootResponse::reboot_)
      - PROTOBUF_FIELD_OFFSET(RebootResponse, action_server_result_)>(
          reinterpret_cast<char*>(&action_server_result_),
          reinterpret_cast<char*>(&other->action_server_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RebootResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[16]);
}

// ===================================================================

class ShutdownResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const ShutdownResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
ShutdownResponse::_Internal::action_server_result(const ShutdownResponse* msg) {
  return *msg->action_server_result_;
}
ShutdownResponse::ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.ShutdownResponse)
}
ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  shutdown_ = from.shutdown_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.ShutdownResponse)
}

inline void ShutdownResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_server_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shutdown_) -
    reinterpret_cast<char*>(&action_server_result_)) + sizeof(shutdown_));
}

ShutdownResponse::~ShutdownResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.ShutdownResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShutdownResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void ShutdownResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShutdownResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.ShutdownResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  shutdown_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool shutdown = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShutdownResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.ShutdownResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  // bool shutdown = 2;
  if (this->_internal_shutdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_shutdown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.ShutdownResponse)
  return target;
}

size_t ShutdownResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.ShutdownResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  // bool shutdown = 2;
  if (this->_internal_shutdown() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShutdownResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownResponse::GetClassData() const { return &_class_data_; }

void ShutdownResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShutdownResponse *>(to)->MergeFrom(
      static_cast<const ShutdownResponse &>(from));
}


void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.ShutdownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  if (from._internal_shutdown() != 0) {
    _internal_set_shutdown(from._internal_shutdown());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.ShutdownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {
  return true;
}

void ShutdownResponse::InternalSwap(ShutdownResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShutdownResponse, shutdown_)
      + sizeof(ShutdownResponse::shutdown_)
      - PROTOBUF_FIELD_OFFSET(ShutdownResponse, action_server_result_)>(
          reinterpret_cast<char*>(&action_server_result_),
          reinterpret_cast<char*>(&other->action_server_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[17]);
}

// ===================================================================

class TerminateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const TerminateResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
TerminateResponse::_Internal::action_server_result(const TerminateResponse* msg) {
  return *msg->action_server_result_;
}
TerminateResponse::TerminateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.TerminateResponse)
}
TerminateResponse::TerminateResponse(const TerminateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  terminate_ = from.terminate_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.TerminateResponse)
}

inline void TerminateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_server_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&terminate_) -
    reinterpret_cast<char*>(&action_server_result_)) + sizeof(terminate_));
}

TerminateResponse::~TerminateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.TerminateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void TerminateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TerminateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.TerminateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  terminate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool terminate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          terminate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.TerminateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  // bool terminate = 2;
  if (this->_internal_terminate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_terminate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.TerminateResponse)
  return target;
}

size_t TerminateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.TerminateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  // bool terminate = 2;
  if (this->_internal_terminate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TerminateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminateResponse::GetClassData() const { return &_class_data_; }

void TerminateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TerminateResponse *>(to)->MergeFrom(
      static_cast<const TerminateResponse &>(from));
}


void TerminateResponse::MergeFrom(const TerminateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.TerminateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  if (from._internal_terminate() != 0) {
    _internal_set_terminate(from._internal_terminate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminateResponse::CopyFrom(const TerminateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.TerminateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateResponse::IsInitialized() const {
  return true;
}

void TerminateResponse::InternalSwap(TerminateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TerminateResponse, terminate_)
      + sizeof(TerminateResponse::terminate_)
      - PROTOBUF_FIELD_OFFSET(TerminateResponse, action_server_result_)>(
          reinterpret_cast<char*>(&action_server_result_),
          reinterpret_cast<char*>(&other->action_server_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[18]);
}

// ===================================================================

class SetArmableResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const SetArmableResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
SetArmableResponse::_Internal::action_server_result(const SetArmableResponse* msg) {
  return *msg->action_server_result_;
}
SetArmableResponse::SetArmableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SetArmableResponse)
}
SetArmableResponse::SetArmableResponse(const SetArmableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SetArmableResponse)
}

inline void SetArmableResponse::SharedCtor() {
action_server_result_ = nullptr;
}

SetArmableResponse::~SetArmableResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.SetArmableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetArmableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void SetArmableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetArmableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.SetArmableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetArmableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetArmableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.SetArmableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.SetArmableResponse)
  return target;
}

size_t SetArmableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.SetArmableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetArmableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetArmableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetArmableResponse::GetClassData() const { return &_class_data_; }

void SetArmableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetArmableResponse *>(to)->MergeFrom(
      static_cast<const SetArmableResponse &>(from));
}


void SetArmableResponse::MergeFrom(const SetArmableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.SetArmableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetArmableResponse::CopyFrom(const SetArmableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.SetArmableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetArmableResponse::IsInitialized() const {
  return true;
}

void SetArmableResponse::InternalSwap(SetArmableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_server_result_, other->action_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetArmableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[19]);
}

// ===================================================================

class SetDisarmableResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const SetDisarmableResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
SetDisarmableResponse::_Internal::action_server_result(const SetDisarmableResponse* msg) {
  return *msg->action_server_result_;
}
SetDisarmableResponse::SetDisarmableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SetDisarmableResponse)
}
SetDisarmableResponse::SetDisarmableResponse(const SetDisarmableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SetDisarmableResponse)
}

inline void SetDisarmableResponse::SharedCtor() {
action_server_result_ = nullptr;
}

SetDisarmableResponse::~SetDisarmableResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.SetDisarmableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetDisarmableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void SetDisarmableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDisarmableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.SetDisarmableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDisarmableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetDisarmableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.SetDisarmableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.SetDisarmableResponse)
  return target;
}

size_t SetDisarmableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.SetDisarmableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetDisarmableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetDisarmableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetDisarmableResponse::GetClassData() const { return &_class_data_; }

void SetDisarmableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetDisarmableResponse *>(to)->MergeFrom(
      static_cast<const SetDisarmableResponse &>(from));
}


void SetDisarmableResponse::MergeFrom(const SetDisarmableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.SetDisarmableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetDisarmableResponse::CopyFrom(const SetDisarmableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.SetDisarmableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDisarmableResponse::IsInitialized() const {
  return true;
}

void SetDisarmableResponse::InternalSwap(SetDisarmableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_server_result_, other->action_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDisarmableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[20]);
}

// ===================================================================

class SetAllowableFlightModesResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const SetAllowableFlightModesResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
SetAllowableFlightModesResponse::_Internal::action_server_result(const SetAllowableFlightModesResponse* msg) {
  return *msg->action_server_result_;
}
SetAllowableFlightModesResponse::SetAllowableFlightModesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
}
SetAllowableFlightModesResponse::SetAllowableFlightModesResponse(const SetAllowableFlightModesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
}

inline void SetAllowableFlightModesResponse::SharedCtor() {
action_server_result_ = nullptr;
}

SetAllowableFlightModesResponse::~SetAllowableFlightModesResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAllowableFlightModesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void SetAllowableFlightModesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAllowableFlightModesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAllowableFlightModesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAllowableFlightModesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
  return target;
}

size_t SetAllowableFlightModesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAllowableFlightModesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAllowableFlightModesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAllowableFlightModesResponse::GetClassData() const { return &_class_data_; }

void SetAllowableFlightModesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAllowableFlightModesResponse *>(to)->MergeFrom(
      static_cast<const SetAllowableFlightModesResponse &>(from));
}


void SetAllowableFlightModesResponse::MergeFrom(const SetAllowableFlightModesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAllowableFlightModesResponse::CopyFrom(const SetAllowableFlightModesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAllowableFlightModesResponse::IsInitialized() const {
  return true;
}

void SetAllowableFlightModesResponse::InternalSwap(SetAllowableFlightModesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_server_result_, other->action_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAllowableFlightModesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[21]);
}

// ===================================================================

class SetAllowTakeoffResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result(const SetAllowTakeoffResponse* msg);
};

const ::mavsdk::rpc::action_server::ActionServerResult&
SetAllowTakeoffResponse::_Internal::action_server_result(const SetAllowTakeoffResponse* msg) {
  return *msg->action_server_result_;
}
SetAllowTakeoffResponse::SetAllowTakeoffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
}
SetAllowTakeoffResponse::SetAllowTakeoffResponse(const SetAllowTakeoffResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_server_result()) {
    action_server_result_ = new ::mavsdk::rpc::action_server::ActionServerResult(*from.action_server_result_);
  } else {
    action_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
}

inline void SetAllowTakeoffResponse::SharedCtor() {
action_server_result_ = nullptr;
}

SetAllowTakeoffResponse::~SetAllowTakeoffResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAllowTakeoffResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_server_result_;
}

void SetAllowTakeoffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAllowTakeoffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_server_result_ != nullptr) {
    delete action_server_result_;
  }
  action_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAllowTakeoffResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAllowTakeoffResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_server_result(this),
        _Internal::action_server_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
  return target;
}

size_t SetAllowTakeoffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
  if (this->_internal_has_action_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_server_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAllowTakeoffResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAllowTakeoffResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAllowTakeoffResponse::GetClassData() const { return &_class_data_; }

void SetAllowTakeoffResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAllowTakeoffResponse *>(to)->MergeFrom(
      static_cast<const SetAllowTakeoffResponse &>(from));
}


void SetAllowTakeoffResponse::MergeFrom(const SetAllowTakeoffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_server_result()) {
    _internal_mutable_action_server_result()->::mavsdk::rpc::action_server::ActionServerResult::MergeFrom(from._internal_action_server_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAllowTakeoffResponse::CopyFrom(const SetAllowTakeoffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAllowTakeoffResponse::IsInitialized() const {
  return true;
}

void SetAllowTakeoffResponse::InternalSwap(SetAllowTakeoffResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_server_result_, other->action_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAllowTakeoffResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[22]);
}

// ===================================================================

class GetAllowableFlightModesResponse::_Internal {
 public:
  static const ::mavsdk::rpc::action_server::AllowableFlightModes& flight_modes(const GetAllowableFlightModesResponse* msg);
};

const ::mavsdk::rpc::action_server::AllowableFlightModes&
GetAllowableFlightModesResponse::_Internal::flight_modes(const GetAllowableFlightModesResponse* msg) {
  return *msg->flight_modes_;
}
GetAllowableFlightModesResponse::GetAllowableFlightModesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
}
GetAllowableFlightModesResponse::GetAllowableFlightModesResponse(const GetAllowableFlightModesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flight_modes()) {
    flight_modes_ = new ::mavsdk::rpc::action_server::AllowableFlightModes(*from.flight_modes_);
  } else {
    flight_modes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
}

inline void GetAllowableFlightModesResponse::SharedCtor() {
flight_modes_ = nullptr;
}

GetAllowableFlightModesResponse::~GetAllowableFlightModesResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAllowableFlightModesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete flight_modes_;
}

void GetAllowableFlightModesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAllowableFlightModesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && flight_modes_ != nullptr) {
    delete flight_modes_;
  }
  flight_modes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAllowableFlightModesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flight_modes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAllowableFlightModesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
  if (this->_internal_has_flight_modes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::flight_modes(this),
        _Internal::flight_modes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
  return target;
}

size_t GetAllowableFlightModesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
  if (this->_internal_has_flight_modes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flight_modes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAllowableFlightModesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAllowableFlightModesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAllowableFlightModesResponse::GetClassData() const { return &_class_data_; }

void GetAllowableFlightModesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAllowableFlightModesResponse *>(to)->MergeFrom(
      static_cast<const GetAllowableFlightModesResponse &>(from));
}


void GetAllowableFlightModesResponse::MergeFrom(const GetAllowableFlightModesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flight_modes()) {
    _internal_mutable_flight_modes()->::mavsdk::rpc::action_server::AllowableFlightModes::MergeFrom(from._internal_flight_modes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAllowableFlightModesResponse::CopyFrom(const GetAllowableFlightModesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllowableFlightModesResponse::IsInitialized() const {
  return true;
}

void GetAllowableFlightModesResponse::InternalSwap(GetAllowableFlightModesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(flight_modes_, other->flight_modes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllowableFlightModesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[23]);
}

// ===================================================================

class AllowableFlightModes::_Internal {
 public:
};

AllowableFlightModes::AllowableFlightModes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.AllowableFlightModes)
}
AllowableFlightModes::AllowableFlightModes(const AllowableFlightModes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&can_auto_mode_, &from.can_auto_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_stabilize_mode_) -
    reinterpret_cast<char*>(&can_auto_mode_)) + sizeof(can_stabilize_mode_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.AllowableFlightModes)
}

inline void AllowableFlightModes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&can_auto_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_stabilize_mode_) -
    reinterpret_cast<char*>(&can_auto_mode_)) + sizeof(can_stabilize_mode_));
}

AllowableFlightModes::~AllowableFlightModes() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.AllowableFlightModes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowableFlightModes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllowableFlightModes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllowableFlightModes::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.AllowableFlightModes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&can_auto_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_stabilize_mode_) -
      reinterpret_cast<char*>(&can_auto_mode_)) + sizeof(can_stabilize_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowableFlightModes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool can_auto_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          can_auto_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_guided_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          can_guided_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_stabilize_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          can_stabilize_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllowableFlightModes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.AllowableFlightModes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_auto_mode = 1;
  if (this->_internal_can_auto_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_can_auto_mode(), target);
  }

  // bool can_guided_mode = 2;
  if (this->_internal_can_guided_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_guided_mode(), target);
  }

  // bool can_stabilize_mode = 3;
  if (this->_internal_can_stabilize_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_can_stabilize_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.AllowableFlightModes)
  return target;
}

size_t AllowableFlightModes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.AllowableFlightModes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool can_auto_mode = 1;
  if (this->_internal_can_auto_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool can_guided_mode = 2;
  if (this->_internal_can_guided_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool can_stabilize_mode = 3;
  if (this->_internal_can_stabilize_mode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowableFlightModes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllowableFlightModes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowableFlightModes::GetClassData() const { return &_class_data_; }

void AllowableFlightModes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AllowableFlightModes *>(to)->MergeFrom(
      static_cast<const AllowableFlightModes &>(from));
}


void AllowableFlightModes::MergeFrom(const AllowableFlightModes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.AllowableFlightModes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_can_auto_mode() != 0) {
    _internal_set_can_auto_mode(from._internal_can_auto_mode());
  }
  if (from._internal_can_guided_mode() != 0) {
    _internal_set_can_guided_mode(from._internal_can_guided_mode());
  }
  if (from._internal_can_stabilize_mode() != 0) {
    _internal_set_can_stabilize_mode(from._internal_can_stabilize_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowableFlightModes::CopyFrom(const AllowableFlightModes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.AllowableFlightModes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowableFlightModes::IsInitialized() const {
  return true;
}

void AllowableFlightModes::InternalSwap(AllowableFlightModes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllowableFlightModes, can_stabilize_mode_)
      + sizeof(AllowableFlightModes::can_stabilize_mode_)
      - PROTOBUF_FIELD_OFFSET(AllowableFlightModes, can_auto_mode_)>(
          reinterpret_cast<char*>(&can_auto_mode_),
          reinterpret_cast<char*>(&other->can_auto_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowableFlightModes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[24]);
}

// ===================================================================

class ArmDisarm::_Internal {
 public:
};

ArmDisarm::ArmDisarm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.ArmDisarm)
}
ArmDisarm::ArmDisarm(const ArmDisarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&arm_, &from.arm_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&arm_)) + sizeof(force_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.ArmDisarm)
}

inline void ArmDisarm::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&arm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&arm_)) + sizeof(force_));
}

ArmDisarm::~ArmDisarm() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.ArmDisarm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArmDisarm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ArmDisarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArmDisarm::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.ArmDisarm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&arm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&arm_)) + sizeof(force_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArmDisarm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool arm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          arm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArmDisarm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.ArmDisarm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool arm = 1;
  if (this->_internal_arm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_arm(), target);
  }

  // bool force = 2;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.ArmDisarm)
  return target;
}

size_t ArmDisarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.ArmDisarm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool arm = 1;
  if (this->_internal_arm() != 0) {
    total_size += 1 + 1;
  }

  // bool force = 2;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArmDisarm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArmDisarm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArmDisarm::GetClassData() const { return &_class_data_; }

void ArmDisarm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ArmDisarm *>(to)->MergeFrom(
      static_cast<const ArmDisarm &>(from));
}


void ArmDisarm::MergeFrom(const ArmDisarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.ArmDisarm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_arm() != 0) {
    _internal_set_arm(from._internal_arm());
  }
  if (from._internal_force() != 0) {
    _internal_set_force(from._internal_force());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArmDisarm::CopyFrom(const ArmDisarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.ArmDisarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmDisarm::IsInitialized() const {
  return true;
}

void ArmDisarm::InternalSwap(ArmDisarm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArmDisarm, force_)
      + sizeof(ArmDisarm::force_)
      - PROTOBUF_FIELD_OFFSET(ArmDisarm, arm_)>(
          reinterpret_cast<char*>(&arm_),
          reinterpret_cast<char*>(&other->arm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArmDisarm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[25]);
}

// ===================================================================

class ActionServerResult::_Internal {
 public:
};

ActionServerResult::ActionServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.action_server.ActionServerResult)
}
ActionServerResult::ActionServerResult(const ActionServerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    result_str_.Set(from._internal_result_str(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.action_server.ActionServerResult)
}

inline void ActionServerResult::SharedCtor() {
result_str_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_str_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = 0;
}

ActionServerResult::~ActionServerResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.action_server.ActionServerResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionServerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_str_.Destroy();
}

void ActionServerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionServerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.action_server.ActionServerResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionServerResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.action_server.ActionServerResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::action_server::ActionServerResult_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.action_server.ActionServerResult.result_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionServerResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.action_server.ActionServerResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.action_server.ActionServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.action_server.ActionServerResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.action_server.ActionServerResult)
  return target;
}

size_t ActionServerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.action_server.ActionServerResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.action_server.ActionServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionServerResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionServerResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionServerResult::GetClassData() const { return &_class_data_; }

void ActionServerResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionServerResult *>(to)->MergeFrom(
      static_cast<const ActionServerResult &>(from));
}


void ActionServerResult::MergeFrom(const ActionServerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.action_server.ActionServerResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionServerResult::CopyFrom(const ActionServerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.action_server.ActionServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionServerResult::IsInitialized() const {
  return true;
}

void ActionServerResult::InternalSwap(ActionServerResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &result_str_, lhs_arena,
      &other->result_str_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionServerResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_action_5fserver_2faction_5fserver_2eproto_getter, &descriptor_table_action_5fserver_2faction_5fserver_2eproto_once,
      file_level_metadata_action_5fserver_2faction_5fserver_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace action_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SetAllowTakeoffRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SetAllowTakeoffRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SetAllowTakeoffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SetArmableRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SetArmableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SetArmableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SetDisarmableRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SetDisarmableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SetDisarmableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SubscribeTakeoffRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SubscribeTakeoffRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SubscribeTakeoffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SubscribeLandRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SubscribeLandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SubscribeLandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SubscribeRebootRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SubscribeRebootRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SubscribeRebootRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SubscribeShutdownRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SubscribeShutdownRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SubscribeShutdownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SubscribeTerminateRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SubscribeTerminateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SubscribeTerminateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::ArmDisarmResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::ArmDisarmResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::ArmDisarmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::FlightModeChangeResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::FlightModeChangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::FlightModeChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::TakeoffResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::TakeoffResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::TakeoffResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::LandResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::LandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::LandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::RebootResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::RebootResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::RebootResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::ShutdownResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::ShutdownResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::ShutdownResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::TerminateResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::TerminateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::TerminateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SetArmableResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SetArmableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SetArmableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SetDisarmableResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SetDisarmableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SetDisarmableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::SetAllowTakeoffResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::AllowableFlightModes*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::AllowableFlightModes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::AllowableFlightModes >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::ArmDisarm*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::ArmDisarm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::ArmDisarm >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::action_server::ActionServerResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::action_server::ActionServerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::action_server::ActionServerResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
