// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration/calibration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_calibration_2fcalibration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_calibration_2fcalibration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_calibration_2fcalibration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_calibration_2fcalibration_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_calibration_2fcalibration_2eproto;
namespace mavsdk {
namespace rpc {
namespace calibration {
class CalibrateAccelerometerResponse;
struct CalibrateAccelerometerResponseDefaultTypeInternal;
extern CalibrateAccelerometerResponseDefaultTypeInternal _CalibrateAccelerometerResponse_default_instance_;
class CalibrateGimbalAccelerometerResponse;
struct CalibrateGimbalAccelerometerResponseDefaultTypeInternal;
extern CalibrateGimbalAccelerometerResponseDefaultTypeInternal _CalibrateGimbalAccelerometerResponse_default_instance_;
class CalibrateGyroResponse;
struct CalibrateGyroResponseDefaultTypeInternal;
extern CalibrateGyroResponseDefaultTypeInternal _CalibrateGyroResponse_default_instance_;
class CalibrateLevelHorizonResponse;
struct CalibrateLevelHorizonResponseDefaultTypeInternal;
extern CalibrateLevelHorizonResponseDefaultTypeInternal _CalibrateLevelHorizonResponse_default_instance_;
class CalibrateMagnetometerResponse;
struct CalibrateMagnetometerResponseDefaultTypeInternal;
extern CalibrateMagnetometerResponseDefaultTypeInternal _CalibrateMagnetometerResponse_default_instance_;
class CalibrationResult;
struct CalibrationResultDefaultTypeInternal;
extern CalibrationResultDefaultTypeInternal _CalibrationResult_default_instance_;
class CancelRequest;
struct CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
struct CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class ProgressData;
struct ProgressDataDefaultTypeInternal;
extern ProgressDataDefaultTypeInternal _ProgressData_default_instance_;
class SubscribeCalibrateAccelerometerRequest;
struct SubscribeCalibrateAccelerometerRequestDefaultTypeInternal;
extern SubscribeCalibrateAccelerometerRequestDefaultTypeInternal _SubscribeCalibrateAccelerometerRequest_default_instance_;
class SubscribeCalibrateGimbalAccelerometerRequest;
struct SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal;
extern SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal _SubscribeCalibrateGimbalAccelerometerRequest_default_instance_;
class SubscribeCalibrateGyroRequest;
struct SubscribeCalibrateGyroRequestDefaultTypeInternal;
extern SubscribeCalibrateGyroRequestDefaultTypeInternal _SubscribeCalibrateGyroRequest_default_instance_;
class SubscribeCalibrateLevelHorizonRequest;
struct SubscribeCalibrateLevelHorizonRequestDefaultTypeInternal;
extern SubscribeCalibrateLevelHorizonRequestDefaultTypeInternal _SubscribeCalibrateLevelHorizonRequest_default_instance_;
class SubscribeCalibrateMagnetometerRequest;
struct SubscribeCalibrateMagnetometerRequestDefaultTypeInternal;
extern SubscribeCalibrateMagnetometerRequestDefaultTypeInternal _SubscribeCalibrateMagnetometerRequest_default_instance_;
}  // namespace calibration
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::calibration::CalibrateAccelerometerResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrateAccelerometerResponse>(Arena*);
template<> ::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse>(Arena*);
template<> ::mavsdk::rpc::calibration::CalibrateGyroResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrateGyroResponse>(Arena*);
template<> ::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse>(Arena*);
template<> ::mavsdk::rpc::calibration::CalibrateMagnetometerResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrateMagnetometerResponse>(Arena*);
template<> ::mavsdk::rpc::calibration::CalibrationResult* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrationResult>(Arena*);
template<> ::mavsdk::rpc::calibration::CancelRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::CancelRequest>(Arena*);
template<> ::mavsdk::rpc::calibration::CancelResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::CancelResponse>(Arena*);
template<> ::mavsdk::rpc::calibration::ProgressData* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::ProgressData>(Arena*);
template<> ::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest>(Arena*);
template<> ::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest>(Arena*);
template<> ::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest>(Arena*);
template<> ::mavsdk::rpc::calibration::SubscribeCalibrateLevelHorizonRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::SubscribeCalibrateLevelHorizonRequest>(Arena*);
template<> ::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace calibration {

enum CalibrationResult_Result : int {
  CalibrationResult_Result_RESULT_UNKNOWN = 0,
  CalibrationResult_Result_RESULT_SUCCESS = 1,
  CalibrationResult_Result_RESULT_NEXT = 2,
  CalibrationResult_Result_RESULT_FAILED = 3,
  CalibrationResult_Result_RESULT_NO_SYSTEM = 4,
  CalibrationResult_Result_RESULT_CONNECTION_ERROR = 5,
  CalibrationResult_Result_RESULT_BUSY = 6,
  CalibrationResult_Result_RESULT_COMMAND_DENIED = 7,
  CalibrationResult_Result_RESULT_TIMEOUT = 8,
  CalibrationResult_Result_RESULT_CANCELLED = 9,
  CalibrationResult_Result_RESULT_FAILED_ARMED = 10,
  CalibrationResult_Result_RESULT_UNSUPPORTED = 11,
  CalibrationResult_Result_CalibrationResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CalibrationResult_Result_CalibrationResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CalibrationResult_Result_IsValid(int value);
constexpr CalibrationResult_Result CalibrationResult_Result_Result_MIN = CalibrationResult_Result_RESULT_UNKNOWN;
constexpr CalibrationResult_Result CalibrationResult_Result_Result_MAX = CalibrationResult_Result_RESULT_UNSUPPORTED;
constexpr int CalibrationResult_Result_Result_ARRAYSIZE = CalibrationResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibrationResult_Result_descriptor();
template<typename T>
inline const std::string& CalibrationResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalibrationResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalibrationResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalibrationResult_Result_descriptor(), enum_t_value);
}
inline bool CalibrationResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CalibrationResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalibrationResult_Result>(
    CalibrationResult_Result_descriptor(), name, value);
}
// ===================================================================

class SubscribeCalibrateGyroRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest) */ {
 public:
  inline SubscribeCalibrateGyroRequest() : SubscribeCalibrateGyroRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateGyroRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCalibrateGyroRequest(const SubscribeCalibrateGyroRequest& from);
  SubscribeCalibrateGyroRequest(SubscribeCalibrateGyroRequest&& from) noexcept
    : SubscribeCalibrateGyroRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCalibrateGyroRequest& operator=(const SubscribeCalibrateGyroRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateGyroRequest& operator=(SubscribeCalibrateGyroRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateGyroRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateGyroRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateGyroRequest*>(
               &_SubscribeCalibrateGyroRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeCalibrateGyroRequest& a, SubscribeCalibrateGyroRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCalibrateGyroRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateGyroRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateGyroRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCalibrateGyroRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateGyroRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateGyroRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest";
  }
  protected:
  explicit SubscribeCalibrateGyroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateGyroResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateGyroResponse) */ {
 public:
  inline CalibrateGyroResponse() : CalibrateGyroResponse(nullptr) {}
  ~CalibrateGyroResponse() override;
  explicit PROTOBUF_CONSTEXPR CalibrateGyroResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalibrateGyroResponse(const CalibrateGyroResponse& from);
  CalibrateGyroResponse(CalibrateGyroResponse&& from) noexcept
    : CalibrateGyroResponse() {
    *this = ::std::move(from);
  }

  inline CalibrateGyroResponse& operator=(const CalibrateGyroResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateGyroResponse& operator=(CalibrateGyroResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateGyroResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateGyroResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateGyroResponse*>(
               &_CalibrateGyroResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CalibrateGyroResponse& a, CalibrateGyroResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrateGyroResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateGyroResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateGyroResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrateGyroResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalibrateGyroResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalibrateGyroResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrateGyroResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.CalibrateGyroResponse";
  }
  protected:
  explicit CalibrateGyroResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  private:
  bool _internal_has_calibration_result() const;
  public:
  void clear_calibration_result();
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();
  public:
  void unsafe_arena_set_allocated_calibration_result(
      ::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  private:
  bool _internal_has_progress_data() const;
  public:
  void clear_progress_data();
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data);
  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();
  public:
  void unsafe_arena_set_allocated_progress_data(
      ::mavsdk::rpc::calibration::ProgressData* progress_data);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateGyroResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
  ::mavsdk::rpc::calibration::ProgressData* progress_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCalibrateAccelerometerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest) */ {
 public:
  inline SubscribeCalibrateAccelerometerRequest() : SubscribeCalibrateAccelerometerRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateAccelerometerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCalibrateAccelerometerRequest(const SubscribeCalibrateAccelerometerRequest& from);
  SubscribeCalibrateAccelerometerRequest(SubscribeCalibrateAccelerometerRequest&& from) noexcept
    : SubscribeCalibrateAccelerometerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCalibrateAccelerometerRequest& operator=(const SubscribeCalibrateAccelerometerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateAccelerometerRequest& operator=(SubscribeCalibrateAccelerometerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateAccelerometerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateAccelerometerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateAccelerometerRequest*>(
               &_SubscribeCalibrateAccelerometerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeCalibrateAccelerometerRequest& a, SubscribeCalibrateAccelerometerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCalibrateAccelerometerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateAccelerometerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateAccelerometerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCalibrateAccelerometerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateAccelerometerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateAccelerometerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest";
  }
  protected:
  explicit SubscribeCalibrateAccelerometerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateAccelerometerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateAccelerometerResponse) */ {
 public:
  inline CalibrateAccelerometerResponse() : CalibrateAccelerometerResponse(nullptr) {}
  ~CalibrateAccelerometerResponse() override;
  explicit PROTOBUF_CONSTEXPR CalibrateAccelerometerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalibrateAccelerometerResponse(const CalibrateAccelerometerResponse& from);
  CalibrateAccelerometerResponse(CalibrateAccelerometerResponse&& from) noexcept
    : CalibrateAccelerometerResponse() {
    *this = ::std::move(from);
  }

  inline CalibrateAccelerometerResponse& operator=(const CalibrateAccelerometerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateAccelerometerResponse& operator=(CalibrateAccelerometerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateAccelerometerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateAccelerometerResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateAccelerometerResponse*>(
               &_CalibrateAccelerometerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CalibrateAccelerometerResponse& a, CalibrateAccelerometerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrateAccelerometerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateAccelerometerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateAccelerometerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrateAccelerometerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalibrateAccelerometerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalibrateAccelerometerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrateAccelerometerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.CalibrateAccelerometerResponse";
  }
  protected:
  explicit CalibrateAccelerometerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  private:
  bool _internal_has_calibration_result() const;
  public:
  void clear_calibration_result();
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();
  public:
  void unsafe_arena_set_allocated_calibration_result(
      ::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  private:
  bool _internal_has_progress_data() const;
  public:
  void clear_progress_data();
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data);
  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();
  public:
  void unsafe_arena_set_allocated_progress_data(
      ::mavsdk::rpc::calibration::ProgressData* progress_data);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
  ::mavsdk::rpc::calibration::ProgressData* progress_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCalibrateMagnetometerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest) */ {
 public:
  inline SubscribeCalibrateMagnetometerRequest() : SubscribeCalibrateMagnetometerRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateMagnetometerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCalibrateMagnetometerRequest(const SubscribeCalibrateMagnetometerRequest& from);
  SubscribeCalibrateMagnetometerRequest(SubscribeCalibrateMagnetometerRequest&& from) noexcept
    : SubscribeCalibrateMagnetometerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCalibrateMagnetometerRequest& operator=(const SubscribeCalibrateMagnetometerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateMagnetometerRequest& operator=(SubscribeCalibrateMagnetometerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateMagnetometerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateMagnetometerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateMagnetometerRequest*>(
               &_SubscribeCalibrateMagnetometerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeCalibrateMagnetometerRequest& a, SubscribeCalibrateMagnetometerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCalibrateMagnetometerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateMagnetometerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateMagnetometerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCalibrateMagnetometerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateMagnetometerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateMagnetometerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest";
  }
  protected:
  explicit SubscribeCalibrateMagnetometerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateMagnetometerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateMagnetometerResponse) */ {
 public:
  inline CalibrateMagnetometerResponse() : CalibrateMagnetometerResponse(nullptr) {}
  ~CalibrateMagnetometerResponse() override;
  explicit PROTOBUF_CONSTEXPR CalibrateMagnetometerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalibrateMagnetometerResponse(const CalibrateMagnetometerResponse& from);
  CalibrateMagnetometerResponse(CalibrateMagnetometerResponse&& from) noexcept
    : CalibrateMagnetometerResponse() {
    *this = ::std::move(from);
  }

  inline CalibrateMagnetometerResponse& operator=(const CalibrateMagnetometerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateMagnetometerResponse& operator=(CalibrateMagnetometerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateMagnetometerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateMagnetometerResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateMagnetometerResponse*>(
               &_CalibrateMagnetometerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CalibrateMagnetometerResponse& a, CalibrateMagnetometerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrateMagnetometerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateMagnetometerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateMagnetometerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrateMagnetometerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalibrateMagnetometerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalibrateMagnetometerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrateMagnetometerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.CalibrateMagnetometerResponse";
  }
  protected:
  explicit CalibrateMagnetometerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  private:
  bool _internal_has_calibration_result() const;
  public:
  void clear_calibration_result();
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();
  public:
  void unsafe_arena_set_allocated_calibration_result(
      ::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  private:
  bool _internal_has_progress_data() const;
  public:
  void clear_progress_data();
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data);
  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();
  public:
  void unsafe_arena_set_allocated_progress_data(
      ::mavsdk::rpc::calibration::ProgressData* progress_data);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
  ::mavsdk::rpc::calibration::ProgressData* progress_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCalibrateLevelHorizonRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest) */ {
 public:
  inline SubscribeCalibrateLevelHorizonRequest() : SubscribeCalibrateLevelHorizonRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateLevelHorizonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCalibrateLevelHorizonRequest(const SubscribeCalibrateLevelHorizonRequest& from);
  SubscribeCalibrateLevelHorizonRequest(SubscribeCalibrateLevelHorizonRequest&& from) noexcept
    : SubscribeCalibrateLevelHorizonRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCalibrateLevelHorizonRequest& operator=(const SubscribeCalibrateLevelHorizonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateLevelHorizonRequest& operator=(SubscribeCalibrateLevelHorizonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateLevelHorizonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateLevelHorizonRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateLevelHorizonRequest*>(
               &_SubscribeCalibrateLevelHorizonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeCalibrateLevelHorizonRequest& a, SubscribeCalibrateLevelHorizonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCalibrateLevelHorizonRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateLevelHorizonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateLevelHorizonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCalibrateLevelHorizonRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateLevelHorizonRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateLevelHorizonRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest";
  }
  protected:
  explicit SubscribeCalibrateLevelHorizonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateLevelHorizonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse) */ {
 public:
  inline CalibrateLevelHorizonResponse() : CalibrateLevelHorizonResponse(nullptr) {}
  ~CalibrateLevelHorizonResponse() override;
  explicit PROTOBUF_CONSTEXPR CalibrateLevelHorizonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalibrateLevelHorizonResponse(const CalibrateLevelHorizonResponse& from);
  CalibrateLevelHorizonResponse(CalibrateLevelHorizonResponse&& from) noexcept
    : CalibrateLevelHorizonResponse() {
    *this = ::std::move(from);
  }

  inline CalibrateLevelHorizonResponse& operator=(const CalibrateLevelHorizonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateLevelHorizonResponse& operator=(CalibrateLevelHorizonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateLevelHorizonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateLevelHorizonResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateLevelHorizonResponse*>(
               &_CalibrateLevelHorizonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CalibrateLevelHorizonResponse& a, CalibrateLevelHorizonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrateLevelHorizonResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateLevelHorizonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateLevelHorizonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrateLevelHorizonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalibrateLevelHorizonResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalibrateLevelHorizonResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrateLevelHorizonResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.CalibrateLevelHorizonResponse";
  }
  protected:
  explicit CalibrateLevelHorizonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  private:
  bool _internal_has_calibration_result() const;
  public:
  void clear_calibration_result();
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();
  public:
  void unsafe_arena_set_allocated_calibration_result(
      ::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  private:
  bool _internal_has_progress_data() const;
  public:
  void clear_progress_data();
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data);
  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();
  public:
  void unsafe_arena_set_allocated_progress_data(
      ::mavsdk::rpc::calibration::ProgressData* progress_data);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
  ::mavsdk::rpc::calibration::ProgressData* progress_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCalibrateGimbalAccelerometerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest) */ {
 public:
  inline SubscribeCalibrateGimbalAccelerometerRequest() : SubscribeCalibrateGimbalAccelerometerRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateGimbalAccelerometerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCalibrateGimbalAccelerometerRequest(const SubscribeCalibrateGimbalAccelerometerRequest& from);
  SubscribeCalibrateGimbalAccelerometerRequest(SubscribeCalibrateGimbalAccelerometerRequest&& from) noexcept
    : SubscribeCalibrateGimbalAccelerometerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCalibrateGimbalAccelerometerRequest& operator=(const SubscribeCalibrateGimbalAccelerometerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateGimbalAccelerometerRequest& operator=(SubscribeCalibrateGimbalAccelerometerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateGimbalAccelerometerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateGimbalAccelerometerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateGimbalAccelerometerRequest*>(
               &_SubscribeCalibrateGimbalAccelerometerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubscribeCalibrateGimbalAccelerometerRequest& a, SubscribeCalibrateGimbalAccelerometerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCalibrateGimbalAccelerometerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateGimbalAccelerometerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateGimbalAccelerometerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCalibrateGimbalAccelerometerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateGimbalAccelerometerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateGimbalAccelerometerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest";
  }
  protected:
  explicit SubscribeCalibrateGimbalAccelerometerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateGimbalAccelerometerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse) */ {
 public:
  inline CalibrateGimbalAccelerometerResponse() : CalibrateGimbalAccelerometerResponse(nullptr) {}
  ~CalibrateGimbalAccelerometerResponse() override;
  explicit PROTOBUF_CONSTEXPR CalibrateGimbalAccelerometerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalibrateGimbalAccelerometerResponse(const CalibrateGimbalAccelerometerResponse& from);
  CalibrateGimbalAccelerometerResponse(CalibrateGimbalAccelerometerResponse&& from) noexcept
    : CalibrateGimbalAccelerometerResponse() {
    *this = ::std::move(from);
  }

  inline CalibrateGimbalAccelerometerResponse& operator=(const CalibrateGimbalAccelerometerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateGimbalAccelerometerResponse& operator=(CalibrateGimbalAccelerometerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateGimbalAccelerometerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateGimbalAccelerometerResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateGimbalAccelerometerResponse*>(
               &_CalibrateGimbalAccelerometerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CalibrateGimbalAccelerometerResponse& a, CalibrateGimbalAccelerometerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrateGimbalAccelerometerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateGimbalAccelerometerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateGimbalAccelerometerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrateGimbalAccelerometerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalibrateGimbalAccelerometerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalibrateGimbalAccelerometerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrateGimbalAccelerometerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse";
  }
  protected:
  explicit CalibrateGimbalAccelerometerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  private:
  bool _internal_has_calibration_result() const;
  public:
  void clear_calibration_result();
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();
  public:
  void unsafe_arena_set_allocated_calibration_result(
      ::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  private:
  bool _internal_has_progress_data() const;
  public:
  void clear_progress_data();
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data);
  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();
  public:
  void unsafe_arena_set_allocated_progress_data(
      ::mavsdk::rpc::calibration::ProgressData* progress_data);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
  ::mavsdk::rpc::calibration::ProgressData* progress_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CancelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelRequest(const CancelRequest& from);
  CancelRequest(CancelRequest&& from) noexcept
    : CancelRequest() {
    *this = ::std::move(from);
  }

  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
               &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CancelRequest& a, CancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.CancelRequest";
  }
  protected:
  explicit CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CancelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CancelResponse) */ {
 public:
  inline CancelResponse() : CancelResponse(nullptr) {}
  ~CancelResponse() override;
  explicit PROTOBUF_CONSTEXPR CancelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelResponse(const CancelResponse& from);
  CancelResponse(CancelResponse&& from) noexcept
    : CancelResponse() {
    *this = ::std::move(from);
  }

  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
               &_CancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CancelResponse& a, CancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.CancelResponse";
  }
  protected:
  explicit CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibrationResultFieldNumber = 1,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  private:
  bool _internal_has_calibration_result() const;
  public:
  void clear_calibration_result();
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();
  public:
  void unsafe_arena_set_allocated_calibration_result(
      ::mavsdk::rpc::calibration::CalibrationResult* calibration_result);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrationResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrationResult) */ {
 public:
  inline CalibrationResult() : CalibrationResult(nullptr) {}
  ~CalibrationResult() override;
  explicit PROTOBUF_CONSTEXPR CalibrationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalibrationResult(const CalibrationResult& from);
  CalibrationResult(CalibrationResult&& from) noexcept
    : CalibrationResult() {
    *this = ::std::move(from);
  }

  inline CalibrationResult& operator=(const CalibrationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationResult& operator=(CalibrationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationResult* internal_default_instance() {
    return reinterpret_cast<const CalibrationResult*>(
               &_CalibrationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CalibrationResult& a, CalibrationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrationResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalibrationResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalibrationResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.CalibrationResult";
  }
  protected:
  explicit CalibrationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CalibrationResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    CalibrationResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    CalibrationResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NEXT =
    CalibrationResult_Result_RESULT_NEXT;
  static constexpr Result RESULT_FAILED =
    CalibrationResult_Result_RESULT_FAILED;
  static constexpr Result RESULT_NO_SYSTEM =
    CalibrationResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    CalibrationResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    CalibrationResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    CalibrationResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT =
    CalibrationResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_CANCELLED =
    CalibrationResult_Result_RESULT_CANCELLED;
  static constexpr Result RESULT_FAILED_ARMED =
    CalibrationResult_Result_RESULT_FAILED_ARMED;
  static constexpr Result RESULT_UNSUPPORTED =
    CalibrationResult_Result_RESULT_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return CalibrationResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CalibrationResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CalibrationResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CalibrationResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CalibrationResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CalibrationResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CalibrationResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::calibration::CalibrationResult_Result result() const;
  void set_result(::mavsdk::rpc::calibration::CalibrationResult_Result value);
  private:
  ::mavsdk::rpc::calibration::CalibrationResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::calibration::CalibrationResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class ProgressData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.ProgressData) */ {
 public:
  inline ProgressData() : ProgressData(nullptr) {}
  ~ProgressData() override;
  explicit PROTOBUF_CONSTEXPR ProgressData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgressData(const ProgressData& from);
  ProgressData(ProgressData&& from) noexcept
    : ProgressData() {
    *this = ::std::move(from);
  }

  inline ProgressData& operator=(const ProgressData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgressData& operator=(ProgressData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgressData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgressData* internal_default_instance() {
    return reinterpret_cast<const ProgressData*>(
               &_ProgressData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProgressData& a, ProgressData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgressData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgressData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgressData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgressData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgressData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProgressData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgressData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.calibration.ProgressData";
  }
  protected:
  explicit ProgressData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusTextFieldNumber = 4,
    kProgressFieldNumber = 2,
    kHasProgressFieldNumber = 1,
    kHasStatusTextFieldNumber = 3,
  };
  // string status_text = 4;
  void clear_status_text();
  const std::string& status_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_text();
  PROTOBUF_NODISCARD std::string* release_status_text();
  void set_allocated_status_text(std::string* status_text);
  private:
  const std::string& _internal_status_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_text(const std::string& value);
  std::string* _internal_mutable_status_text();
  public:

  // float progress = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];
  void clear_has_progress();
  bool has_progress() const;
  void set_has_progress(bool value);
  private:
  bool _internal_has_progress() const;
  void _internal_set_has_progress(bool value);
  public:

  // bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];
  void clear_has_status_text();
  bool has_status_text() const;
  void set_has_status_text(bool value);
  private:
  bool _internal_has_status_text() const;
  void _internal_set_has_status_text(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.ProgressData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_text_;
  float progress_;
  bool has_progress_;
  bool has_status_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeCalibrateGyroRequest

// -------------------------------------------------------------------

// CalibrateGyroResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateGyroResponse::_internal_has_calibration_result() const {
  return this != internal_default_instance() && calibration_result_ != nullptr;
}
inline bool CalibrateGyroResponse::has_calibration_result() const {
  return _internal_has_calibration_result();
}
inline void CalibrateGyroResponse::clear_calibration_result() {
  if (GetArenaForAllocation() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateGyroResponse::_internal_calibration_result() const {
  const ::mavsdk::rpc::calibration::CalibrationResult* p = calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(
      ::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateGyroResponse::calibration_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateGyroResponse::unsafe_arena_set_allocated_calibration_result(
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_result_);
  }
  calibration_result_ = calibration_result;
  if (calibration_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGyroResponse::release_calibration_result() {
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGyroResponse::unsafe_arena_release_calibration_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGyroResponse::_internal_mutable_calibration_result() {
  
  if (calibration_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrationResult>(GetArenaForAllocation());
    calibration_result_ = p;
  }
  return calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGyroResponse::mutable_calibration_result() {
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
  return _msg;
}
inline void CalibrateGyroResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete calibration_result_;
  }
  if (calibration_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(calibration_result);
    if (message_arena != submessage_arena) {
      calibration_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_result, submessage_arena);
    }
    
  } else {
    
  }
  calibration_result_ = calibration_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateGyroResponse::_internal_has_progress_data() const {
  return this != internal_default_instance() && progress_data_ != nullptr;
}
inline bool CalibrateGyroResponse::has_progress_data() const {
  return _internal_has_progress_data();
}
inline void CalibrateGyroResponse::clear_progress_data() {
  if (GetArenaForAllocation() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateGyroResponse::_internal_progress_data() const {
  const ::mavsdk::rpc::calibration::ProgressData* p = progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(
      ::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateGyroResponse::progress_data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateGyroResponse::unsafe_arena_set_allocated_progress_data(
    ::mavsdk::rpc::calibration::ProgressData* progress_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_data_);
  }
  progress_data_ = progress_data;
  if (progress_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGyroResponse::release_progress_data() {
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGyroResponse::unsafe_arena_release_progress_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGyroResponse::_internal_mutable_progress_data() {
  
  if (progress_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::ProgressData>(GetArenaForAllocation());
    progress_data_ = p;
  }
  return progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGyroResponse::mutable_progress_data() {
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
  return _msg;
}
inline void CalibrateGyroResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete progress_data_;
  }
  if (progress_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress_data);
    if (message_arena != submessage_arena) {
      progress_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_data, submessage_arena);
    }
    
  } else {
    
  }
  progress_data_ = progress_data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
}

// -------------------------------------------------------------------

// SubscribeCalibrateAccelerometerRequest

// -------------------------------------------------------------------

// CalibrateAccelerometerResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateAccelerometerResponse::_internal_has_calibration_result() const {
  return this != internal_default_instance() && calibration_result_ != nullptr;
}
inline bool CalibrateAccelerometerResponse::has_calibration_result() const {
  return _internal_has_calibration_result();
}
inline void CalibrateAccelerometerResponse::clear_calibration_result() {
  if (GetArenaForAllocation() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateAccelerometerResponse::_internal_calibration_result() const {
  const ::mavsdk::rpc::calibration::CalibrationResult* p = calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(
      ::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateAccelerometerResponse::calibration_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateAccelerometerResponse::unsafe_arena_set_allocated_calibration_result(
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_result_);
  }
  calibration_result_ = calibration_result;
  if (calibration_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateAccelerometerResponse::release_calibration_result() {
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateAccelerometerResponse::unsafe_arena_release_calibration_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateAccelerometerResponse::_internal_mutable_calibration_result() {
  
  if (calibration_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrationResult>(GetArenaForAllocation());
    calibration_result_ = p;
  }
  return calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateAccelerometerResponse::mutable_calibration_result() {
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
  return _msg;
}
inline void CalibrateAccelerometerResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete calibration_result_;
  }
  if (calibration_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(calibration_result);
    if (message_arena != submessage_arena) {
      calibration_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_result, submessage_arena);
    }
    
  } else {
    
  }
  calibration_result_ = calibration_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateAccelerometerResponse::_internal_has_progress_data() const {
  return this != internal_default_instance() && progress_data_ != nullptr;
}
inline bool CalibrateAccelerometerResponse::has_progress_data() const {
  return _internal_has_progress_data();
}
inline void CalibrateAccelerometerResponse::clear_progress_data() {
  if (GetArenaForAllocation() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateAccelerometerResponse::_internal_progress_data() const {
  const ::mavsdk::rpc::calibration::ProgressData* p = progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(
      ::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateAccelerometerResponse::progress_data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateAccelerometerResponse::unsafe_arena_set_allocated_progress_data(
    ::mavsdk::rpc::calibration::ProgressData* progress_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_data_);
  }
  progress_data_ = progress_data;
  if (progress_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateAccelerometerResponse::release_progress_data() {
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateAccelerometerResponse::unsafe_arena_release_progress_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateAccelerometerResponse::_internal_mutable_progress_data() {
  
  if (progress_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::ProgressData>(GetArenaForAllocation());
    progress_data_ = p;
  }
  return progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateAccelerometerResponse::mutable_progress_data() {
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
  return _msg;
}
inline void CalibrateAccelerometerResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete progress_data_;
  }
  if (progress_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress_data);
    if (message_arena != submessage_arena) {
      progress_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_data, submessage_arena);
    }
    
  } else {
    
  }
  progress_data_ = progress_data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
}

// -------------------------------------------------------------------

// SubscribeCalibrateMagnetometerRequest

// -------------------------------------------------------------------

// CalibrateMagnetometerResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateMagnetometerResponse::_internal_has_calibration_result() const {
  return this != internal_default_instance() && calibration_result_ != nullptr;
}
inline bool CalibrateMagnetometerResponse::has_calibration_result() const {
  return _internal_has_calibration_result();
}
inline void CalibrateMagnetometerResponse::clear_calibration_result() {
  if (GetArenaForAllocation() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateMagnetometerResponse::_internal_calibration_result() const {
  const ::mavsdk::rpc::calibration::CalibrationResult* p = calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(
      ::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateMagnetometerResponse::calibration_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateMagnetometerResponse::unsafe_arena_set_allocated_calibration_result(
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_result_);
  }
  calibration_result_ = calibration_result;
  if (calibration_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateMagnetometerResponse::release_calibration_result() {
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateMagnetometerResponse::unsafe_arena_release_calibration_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateMagnetometerResponse::_internal_mutable_calibration_result() {
  
  if (calibration_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrationResult>(GetArenaForAllocation());
    calibration_result_ = p;
  }
  return calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateMagnetometerResponse::mutable_calibration_result() {
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
  return _msg;
}
inline void CalibrateMagnetometerResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete calibration_result_;
  }
  if (calibration_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(calibration_result);
    if (message_arena != submessage_arena) {
      calibration_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_result, submessage_arena);
    }
    
  } else {
    
  }
  calibration_result_ = calibration_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateMagnetometerResponse::_internal_has_progress_data() const {
  return this != internal_default_instance() && progress_data_ != nullptr;
}
inline bool CalibrateMagnetometerResponse::has_progress_data() const {
  return _internal_has_progress_data();
}
inline void CalibrateMagnetometerResponse::clear_progress_data() {
  if (GetArenaForAllocation() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateMagnetometerResponse::_internal_progress_data() const {
  const ::mavsdk::rpc::calibration::ProgressData* p = progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(
      ::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateMagnetometerResponse::progress_data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateMagnetometerResponse::unsafe_arena_set_allocated_progress_data(
    ::mavsdk::rpc::calibration::ProgressData* progress_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_data_);
  }
  progress_data_ = progress_data;
  if (progress_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateMagnetometerResponse::release_progress_data() {
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateMagnetometerResponse::unsafe_arena_release_progress_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateMagnetometerResponse::_internal_mutable_progress_data() {
  
  if (progress_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::ProgressData>(GetArenaForAllocation());
    progress_data_ = p;
  }
  return progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateMagnetometerResponse::mutable_progress_data() {
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
  return _msg;
}
inline void CalibrateMagnetometerResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete progress_data_;
  }
  if (progress_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress_data);
    if (message_arena != submessage_arena) {
      progress_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_data, submessage_arena);
    }
    
  } else {
    
  }
  progress_data_ = progress_data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
}

// -------------------------------------------------------------------

// SubscribeCalibrateLevelHorizonRequest

// -------------------------------------------------------------------

// CalibrateLevelHorizonResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateLevelHorizonResponse::_internal_has_calibration_result() const {
  return this != internal_default_instance() && calibration_result_ != nullptr;
}
inline bool CalibrateLevelHorizonResponse::has_calibration_result() const {
  return _internal_has_calibration_result();
}
inline void CalibrateLevelHorizonResponse::clear_calibration_result() {
  if (GetArenaForAllocation() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateLevelHorizonResponse::_internal_calibration_result() const {
  const ::mavsdk::rpc::calibration::CalibrationResult* p = calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(
      ::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateLevelHorizonResponse::calibration_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateLevelHorizonResponse::unsafe_arena_set_allocated_calibration_result(
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_result_);
  }
  calibration_result_ = calibration_result;
  if (calibration_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateLevelHorizonResponse::release_calibration_result() {
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateLevelHorizonResponse::unsafe_arena_release_calibration_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateLevelHorizonResponse::_internal_mutable_calibration_result() {
  
  if (calibration_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrationResult>(GetArenaForAllocation());
    calibration_result_ = p;
  }
  return calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateLevelHorizonResponse::mutable_calibration_result() {
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
  return _msg;
}
inline void CalibrateLevelHorizonResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete calibration_result_;
  }
  if (calibration_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(calibration_result);
    if (message_arena != submessage_arena) {
      calibration_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_result, submessage_arena);
    }
    
  } else {
    
  }
  calibration_result_ = calibration_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateLevelHorizonResponse::_internal_has_progress_data() const {
  return this != internal_default_instance() && progress_data_ != nullptr;
}
inline bool CalibrateLevelHorizonResponse::has_progress_data() const {
  return _internal_has_progress_data();
}
inline void CalibrateLevelHorizonResponse::clear_progress_data() {
  if (GetArenaForAllocation() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateLevelHorizonResponse::_internal_progress_data() const {
  const ::mavsdk::rpc::calibration::ProgressData* p = progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(
      ::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateLevelHorizonResponse::progress_data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateLevelHorizonResponse::unsafe_arena_set_allocated_progress_data(
    ::mavsdk::rpc::calibration::ProgressData* progress_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_data_);
  }
  progress_data_ = progress_data;
  if (progress_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateLevelHorizonResponse::release_progress_data() {
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateLevelHorizonResponse::unsafe_arena_release_progress_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateLevelHorizonResponse::_internal_mutable_progress_data() {
  
  if (progress_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::ProgressData>(GetArenaForAllocation());
    progress_data_ = p;
  }
  return progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateLevelHorizonResponse::mutable_progress_data() {
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
  return _msg;
}
inline void CalibrateLevelHorizonResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete progress_data_;
  }
  if (progress_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress_data);
    if (message_arena != submessage_arena) {
      progress_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_data, submessage_arena);
    }
    
  } else {
    
  }
  progress_data_ = progress_data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
}

// -------------------------------------------------------------------

// SubscribeCalibrateGimbalAccelerometerRequest

// -------------------------------------------------------------------

// CalibrateGimbalAccelerometerResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateGimbalAccelerometerResponse::_internal_has_calibration_result() const {
  return this != internal_default_instance() && calibration_result_ != nullptr;
}
inline bool CalibrateGimbalAccelerometerResponse::has_calibration_result() const {
  return _internal_has_calibration_result();
}
inline void CalibrateGimbalAccelerometerResponse::clear_calibration_result() {
  if (GetArenaForAllocation() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateGimbalAccelerometerResponse::_internal_calibration_result() const {
  const ::mavsdk::rpc::calibration::CalibrationResult* p = calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(
      ::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateGimbalAccelerometerResponse::calibration_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateGimbalAccelerometerResponse::unsafe_arena_set_allocated_calibration_result(
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_result_);
  }
  calibration_result_ = calibration_result;
  if (calibration_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGimbalAccelerometerResponse::release_calibration_result() {
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGimbalAccelerometerResponse::unsafe_arena_release_calibration_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGimbalAccelerometerResponse::_internal_mutable_calibration_result() {
  
  if (calibration_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrationResult>(GetArenaForAllocation());
    calibration_result_ = p;
  }
  return calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGimbalAccelerometerResponse::mutable_calibration_result() {
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
  return _msg;
}
inline void CalibrateGimbalAccelerometerResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete calibration_result_;
  }
  if (calibration_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(calibration_result);
    if (message_arena != submessage_arena) {
      calibration_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_result, submessage_arena);
    }
    
  } else {
    
  }
  calibration_result_ = calibration_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateGimbalAccelerometerResponse::_internal_has_progress_data() const {
  return this != internal_default_instance() && progress_data_ != nullptr;
}
inline bool CalibrateGimbalAccelerometerResponse::has_progress_data() const {
  return _internal_has_progress_data();
}
inline void CalibrateGimbalAccelerometerResponse::clear_progress_data() {
  if (GetArenaForAllocation() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateGimbalAccelerometerResponse::_internal_progress_data() const {
  const ::mavsdk::rpc::calibration::ProgressData* p = progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(
      ::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateGimbalAccelerometerResponse::progress_data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateGimbalAccelerometerResponse::unsafe_arena_set_allocated_progress_data(
    ::mavsdk::rpc::calibration::ProgressData* progress_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_data_);
  }
  progress_data_ = progress_data;
  if (progress_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGimbalAccelerometerResponse::release_progress_data() {
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGimbalAccelerometerResponse::unsafe_arena_release_progress_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
  
  ::mavsdk::rpc::calibration::ProgressData* temp = progress_data_;
  progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGimbalAccelerometerResponse::_internal_mutable_progress_data() {
  
  if (progress_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::ProgressData>(GetArenaForAllocation());
    progress_data_ = p;
  }
  return progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGimbalAccelerometerResponse::mutable_progress_data() {
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
  return _msg;
}
inline void CalibrateGimbalAccelerometerResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* progress_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete progress_data_;
  }
  if (progress_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress_data);
    if (message_arena != submessage_arena) {
      progress_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_data, submessage_arena);
    }
    
  } else {
    
  }
  progress_data_ = progress_data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
}

// -------------------------------------------------------------------

// CancelRequest

// -------------------------------------------------------------------

// CancelResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CancelResponse::_internal_has_calibration_result() const {
  return this != internal_default_instance() && calibration_result_ != nullptr;
}
inline bool CancelResponse::has_calibration_result() const {
  return _internal_has_calibration_result();
}
inline void CancelResponse::clear_calibration_result() {
  if (GetArenaForAllocation() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CancelResponse::_internal_calibration_result() const {
  const ::mavsdk::rpc::calibration::CalibrationResult* p = calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(
      ::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CancelResponse::calibration_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CancelResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CancelResponse::unsafe_arena_set_allocated_calibration_result(
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_result_);
  }
  calibration_result_ = calibration_result;
  if (calibration_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CancelResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CancelResponse::release_calibration_result() {
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CancelResponse::unsafe_arena_release_calibration_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CancelResponse.calibration_result)
  
  ::mavsdk::rpc::calibration::CalibrationResult* temp = calibration_result_;
  calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CancelResponse::_internal_mutable_calibration_result() {
  
  if (calibration_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::calibration::CalibrationResult>(GetArenaForAllocation());
    calibration_result_ = p;
  }
  return calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CancelResponse::mutable_calibration_result() {
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CancelResponse.calibration_result)
  return _msg;
}
inline void CancelResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* calibration_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete calibration_result_;
  }
  if (calibration_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(calibration_result);
    if (message_arena != submessage_arena) {
      calibration_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_result, submessage_arena);
    }
    
  } else {
    
  }
  calibration_result_ = calibration_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CancelResponse.calibration_result)
}

// -------------------------------------------------------------------

// CalibrationResult

// .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
inline void CalibrationResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::calibration::CalibrationResult_Result CalibrationResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::calibration::CalibrationResult_Result >(result_);
}
inline ::mavsdk::rpc::calibration::CalibrationResult_Result CalibrationResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrationResult.result)
  return _internal_result();
}
inline void CalibrationResult::_internal_set_result(::mavsdk::rpc::calibration::CalibrationResult_Result value) {
  
  result_ = value;
}
inline void CalibrationResult::set_result(::mavsdk::rpc::calibration::CalibrationResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.CalibrationResult.result)
}

// string result_str = 2;
inline void CalibrationResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& CalibrationResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrationResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CalibrationResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.CalibrationResult.result_str)
}
inline std::string* CalibrationResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrationResult.result_str)
  return _s;
}
inline const std::string& CalibrationResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void CalibrationResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* CalibrationResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* CalibrationResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrationResult.result_str)
  return result_str_.Release();
}
inline void CalibrationResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrationResult.result_str)
}

// -------------------------------------------------------------------

// ProgressData

// bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];
inline void ProgressData::clear_has_progress() {
  has_progress_ = false;
}
inline bool ProgressData::_internal_has_progress() const {
  return has_progress_;
}
inline bool ProgressData::has_progress() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.ProgressData.has_progress)
  return _internal_has_progress();
}
inline void ProgressData::_internal_set_has_progress(bool value) {
  
  has_progress_ = value;
}
inline void ProgressData::set_has_progress(bool value) {
  _internal_set_has_progress(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.ProgressData.has_progress)
}

// float progress = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void ProgressData::clear_progress() {
  progress_ = 0;
}
inline float ProgressData::_internal_progress() const {
  return progress_;
}
inline float ProgressData::progress() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.ProgressData.progress)
  return _internal_progress();
}
inline void ProgressData::_internal_set_progress(float value) {
  
  progress_ = value;
}
inline void ProgressData::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.ProgressData.progress)
}

// bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];
inline void ProgressData::clear_has_status_text() {
  has_status_text_ = false;
}
inline bool ProgressData::_internal_has_status_text() const {
  return has_status_text_;
}
inline bool ProgressData::has_status_text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.ProgressData.has_status_text)
  return _internal_has_status_text();
}
inline void ProgressData::_internal_set_has_status_text(bool value) {
  
  has_status_text_ = value;
}
inline void ProgressData::set_has_status_text(bool value) {
  _internal_set_has_status_text(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.ProgressData.has_status_text)
}

// string status_text = 4;
inline void ProgressData::clear_status_text() {
  status_text_.ClearToEmpty();
}
inline const std::string& ProgressData::status_text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.ProgressData.status_text)
  return _internal_status_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProgressData::set_status_text(ArgT0&& arg0, ArgT... args) {
 
 status_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.ProgressData.status_text)
}
inline std::string* ProgressData::mutable_status_text() {
  std::string* _s = _internal_mutable_status_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.ProgressData.status_text)
  return _s;
}
inline const std::string& ProgressData::_internal_status_text() const {
  return status_text_.Get();
}
inline void ProgressData::_internal_set_status_text(const std::string& value) {
  
  status_text_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgressData::_internal_mutable_status_text() {
  
  return status_text_.Mutable(GetArenaForAllocation());
}
inline std::string* ProgressData::release_status_text() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.ProgressData.status_text)
  return status_text_.Release();
}
inline void ProgressData::set_allocated_status_text(std::string* status_text) {
  if (status_text != nullptr) {
    
  } else {
    
  }
  status_text_.SetAllocated(status_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_text_.IsDefault()) {
    status_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.ProgressData.status_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calibration
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::calibration::CalibrationResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::calibration::CalibrationResult_Result>() {
  return ::mavsdk::rpc::calibration::CalibrationResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_calibration_2fcalibration_2eproto
