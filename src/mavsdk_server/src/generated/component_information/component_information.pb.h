// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component_information/component_information.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_5finformation_2fcomponent_5finformation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_5finformation_2fcomponent_5finformation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_5finformation_2fcomponent_5finformation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_5finformation_2fcomponent_5finformation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_5finformation_2fcomponent_5finformation_2eproto;
namespace mavsdk {
namespace rpc {
namespace component_information {
class AccessFloatParamsRequest;
struct AccessFloatParamsRequestDefaultTypeInternal;
extern AccessFloatParamsRequestDefaultTypeInternal _AccessFloatParamsRequest_default_instance_;
class AccessFloatParamsResponse;
struct AccessFloatParamsResponseDefaultTypeInternal;
extern AccessFloatParamsResponseDefaultTypeInternal _AccessFloatParamsResponse_default_instance_;
class ComponentInformationResult;
struct ComponentInformationResultDefaultTypeInternal;
extern ComponentInformationResultDefaultTypeInternal _ComponentInformationResult_default_instance_;
class FloatParam;
struct FloatParamDefaultTypeInternal;
extern FloatParamDefaultTypeInternal _FloatParam_default_instance_;
class FloatParamResponse;
struct FloatParamResponseDefaultTypeInternal;
extern FloatParamResponseDefaultTypeInternal _FloatParamResponse_default_instance_;
class FloatParamUpdate;
struct FloatParamUpdateDefaultTypeInternal;
extern FloatParamUpdateDefaultTypeInternal _FloatParamUpdate_default_instance_;
class SubscribeFloatParamRequest;
struct SubscribeFloatParamRequestDefaultTypeInternal;
extern SubscribeFloatParamRequestDefaultTypeInternal _SubscribeFloatParamRequest_default_instance_;
}  // namespace component_information
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::component_information::AccessFloatParamsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information::AccessFloatParamsRequest>(Arena*);
template<> ::mavsdk::rpc::component_information::AccessFloatParamsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information::AccessFloatParamsResponse>(Arena*);
template<> ::mavsdk::rpc::component_information::ComponentInformationResult* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information::ComponentInformationResult>(Arena*);
template<> ::mavsdk::rpc::component_information::FloatParam* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information::FloatParam>(Arena*);
template<> ::mavsdk::rpc::component_information::FloatParamResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information::FloatParamResponse>(Arena*);
template<> ::mavsdk::rpc::component_information::FloatParamUpdate* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information::FloatParamUpdate>(Arena*);
template<> ::mavsdk::rpc::component_information::SubscribeFloatParamRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information::SubscribeFloatParamRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace component_information {

enum ComponentInformationResult_Result : int {
  ComponentInformationResult_Result_RESULT_UNKNOWN = 0,
  ComponentInformationResult_Result_RESULT_SUCCESS = 1,
  ComponentInformationResult_Result_RESULT_NO_SYSTEM = 3,
  ComponentInformationResult_Result_ComponentInformationResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ComponentInformationResult_Result_ComponentInformationResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ComponentInformationResult_Result_IsValid(int value);
constexpr ComponentInformationResult_Result ComponentInformationResult_Result_Result_MIN = ComponentInformationResult_Result_RESULT_UNKNOWN;
constexpr ComponentInformationResult_Result ComponentInformationResult_Result_Result_MAX = ComponentInformationResult_Result_RESULT_NO_SYSTEM;
constexpr int ComponentInformationResult_Result_Result_ARRAYSIZE = ComponentInformationResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentInformationResult_Result_descriptor();
template<typename T>
inline const std::string& ComponentInformationResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentInformationResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentInformationResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentInformationResult_Result_descriptor(), enum_t_value);
}
inline bool ComponentInformationResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComponentInformationResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentInformationResult_Result>(
    ComponentInformationResult_Result_descriptor(), name, value);
}
// ===================================================================

class FloatParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information.FloatParam) */ {
 public:
  inline FloatParam() : FloatParam(nullptr) {}
  ~FloatParam() override;
  explicit PROTOBUF_CONSTEXPR FloatParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatParam(const FloatParam& from);
  FloatParam(FloatParam&& from) noexcept
    : FloatParam() {
    *this = ::std::move(from);
  }

  inline FloatParam& operator=(const FloatParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatParam& operator=(FloatParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatParam* internal_default_instance() {
    return reinterpret_cast<const FloatParam*>(
               &_FloatParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FloatParam& a, FloatParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information.FloatParam";
  }
  protected:
  explicit FloatParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShortDescriptionFieldNumber = 2,
    kLongDescriptionFieldNumber = 3,
    kUnitFieldNumber = 4,
    kDecimalPlacesFieldNumber = 5,
    kStartValueFieldNumber = 6,
    kDefaultValueFieldNumber = 7,
    kMinValueFieldNumber = 8,
    kMaxValueFieldNumber = 9,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string short_description = 2;
  void clear_short_description();
  const std::string& short_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_description();
  PROTOBUF_NODISCARD std::string* release_short_description();
  void set_allocated_short_description(std::string* short_description);
  private:
  const std::string& _internal_short_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_description(const std::string& value);
  std::string* _internal_mutable_short_description();
  public:

  // string long_description = 3;
  void clear_long_description();
  const std::string& long_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_long_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_long_description();
  PROTOBUF_NODISCARD std::string* release_long_description();
  void set_allocated_long_description(std::string* long_description);
  private:
  const std::string& _internal_long_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_description(const std::string& value);
  std::string* _internal_mutable_long_description();
  public:

  // string unit = 4;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // int32 decimal_places = 5;
  void clear_decimal_places();
  int32_t decimal_places() const;
  void set_decimal_places(int32_t value);
  private:
  int32_t _internal_decimal_places() const;
  void _internal_set_decimal_places(int32_t value);
  public:

  // float start_value = 6;
  void clear_start_value();
  float start_value() const;
  void set_start_value(float value);
  private:
  float _internal_start_value() const;
  void _internal_set_start_value(float value);
  public:

  // float default_value = 7;
  void clear_default_value();
  float default_value() const;
  void set_default_value(float value);
  private:
  float _internal_default_value() const;
  void _internal_set_default_value(float value);
  public:

  // float min_value = 8;
  void clear_min_value();
  float min_value() const;
  void set_min_value(float value);
  private:
  float _internal_min_value() const;
  void _internal_set_min_value(float value);
  public:

  // float max_value = 9;
  void clear_max_value();
  float max_value() const;
  void set_max_value(float value);
  private:
  float _internal_max_value() const;
  void _internal_set_max_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information.FloatParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  int32_t decimal_places_;
  float start_value_;
  float default_value_;
  float min_value_;
  float max_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_5finformation_2fcomponent_5finformation_2eproto;
};
// -------------------------------------------------------------------

class AccessFloatParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information.AccessFloatParamsRequest) */ {
 public:
  inline AccessFloatParamsRequest() : AccessFloatParamsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AccessFloatParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccessFloatParamsRequest(const AccessFloatParamsRequest& from);
  AccessFloatParamsRequest(AccessFloatParamsRequest&& from) noexcept
    : AccessFloatParamsRequest() {
    *this = ::std::move(from);
  }

  inline AccessFloatParamsRequest& operator=(const AccessFloatParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessFloatParamsRequest& operator=(AccessFloatParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessFloatParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessFloatParamsRequest* internal_default_instance() {
    return reinterpret_cast<const AccessFloatParamsRequest*>(
               &_AccessFloatParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccessFloatParamsRequest& a, AccessFloatParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessFloatParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessFloatParamsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessFloatParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccessFloatParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AccessFloatParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AccessFloatParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information.AccessFloatParamsRequest";
  }
  protected:
  explicit AccessFloatParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information.AccessFloatParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_5finformation_2fcomponent_5finformation_2eproto;
};
// -------------------------------------------------------------------

class AccessFloatParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information.AccessFloatParamsResponse) */ {
 public:
  inline AccessFloatParamsResponse() : AccessFloatParamsResponse(nullptr) {}
  ~AccessFloatParamsResponse() override;
  explicit PROTOBUF_CONSTEXPR AccessFloatParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccessFloatParamsResponse(const AccessFloatParamsResponse& from);
  AccessFloatParamsResponse(AccessFloatParamsResponse&& from) noexcept
    : AccessFloatParamsResponse() {
    *this = ::std::move(from);
  }

  inline AccessFloatParamsResponse& operator=(const AccessFloatParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessFloatParamsResponse& operator=(AccessFloatParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessFloatParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessFloatParamsResponse* internal_default_instance() {
    return reinterpret_cast<const AccessFloatParamsResponse*>(
               &_AccessFloatParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccessFloatParamsResponse& a, AccessFloatParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessFloatParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessFloatParamsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessFloatParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccessFloatParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccessFloatParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccessFloatParamsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessFloatParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information.AccessFloatParamsResponse";
  }
  protected:
  explicit AccessFloatParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kComponentInformationResultFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.component_information.FloatParam params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::mavsdk::rpc::component_information::FloatParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::component_information::FloatParam >*
      mutable_params();
  private:
  const ::mavsdk::rpc::component_information::FloatParam& _internal_params(int index) const;
  ::mavsdk::rpc::component_information::FloatParam* _internal_add_params();
  public:
  const ::mavsdk::rpc::component_information::FloatParam& params(int index) const;
  ::mavsdk::rpc::component_information::FloatParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::component_information::FloatParam >&
      params() const;

  // .mavsdk.rpc.component_information.ComponentInformationResult component_information_result = 1;
  bool has_component_information_result() const;
  private:
  bool _internal_has_component_information_result() const;
  public:
  void clear_component_information_result();
  const ::mavsdk::rpc::component_information::ComponentInformationResult& component_information_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::component_information::ComponentInformationResult* release_component_information_result();
  ::mavsdk::rpc::component_information::ComponentInformationResult* mutable_component_information_result();
  void set_allocated_component_information_result(::mavsdk::rpc::component_information::ComponentInformationResult* component_information_result);
  private:
  const ::mavsdk::rpc::component_information::ComponentInformationResult& _internal_component_information_result() const;
  ::mavsdk::rpc::component_information::ComponentInformationResult* _internal_mutable_component_information_result();
  public:
  void unsafe_arena_set_allocated_component_information_result(
      ::mavsdk::rpc::component_information::ComponentInformationResult* component_information_result);
  ::mavsdk::rpc::component_information::ComponentInformationResult* unsafe_arena_release_component_information_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information.AccessFloatParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::component_information::FloatParam > params_;
  ::mavsdk::rpc::component_information::ComponentInformationResult* component_information_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_5finformation_2fcomponent_5finformation_2eproto;
};
// -------------------------------------------------------------------

class FloatParamUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information.FloatParamUpdate) */ {
 public:
  inline FloatParamUpdate() : FloatParamUpdate(nullptr) {}
  ~FloatParamUpdate() override;
  explicit PROTOBUF_CONSTEXPR FloatParamUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatParamUpdate(const FloatParamUpdate& from);
  FloatParamUpdate(FloatParamUpdate&& from) noexcept
    : FloatParamUpdate() {
    *this = ::std::move(from);
  }

  inline FloatParamUpdate& operator=(const FloatParamUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatParamUpdate& operator=(FloatParamUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatParamUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatParamUpdate* internal_default_instance() {
    return reinterpret_cast<const FloatParamUpdate*>(
               &_FloatParamUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FloatParamUpdate& a, FloatParamUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatParamUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatParamUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatParamUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatParamUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatParamUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatParamUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatParamUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information.FloatParamUpdate";
  }
  protected:
  explicit FloatParamUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information.FloatParamUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_5finformation_2fcomponent_5finformation_2eproto;
};
// -------------------------------------------------------------------

class SubscribeFloatParamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information.SubscribeFloatParamRequest) */ {
 public:
  inline SubscribeFloatParamRequest() : SubscribeFloatParamRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeFloatParamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeFloatParamRequest(const SubscribeFloatParamRequest& from);
  SubscribeFloatParamRequest(SubscribeFloatParamRequest&& from) noexcept
    : SubscribeFloatParamRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeFloatParamRequest& operator=(const SubscribeFloatParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeFloatParamRequest& operator=(SubscribeFloatParamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeFloatParamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeFloatParamRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeFloatParamRequest*>(
               &_SubscribeFloatParamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeFloatParamRequest& a, SubscribeFloatParamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeFloatParamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeFloatParamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeFloatParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeFloatParamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeFloatParamRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeFloatParamRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information.SubscribeFloatParamRequest";
  }
  protected:
  explicit SubscribeFloatParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information.SubscribeFloatParamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_5finformation_2fcomponent_5finformation_2eproto;
};
// -------------------------------------------------------------------

class FloatParamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information.FloatParamResponse) */ {
 public:
  inline FloatParamResponse() : FloatParamResponse(nullptr) {}
  ~FloatParamResponse() override;
  explicit PROTOBUF_CONSTEXPR FloatParamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatParamResponse(const FloatParamResponse& from);
  FloatParamResponse(FloatParamResponse&& from) noexcept
    : FloatParamResponse() {
    *this = ::std::move(from);
  }

  inline FloatParamResponse& operator=(const FloatParamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatParamResponse& operator=(FloatParamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatParamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatParamResponse* internal_default_instance() {
    return reinterpret_cast<const FloatParamResponse*>(
               &_FloatParamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FloatParamResponse& a, FloatParamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatParamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatParamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatParamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatParamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatParamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatParamResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatParamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information.FloatParamResponse";
  }
  protected:
  explicit FloatParamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamUpdateFieldNumber = 1,
  };
  // .mavsdk.rpc.component_information.FloatParamUpdate param_update = 1;
  bool has_param_update() const;
  private:
  bool _internal_has_param_update() const;
  public:
  void clear_param_update();
  const ::mavsdk::rpc::component_information::FloatParamUpdate& param_update() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::component_information::FloatParamUpdate* release_param_update();
  ::mavsdk::rpc::component_information::FloatParamUpdate* mutable_param_update();
  void set_allocated_param_update(::mavsdk::rpc::component_information::FloatParamUpdate* param_update);
  private:
  const ::mavsdk::rpc::component_information::FloatParamUpdate& _internal_param_update() const;
  ::mavsdk::rpc::component_information::FloatParamUpdate* _internal_mutable_param_update();
  public:
  void unsafe_arena_set_allocated_param_update(
      ::mavsdk::rpc::component_information::FloatParamUpdate* param_update);
  ::mavsdk::rpc::component_information::FloatParamUpdate* unsafe_arena_release_param_update();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information.FloatParamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::component_information::FloatParamUpdate* param_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_5finformation_2fcomponent_5finformation_2eproto;
};
// -------------------------------------------------------------------

class ComponentInformationResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information.ComponentInformationResult) */ {
 public:
  inline ComponentInformationResult() : ComponentInformationResult(nullptr) {}
  ~ComponentInformationResult() override;
  explicit PROTOBUF_CONSTEXPR ComponentInformationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentInformationResult(const ComponentInformationResult& from);
  ComponentInformationResult(ComponentInformationResult&& from) noexcept
    : ComponentInformationResult() {
    *this = ::std::move(from);
  }

  inline ComponentInformationResult& operator=(const ComponentInformationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentInformationResult& operator=(ComponentInformationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentInformationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentInformationResult* internal_default_instance() {
    return reinterpret_cast<const ComponentInformationResult*>(
               &_ComponentInformationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ComponentInformationResult& a, ComponentInformationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentInformationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentInformationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentInformationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentInformationResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentInformationResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComponentInformationResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentInformationResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information.ComponentInformationResult";
  }
  protected:
  explicit ComponentInformationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComponentInformationResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    ComponentInformationResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    ComponentInformationResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    ComponentInformationResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return ComponentInformationResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ComponentInformationResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ComponentInformationResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ComponentInformationResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ComponentInformationResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ComponentInformationResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return ComponentInformationResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.component_information.ComponentInformationResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::component_information::ComponentInformationResult_Result result() const;
  void set_result(::mavsdk::rpc::component_information::ComponentInformationResult_Result value);
  private:
  ::mavsdk::rpc::component_information::ComponentInformationResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::component_information::ComponentInformationResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information.ComponentInformationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_5finformation_2fcomponent_5finformation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FloatParam

// string name = 1;
inline void FloatParam::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FloatParam::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatParam::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.name)
}
inline std::string* FloatParam::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.FloatParam.name)
  return _s;
}
inline const std::string& FloatParam::_internal_name() const {
  return name_.Get();
}
inline void FloatParam::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* FloatParam::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* FloatParam::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information.FloatParam.name)
  return name_.Release();
}
inline void FloatParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information.FloatParam.name)
}

// string short_description = 2;
inline void FloatParam::clear_short_description() {
  short_description_.ClearToEmpty();
}
inline const std::string& FloatParam::short_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.short_description)
  return _internal_short_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatParam::set_short_description(ArgT0&& arg0, ArgT... args) {
 
 short_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.short_description)
}
inline std::string* FloatParam::mutable_short_description() {
  std::string* _s = _internal_mutable_short_description();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.FloatParam.short_description)
  return _s;
}
inline const std::string& FloatParam::_internal_short_description() const {
  return short_description_.Get();
}
inline void FloatParam::_internal_set_short_description(const std::string& value) {
  
  short_description_.Set(value, GetArenaForAllocation());
}
inline std::string* FloatParam::_internal_mutable_short_description() {
  
  return short_description_.Mutable(GetArenaForAllocation());
}
inline std::string* FloatParam::release_short_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information.FloatParam.short_description)
  return short_description_.Release();
}
inline void FloatParam::set_allocated_short_description(std::string* short_description) {
  if (short_description != nullptr) {
    
  } else {
    
  }
  short_description_.SetAllocated(short_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_description_.IsDefault()) {
    short_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information.FloatParam.short_description)
}

// string long_description = 3;
inline void FloatParam::clear_long_description() {
  long_description_.ClearToEmpty();
}
inline const std::string& FloatParam::long_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.long_description)
  return _internal_long_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatParam::set_long_description(ArgT0&& arg0, ArgT... args) {
 
 long_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.long_description)
}
inline std::string* FloatParam::mutable_long_description() {
  std::string* _s = _internal_mutable_long_description();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.FloatParam.long_description)
  return _s;
}
inline const std::string& FloatParam::_internal_long_description() const {
  return long_description_.Get();
}
inline void FloatParam::_internal_set_long_description(const std::string& value) {
  
  long_description_.Set(value, GetArenaForAllocation());
}
inline std::string* FloatParam::_internal_mutable_long_description() {
  
  return long_description_.Mutable(GetArenaForAllocation());
}
inline std::string* FloatParam::release_long_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information.FloatParam.long_description)
  return long_description_.Release();
}
inline void FloatParam::set_allocated_long_description(std::string* long_description) {
  if (long_description != nullptr) {
    
  } else {
    
  }
  long_description_.SetAllocated(long_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (long_description_.IsDefault()) {
    long_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information.FloatParam.long_description)
}

// string unit = 4;
inline void FloatParam::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& FloatParam::unit() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatParam::set_unit(ArgT0&& arg0, ArgT... args) {
 
 unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.unit)
}
inline std::string* FloatParam::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.FloatParam.unit)
  return _s;
}
inline const std::string& FloatParam::_internal_unit() const {
  return unit_.Get();
}
inline void FloatParam::_internal_set_unit(const std::string& value) {
  
  unit_.Set(value, GetArenaForAllocation());
}
inline std::string* FloatParam::_internal_mutable_unit() {
  
  return unit_.Mutable(GetArenaForAllocation());
}
inline std::string* FloatParam::release_unit() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information.FloatParam.unit)
  return unit_.Release();
}
inline void FloatParam::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unit_.IsDefault()) {
    unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information.FloatParam.unit)
}

// int32 decimal_places = 5;
inline void FloatParam::clear_decimal_places() {
  decimal_places_ = 0;
}
inline int32_t FloatParam::_internal_decimal_places() const {
  return decimal_places_;
}
inline int32_t FloatParam::decimal_places() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.decimal_places)
  return _internal_decimal_places();
}
inline void FloatParam::_internal_set_decimal_places(int32_t value) {
  
  decimal_places_ = value;
}
inline void FloatParam::set_decimal_places(int32_t value) {
  _internal_set_decimal_places(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.decimal_places)
}

// float start_value = 6;
inline void FloatParam::clear_start_value() {
  start_value_ = 0;
}
inline float FloatParam::_internal_start_value() const {
  return start_value_;
}
inline float FloatParam::start_value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.start_value)
  return _internal_start_value();
}
inline void FloatParam::_internal_set_start_value(float value) {
  
  start_value_ = value;
}
inline void FloatParam::set_start_value(float value) {
  _internal_set_start_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.start_value)
}

// float default_value = 7;
inline void FloatParam::clear_default_value() {
  default_value_ = 0;
}
inline float FloatParam::_internal_default_value() const {
  return default_value_;
}
inline float FloatParam::default_value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.default_value)
  return _internal_default_value();
}
inline void FloatParam::_internal_set_default_value(float value) {
  
  default_value_ = value;
}
inline void FloatParam::set_default_value(float value) {
  _internal_set_default_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.default_value)
}

// float min_value = 8;
inline void FloatParam::clear_min_value() {
  min_value_ = 0;
}
inline float FloatParam::_internal_min_value() const {
  return min_value_;
}
inline float FloatParam::min_value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.min_value)
  return _internal_min_value();
}
inline void FloatParam::_internal_set_min_value(float value) {
  
  min_value_ = value;
}
inline void FloatParam::set_min_value(float value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.min_value)
}

// float max_value = 9;
inline void FloatParam::clear_max_value() {
  max_value_ = 0;
}
inline float FloatParam::_internal_max_value() const {
  return max_value_;
}
inline float FloatParam::max_value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParam.max_value)
  return _internal_max_value();
}
inline void FloatParam::_internal_set_max_value(float value) {
  
  max_value_ = value;
}
inline void FloatParam::set_max_value(float value) {
  _internal_set_max_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParam.max_value)
}

// -------------------------------------------------------------------

// AccessFloatParamsRequest

// -------------------------------------------------------------------

// AccessFloatParamsResponse

// .mavsdk.rpc.component_information.ComponentInformationResult component_information_result = 1;
inline bool AccessFloatParamsResponse::_internal_has_component_information_result() const {
  return this != internal_default_instance() && component_information_result_ != nullptr;
}
inline bool AccessFloatParamsResponse::has_component_information_result() const {
  return _internal_has_component_information_result();
}
inline void AccessFloatParamsResponse::clear_component_information_result() {
  if (GetArenaForAllocation() == nullptr && component_information_result_ != nullptr) {
    delete component_information_result_;
  }
  component_information_result_ = nullptr;
}
inline const ::mavsdk::rpc::component_information::ComponentInformationResult& AccessFloatParamsResponse::_internal_component_information_result() const {
  const ::mavsdk::rpc::component_information::ComponentInformationResult* p = component_information_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::component_information::ComponentInformationResult&>(
      ::mavsdk::rpc::component_information::_ComponentInformationResult_default_instance_);
}
inline const ::mavsdk::rpc::component_information::ComponentInformationResult& AccessFloatParamsResponse::component_information_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.AccessFloatParamsResponse.component_information_result)
  return _internal_component_information_result();
}
inline void AccessFloatParamsResponse::unsafe_arena_set_allocated_component_information_result(
    ::mavsdk::rpc::component_information::ComponentInformationResult* component_information_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_information_result_);
  }
  component_information_result_ = component_information_result;
  if (component_information_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information.AccessFloatParamsResponse.component_information_result)
}
inline ::mavsdk::rpc::component_information::ComponentInformationResult* AccessFloatParamsResponse::release_component_information_result() {
  
  ::mavsdk::rpc::component_information::ComponentInformationResult* temp = component_information_result_;
  component_information_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::component_information::ComponentInformationResult* AccessFloatParamsResponse::unsafe_arena_release_component_information_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information.AccessFloatParamsResponse.component_information_result)
  
  ::mavsdk::rpc::component_information::ComponentInformationResult* temp = component_information_result_;
  component_information_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::component_information::ComponentInformationResult* AccessFloatParamsResponse::_internal_mutable_component_information_result() {
  
  if (component_information_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::component_information::ComponentInformationResult>(GetArenaForAllocation());
    component_information_result_ = p;
  }
  return component_information_result_;
}
inline ::mavsdk::rpc::component_information::ComponentInformationResult* AccessFloatParamsResponse::mutable_component_information_result() {
  ::mavsdk::rpc::component_information::ComponentInformationResult* _msg = _internal_mutable_component_information_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.AccessFloatParamsResponse.component_information_result)
  return _msg;
}
inline void AccessFloatParamsResponse::set_allocated_component_information_result(::mavsdk::rpc::component_information::ComponentInformationResult* component_information_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete component_information_result_;
  }
  if (component_information_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(component_information_result);
    if (message_arena != submessage_arena) {
      component_information_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_information_result, submessage_arena);
    }
    
  } else {
    
  }
  component_information_result_ = component_information_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information.AccessFloatParamsResponse.component_information_result)
}

// repeated .mavsdk.rpc.component_information.FloatParam params = 2;
inline int AccessFloatParamsResponse::_internal_params_size() const {
  return params_.size();
}
inline int AccessFloatParamsResponse::params_size() const {
  return _internal_params_size();
}
inline void AccessFloatParamsResponse::clear_params() {
  params_.Clear();
}
inline ::mavsdk::rpc::component_information::FloatParam* AccessFloatParamsResponse::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.AccessFloatParamsResponse.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::component_information::FloatParam >*
AccessFloatParamsResponse::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.component_information.AccessFloatParamsResponse.params)
  return &params_;
}
inline const ::mavsdk::rpc::component_information::FloatParam& AccessFloatParamsResponse::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::mavsdk::rpc::component_information::FloatParam& AccessFloatParamsResponse::params(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.AccessFloatParamsResponse.params)
  return _internal_params(index);
}
inline ::mavsdk::rpc::component_information::FloatParam* AccessFloatParamsResponse::_internal_add_params() {
  return params_.Add();
}
inline ::mavsdk::rpc::component_information::FloatParam* AccessFloatParamsResponse::add_params() {
  ::mavsdk::rpc::component_information::FloatParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.component_information.AccessFloatParamsResponse.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::component_information::FloatParam >&
AccessFloatParamsResponse::params() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.component_information.AccessFloatParamsResponse.params)
  return params_;
}

// -------------------------------------------------------------------

// FloatParamUpdate

// string name = 1;
inline void FloatParamUpdate::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FloatParamUpdate::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParamUpdate.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatParamUpdate::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParamUpdate.name)
}
inline std::string* FloatParamUpdate::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.FloatParamUpdate.name)
  return _s;
}
inline const std::string& FloatParamUpdate::_internal_name() const {
  return name_.Get();
}
inline void FloatParamUpdate::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* FloatParamUpdate::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* FloatParamUpdate::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information.FloatParamUpdate.name)
  return name_.Release();
}
inline void FloatParamUpdate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information.FloatParamUpdate.name)
}

// float value = 2;
inline void FloatParamUpdate::clear_value() {
  value_ = 0;
}
inline float FloatParamUpdate::_internal_value() const {
  return value_;
}
inline float FloatParamUpdate::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParamUpdate.value)
  return _internal_value();
}
inline void FloatParamUpdate::_internal_set_value(float value) {
  
  value_ = value;
}
inline void FloatParamUpdate::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.FloatParamUpdate.value)
}

// -------------------------------------------------------------------

// SubscribeFloatParamRequest

// -------------------------------------------------------------------

// FloatParamResponse

// .mavsdk.rpc.component_information.FloatParamUpdate param_update = 1;
inline bool FloatParamResponse::_internal_has_param_update() const {
  return this != internal_default_instance() && param_update_ != nullptr;
}
inline bool FloatParamResponse::has_param_update() const {
  return _internal_has_param_update();
}
inline void FloatParamResponse::clear_param_update() {
  if (GetArenaForAllocation() == nullptr && param_update_ != nullptr) {
    delete param_update_;
  }
  param_update_ = nullptr;
}
inline const ::mavsdk::rpc::component_information::FloatParamUpdate& FloatParamResponse::_internal_param_update() const {
  const ::mavsdk::rpc::component_information::FloatParamUpdate* p = param_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::component_information::FloatParamUpdate&>(
      ::mavsdk::rpc::component_information::_FloatParamUpdate_default_instance_);
}
inline const ::mavsdk::rpc::component_information::FloatParamUpdate& FloatParamResponse::param_update() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.FloatParamResponse.param_update)
  return _internal_param_update();
}
inline void FloatParamResponse::unsafe_arena_set_allocated_param_update(
    ::mavsdk::rpc::component_information::FloatParamUpdate* param_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_update_);
  }
  param_update_ = param_update;
  if (param_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information.FloatParamResponse.param_update)
}
inline ::mavsdk::rpc::component_information::FloatParamUpdate* FloatParamResponse::release_param_update() {
  
  ::mavsdk::rpc::component_information::FloatParamUpdate* temp = param_update_;
  param_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::component_information::FloatParamUpdate* FloatParamResponse::unsafe_arena_release_param_update() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information.FloatParamResponse.param_update)
  
  ::mavsdk::rpc::component_information::FloatParamUpdate* temp = param_update_;
  param_update_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::component_information::FloatParamUpdate* FloatParamResponse::_internal_mutable_param_update() {
  
  if (param_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::component_information::FloatParamUpdate>(GetArenaForAllocation());
    param_update_ = p;
  }
  return param_update_;
}
inline ::mavsdk::rpc::component_information::FloatParamUpdate* FloatParamResponse::mutable_param_update() {
  ::mavsdk::rpc::component_information::FloatParamUpdate* _msg = _internal_mutable_param_update();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.FloatParamResponse.param_update)
  return _msg;
}
inline void FloatParamResponse::set_allocated_param_update(::mavsdk::rpc::component_information::FloatParamUpdate* param_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete param_update_;
  }
  if (param_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(param_update);
    if (message_arena != submessage_arena) {
      param_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param_update, submessage_arena);
    }
    
  } else {
    
  }
  param_update_ = param_update;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information.FloatParamResponse.param_update)
}

// -------------------------------------------------------------------

// ComponentInformationResult

// .mavsdk.rpc.component_information.ComponentInformationResult.Result result = 1;
inline void ComponentInformationResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::component_information::ComponentInformationResult_Result ComponentInformationResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::component_information::ComponentInformationResult_Result >(result_);
}
inline ::mavsdk::rpc::component_information::ComponentInformationResult_Result ComponentInformationResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.ComponentInformationResult.result)
  return _internal_result();
}
inline void ComponentInformationResult::_internal_set_result(::mavsdk::rpc::component_information::ComponentInformationResult_Result value) {
  
  result_ = value;
}
inline void ComponentInformationResult::set_result(::mavsdk::rpc::component_information::ComponentInformationResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.ComponentInformationResult.result)
}

// string result_str = 2;
inline void ComponentInformationResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& ComponentInformationResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information.ComponentInformationResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentInformationResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information.ComponentInformationResult.result_str)
}
inline std::string* ComponentInformationResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information.ComponentInformationResult.result_str)
  return _s;
}
inline const std::string& ComponentInformationResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void ComponentInformationResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentInformationResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentInformationResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information.ComponentInformationResult.result_str)
  return result_str_.Release();
}
inline void ComponentInformationResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information.ComponentInformationResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace component_information
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::component_information::ComponentInformationResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::component_information::ComponentInformationResult_Result>() {
  return ::mavsdk::rpc::component_information::ComponentInformationResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_5finformation_2fcomponent_5finformation_2eproto
