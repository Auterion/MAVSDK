// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/core.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcore_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcore_2eproto;
namespace mavsdk {
namespace rpc {
namespace core {
class ConnectionState;
struct ConnectionStateDefaultTypeInternal;
extern ConnectionStateDefaultTypeInternal _ConnectionState_default_instance_;
class ConnectionStateResponse;
struct ConnectionStateResponseDefaultTypeInternal;
extern ConnectionStateResponseDefaultTypeInternal _ConnectionStateResponse_default_instance_;
class SetMavlinkTimeoutRequest;
struct SetMavlinkTimeoutRequestDefaultTypeInternal;
extern SetMavlinkTimeoutRequestDefaultTypeInternal _SetMavlinkTimeoutRequest_default_instance_;
class SetMavlinkTimeoutResponse;
struct SetMavlinkTimeoutResponseDefaultTypeInternal;
extern SetMavlinkTimeoutResponseDefaultTypeInternal _SetMavlinkTimeoutResponse_default_instance_;
class SubscribeConnectionStateRequest;
struct SubscribeConnectionStateRequestDefaultTypeInternal;
extern SubscribeConnectionStateRequestDefaultTypeInternal _SubscribeConnectionStateRequest_default_instance_;
}  // namespace core
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::core::ConnectionState* Arena::CreateMaybeMessage<::mavsdk::rpc::core::ConnectionState>(Arena*);
template<> ::mavsdk::rpc::core::ConnectionStateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::core::ConnectionStateResponse>(Arena*);
template<> ::mavsdk::rpc::core::SetMavlinkTimeoutRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::core::SetMavlinkTimeoutRequest>(Arena*);
template<> ::mavsdk::rpc::core::SetMavlinkTimeoutResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::core::SetMavlinkTimeoutResponse>(Arena*);
template<> ::mavsdk::rpc::core::SubscribeConnectionStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::core::SubscribeConnectionStateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace core {

// ===================================================================

class SubscribeConnectionStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.SubscribeConnectionStateRequest) */ {
 public:
  inline SubscribeConnectionStateRequest() : SubscribeConnectionStateRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeConnectionStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeConnectionStateRequest(const SubscribeConnectionStateRequest& from);
  SubscribeConnectionStateRequest(SubscribeConnectionStateRequest&& from) noexcept
    : SubscribeConnectionStateRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeConnectionStateRequest& operator=(const SubscribeConnectionStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeConnectionStateRequest& operator=(SubscribeConnectionStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeConnectionStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeConnectionStateRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeConnectionStateRequest*>(
               &_SubscribeConnectionStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeConnectionStateRequest& a, SubscribeConnectionStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeConnectionStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeConnectionStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeConnectionStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeConnectionStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeConnectionStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeConnectionStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.SubscribeConnectionStateRequest";
  }
  protected:
  explicit SubscribeConnectionStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.SubscribeConnectionStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class ConnectionStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.ConnectionStateResponse) */ {
 public:
  inline ConnectionStateResponse() : ConnectionStateResponse(nullptr) {}
  ~ConnectionStateResponse() override;
  explicit PROTOBUF_CONSTEXPR ConnectionStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionStateResponse(const ConnectionStateResponse& from);
  ConnectionStateResponse(ConnectionStateResponse&& from) noexcept
    : ConnectionStateResponse() {
    *this = ::std::move(from);
  }

  inline ConnectionStateResponse& operator=(const ConnectionStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionStateResponse& operator=(ConnectionStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionStateResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectionStateResponse*>(
               &_ConnectionStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectionStateResponse& a, ConnectionStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectionStateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.ConnectionStateResponse";
  }
  protected:
  explicit ConnectionStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionStateFieldNumber = 1,
  };
  // .mavsdk.rpc.core.ConnectionState connection_state = 1;
  bool has_connection_state() const;
  private:
  bool _internal_has_connection_state() const;
  public:
  void clear_connection_state();
  const ::mavsdk::rpc::core::ConnectionState& connection_state() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::core::ConnectionState* release_connection_state();
  ::mavsdk::rpc::core::ConnectionState* mutable_connection_state();
  void set_allocated_connection_state(::mavsdk::rpc::core::ConnectionState* connection_state);
  private:
  const ::mavsdk::rpc::core::ConnectionState& _internal_connection_state() const;
  ::mavsdk::rpc::core::ConnectionState* _internal_mutable_connection_state();
  public:
  void unsafe_arena_set_allocated_connection_state(
      ::mavsdk::rpc::core::ConnectionState* connection_state);
  ::mavsdk::rpc::core::ConnectionState* unsafe_arena_release_connection_state();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.ConnectionStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::core::ConnectionState* connection_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class SetMavlinkTimeoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.SetMavlinkTimeoutRequest) */ {
 public:
  inline SetMavlinkTimeoutRequest() : SetMavlinkTimeoutRequest(nullptr) {}
  ~SetMavlinkTimeoutRequest() override;
  explicit PROTOBUF_CONSTEXPR SetMavlinkTimeoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMavlinkTimeoutRequest(const SetMavlinkTimeoutRequest& from);
  SetMavlinkTimeoutRequest(SetMavlinkTimeoutRequest&& from) noexcept
    : SetMavlinkTimeoutRequest() {
    *this = ::std::move(from);
  }

  inline SetMavlinkTimeoutRequest& operator=(const SetMavlinkTimeoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMavlinkTimeoutRequest& operator=(SetMavlinkTimeoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMavlinkTimeoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMavlinkTimeoutRequest* internal_default_instance() {
    return reinterpret_cast<const SetMavlinkTimeoutRequest*>(
               &_SetMavlinkTimeoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetMavlinkTimeoutRequest& a, SetMavlinkTimeoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMavlinkTimeoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMavlinkTimeoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMavlinkTimeoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMavlinkTimeoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetMavlinkTimeoutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetMavlinkTimeoutRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMavlinkTimeoutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.SetMavlinkTimeoutRequest";
  }
  protected:
  explicit SetMavlinkTimeoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutSFieldNumber = 1,
  };
  // double timeout_s = 1;
  void clear_timeout_s();
  double timeout_s() const;
  void set_timeout_s(double value);
  private:
  double _internal_timeout_s() const;
  void _internal_set_timeout_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.SetMavlinkTimeoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double timeout_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class SetMavlinkTimeoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.SetMavlinkTimeoutResponse) */ {
 public:
  inline SetMavlinkTimeoutResponse() : SetMavlinkTimeoutResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetMavlinkTimeoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMavlinkTimeoutResponse(const SetMavlinkTimeoutResponse& from);
  SetMavlinkTimeoutResponse(SetMavlinkTimeoutResponse&& from) noexcept
    : SetMavlinkTimeoutResponse() {
    *this = ::std::move(from);
  }

  inline SetMavlinkTimeoutResponse& operator=(const SetMavlinkTimeoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMavlinkTimeoutResponse& operator=(SetMavlinkTimeoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMavlinkTimeoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMavlinkTimeoutResponse* internal_default_instance() {
    return reinterpret_cast<const SetMavlinkTimeoutResponse*>(
               &_SetMavlinkTimeoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetMavlinkTimeoutResponse& a, SetMavlinkTimeoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMavlinkTimeoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMavlinkTimeoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMavlinkTimeoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMavlinkTimeoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetMavlinkTimeoutResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetMavlinkTimeoutResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.SetMavlinkTimeoutResponse";
  }
  protected:
  explicit SetMavlinkTimeoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.SetMavlinkTimeoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class ConnectionState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.ConnectionState) */ {
 public:
  inline ConnectionState() : ConnectionState(nullptr) {}
  ~ConnectionState() override;
  explicit PROTOBUF_CONSTEXPR ConnectionState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionState(const ConnectionState& from);
  ConnectionState(ConnectionState&& from) noexcept
    : ConnectionState() {
    *this = ::std::move(from);
  }

  inline ConnectionState& operator=(const ConnectionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionState& operator=(ConnectionState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionState* internal_default_instance() {
    return reinterpret_cast<const ConnectionState*>(
               &_ConnectionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnectionState& a, ConnectionState& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectionState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.ConnectionState";
  }
  protected:
  explicit ConnectionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsConnectedFieldNumber = 2,
  };
  // bool is_connected = 2;
  void clear_is_connected();
  bool is_connected() const;
  void set_is_connected(bool value);
  private:
  bool _internal_is_connected() const;
  void _internal_set_is_connected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.ConnectionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_connected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeConnectionStateRequest

// -------------------------------------------------------------------

// ConnectionStateResponse

// .mavsdk.rpc.core.ConnectionState connection_state = 1;
inline bool ConnectionStateResponse::_internal_has_connection_state() const {
  return this != internal_default_instance() && connection_state_ != nullptr;
}
inline bool ConnectionStateResponse::has_connection_state() const {
  return _internal_has_connection_state();
}
inline void ConnectionStateResponse::clear_connection_state() {
  if (GetArenaForAllocation() == nullptr && connection_state_ != nullptr) {
    delete connection_state_;
  }
  connection_state_ = nullptr;
}
inline const ::mavsdk::rpc::core::ConnectionState& ConnectionStateResponse::_internal_connection_state() const {
  const ::mavsdk::rpc::core::ConnectionState* p = connection_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::core::ConnectionState&>(
      ::mavsdk::rpc::core::_ConnectionState_default_instance_);
}
inline const ::mavsdk::rpc::core::ConnectionState& ConnectionStateResponse::connection_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
  return _internal_connection_state();
}
inline void ConnectionStateResponse::unsafe_arena_set_allocated_connection_state(
    ::mavsdk::rpc::core::ConnectionState* connection_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_state_);
  }
  connection_state_ = connection_state;
  if (connection_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
}
inline ::mavsdk::rpc::core::ConnectionState* ConnectionStateResponse::release_connection_state() {
  
  ::mavsdk::rpc::core::ConnectionState* temp = connection_state_;
  connection_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::core::ConnectionState* ConnectionStateResponse::unsafe_arena_release_connection_state() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
  
  ::mavsdk::rpc::core::ConnectionState* temp = connection_state_;
  connection_state_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::core::ConnectionState* ConnectionStateResponse::_internal_mutable_connection_state() {
  
  if (connection_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::core::ConnectionState>(GetArenaForAllocation());
    connection_state_ = p;
  }
  return connection_state_;
}
inline ::mavsdk::rpc::core::ConnectionState* ConnectionStateResponse::mutable_connection_state() {
  ::mavsdk::rpc::core::ConnectionState* _msg = _internal_mutable_connection_state();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
  return _msg;
}
inline void ConnectionStateResponse::set_allocated_connection_state(::mavsdk::rpc::core::ConnectionState* connection_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connection_state_;
  }
  if (connection_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_state);
    if (message_arena != submessage_arena) {
      connection_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_state, submessage_arena);
    }
    
  } else {
    
  }
  connection_state_ = connection_state;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
}

// -------------------------------------------------------------------

// SetMavlinkTimeoutRequest

// double timeout_s = 1;
inline void SetMavlinkTimeoutRequest::clear_timeout_s() {
  timeout_s_ = 0;
}
inline double SetMavlinkTimeoutRequest::_internal_timeout_s() const {
  return timeout_s_;
}
inline double SetMavlinkTimeoutRequest::timeout_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.SetMavlinkTimeoutRequest.timeout_s)
  return _internal_timeout_s();
}
inline void SetMavlinkTimeoutRequest::_internal_set_timeout_s(double value) {
  
  timeout_s_ = value;
}
inline void SetMavlinkTimeoutRequest::set_timeout_s(double value) {
  _internal_set_timeout_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.core.SetMavlinkTimeoutRequest.timeout_s)
}

// -------------------------------------------------------------------

// SetMavlinkTimeoutResponse

// -------------------------------------------------------------------

// ConnectionState

// bool is_connected = 2;
inline void ConnectionState::clear_is_connected() {
  is_connected_ = false;
}
inline bool ConnectionState::_internal_is_connected() const {
  return is_connected_;
}
inline bool ConnectionState::is_connected() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.ConnectionState.is_connected)
  return _internal_is_connected();
}
inline void ConnectionState::_internal_set_is_connected(bool value) {
  
  is_connected_ = value;
}
inline void ConnectionState::set_is_connected(bool value) {
  _internal_set_is_connected(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.core.ConnectionState.is_connected)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace rpc
}  // namespace mavsdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcore_2eproto
