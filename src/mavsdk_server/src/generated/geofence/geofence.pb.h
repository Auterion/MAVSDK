// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geofence/geofence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geofence_2fgeofence_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geofence_2fgeofence_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geofence_2fgeofence_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geofence_2fgeofence_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geofence_2fgeofence_2eproto;
namespace mavsdk {
namespace rpc {
namespace geofence {
class ClearGeofenceRequest;
struct ClearGeofenceRequestDefaultTypeInternal;
extern ClearGeofenceRequestDefaultTypeInternal _ClearGeofenceRequest_default_instance_;
class ClearGeofenceResponse;
struct ClearGeofenceResponseDefaultTypeInternal;
extern ClearGeofenceResponseDefaultTypeInternal _ClearGeofenceResponse_default_instance_;
class GeofenceResult;
struct GeofenceResultDefaultTypeInternal;
extern GeofenceResultDefaultTypeInternal _GeofenceResult_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class UploadGeofenceRequest;
struct UploadGeofenceRequestDefaultTypeInternal;
extern UploadGeofenceRequestDefaultTypeInternal _UploadGeofenceRequest_default_instance_;
class UploadGeofenceResponse;
struct UploadGeofenceResponseDefaultTypeInternal;
extern UploadGeofenceResponseDefaultTypeInternal _UploadGeofenceResponse_default_instance_;
}  // namespace geofence
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::geofence::ClearGeofenceRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::ClearGeofenceRequest>(Arena*);
template<> ::mavsdk::rpc::geofence::ClearGeofenceResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::ClearGeofenceResponse>(Arena*);
template<> ::mavsdk::rpc::geofence::GeofenceResult* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::GeofenceResult>(Arena*);
template<> ::mavsdk::rpc::geofence::Point* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::Point>(Arena*);
template<> ::mavsdk::rpc::geofence::Polygon* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::Polygon>(Arena*);
template<> ::mavsdk::rpc::geofence::UploadGeofenceRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::UploadGeofenceRequest>(Arena*);
template<> ::mavsdk::rpc::geofence::UploadGeofenceResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::UploadGeofenceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace geofence {

enum Polygon_FenceType : int {
  Polygon_FenceType_FENCE_TYPE_INCLUSION = 0,
  Polygon_FenceType_FENCE_TYPE_EXCLUSION = 1,
  Polygon_FenceType_Polygon_FenceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Polygon_FenceType_Polygon_FenceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Polygon_FenceType_IsValid(int value);
constexpr Polygon_FenceType Polygon_FenceType_FenceType_MIN = Polygon_FenceType_FENCE_TYPE_INCLUSION;
constexpr Polygon_FenceType Polygon_FenceType_FenceType_MAX = Polygon_FenceType_FENCE_TYPE_EXCLUSION;
constexpr int Polygon_FenceType_FenceType_ARRAYSIZE = Polygon_FenceType_FenceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Polygon_FenceType_descriptor();
template<typename T>
inline const std::string& Polygon_FenceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Polygon_FenceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Polygon_FenceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Polygon_FenceType_descriptor(), enum_t_value);
}
inline bool Polygon_FenceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Polygon_FenceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Polygon_FenceType>(
    Polygon_FenceType_descriptor(), name, value);
}
enum GeofenceResult_Result : int {
  GeofenceResult_Result_RESULT_UNKNOWN = 0,
  GeofenceResult_Result_RESULT_SUCCESS = 1,
  GeofenceResult_Result_RESULT_ERROR = 2,
  GeofenceResult_Result_RESULT_TOO_MANY_GEOFENCE_ITEMS = 3,
  GeofenceResult_Result_RESULT_BUSY = 4,
  GeofenceResult_Result_RESULT_TIMEOUT = 5,
  GeofenceResult_Result_RESULT_INVALID_ARGUMENT = 6,
  GeofenceResult_Result_RESULT_NO_SYSTEM = 7,
  GeofenceResult_Result_GeofenceResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GeofenceResult_Result_GeofenceResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GeofenceResult_Result_IsValid(int value);
constexpr GeofenceResult_Result GeofenceResult_Result_Result_MIN = GeofenceResult_Result_RESULT_UNKNOWN;
constexpr GeofenceResult_Result GeofenceResult_Result_Result_MAX = GeofenceResult_Result_RESULT_NO_SYSTEM;
constexpr int GeofenceResult_Result_Result_ARRAYSIZE = GeofenceResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeofenceResult_Result_descriptor();
template<typename T>
inline const std::string& GeofenceResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeofenceResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeofenceResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeofenceResult_Result_descriptor(), enum_t_value);
}
inline bool GeofenceResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GeofenceResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeofenceResult_Result>(
    GeofenceResult_Result_descriptor(), name, value);
}
// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  ~Polygon() override;
  explicit PROTOBUF_CONSTEXPR Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Polygon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Polygon_FenceType FenceType;
  static constexpr FenceType FENCE_TYPE_INCLUSION =
    Polygon_FenceType_FENCE_TYPE_INCLUSION;
  static constexpr FenceType FENCE_TYPE_EXCLUSION =
    Polygon_FenceType_FENCE_TYPE_EXCLUSION;
  static inline bool FenceType_IsValid(int value) {
    return Polygon_FenceType_IsValid(value);
  }
  static constexpr FenceType FenceType_MIN =
    Polygon_FenceType_FenceType_MIN;
  static constexpr FenceType FenceType_MAX =
    Polygon_FenceType_FenceType_MAX;
  static constexpr int FenceType_ARRAYSIZE =
    Polygon_FenceType_FenceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FenceType_descriptor() {
    return Polygon_FenceType_descriptor();
  }
  template<typename T>
  static inline const std::string& FenceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FenceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FenceType_Name.");
    return Polygon_FenceType_Name(enum_t_value);
  }
  static inline bool FenceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FenceType* value) {
    return Polygon_FenceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kFenceTypeFieldNumber = 2,
  };
  // repeated .mavsdk.rpc.geofence.Point points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::mavsdk::rpc::geofence::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point >*
      mutable_points();
  private:
  const ::mavsdk::rpc::geofence::Point& _internal_points(int index) const;
  ::mavsdk::rpc::geofence::Point* _internal_add_points();
  public:
  const ::mavsdk::rpc::geofence::Point& points(int index) const;
  ::mavsdk::rpc::geofence::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point >&
      points() const;

  // .mavsdk.rpc.geofence.Polygon.FenceType fence_type = 2;
  void clear_fence_type();
  ::mavsdk::rpc::geofence::Polygon_FenceType fence_type() const;
  void set_fence_type(::mavsdk::rpc::geofence::Polygon_FenceType value);
  private:
  ::mavsdk::rpc::geofence::Polygon_FenceType _internal_fence_type() const;
  void _internal_set_fence_type(::mavsdk::rpc::geofence::Polygon_FenceType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point > points_;
  int fence_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class UploadGeofenceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.UploadGeofenceRequest) */ {
 public:
  inline UploadGeofenceRequest() : UploadGeofenceRequest(nullptr) {}
  ~UploadGeofenceRequest() override;
  explicit PROTOBUF_CONSTEXPR UploadGeofenceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadGeofenceRequest(const UploadGeofenceRequest& from);
  UploadGeofenceRequest(UploadGeofenceRequest&& from) noexcept
    : UploadGeofenceRequest() {
    *this = ::std::move(from);
  }

  inline UploadGeofenceRequest& operator=(const UploadGeofenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGeofenceRequest& operator=(UploadGeofenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGeofenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGeofenceRequest* internal_default_instance() {
    return reinterpret_cast<const UploadGeofenceRequest*>(
               &_UploadGeofenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadGeofenceRequest& a, UploadGeofenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGeofenceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGeofenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadGeofenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadGeofenceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadGeofenceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadGeofenceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGeofenceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.UploadGeofenceRequest";
  }
  protected:
  explicit UploadGeofenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.geofence.Polygon polygons = 1;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::mavsdk::rpc::geofence::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon >*
      mutable_polygons();
  private:
  const ::mavsdk::rpc::geofence::Polygon& _internal_polygons(int index) const;
  ::mavsdk::rpc::geofence::Polygon* _internal_add_polygons();
  public:
  const ::mavsdk::rpc::geofence::Polygon& polygons(int index) const;
  ::mavsdk::rpc::geofence::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon >&
      polygons() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.UploadGeofenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon > polygons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class UploadGeofenceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.UploadGeofenceResponse) */ {
 public:
  inline UploadGeofenceResponse() : UploadGeofenceResponse(nullptr) {}
  ~UploadGeofenceResponse() override;
  explicit PROTOBUF_CONSTEXPR UploadGeofenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadGeofenceResponse(const UploadGeofenceResponse& from);
  UploadGeofenceResponse(UploadGeofenceResponse&& from) noexcept
    : UploadGeofenceResponse() {
    *this = ::std::move(from);
  }

  inline UploadGeofenceResponse& operator=(const UploadGeofenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGeofenceResponse& operator=(UploadGeofenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGeofenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGeofenceResponse* internal_default_instance() {
    return reinterpret_cast<const UploadGeofenceResponse*>(
               &_UploadGeofenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UploadGeofenceResponse& a, UploadGeofenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGeofenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGeofenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadGeofenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadGeofenceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadGeofenceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadGeofenceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGeofenceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.UploadGeofenceResponse";
  }
  protected:
  explicit UploadGeofenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeofenceResultFieldNumber = 1,
  };
  // .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
  bool has_geofence_result() const;
  private:
  bool _internal_has_geofence_result() const;
  public:
  void clear_geofence_result();
  const ::mavsdk::rpc::geofence::GeofenceResult& geofence_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::geofence::GeofenceResult* release_geofence_result();
  ::mavsdk::rpc::geofence::GeofenceResult* mutable_geofence_result();
  void set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* geofence_result);
  private:
  const ::mavsdk::rpc::geofence::GeofenceResult& _internal_geofence_result() const;
  ::mavsdk::rpc::geofence::GeofenceResult* _internal_mutable_geofence_result();
  public:
  void unsafe_arena_set_allocated_geofence_result(
      ::mavsdk::rpc::geofence::GeofenceResult* geofence_result);
  ::mavsdk::rpc::geofence::GeofenceResult* unsafe_arena_release_geofence_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.UploadGeofenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::geofence::GeofenceResult* geofence_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class ClearGeofenceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.ClearGeofenceRequest) */ {
 public:
  inline ClearGeofenceRequest() : ClearGeofenceRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClearGeofenceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearGeofenceRequest(const ClearGeofenceRequest& from);
  ClearGeofenceRequest(ClearGeofenceRequest&& from) noexcept
    : ClearGeofenceRequest() {
    *this = ::std::move(from);
  }

  inline ClearGeofenceRequest& operator=(const ClearGeofenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearGeofenceRequest& operator=(ClearGeofenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearGeofenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearGeofenceRequest* internal_default_instance() {
    return reinterpret_cast<const ClearGeofenceRequest*>(
               &_ClearGeofenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClearGeofenceRequest& a, ClearGeofenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearGeofenceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearGeofenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearGeofenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearGeofenceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearGeofenceRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearGeofenceRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.ClearGeofenceRequest";
  }
  protected:
  explicit ClearGeofenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.ClearGeofenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class ClearGeofenceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.ClearGeofenceResponse) */ {
 public:
  inline ClearGeofenceResponse() : ClearGeofenceResponse(nullptr) {}
  ~ClearGeofenceResponse() override;
  explicit PROTOBUF_CONSTEXPR ClearGeofenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearGeofenceResponse(const ClearGeofenceResponse& from);
  ClearGeofenceResponse(ClearGeofenceResponse&& from) noexcept
    : ClearGeofenceResponse() {
    *this = ::std::move(from);
  }

  inline ClearGeofenceResponse& operator=(const ClearGeofenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearGeofenceResponse& operator=(ClearGeofenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearGeofenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearGeofenceResponse* internal_default_instance() {
    return reinterpret_cast<const ClearGeofenceResponse*>(
               &_ClearGeofenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClearGeofenceResponse& a, ClearGeofenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearGeofenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearGeofenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearGeofenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearGeofenceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClearGeofenceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClearGeofenceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearGeofenceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.ClearGeofenceResponse";
  }
  protected:
  explicit ClearGeofenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeofenceResultFieldNumber = 1,
  };
  // .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
  bool has_geofence_result() const;
  private:
  bool _internal_has_geofence_result() const;
  public:
  void clear_geofence_result();
  const ::mavsdk::rpc::geofence::GeofenceResult& geofence_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::geofence::GeofenceResult* release_geofence_result();
  ::mavsdk::rpc::geofence::GeofenceResult* mutable_geofence_result();
  void set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* geofence_result);
  private:
  const ::mavsdk::rpc::geofence::GeofenceResult& _internal_geofence_result() const;
  ::mavsdk::rpc::geofence::GeofenceResult* _internal_mutable_geofence_result();
  public:
  void unsafe_arena_set_allocated_geofence_result(
      ::mavsdk::rpc::geofence::GeofenceResult* geofence_result);
  ::mavsdk::rpc::geofence::GeofenceResult* unsafe_arena_release_geofence_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.ClearGeofenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::geofence::GeofenceResult* geofence_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class GeofenceResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.GeofenceResult) */ {
 public:
  inline GeofenceResult() : GeofenceResult(nullptr) {}
  ~GeofenceResult() override;
  explicit PROTOBUF_CONSTEXPR GeofenceResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeofenceResult(const GeofenceResult& from);
  GeofenceResult(GeofenceResult&& from) noexcept
    : GeofenceResult() {
    *this = ::std::move(from);
  }

  inline GeofenceResult& operator=(const GeofenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeofenceResult& operator=(GeofenceResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeofenceResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeofenceResult* internal_default_instance() {
    return reinterpret_cast<const GeofenceResult*>(
               &_GeofenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GeofenceResult& a, GeofenceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GeofenceResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeofenceResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeofenceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeofenceResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeofenceResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GeofenceResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeofenceResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.GeofenceResult";
  }
  protected:
  explicit GeofenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GeofenceResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    GeofenceResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    GeofenceResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR =
    GeofenceResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TOO_MANY_GEOFENCE_ITEMS =
    GeofenceResult_Result_RESULT_TOO_MANY_GEOFENCE_ITEMS;
  static constexpr Result RESULT_BUSY =
    GeofenceResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_TIMEOUT =
    GeofenceResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_INVALID_ARGUMENT =
    GeofenceResult_Result_RESULT_INVALID_ARGUMENT;
  static constexpr Result RESULT_NO_SYSTEM =
    GeofenceResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return GeofenceResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    GeofenceResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    GeofenceResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    GeofenceResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return GeofenceResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return GeofenceResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return GeofenceResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.geofence.GeofenceResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::geofence::GeofenceResult_Result result() const;
  void set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value);
  private:
  ::mavsdk::rpc::geofence::GeofenceResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.GeofenceResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double latitude_deg = 1;
inline void Point::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double Point::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double Point::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Point.latitude_deg)
  return _internal_latitude_deg();
}
inline void Point::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void Point::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Point.latitude_deg)
}

// double longitude_deg = 2;
inline void Point::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double Point::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double Point::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Point.longitude_deg)
  return _internal_longitude_deg();
}
inline void Point::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void Point::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Point.longitude_deg)
}

// -------------------------------------------------------------------

// Polygon

// repeated .mavsdk.rpc.geofence.Point points = 1;
inline int Polygon::_internal_points_size() const {
  return points_.size();
}
inline int Polygon::points_size() const {
  return _internal_points_size();
}
inline void Polygon::clear_points() {
  points_.Clear();
}
inline ::mavsdk::rpc::geofence::Point* Polygon::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.Polygon.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point >*
Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.geofence.Polygon.points)
  return &points_;
}
inline const ::mavsdk::rpc::geofence::Point& Polygon::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::mavsdk::rpc::geofence::Point& Polygon::points(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Polygon.points)
  return _internal_points(index);
}
inline ::mavsdk::rpc::geofence::Point* Polygon::_internal_add_points() {
  return points_.Add();
}
inline ::mavsdk::rpc::geofence::Point* Polygon::add_points() {
  ::mavsdk::rpc::geofence::Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.geofence.Polygon.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point >&
Polygon::points() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.geofence.Polygon.points)
  return points_;
}

// .mavsdk.rpc.geofence.Polygon.FenceType fence_type = 2;
inline void Polygon::clear_fence_type() {
  fence_type_ = 0;
}
inline ::mavsdk::rpc::geofence::Polygon_FenceType Polygon::_internal_fence_type() const {
  return static_cast< ::mavsdk::rpc::geofence::Polygon_FenceType >(fence_type_);
}
inline ::mavsdk::rpc::geofence::Polygon_FenceType Polygon::fence_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Polygon.fence_type)
  return _internal_fence_type();
}
inline void Polygon::_internal_set_fence_type(::mavsdk::rpc::geofence::Polygon_FenceType value) {
  
  fence_type_ = value;
}
inline void Polygon::set_fence_type(::mavsdk::rpc::geofence::Polygon_FenceType value) {
  _internal_set_fence_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Polygon.fence_type)
}

// -------------------------------------------------------------------

// UploadGeofenceRequest

// repeated .mavsdk.rpc.geofence.Polygon polygons = 1;
inline int UploadGeofenceRequest::_internal_polygons_size() const {
  return polygons_.size();
}
inline int UploadGeofenceRequest::polygons_size() const {
  return _internal_polygons_size();
}
inline void UploadGeofenceRequest::clear_polygons() {
  polygons_.Clear();
}
inline ::mavsdk::rpc::geofence::Polygon* UploadGeofenceRequest::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon >*
UploadGeofenceRequest::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return &polygons_;
}
inline const ::mavsdk::rpc::geofence::Polygon& UploadGeofenceRequest::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::mavsdk::rpc::geofence::Polygon& UploadGeofenceRequest::polygons(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return _internal_polygons(index);
}
inline ::mavsdk::rpc::geofence::Polygon* UploadGeofenceRequest::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::mavsdk::rpc::geofence::Polygon* UploadGeofenceRequest::add_polygons() {
  ::mavsdk::rpc::geofence::Polygon* _add = _internal_add_polygons();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon >&
UploadGeofenceRequest::polygons() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// UploadGeofenceResponse

// .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
inline bool UploadGeofenceResponse::_internal_has_geofence_result() const {
  return this != internal_default_instance() && geofence_result_ != nullptr;
}
inline bool UploadGeofenceResponse::has_geofence_result() const {
  return _internal_has_geofence_result();
}
inline void UploadGeofenceResponse::clear_geofence_result() {
  if (GetArenaForAllocation() == nullptr && geofence_result_ != nullptr) {
    delete geofence_result_;
  }
  geofence_result_ = nullptr;
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& UploadGeofenceResponse::_internal_geofence_result() const {
  const ::mavsdk::rpc::geofence::GeofenceResult* p = geofence_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::geofence::GeofenceResult&>(
      ::mavsdk::rpc::geofence::_GeofenceResult_default_instance_);
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& UploadGeofenceResponse::geofence_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
  return _internal_geofence_result();
}
inline void UploadGeofenceResponse::unsafe_arena_set_allocated_geofence_result(
    ::mavsdk::rpc::geofence::GeofenceResult* geofence_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geofence_result_);
  }
  geofence_result_ = geofence_result;
  if (geofence_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::release_geofence_result() {
  
  ::mavsdk::rpc::geofence::GeofenceResult* temp = geofence_result_;
  geofence_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::unsafe_arena_release_geofence_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
  
  ::mavsdk::rpc::geofence::GeofenceResult* temp = geofence_result_;
  geofence_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::_internal_mutable_geofence_result() {
  
  if (geofence_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::geofence::GeofenceResult>(GetArenaForAllocation());
    geofence_result_ = p;
  }
  return geofence_result_;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::mutable_geofence_result() {
  ::mavsdk::rpc::geofence::GeofenceResult* _msg = _internal_mutable_geofence_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
  return _msg;
}
inline void UploadGeofenceResponse::set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* geofence_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete geofence_result_;
  }
  if (geofence_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(geofence_result);
    if (message_arena != submessage_arena) {
      geofence_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geofence_result, submessage_arena);
    }
    
  } else {
    
  }
  geofence_result_ = geofence_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
}

// -------------------------------------------------------------------

// ClearGeofenceRequest

// -------------------------------------------------------------------

// ClearGeofenceResponse

// .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
inline bool ClearGeofenceResponse::_internal_has_geofence_result() const {
  return this != internal_default_instance() && geofence_result_ != nullptr;
}
inline bool ClearGeofenceResponse::has_geofence_result() const {
  return _internal_has_geofence_result();
}
inline void ClearGeofenceResponse::clear_geofence_result() {
  if (GetArenaForAllocation() == nullptr && geofence_result_ != nullptr) {
    delete geofence_result_;
  }
  geofence_result_ = nullptr;
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& ClearGeofenceResponse::_internal_geofence_result() const {
  const ::mavsdk::rpc::geofence::GeofenceResult* p = geofence_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::geofence::GeofenceResult&>(
      ::mavsdk::rpc::geofence::_GeofenceResult_default_instance_);
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& ClearGeofenceResponse::geofence_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
  return _internal_geofence_result();
}
inline void ClearGeofenceResponse::unsafe_arena_set_allocated_geofence_result(
    ::mavsdk::rpc::geofence::GeofenceResult* geofence_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geofence_result_);
  }
  geofence_result_ = geofence_result;
  if (geofence_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
}
inline ::mavsdk::rpc::geofence::GeofenceResult* ClearGeofenceResponse::release_geofence_result() {
  
  ::mavsdk::rpc::geofence::GeofenceResult* temp = geofence_result_;
  geofence_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* ClearGeofenceResponse::unsafe_arena_release_geofence_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
  
  ::mavsdk::rpc::geofence::GeofenceResult* temp = geofence_result_;
  geofence_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* ClearGeofenceResponse::_internal_mutable_geofence_result() {
  
  if (geofence_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::geofence::GeofenceResult>(GetArenaForAllocation());
    geofence_result_ = p;
  }
  return geofence_result_;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* ClearGeofenceResponse::mutable_geofence_result() {
  ::mavsdk::rpc::geofence::GeofenceResult* _msg = _internal_mutable_geofence_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
  return _msg;
}
inline void ClearGeofenceResponse::set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* geofence_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete geofence_result_;
  }
  if (geofence_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(geofence_result);
    if (message_arena != submessage_arena) {
      geofence_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geofence_result, submessage_arena);
    }
    
  } else {
    
  }
  geofence_result_ = geofence_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
}

// -------------------------------------------------------------------

// GeofenceResult

// .mavsdk.rpc.geofence.GeofenceResult.Result result = 1;
inline void GeofenceResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::geofence::GeofenceResult_Result GeofenceResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::geofence::GeofenceResult_Result >(result_);
}
inline ::mavsdk::rpc::geofence::GeofenceResult_Result GeofenceResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.GeofenceResult.result)
  return _internal_result();
}
inline void GeofenceResult::_internal_set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value) {
  
  result_ = value;
}
inline void GeofenceResult::set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.GeofenceResult.result)
}

// string result_str = 2;
inline void GeofenceResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& GeofenceResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.GeofenceResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeofenceResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.GeofenceResult.result_str)
}
inline std::string* GeofenceResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.GeofenceResult.result_str)
  return _s;
}
inline const std::string& GeofenceResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void GeofenceResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* GeofenceResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* GeofenceResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.GeofenceResult.result_str)
  return result_str_.Release();
}
inline void GeofenceResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.GeofenceResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geofence
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::geofence::Polygon_FenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::geofence::Polygon_FenceType>() {
  return ::mavsdk::rpc::geofence::Polygon_FenceType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::geofence::GeofenceResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::geofence::GeofenceResult_Result>() {
  return ::mavsdk::rpc::geofence::GeofenceResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geofence_2fgeofence_2eproto
