// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mission_raw/mission_raw.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mission_5fraw_2fmission_5fraw_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mission_5fraw_2fmission_5fraw_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mission_5fraw_2fmission_5fraw_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mission_5fraw_2fmission_5fraw_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mission_5fraw_2fmission_5fraw_2eproto;
namespace mavsdk {
namespace rpc {
namespace mission_raw {
class CancelMissionDownloadRequest;
struct CancelMissionDownloadRequestDefaultTypeInternal;
extern CancelMissionDownloadRequestDefaultTypeInternal _CancelMissionDownloadRequest_default_instance_;
class CancelMissionDownloadResponse;
struct CancelMissionDownloadResponseDefaultTypeInternal;
extern CancelMissionDownloadResponseDefaultTypeInternal _CancelMissionDownloadResponse_default_instance_;
class CancelMissionUploadRequest;
struct CancelMissionUploadRequestDefaultTypeInternal;
extern CancelMissionUploadRequestDefaultTypeInternal _CancelMissionUploadRequest_default_instance_;
class CancelMissionUploadResponse;
struct CancelMissionUploadResponseDefaultTypeInternal;
extern CancelMissionUploadResponseDefaultTypeInternal _CancelMissionUploadResponse_default_instance_;
class ClearMissionRequest;
struct ClearMissionRequestDefaultTypeInternal;
extern ClearMissionRequestDefaultTypeInternal _ClearMissionRequest_default_instance_;
class ClearMissionResponse;
struct ClearMissionResponseDefaultTypeInternal;
extern ClearMissionResponseDefaultTypeInternal _ClearMissionResponse_default_instance_;
class DownloadMissionRequest;
struct DownloadMissionRequestDefaultTypeInternal;
extern DownloadMissionRequestDefaultTypeInternal _DownloadMissionRequest_default_instance_;
class DownloadMissionResponse;
struct DownloadMissionResponseDefaultTypeInternal;
extern DownloadMissionResponseDefaultTypeInternal _DownloadMissionResponse_default_instance_;
class ImportQgroundcontrolMissionRequest;
struct ImportQgroundcontrolMissionRequestDefaultTypeInternal;
extern ImportQgroundcontrolMissionRequestDefaultTypeInternal _ImportQgroundcontrolMissionRequest_default_instance_;
class ImportQgroundcontrolMissionResponse;
struct ImportQgroundcontrolMissionResponseDefaultTypeInternal;
extern ImportQgroundcontrolMissionResponseDefaultTypeInternal _ImportQgroundcontrolMissionResponse_default_instance_;
class MissionChangedResponse;
struct MissionChangedResponseDefaultTypeInternal;
extern MissionChangedResponseDefaultTypeInternal _MissionChangedResponse_default_instance_;
class MissionImportData;
struct MissionImportDataDefaultTypeInternal;
extern MissionImportDataDefaultTypeInternal _MissionImportData_default_instance_;
class MissionItem;
struct MissionItemDefaultTypeInternal;
extern MissionItemDefaultTypeInternal _MissionItem_default_instance_;
class MissionProgress;
struct MissionProgressDefaultTypeInternal;
extern MissionProgressDefaultTypeInternal _MissionProgress_default_instance_;
class MissionProgressResponse;
struct MissionProgressResponseDefaultTypeInternal;
extern MissionProgressResponseDefaultTypeInternal _MissionProgressResponse_default_instance_;
class MissionRawResult;
struct MissionRawResultDefaultTypeInternal;
extern MissionRawResultDefaultTypeInternal _MissionRawResult_default_instance_;
class PauseMissionRequest;
struct PauseMissionRequestDefaultTypeInternal;
extern PauseMissionRequestDefaultTypeInternal _PauseMissionRequest_default_instance_;
class PauseMissionResponse;
struct PauseMissionResponseDefaultTypeInternal;
extern PauseMissionResponseDefaultTypeInternal _PauseMissionResponse_default_instance_;
class SetCurrentMissionItemRequest;
struct SetCurrentMissionItemRequestDefaultTypeInternal;
extern SetCurrentMissionItemRequestDefaultTypeInternal _SetCurrentMissionItemRequest_default_instance_;
class SetCurrentMissionItemResponse;
struct SetCurrentMissionItemResponseDefaultTypeInternal;
extern SetCurrentMissionItemResponseDefaultTypeInternal _SetCurrentMissionItemResponse_default_instance_;
class StartMissionRequest;
struct StartMissionRequestDefaultTypeInternal;
extern StartMissionRequestDefaultTypeInternal _StartMissionRequest_default_instance_;
class StartMissionResponse;
struct StartMissionResponseDefaultTypeInternal;
extern StartMissionResponseDefaultTypeInternal _StartMissionResponse_default_instance_;
class SubscribeMissionChangedRequest;
struct SubscribeMissionChangedRequestDefaultTypeInternal;
extern SubscribeMissionChangedRequestDefaultTypeInternal _SubscribeMissionChangedRequest_default_instance_;
class SubscribeMissionProgressRequest;
struct SubscribeMissionProgressRequestDefaultTypeInternal;
extern SubscribeMissionProgressRequestDefaultTypeInternal _SubscribeMissionProgressRequest_default_instance_;
class UploadMissionRequest;
struct UploadMissionRequestDefaultTypeInternal;
extern UploadMissionRequestDefaultTypeInternal _UploadMissionRequest_default_instance_;
class UploadMissionResponse;
struct UploadMissionResponseDefaultTypeInternal;
extern UploadMissionResponseDefaultTypeInternal _UploadMissionResponse_default_instance_;
}  // namespace mission_raw
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::CancelMissionUploadRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::CancelMissionUploadResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::ClearMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::ClearMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::ClearMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::ClearMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::DownloadMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::DownloadMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::DownloadMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::DownloadMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::MissionChangedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionChangedResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::MissionImportData* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionImportData>(Arena*);
template<> ::mavsdk::rpc::mission_raw::MissionItem* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionItem>(Arena*);
template<> ::mavsdk::rpc::mission_raw::MissionProgress* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionProgress>(Arena*);
template<> ::mavsdk::rpc::mission_raw::MissionProgressResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionProgressResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::MissionRawResult* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(Arena*);
template<> ::mavsdk::rpc::mission_raw::PauseMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::PauseMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::PauseMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::PauseMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::StartMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::StartMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::StartMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::StartMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::UploadMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::UploadMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw::UploadMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw::UploadMissionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace mission_raw {

enum MissionRawResult_Result : int {
  MissionRawResult_Result_RESULT_UNKNOWN = 0,
  MissionRawResult_Result_RESULT_SUCCESS = 1,
  MissionRawResult_Result_RESULT_ERROR = 2,
  MissionRawResult_Result_RESULT_TOO_MANY_MISSION_ITEMS = 3,
  MissionRawResult_Result_RESULT_BUSY = 4,
  MissionRawResult_Result_RESULT_TIMEOUT = 5,
  MissionRawResult_Result_RESULT_INVALID_ARGUMENT = 6,
  MissionRawResult_Result_RESULT_UNSUPPORTED = 7,
  MissionRawResult_Result_RESULT_NO_MISSION_AVAILABLE = 8,
  MissionRawResult_Result_RESULT_TRANSFER_CANCELLED = 9,
  MissionRawResult_Result_RESULT_FAILED_TO_OPEN_QGC_PLAN = 10,
  MissionRawResult_Result_RESULT_FAILED_TO_PARSE_QGC_PLAN = 11,
  MissionRawResult_Result_RESULT_NO_SYSTEM = 12,
  MissionRawResult_Result_RESULT_DENIED = 13,
  MissionRawResult_Result_MissionRawResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MissionRawResult_Result_MissionRawResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MissionRawResult_Result_IsValid(int value);
constexpr MissionRawResult_Result MissionRawResult_Result_Result_MIN = MissionRawResult_Result_RESULT_UNKNOWN;
constexpr MissionRawResult_Result MissionRawResult_Result_Result_MAX = MissionRawResult_Result_RESULT_DENIED;
constexpr int MissionRawResult_Result_Result_ARRAYSIZE = MissionRawResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionRawResult_Result_descriptor();
template<typename T>
inline const std::string& MissionRawResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MissionRawResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MissionRawResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MissionRawResult_Result_descriptor(), enum_t_value);
}
inline bool MissionRawResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MissionRawResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MissionRawResult_Result>(
    MissionRawResult_Result_descriptor(), name, value);
}
// ===================================================================

class UploadMissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.UploadMissionRequest) */ {
 public:
  inline UploadMissionRequest() : UploadMissionRequest(nullptr) {}
  ~UploadMissionRequest() override;
  explicit PROTOBUF_CONSTEXPR UploadMissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadMissionRequest(const UploadMissionRequest& from);
  UploadMissionRequest(UploadMissionRequest&& from) noexcept
    : UploadMissionRequest() {
    *this = ::std::move(from);
  }

  inline UploadMissionRequest& operator=(const UploadMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMissionRequest& operator=(UploadMissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadMissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadMissionRequest* internal_default_instance() {
    return reinterpret_cast<const UploadMissionRequest*>(
               &_UploadMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadMissionRequest& a, UploadMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadMissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadMissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadMissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMissionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.UploadMissionRequest";
  }
  protected:
  explicit UploadMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionItemsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.mission_raw.MissionItem mission_items = 1;
  int mission_items_size() const;
  private:
  int _internal_mission_items_size() const;
  public:
  void clear_mission_items();
  ::mavsdk::rpc::mission_raw::MissionItem* mutable_mission_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
      mutable_mission_items();
  private:
  const ::mavsdk::rpc::mission_raw::MissionItem& _internal_mission_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* _internal_add_mission_items();
  public:
  const ::mavsdk::rpc::mission_raw::MissionItem& mission_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* add_mission_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
      mission_items() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.UploadMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem > mission_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class UploadMissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.UploadMissionResponse) */ {
 public:
  inline UploadMissionResponse() : UploadMissionResponse(nullptr) {}
  ~UploadMissionResponse() override;
  explicit PROTOBUF_CONSTEXPR UploadMissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadMissionResponse(const UploadMissionResponse& from);
  UploadMissionResponse(UploadMissionResponse&& from) noexcept
    : UploadMissionResponse() {
    *this = ::std::move(from);
  }

  inline UploadMissionResponse& operator=(const UploadMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMissionResponse& operator=(UploadMissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadMissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadMissionResponse* internal_default_instance() {
    return reinterpret_cast<const UploadMissionResponse*>(
               &_UploadMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadMissionResponse& a, UploadMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadMissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadMissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadMissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMissionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.UploadMissionResponse";
  }
  protected:
  explicit UploadMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.UploadMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionUploadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.CancelMissionUploadRequest) */ {
 public:
  inline CancelMissionUploadRequest() : CancelMissionUploadRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CancelMissionUploadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelMissionUploadRequest(const CancelMissionUploadRequest& from);
  CancelMissionUploadRequest(CancelMissionUploadRequest&& from) noexcept
    : CancelMissionUploadRequest() {
    *this = ::std::move(from);
  }

  inline CancelMissionUploadRequest& operator=(const CancelMissionUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionUploadRequest& operator=(CancelMissionUploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelMissionUploadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelMissionUploadRequest* internal_default_instance() {
    return reinterpret_cast<const CancelMissionUploadRequest*>(
               &_CancelMissionUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CancelMissionUploadRequest& a, CancelMissionUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionUploadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelMissionUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelMissionUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelMissionUploadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelMissionUploadRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelMissionUploadRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.CancelMissionUploadRequest";
  }
  protected:
  explicit CancelMissionUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.CancelMissionUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionUploadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.CancelMissionUploadResponse) */ {
 public:
  inline CancelMissionUploadResponse() : CancelMissionUploadResponse(nullptr) {}
  ~CancelMissionUploadResponse() override;
  explicit PROTOBUF_CONSTEXPR CancelMissionUploadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelMissionUploadResponse(const CancelMissionUploadResponse& from);
  CancelMissionUploadResponse(CancelMissionUploadResponse&& from) noexcept
    : CancelMissionUploadResponse() {
    *this = ::std::move(from);
  }

  inline CancelMissionUploadResponse& operator=(const CancelMissionUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionUploadResponse& operator=(CancelMissionUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelMissionUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelMissionUploadResponse* internal_default_instance() {
    return reinterpret_cast<const CancelMissionUploadResponse*>(
               &_CancelMissionUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelMissionUploadResponse& a, CancelMissionUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionUploadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelMissionUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelMissionUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelMissionUploadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelMissionUploadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelMissionUploadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMissionUploadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.CancelMissionUploadResponse";
  }
  protected:
  explicit CancelMissionUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.CancelMissionUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class DownloadMissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.DownloadMissionRequest) */ {
 public:
  inline DownloadMissionRequest() : DownloadMissionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DownloadMissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadMissionRequest(const DownloadMissionRequest& from);
  DownloadMissionRequest(DownloadMissionRequest&& from) noexcept
    : DownloadMissionRequest() {
    *this = ::std::move(from);
  }

  inline DownloadMissionRequest& operator=(const DownloadMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMissionRequest& operator=(DownloadMissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadMissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadMissionRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadMissionRequest*>(
               &_DownloadMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DownloadMissionRequest& a, DownloadMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadMissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadMissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DownloadMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DownloadMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.DownloadMissionRequest";
  }
  protected:
  explicit DownloadMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.DownloadMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class DownloadMissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.DownloadMissionResponse) */ {
 public:
  inline DownloadMissionResponse() : DownloadMissionResponse(nullptr) {}
  ~DownloadMissionResponse() override;
  explicit PROTOBUF_CONSTEXPR DownloadMissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadMissionResponse(const DownloadMissionResponse& from);
  DownloadMissionResponse(DownloadMissionResponse&& from) noexcept
    : DownloadMissionResponse() {
    *this = ::std::move(from);
  }

  inline DownloadMissionResponse& operator=(const DownloadMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMissionResponse& operator=(DownloadMissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadMissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadMissionResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadMissionResponse*>(
               &_DownloadMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DownloadMissionResponse& a, DownloadMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadMissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadMissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadMissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadMissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadMissionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.DownloadMissionResponse";
  }
  protected:
  explicit DownloadMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionItemsFieldNumber = 2,
    kMissionRawResultFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.mission_raw.MissionItem mission_items = 2;
  int mission_items_size() const;
  private:
  int _internal_mission_items_size() const;
  public:
  void clear_mission_items();
  ::mavsdk::rpc::mission_raw::MissionItem* mutable_mission_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
      mutable_mission_items();
  private:
  const ::mavsdk::rpc::mission_raw::MissionItem& _internal_mission_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* _internal_add_mission_items();
  public:
  const ::mavsdk::rpc::mission_raw::MissionItem& mission_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* add_mission_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
      mission_items() const;

  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.DownloadMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem > mission_items_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionDownloadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.CancelMissionDownloadRequest) */ {
 public:
  inline CancelMissionDownloadRequest() : CancelMissionDownloadRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CancelMissionDownloadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelMissionDownloadRequest(const CancelMissionDownloadRequest& from);
  CancelMissionDownloadRequest(CancelMissionDownloadRequest&& from) noexcept
    : CancelMissionDownloadRequest() {
    *this = ::std::move(from);
  }

  inline CancelMissionDownloadRequest& operator=(const CancelMissionDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionDownloadRequest& operator=(CancelMissionDownloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelMissionDownloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelMissionDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const CancelMissionDownloadRequest*>(
               &_CancelMissionDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CancelMissionDownloadRequest& a, CancelMissionDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionDownloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelMissionDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelMissionDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelMissionDownloadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelMissionDownloadRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelMissionDownloadRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.CancelMissionDownloadRequest";
  }
  protected:
  explicit CancelMissionDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.CancelMissionDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionDownloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.CancelMissionDownloadResponse) */ {
 public:
  inline CancelMissionDownloadResponse() : CancelMissionDownloadResponse(nullptr) {}
  ~CancelMissionDownloadResponse() override;
  explicit PROTOBUF_CONSTEXPR CancelMissionDownloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelMissionDownloadResponse(const CancelMissionDownloadResponse& from);
  CancelMissionDownloadResponse(CancelMissionDownloadResponse&& from) noexcept
    : CancelMissionDownloadResponse() {
    *this = ::std::move(from);
  }

  inline CancelMissionDownloadResponse& operator=(const CancelMissionDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionDownloadResponse& operator=(CancelMissionDownloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelMissionDownloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelMissionDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const CancelMissionDownloadResponse*>(
               &_CancelMissionDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CancelMissionDownloadResponse& a, CancelMissionDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionDownloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelMissionDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelMissionDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelMissionDownloadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelMissionDownloadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelMissionDownloadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMissionDownloadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.CancelMissionDownloadResponse";
  }
  protected:
  explicit CancelMissionDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.CancelMissionDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class StartMissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.StartMissionRequest) */ {
 public:
  inline StartMissionRequest() : StartMissionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StartMissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartMissionRequest(const StartMissionRequest& from);
  StartMissionRequest(StartMissionRequest&& from) noexcept
    : StartMissionRequest() {
    *this = ::std::move(from);
  }

  inline StartMissionRequest& operator=(const StartMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMissionRequest& operator=(StartMissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartMissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartMissionRequest* internal_default_instance() {
    return reinterpret_cast<const StartMissionRequest*>(
               &_StartMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StartMissionRequest& a, StartMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartMissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.StartMissionRequest";
  }
  protected:
  explicit StartMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.StartMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class StartMissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.StartMissionResponse) */ {
 public:
  inline StartMissionResponse() : StartMissionResponse(nullptr) {}
  ~StartMissionResponse() override;
  explicit PROTOBUF_CONSTEXPR StartMissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartMissionResponse(const StartMissionResponse& from);
  StartMissionResponse(StartMissionResponse&& from) noexcept
    : StartMissionResponse() {
    *this = ::std::move(from);
  }

  inline StartMissionResponse& operator=(const StartMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMissionResponse& operator=(StartMissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartMissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartMissionResponse* internal_default_instance() {
    return reinterpret_cast<const StartMissionResponse*>(
               &_StartMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StartMissionResponse& a, StartMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartMissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartMissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartMissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMissionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.StartMissionResponse";
  }
  protected:
  explicit StartMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.StartMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class PauseMissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.PauseMissionRequest) */ {
 public:
  inline PauseMissionRequest() : PauseMissionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PauseMissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PauseMissionRequest(const PauseMissionRequest& from);
  PauseMissionRequest(PauseMissionRequest&& from) noexcept
    : PauseMissionRequest() {
    *this = ::std::move(from);
  }

  inline PauseMissionRequest& operator=(const PauseMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseMissionRequest& operator=(PauseMissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PauseMissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseMissionRequest* internal_default_instance() {
    return reinterpret_cast<const PauseMissionRequest*>(
               &_PauseMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PauseMissionRequest& a, PauseMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseMissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PauseMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PauseMissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PauseMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PauseMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.PauseMissionRequest";
  }
  protected:
  explicit PauseMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.PauseMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class PauseMissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.PauseMissionResponse) */ {
 public:
  inline PauseMissionResponse() : PauseMissionResponse(nullptr) {}
  ~PauseMissionResponse() override;
  explicit PROTOBUF_CONSTEXPR PauseMissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PauseMissionResponse(const PauseMissionResponse& from);
  PauseMissionResponse(PauseMissionResponse&& from) noexcept
    : PauseMissionResponse() {
    *this = ::std::move(from);
  }

  inline PauseMissionResponse& operator=(const PauseMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseMissionResponse& operator=(PauseMissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PauseMissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseMissionResponse* internal_default_instance() {
    return reinterpret_cast<const PauseMissionResponse*>(
               &_PauseMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PauseMissionResponse& a, PauseMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseMissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PauseMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PauseMissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PauseMissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PauseMissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseMissionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.PauseMissionResponse";
  }
  protected:
  explicit PauseMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.PauseMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class ClearMissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.ClearMissionRequest) */ {
 public:
  inline ClearMissionRequest() : ClearMissionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClearMissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearMissionRequest(const ClearMissionRequest& from);
  ClearMissionRequest(ClearMissionRequest&& from) noexcept
    : ClearMissionRequest() {
    *this = ::std::move(from);
  }

  inline ClearMissionRequest& operator=(const ClearMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMissionRequest& operator=(ClearMissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearMissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearMissionRequest* internal_default_instance() {
    return reinterpret_cast<const ClearMissionRequest*>(
               &_ClearMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClearMissionRequest& a, ClearMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearMissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.ClearMissionRequest";
  }
  protected:
  explicit ClearMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.ClearMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class ClearMissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.ClearMissionResponse) */ {
 public:
  inline ClearMissionResponse() : ClearMissionResponse(nullptr) {}
  ~ClearMissionResponse() override;
  explicit PROTOBUF_CONSTEXPR ClearMissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearMissionResponse(const ClearMissionResponse& from);
  ClearMissionResponse(ClearMissionResponse&& from) noexcept
    : ClearMissionResponse() {
    *this = ::std::move(from);
  }

  inline ClearMissionResponse& operator=(const ClearMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMissionResponse& operator=(ClearMissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearMissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearMissionResponse* internal_default_instance() {
    return reinterpret_cast<const ClearMissionResponse*>(
               &_ClearMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ClearMissionResponse& a, ClearMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearMissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClearMissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClearMissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearMissionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.ClearMissionResponse";
  }
  protected:
  explicit ClearMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.ClearMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentMissionItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.SetCurrentMissionItemRequest) */ {
 public:
  inline SetCurrentMissionItemRequest() : SetCurrentMissionItemRequest(nullptr) {}
  ~SetCurrentMissionItemRequest() override;
  explicit PROTOBUF_CONSTEXPR SetCurrentMissionItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCurrentMissionItemRequest(const SetCurrentMissionItemRequest& from);
  SetCurrentMissionItemRequest(SetCurrentMissionItemRequest&& from) noexcept
    : SetCurrentMissionItemRequest() {
    *this = ::std::move(from);
  }

  inline SetCurrentMissionItemRequest& operator=(const SetCurrentMissionItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentMissionItemRequest& operator=(SetCurrentMissionItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCurrentMissionItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCurrentMissionItemRequest* internal_default_instance() {
    return reinterpret_cast<const SetCurrentMissionItemRequest*>(
               &_SetCurrentMissionItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetCurrentMissionItemRequest& a, SetCurrentMissionItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentMissionItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentMissionItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCurrentMissionItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCurrentMissionItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCurrentMissionItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCurrentMissionItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentMissionItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.SetCurrentMissionItemRequest";
  }
  protected:
  explicit SetCurrentMissionItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.SetCurrentMissionItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentMissionItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse) */ {
 public:
  inline SetCurrentMissionItemResponse() : SetCurrentMissionItemResponse(nullptr) {}
  ~SetCurrentMissionItemResponse() override;
  explicit PROTOBUF_CONSTEXPR SetCurrentMissionItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCurrentMissionItemResponse(const SetCurrentMissionItemResponse& from);
  SetCurrentMissionItemResponse(SetCurrentMissionItemResponse&& from) noexcept
    : SetCurrentMissionItemResponse() {
    *this = ::std::move(from);
  }

  inline SetCurrentMissionItemResponse& operator=(const SetCurrentMissionItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentMissionItemResponse& operator=(SetCurrentMissionItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCurrentMissionItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCurrentMissionItemResponse* internal_default_instance() {
    return reinterpret_cast<const SetCurrentMissionItemResponse*>(
               &_SetCurrentMissionItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetCurrentMissionItemResponse& a, SetCurrentMissionItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentMissionItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentMissionItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCurrentMissionItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCurrentMissionItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCurrentMissionItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCurrentMissionItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentMissionItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse";
  }
  protected:
  explicit SetCurrentMissionItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMissionProgressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.SubscribeMissionProgressRequest) */ {
 public:
  inline SubscribeMissionProgressRequest() : SubscribeMissionProgressRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeMissionProgressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeMissionProgressRequest(const SubscribeMissionProgressRequest& from);
  SubscribeMissionProgressRequest(SubscribeMissionProgressRequest&& from) noexcept
    : SubscribeMissionProgressRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMissionProgressRequest& operator=(const SubscribeMissionProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMissionProgressRequest& operator=(SubscribeMissionProgressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeMissionProgressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeMissionProgressRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMissionProgressRequest*>(
               &_SubscribeMissionProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SubscribeMissionProgressRequest& a, SubscribeMissionProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMissionProgressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeMissionProgressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeMissionProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeMissionProgressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeMissionProgressRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeMissionProgressRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.SubscribeMissionProgressRequest";
  }
  protected:
  explicit SubscribeMissionProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.SubscribeMissionProgressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class MissionProgressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.MissionProgressResponse) */ {
 public:
  inline MissionProgressResponse() : MissionProgressResponse(nullptr) {}
  ~MissionProgressResponse() override;
  explicit PROTOBUF_CONSTEXPR MissionProgressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionProgressResponse(const MissionProgressResponse& from);
  MissionProgressResponse(MissionProgressResponse&& from) noexcept
    : MissionProgressResponse() {
    *this = ::std::move(from);
  }

  inline MissionProgressResponse& operator=(const MissionProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionProgressResponse& operator=(MissionProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionProgressResponse* internal_default_instance() {
    return reinterpret_cast<const MissionProgressResponse*>(
               &_MissionProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MissionProgressResponse& a, MissionProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionProgressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionProgressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionProgressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionProgressResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionProgressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.MissionProgressResponse";
  }
  protected:
  explicit MissionProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionProgressFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw.MissionProgress mission_progress = 1;
  bool has_mission_progress() const;
  private:
  bool _internal_has_mission_progress() const;
  public:
  void clear_mission_progress();
  const ::mavsdk::rpc::mission_raw::MissionProgress& mission_progress() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionProgress* release_mission_progress();
  ::mavsdk::rpc::mission_raw::MissionProgress* mutable_mission_progress();
  void set_allocated_mission_progress(::mavsdk::rpc::mission_raw::MissionProgress* mission_progress);
  private:
  const ::mavsdk::rpc::mission_raw::MissionProgress& _internal_mission_progress() const;
  ::mavsdk::rpc::mission_raw::MissionProgress* _internal_mutable_mission_progress();
  public:
  void unsafe_arena_set_allocated_mission_progress(
      ::mavsdk::rpc::mission_raw::MissionProgress* mission_progress);
  ::mavsdk::rpc::mission_raw::MissionProgress* unsafe_arena_release_mission_progress();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.MissionProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionProgress* mission_progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMissionChangedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.SubscribeMissionChangedRequest) */ {
 public:
  inline SubscribeMissionChangedRequest() : SubscribeMissionChangedRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeMissionChangedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeMissionChangedRequest(const SubscribeMissionChangedRequest& from);
  SubscribeMissionChangedRequest(SubscribeMissionChangedRequest&& from) noexcept
    : SubscribeMissionChangedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMissionChangedRequest& operator=(const SubscribeMissionChangedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMissionChangedRequest& operator=(SubscribeMissionChangedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeMissionChangedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeMissionChangedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMissionChangedRequest*>(
               &_SubscribeMissionChangedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SubscribeMissionChangedRequest& a, SubscribeMissionChangedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMissionChangedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeMissionChangedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeMissionChangedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeMissionChangedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeMissionChangedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeMissionChangedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.SubscribeMissionChangedRequest";
  }
  protected:
  explicit SubscribeMissionChangedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.SubscribeMissionChangedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class MissionChangedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.MissionChangedResponse) */ {
 public:
  inline MissionChangedResponse() : MissionChangedResponse(nullptr) {}
  ~MissionChangedResponse() override;
  explicit PROTOBUF_CONSTEXPR MissionChangedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionChangedResponse(const MissionChangedResponse& from);
  MissionChangedResponse(MissionChangedResponse&& from) noexcept
    : MissionChangedResponse() {
    *this = ::std::move(from);
  }

  inline MissionChangedResponse& operator=(const MissionChangedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionChangedResponse& operator=(MissionChangedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionChangedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionChangedResponse* internal_default_instance() {
    return reinterpret_cast<const MissionChangedResponse*>(
               &_MissionChangedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MissionChangedResponse& a, MissionChangedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionChangedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionChangedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionChangedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionChangedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionChangedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionChangedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionChangedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.MissionChangedResponse";
  }
  protected:
  explicit MissionChangedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionChangedFieldNumber = 1,
  };
  // bool mission_changed = 1;
  void clear_mission_changed();
  bool mission_changed() const;
  void set_mission_changed(bool value);
  private:
  bool _internal_mission_changed() const;
  void _internal_set_mission_changed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.MissionChangedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool mission_changed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class ImportQgroundcontrolMissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest) */ {
 public:
  inline ImportQgroundcontrolMissionRequest() : ImportQgroundcontrolMissionRequest(nullptr) {}
  ~ImportQgroundcontrolMissionRequest() override;
  explicit PROTOBUF_CONSTEXPR ImportQgroundcontrolMissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportQgroundcontrolMissionRequest(const ImportQgroundcontrolMissionRequest& from);
  ImportQgroundcontrolMissionRequest(ImportQgroundcontrolMissionRequest&& from) noexcept
    : ImportQgroundcontrolMissionRequest() {
    *this = ::std::move(from);
  }

  inline ImportQgroundcontrolMissionRequest& operator=(const ImportQgroundcontrolMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportQgroundcontrolMissionRequest& operator=(ImportQgroundcontrolMissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportQgroundcontrolMissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportQgroundcontrolMissionRequest* internal_default_instance() {
    return reinterpret_cast<const ImportQgroundcontrolMissionRequest*>(
               &_ImportQgroundcontrolMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ImportQgroundcontrolMissionRequest& a, ImportQgroundcontrolMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportQgroundcontrolMissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportQgroundcontrolMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportQgroundcontrolMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportQgroundcontrolMissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportQgroundcontrolMissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImportQgroundcontrolMissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportQgroundcontrolMissionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest";
  }
  protected:
  explicit ImportQgroundcontrolMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQgcPlanPathFieldNumber = 1,
  };
  // string qgc_plan_path = 1;
  void clear_qgc_plan_path();
  const std::string& qgc_plan_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_qgc_plan_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_qgc_plan_path();
  PROTOBUF_NODISCARD std::string* release_qgc_plan_path();
  void set_allocated_qgc_plan_path(std::string* qgc_plan_path);
  private:
  const std::string& _internal_qgc_plan_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_qgc_plan_path(const std::string& value);
  std::string* _internal_mutable_qgc_plan_path();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qgc_plan_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class ImportQgroundcontrolMissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse) */ {
 public:
  inline ImportQgroundcontrolMissionResponse() : ImportQgroundcontrolMissionResponse(nullptr) {}
  ~ImportQgroundcontrolMissionResponse() override;
  explicit PROTOBUF_CONSTEXPR ImportQgroundcontrolMissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportQgroundcontrolMissionResponse(const ImportQgroundcontrolMissionResponse& from);
  ImportQgroundcontrolMissionResponse(ImportQgroundcontrolMissionResponse&& from) noexcept
    : ImportQgroundcontrolMissionResponse() {
    *this = ::std::move(from);
  }

  inline ImportQgroundcontrolMissionResponse& operator=(const ImportQgroundcontrolMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportQgroundcontrolMissionResponse& operator=(ImportQgroundcontrolMissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportQgroundcontrolMissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportQgroundcontrolMissionResponse* internal_default_instance() {
    return reinterpret_cast<const ImportQgroundcontrolMissionResponse*>(
               &_ImportQgroundcontrolMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ImportQgroundcontrolMissionResponse& a, ImportQgroundcontrolMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportQgroundcontrolMissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportQgroundcontrolMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportQgroundcontrolMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportQgroundcontrolMissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportQgroundcontrolMissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImportQgroundcontrolMissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportQgroundcontrolMissionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse";
  }
  protected:
  explicit ImportQgroundcontrolMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawResultFieldNumber = 1,
    kMissionImportDataFieldNumber = 2,
  };
  // .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
  bool has_mission_raw_result() const;
  private:
  bool _internal_has_mission_raw_result() const;
  public:
  void clear_mission_raw_result();
  const ::mavsdk::rpc::mission_raw::MissionRawResult& mission_raw_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionRawResult* release_mission_raw_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult* mutable_mission_raw_result();
  void set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  private:
  const ::mavsdk::rpc::mission_raw::MissionRawResult& _internal_mission_raw_result() const;
  ::mavsdk::rpc::mission_raw::MissionRawResult* _internal_mutable_mission_raw_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_result(
      ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result);
  ::mavsdk::rpc::mission_raw::MissionRawResult* unsafe_arena_release_mission_raw_result();

  // .mavsdk.rpc.mission_raw.MissionImportData mission_import_data = 2;
  bool has_mission_import_data() const;
  private:
  bool _internal_has_mission_import_data() const;
  public:
  void clear_mission_import_data();
  const ::mavsdk::rpc::mission_raw::MissionImportData& mission_import_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw::MissionImportData* release_mission_import_data();
  ::mavsdk::rpc::mission_raw::MissionImportData* mutable_mission_import_data();
  void set_allocated_mission_import_data(::mavsdk::rpc::mission_raw::MissionImportData* mission_import_data);
  private:
  const ::mavsdk::rpc::mission_raw::MissionImportData& _internal_mission_import_data() const;
  ::mavsdk::rpc::mission_raw::MissionImportData* _internal_mutable_mission_import_data();
  public:
  void unsafe_arena_set_allocated_mission_import_data(
      ::mavsdk::rpc::mission_raw::MissionImportData* mission_import_data);
  ::mavsdk::rpc::mission_raw::MissionImportData* unsafe_arena_release_mission_import_data();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result_;
  ::mavsdk::rpc::mission_raw::MissionImportData* mission_import_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class MissionProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.MissionProgress) */ {
 public:
  inline MissionProgress() : MissionProgress(nullptr) {}
  ~MissionProgress() override;
  explicit PROTOBUF_CONSTEXPR MissionProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionProgress(const MissionProgress& from);
  MissionProgress(MissionProgress&& from) noexcept
    : MissionProgress() {
    *this = ::std::move(from);
  }

  inline MissionProgress& operator=(const MissionProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionProgress& operator=(MissionProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionProgress* internal_default_instance() {
    return reinterpret_cast<const MissionProgress*>(
               &_MissionProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MissionProgress& a, MissionProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.MissionProgress";
  }
  protected:
  explicit MissionProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // int32 current = 1;
  void clear_current();
  int32_t current() const;
  void set_current(int32_t value);
  private:
  int32_t _internal_current() const;
  void _internal_set_current(int32_t value);
  public:

  // int32 total = 2;
  void clear_total();
  int32_t total() const;
  void set_total(int32_t value);
  private:
  int32_t _internal_total() const;
  void _internal_set_total(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.MissionProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t current_;
  int32_t total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class MissionItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.MissionItem) */ {
 public:
  inline MissionItem() : MissionItem(nullptr) {}
  ~MissionItem() override;
  explicit PROTOBUF_CONSTEXPR MissionItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionItem(const MissionItem& from);
  MissionItem(MissionItem&& from) noexcept
    : MissionItem() {
    *this = ::std::move(from);
  }

  inline MissionItem& operator=(const MissionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionItem& operator=(MissionItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionItem* internal_default_instance() {
    return reinterpret_cast<const MissionItem*>(
               &_MissionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MissionItem& a, MissionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.MissionItem";
  }
  protected:
  explicit MissionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqFieldNumber = 1,
    kFrameFieldNumber = 2,
    kCommandFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kAutocontinueFieldNumber = 5,
    kParam1FieldNumber = 6,
    kParam2FieldNumber = 7,
    kParam3FieldNumber = 8,
    kParam4FieldNumber = 9,
    kXFieldNumber = 10,
    kYFieldNumber = 11,
    kZFieldNumber = 12,
    kMissionTypeFieldNumber = 13,
  };
  // uint32 seq = 1;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // uint32 frame = 2;
  void clear_frame();
  uint32_t frame() const;
  void set_frame(uint32_t value);
  private:
  uint32_t _internal_frame() const;
  void _internal_set_frame(uint32_t value);
  public:

  // uint32 command = 3;
  void clear_command();
  uint32_t command() const;
  void set_command(uint32_t value);
  private:
  uint32_t _internal_command() const;
  void _internal_set_command(uint32_t value);
  public:

  // uint32 current = 4;
  void clear_current();
  uint32_t current() const;
  void set_current(uint32_t value);
  private:
  uint32_t _internal_current() const;
  void _internal_set_current(uint32_t value);
  public:

  // uint32 autocontinue = 5;
  void clear_autocontinue();
  uint32_t autocontinue() const;
  void set_autocontinue(uint32_t value);
  private:
  uint32_t _internal_autocontinue() const;
  void _internal_set_autocontinue(uint32_t value);
  public:

  // float param1 = 6;
  void clear_param1();
  float param1() const;
  void set_param1(float value);
  private:
  float _internal_param1() const;
  void _internal_set_param1(float value);
  public:

  // float param2 = 7;
  void clear_param2();
  float param2() const;
  void set_param2(float value);
  private:
  float _internal_param2() const;
  void _internal_set_param2(float value);
  public:

  // float param3 = 8;
  void clear_param3();
  float param3() const;
  void set_param3(float value);
  private:
  float _internal_param3() const;
  void _internal_set_param3(float value);
  public:

  // float param4 = 9;
  void clear_param4();
  float param4() const;
  void set_param4(float value);
  private:
  float _internal_param4() const;
  void _internal_set_param4(float value);
  public:

  // int32 x = 10;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 11;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // float z = 12;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // uint32 mission_type = 13;
  void clear_mission_type();
  uint32_t mission_type() const;
  void set_mission_type(uint32_t value);
  private:
  uint32_t _internal_mission_type() const;
  void _internal_set_mission_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.MissionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t seq_;
  uint32_t frame_;
  uint32_t command_;
  uint32_t current_;
  uint32_t autocontinue_;
  float param1_;
  float param2_;
  float param3_;
  float param4_;
  int32_t x_;
  int32_t y_;
  float z_;
  uint32_t mission_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class MissionImportData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.MissionImportData) */ {
 public:
  inline MissionImportData() : MissionImportData(nullptr) {}
  ~MissionImportData() override;
  explicit PROTOBUF_CONSTEXPR MissionImportData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionImportData(const MissionImportData& from);
  MissionImportData(MissionImportData&& from) noexcept
    : MissionImportData() {
    *this = ::std::move(from);
  }

  inline MissionImportData& operator=(const MissionImportData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionImportData& operator=(MissionImportData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionImportData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionImportData* internal_default_instance() {
    return reinterpret_cast<const MissionImportData*>(
               &_MissionImportData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MissionImportData& a, MissionImportData& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionImportData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionImportData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionImportData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionImportData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionImportData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionImportData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionImportData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.MissionImportData";
  }
  protected:
  explicit MissionImportData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionItemsFieldNumber = 1,
    kGeofenceItemsFieldNumber = 2,
    kRallyItemsFieldNumber = 3,
  };
  // repeated .mavsdk.rpc.mission_raw.MissionItem mission_items = 1;
  int mission_items_size() const;
  private:
  int _internal_mission_items_size() const;
  public:
  void clear_mission_items();
  ::mavsdk::rpc::mission_raw::MissionItem* mutable_mission_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
      mutable_mission_items();
  private:
  const ::mavsdk::rpc::mission_raw::MissionItem& _internal_mission_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* _internal_add_mission_items();
  public:
  const ::mavsdk::rpc::mission_raw::MissionItem& mission_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* add_mission_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
      mission_items() const;

  // repeated .mavsdk.rpc.mission_raw.MissionItem geofence_items = 2;
  int geofence_items_size() const;
  private:
  int _internal_geofence_items_size() const;
  public:
  void clear_geofence_items();
  ::mavsdk::rpc::mission_raw::MissionItem* mutable_geofence_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
      mutable_geofence_items();
  private:
  const ::mavsdk::rpc::mission_raw::MissionItem& _internal_geofence_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* _internal_add_geofence_items();
  public:
  const ::mavsdk::rpc::mission_raw::MissionItem& geofence_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* add_geofence_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
      geofence_items() const;

  // repeated .mavsdk.rpc.mission_raw.MissionItem rally_items = 3;
  int rally_items_size() const;
  private:
  int _internal_rally_items_size() const;
  public:
  void clear_rally_items();
  ::mavsdk::rpc::mission_raw::MissionItem* mutable_rally_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
      mutable_rally_items();
  private:
  const ::mavsdk::rpc::mission_raw::MissionItem& _internal_rally_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* _internal_add_rally_items();
  public:
  const ::mavsdk::rpc::mission_raw::MissionItem& rally_items(int index) const;
  ::mavsdk::rpc::mission_raw::MissionItem* add_rally_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
      rally_items() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.MissionImportData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem > mission_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem > geofence_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem > rally_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// -------------------------------------------------------------------

class MissionRawResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw.MissionRawResult) */ {
 public:
  inline MissionRawResult() : MissionRawResult(nullptr) {}
  ~MissionRawResult() override;
  explicit PROTOBUF_CONSTEXPR MissionRawResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionRawResult(const MissionRawResult& from);
  MissionRawResult(MissionRawResult&& from) noexcept
    : MissionRawResult() {
    *this = ::std::move(from);
  }

  inline MissionRawResult& operator=(const MissionRawResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionRawResult& operator=(MissionRawResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionRawResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionRawResult* internal_default_instance() {
    return reinterpret_cast<const MissionRawResult*>(
               &_MissionRawResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MissionRawResult& a, MissionRawResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionRawResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionRawResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionRawResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionRawResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionRawResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionRawResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionRawResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw.MissionRawResult";
  }
  protected:
  explicit MissionRawResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MissionRawResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    MissionRawResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    MissionRawResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR =
    MissionRawResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TOO_MANY_MISSION_ITEMS =
    MissionRawResult_Result_RESULT_TOO_MANY_MISSION_ITEMS;
  static constexpr Result RESULT_BUSY =
    MissionRawResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_TIMEOUT =
    MissionRawResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_INVALID_ARGUMENT =
    MissionRawResult_Result_RESULT_INVALID_ARGUMENT;
  static constexpr Result RESULT_UNSUPPORTED =
    MissionRawResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_NO_MISSION_AVAILABLE =
    MissionRawResult_Result_RESULT_NO_MISSION_AVAILABLE;
  static constexpr Result RESULT_TRANSFER_CANCELLED =
    MissionRawResult_Result_RESULT_TRANSFER_CANCELLED;
  static constexpr Result RESULT_FAILED_TO_OPEN_QGC_PLAN =
    MissionRawResult_Result_RESULT_FAILED_TO_OPEN_QGC_PLAN;
  static constexpr Result RESULT_FAILED_TO_PARSE_QGC_PLAN =
    MissionRawResult_Result_RESULT_FAILED_TO_PARSE_QGC_PLAN;
  static constexpr Result RESULT_NO_SYSTEM =
    MissionRawResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_DENIED =
    MissionRawResult_Result_RESULT_DENIED;
  static inline bool Result_IsValid(int value) {
    return MissionRawResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    MissionRawResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    MissionRawResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    MissionRawResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return MissionRawResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return MissionRawResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return MissionRawResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.mission_raw.MissionRawResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::mission_raw::MissionRawResult_Result result() const;
  void set_result(::mavsdk::rpc::mission_raw::MissionRawResult_Result value);
  private:
  ::mavsdk::rpc::mission_raw::MissionRawResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::mission_raw::MissionRawResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw.MissionRawResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_2fmission_5fraw_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadMissionRequest

// repeated .mavsdk.rpc.mission_raw.MissionItem mission_items = 1;
inline int UploadMissionRequest::_internal_mission_items_size() const {
  return mission_items_.size();
}
inline int UploadMissionRequest::mission_items_size() const {
  return _internal_mission_items_size();
}
inline void UploadMissionRequest::clear_mission_items() {
  mission_items_.Clear();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* UploadMissionRequest::mutable_mission_items(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.UploadMissionRequest.mission_items)
  return mission_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
UploadMissionRequest::mutable_mission_items() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mission_raw.UploadMissionRequest.mission_items)
  return &mission_items_;
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& UploadMissionRequest::_internal_mission_items(int index) const {
  return mission_items_.Get(index);
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& UploadMissionRequest::mission_items(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.UploadMissionRequest.mission_items)
  return _internal_mission_items(index);
}
inline ::mavsdk::rpc::mission_raw::MissionItem* UploadMissionRequest::_internal_add_mission_items() {
  return mission_items_.Add();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* UploadMissionRequest::add_mission_items() {
  ::mavsdk::rpc::mission_raw::MissionItem* _add = _internal_add_mission_items();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mission_raw.UploadMissionRequest.mission_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
UploadMissionRequest::mission_items() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mission_raw.UploadMissionRequest.mission_items)
  return mission_items_;
}

// -------------------------------------------------------------------

// UploadMissionResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool UploadMissionResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool UploadMissionResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void UploadMissionResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& UploadMissionResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& UploadMissionResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.UploadMissionResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void UploadMissionResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.UploadMissionResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* UploadMissionResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* UploadMissionResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.UploadMissionResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* UploadMissionResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* UploadMissionResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.UploadMissionResponse.mission_raw_result)
  return _msg;
}
inline void UploadMissionResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.UploadMissionResponse.mission_raw_result)
}

// -------------------------------------------------------------------

// CancelMissionUploadRequest

// -------------------------------------------------------------------

// CancelMissionUploadResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool CancelMissionUploadResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool CancelMissionUploadResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void CancelMissionUploadResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& CancelMissionUploadResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& CancelMissionUploadResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.CancelMissionUploadResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void CancelMissionUploadResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.CancelMissionUploadResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* CancelMissionUploadResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* CancelMissionUploadResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.CancelMissionUploadResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* CancelMissionUploadResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* CancelMissionUploadResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.CancelMissionUploadResponse.mission_raw_result)
  return _msg;
}
inline void CancelMissionUploadResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.CancelMissionUploadResponse.mission_raw_result)
}

// -------------------------------------------------------------------

// DownloadMissionRequest

// -------------------------------------------------------------------

// DownloadMissionResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool DownloadMissionResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool DownloadMissionResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void DownloadMissionResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& DownloadMissionResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& DownloadMissionResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void DownloadMissionResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* DownloadMissionResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* DownloadMissionResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* DownloadMissionResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* DownloadMissionResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_raw_result)
  return _msg;
}
inline void DownloadMissionResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_raw_result)
}

// repeated .mavsdk.rpc.mission_raw.MissionItem mission_items = 2;
inline int DownloadMissionResponse::_internal_mission_items_size() const {
  return mission_items_.size();
}
inline int DownloadMissionResponse::mission_items_size() const {
  return _internal_mission_items_size();
}
inline void DownloadMissionResponse::clear_mission_items() {
  mission_items_.Clear();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* DownloadMissionResponse::mutable_mission_items(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_items)
  return mission_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
DownloadMissionResponse::mutable_mission_items() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_items)
  return &mission_items_;
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& DownloadMissionResponse::_internal_mission_items(int index) const {
  return mission_items_.Get(index);
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& DownloadMissionResponse::mission_items(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_items)
  return _internal_mission_items(index);
}
inline ::mavsdk::rpc::mission_raw::MissionItem* DownloadMissionResponse::_internal_add_mission_items() {
  return mission_items_.Add();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* DownloadMissionResponse::add_mission_items() {
  ::mavsdk::rpc::mission_raw::MissionItem* _add = _internal_add_mission_items();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
DownloadMissionResponse::mission_items() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mission_raw.DownloadMissionResponse.mission_items)
  return mission_items_;
}

// -------------------------------------------------------------------

// CancelMissionDownloadRequest

// -------------------------------------------------------------------

// CancelMissionDownloadResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool CancelMissionDownloadResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool CancelMissionDownloadResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void CancelMissionDownloadResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& CancelMissionDownloadResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& CancelMissionDownloadResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.CancelMissionDownloadResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void CancelMissionDownloadResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.CancelMissionDownloadResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* CancelMissionDownloadResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* CancelMissionDownloadResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.CancelMissionDownloadResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* CancelMissionDownloadResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* CancelMissionDownloadResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.CancelMissionDownloadResponse.mission_raw_result)
  return _msg;
}
inline void CancelMissionDownloadResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.CancelMissionDownloadResponse.mission_raw_result)
}

// -------------------------------------------------------------------

// StartMissionRequest

// -------------------------------------------------------------------

// StartMissionResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool StartMissionResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool StartMissionResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void StartMissionResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& StartMissionResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& StartMissionResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.StartMissionResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void StartMissionResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.StartMissionResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* StartMissionResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* StartMissionResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.StartMissionResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* StartMissionResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* StartMissionResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.StartMissionResponse.mission_raw_result)
  return _msg;
}
inline void StartMissionResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.StartMissionResponse.mission_raw_result)
}

// -------------------------------------------------------------------

// PauseMissionRequest

// -------------------------------------------------------------------

// PauseMissionResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool PauseMissionResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool PauseMissionResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void PauseMissionResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& PauseMissionResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& PauseMissionResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.PauseMissionResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void PauseMissionResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.PauseMissionResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* PauseMissionResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* PauseMissionResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.PauseMissionResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* PauseMissionResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* PauseMissionResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.PauseMissionResponse.mission_raw_result)
  return _msg;
}
inline void PauseMissionResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.PauseMissionResponse.mission_raw_result)
}

// -------------------------------------------------------------------

// ClearMissionRequest

// -------------------------------------------------------------------

// ClearMissionResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool ClearMissionResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool ClearMissionResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void ClearMissionResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& ClearMissionResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& ClearMissionResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.ClearMissionResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void ClearMissionResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.ClearMissionResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* ClearMissionResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* ClearMissionResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.ClearMissionResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* ClearMissionResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* ClearMissionResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.ClearMissionResponse.mission_raw_result)
  return _msg;
}
inline void ClearMissionResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.ClearMissionResponse.mission_raw_result)
}

// -------------------------------------------------------------------

// SetCurrentMissionItemRequest

// int32 index = 1;
inline void SetCurrentMissionItemRequest::clear_index() {
  index_ = 0;
}
inline int32_t SetCurrentMissionItemRequest::_internal_index() const {
  return index_;
}
inline int32_t SetCurrentMissionItemRequest::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.SetCurrentMissionItemRequest.index)
  return _internal_index();
}
inline void SetCurrentMissionItemRequest::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void SetCurrentMissionItemRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.SetCurrentMissionItemRequest.index)
}

// -------------------------------------------------------------------

// SetCurrentMissionItemResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool SetCurrentMissionItemResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool SetCurrentMissionItemResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void SetCurrentMissionItemResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& SetCurrentMissionItemResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& SetCurrentMissionItemResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void SetCurrentMissionItemResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* SetCurrentMissionItemResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* SetCurrentMissionItemResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* SetCurrentMissionItemResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* SetCurrentMissionItemResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse.mission_raw_result)
  return _msg;
}
inline void SetCurrentMissionItemResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse.mission_raw_result)
}

// -------------------------------------------------------------------

// SubscribeMissionProgressRequest

// -------------------------------------------------------------------

// MissionProgressResponse

// .mavsdk.rpc.mission_raw.MissionProgress mission_progress = 1;
inline bool MissionProgressResponse::_internal_has_mission_progress() const {
  return this != internal_default_instance() && mission_progress_ != nullptr;
}
inline bool MissionProgressResponse::has_mission_progress() const {
  return _internal_has_mission_progress();
}
inline void MissionProgressResponse::clear_mission_progress() {
  if (GetArenaForAllocation() == nullptr && mission_progress_ != nullptr) {
    delete mission_progress_;
  }
  mission_progress_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionProgress& MissionProgressResponse::_internal_mission_progress() const {
  const ::mavsdk::rpc::mission_raw::MissionProgress* p = mission_progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionProgress&>(
      ::mavsdk::rpc::mission_raw::_MissionProgress_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionProgress& MissionProgressResponse::mission_progress() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionProgressResponse.mission_progress)
  return _internal_mission_progress();
}
inline void MissionProgressResponse::unsafe_arena_set_allocated_mission_progress(
    ::mavsdk::rpc::mission_raw::MissionProgress* mission_progress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_progress_);
  }
  mission_progress_ = mission_progress;
  if (mission_progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.MissionProgressResponse.mission_progress)
}
inline ::mavsdk::rpc::mission_raw::MissionProgress* MissionProgressResponse::release_mission_progress() {
  
  ::mavsdk::rpc::mission_raw::MissionProgress* temp = mission_progress_;
  mission_progress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionProgress* MissionProgressResponse::unsafe_arena_release_mission_progress() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.MissionProgressResponse.mission_progress)
  
  ::mavsdk::rpc::mission_raw::MissionProgress* temp = mission_progress_;
  mission_progress_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionProgress* MissionProgressResponse::_internal_mutable_mission_progress() {
  
  if (mission_progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionProgress>(GetArenaForAllocation());
    mission_progress_ = p;
  }
  return mission_progress_;
}
inline ::mavsdk::rpc::mission_raw::MissionProgress* MissionProgressResponse::mutable_mission_progress() {
  ::mavsdk::rpc::mission_raw::MissionProgress* _msg = _internal_mutable_mission_progress();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.MissionProgressResponse.mission_progress)
  return _msg;
}
inline void MissionProgressResponse::set_allocated_mission_progress(::mavsdk::rpc::mission_raw::MissionProgress* mission_progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_progress_;
  }
  if (mission_progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_progress);
    if (message_arena != submessage_arena) {
      mission_progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_progress, submessage_arena);
    }
    
  } else {
    
  }
  mission_progress_ = mission_progress;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.MissionProgressResponse.mission_progress)
}

// -------------------------------------------------------------------

// SubscribeMissionChangedRequest

// -------------------------------------------------------------------

// MissionChangedResponse

// bool mission_changed = 1;
inline void MissionChangedResponse::clear_mission_changed() {
  mission_changed_ = false;
}
inline bool MissionChangedResponse::_internal_mission_changed() const {
  return mission_changed_;
}
inline bool MissionChangedResponse::mission_changed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionChangedResponse.mission_changed)
  return _internal_mission_changed();
}
inline void MissionChangedResponse::_internal_set_mission_changed(bool value) {
  
  mission_changed_ = value;
}
inline void MissionChangedResponse::set_mission_changed(bool value) {
  _internal_set_mission_changed(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionChangedResponse.mission_changed)
}

// -------------------------------------------------------------------

// ImportQgroundcontrolMissionRequest

// string qgc_plan_path = 1;
inline void ImportQgroundcontrolMissionRequest::clear_qgc_plan_path() {
  qgc_plan_path_.ClearToEmpty();
}
inline const std::string& ImportQgroundcontrolMissionRequest::qgc_plan_path() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest.qgc_plan_path)
  return _internal_qgc_plan_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportQgroundcontrolMissionRequest::set_qgc_plan_path(ArgT0&& arg0, ArgT... args) {
 
 qgc_plan_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest.qgc_plan_path)
}
inline std::string* ImportQgroundcontrolMissionRequest::mutable_qgc_plan_path() {
  std::string* _s = _internal_mutable_qgc_plan_path();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest.qgc_plan_path)
  return _s;
}
inline const std::string& ImportQgroundcontrolMissionRequest::_internal_qgc_plan_path() const {
  return qgc_plan_path_.Get();
}
inline void ImportQgroundcontrolMissionRequest::_internal_set_qgc_plan_path(const std::string& value) {
  
  qgc_plan_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportQgroundcontrolMissionRequest::_internal_mutable_qgc_plan_path() {
  
  return qgc_plan_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportQgroundcontrolMissionRequest::release_qgc_plan_path() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest.qgc_plan_path)
  return qgc_plan_path_.Release();
}
inline void ImportQgroundcontrolMissionRequest::set_allocated_qgc_plan_path(std::string* qgc_plan_path) {
  if (qgc_plan_path != nullptr) {
    
  } else {
    
  }
  qgc_plan_path_.SetAllocated(qgc_plan_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (qgc_plan_path_.IsDefault()) {
    qgc_plan_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest.qgc_plan_path)
}

// -------------------------------------------------------------------

// ImportQgroundcontrolMissionResponse

// .mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
inline bool ImportQgroundcontrolMissionResponse::_internal_has_mission_raw_result() const {
  return this != internal_default_instance() && mission_raw_result_ != nullptr;
}
inline bool ImportQgroundcontrolMissionResponse::has_mission_raw_result() const {
  return _internal_has_mission_raw_result();
}
inline void ImportQgroundcontrolMissionResponse::clear_mission_raw_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_result_ != nullptr) {
    delete mission_raw_result_;
  }
  mission_raw_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& ImportQgroundcontrolMissionResponse::_internal_mission_raw_result() const {
  const ::mavsdk::rpc::mission_raw::MissionRawResult* p = mission_raw_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionRawResult&>(
      ::mavsdk::rpc::mission_raw::_MissionRawResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionRawResult& ImportQgroundcontrolMissionResponse::mission_raw_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_raw_result)
  return _internal_mission_raw_result();
}
inline void ImportQgroundcontrolMissionResponse::unsafe_arena_set_allocated_mission_raw_result(
    ::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_result_);
  }
  mission_raw_result_ = mission_raw_result;
  if (mission_raw_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_raw_result)
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* ImportQgroundcontrolMissionResponse::release_mission_raw_result() {
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* ImportQgroundcontrolMissionResponse::unsafe_arena_release_mission_raw_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_raw_result)
  
  ::mavsdk::rpc::mission_raw::MissionRawResult* temp = mission_raw_result_;
  mission_raw_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* ImportQgroundcontrolMissionResponse::_internal_mutable_mission_raw_result() {
  
  if (mission_raw_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionRawResult>(GetArenaForAllocation());
    mission_raw_result_ = p;
  }
  return mission_raw_result_;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult* ImportQgroundcontrolMissionResponse::mutable_mission_raw_result() {
  ::mavsdk::rpc::mission_raw::MissionRawResult* _msg = _internal_mutable_mission_raw_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_raw_result)
  return _msg;
}
inline void ImportQgroundcontrolMissionResponse::set_allocated_mission_raw_result(::mavsdk::rpc::mission_raw::MissionRawResult* mission_raw_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_result_;
  }
  if (mission_raw_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_result);
    if (message_arena != submessage_arena) {
      mission_raw_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_result_ = mission_raw_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_raw_result)
}

// .mavsdk.rpc.mission_raw.MissionImportData mission_import_data = 2;
inline bool ImportQgroundcontrolMissionResponse::_internal_has_mission_import_data() const {
  return this != internal_default_instance() && mission_import_data_ != nullptr;
}
inline bool ImportQgroundcontrolMissionResponse::has_mission_import_data() const {
  return _internal_has_mission_import_data();
}
inline void ImportQgroundcontrolMissionResponse::clear_mission_import_data() {
  if (GetArenaForAllocation() == nullptr && mission_import_data_ != nullptr) {
    delete mission_import_data_;
  }
  mission_import_data_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw::MissionImportData& ImportQgroundcontrolMissionResponse::_internal_mission_import_data() const {
  const ::mavsdk::rpc::mission_raw::MissionImportData* p = mission_import_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw::MissionImportData&>(
      ::mavsdk::rpc::mission_raw::_MissionImportData_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw::MissionImportData& ImportQgroundcontrolMissionResponse::mission_import_data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_import_data)
  return _internal_mission_import_data();
}
inline void ImportQgroundcontrolMissionResponse::unsafe_arena_set_allocated_mission_import_data(
    ::mavsdk::rpc::mission_raw::MissionImportData* mission_import_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_import_data_);
  }
  mission_import_data_ = mission_import_data;
  if (mission_import_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_import_data)
}
inline ::mavsdk::rpc::mission_raw::MissionImportData* ImportQgroundcontrolMissionResponse::release_mission_import_data() {
  
  ::mavsdk::rpc::mission_raw::MissionImportData* temp = mission_import_data_;
  mission_import_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionImportData* ImportQgroundcontrolMissionResponse::unsafe_arena_release_mission_import_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_import_data)
  
  ::mavsdk::rpc::mission_raw::MissionImportData* temp = mission_import_data_;
  mission_import_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw::MissionImportData* ImportQgroundcontrolMissionResponse::_internal_mutable_mission_import_data() {
  
  if (mission_import_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw::MissionImportData>(GetArenaForAllocation());
    mission_import_data_ = p;
  }
  return mission_import_data_;
}
inline ::mavsdk::rpc::mission_raw::MissionImportData* ImportQgroundcontrolMissionResponse::mutable_mission_import_data() {
  ::mavsdk::rpc::mission_raw::MissionImportData* _msg = _internal_mutable_mission_import_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_import_data)
  return _msg;
}
inline void ImportQgroundcontrolMissionResponse::set_allocated_mission_import_data(::mavsdk::rpc::mission_raw::MissionImportData* mission_import_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_import_data_;
  }
  if (mission_import_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_import_data);
    if (message_arena != submessage_arena) {
      mission_import_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_import_data, submessage_arena);
    }
    
  } else {
    
  }
  mission_import_data_ = mission_import_data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse.mission_import_data)
}

// -------------------------------------------------------------------

// MissionProgress

// int32 current = 1;
inline void MissionProgress::clear_current() {
  current_ = 0;
}
inline int32_t MissionProgress::_internal_current() const {
  return current_;
}
inline int32_t MissionProgress::current() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionProgress.current)
  return _internal_current();
}
inline void MissionProgress::_internal_set_current(int32_t value) {
  
  current_ = value;
}
inline void MissionProgress::set_current(int32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionProgress.current)
}

// int32 total = 2;
inline void MissionProgress::clear_total() {
  total_ = 0;
}
inline int32_t MissionProgress::_internal_total() const {
  return total_;
}
inline int32_t MissionProgress::total() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionProgress.total)
  return _internal_total();
}
inline void MissionProgress::_internal_set_total(int32_t value) {
  
  total_ = value;
}
inline void MissionProgress::set_total(int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionProgress.total)
}

// -------------------------------------------------------------------

// MissionItem

// uint32 seq = 1;
inline void MissionItem::clear_seq() {
  seq_ = 0u;
}
inline uint32_t MissionItem::_internal_seq() const {
  return seq_;
}
inline uint32_t MissionItem::seq() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.seq)
  return _internal_seq();
}
inline void MissionItem::_internal_set_seq(uint32_t value) {
  
  seq_ = value;
}
inline void MissionItem::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.seq)
}

// uint32 frame = 2;
inline void MissionItem::clear_frame() {
  frame_ = 0u;
}
inline uint32_t MissionItem::_internal_frame() const {
  return frame_;
}
inline uint32_t MissionItem::frame() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.frame)
  return _internal_frame();
}
inline void MissionItem::_internal_set_frame(uint32_t value) {
  
  frame_ = value;
}
inline void MissionItem::set_frame(uint32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.frame)
}

// uint32 command = 3;
inline void MissionItem::clear_command() {
  command_ = 0u;
}
inline uint32_t MissionItem::_internal_command() const {
  return command_;
}
inline uint32_t MissionItem::command() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.command)
  return _internal_command();
}
inline void MissionItem::_internal_set_command(uint32_t value) {
  
  command_ = value;
}
inline void MissionItem::set_command(uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.command)
}

// uint32 current = 4;
inline void MissionItem::clear_current() {
  current_ = 0u;
}
inline uint32_t MissionItem::_internal_current() const {
  return current_;
}
inline uint32_t MissionItem::current() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.current)
  return _internal_current();
}
inline void MissionItem::_internal_set_current(uint32_t value) {
  
  current_ = value;
}
inline void MissionItem::set_current(uint32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.current)
}

// uint32 autocontinue = 5;
inline void MissionItem::clear_autocontinue() {
  autocontinue_ = 0u;
}
inline uint32_t MissionItem::_internal_autocontinue() const {
  return autocontinue_;
}
inline uint32_t MissionItem::autocontinue() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.autocontinue)
  return _internal_autocontinue();
}
inline void MissionItem::_internal_set_autocontinue(uint32_t value) {
  
  autocontinue_ = value;
}
inline void MissionItem::set_autocontinue(uint32_t value) {
  _internal_set_autocontinue(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.autocontinue)
}

// float param1 = 6;
inline void MissionItem::clear_param1() {
  param1_ = 0;
}
inline float MissionItem::_internal_param1() const {
  return param1_;
}
inline float MissionItem::param1() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.param1)
  return _internal_param1();
}
inline void MissionItem::_internal_set_param1(float value) {
  
  param1_ = value;
}
inline void MissionItem::set_param1(float value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.param1)
}

// float param2 = 7;
inline void MissionItem::clear_param2() {
  param2_ = 0;
}
inline float MissionItem::_internal_param2() const {
  return param2_;
}
inline float MissionItem::param2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.param2)
  return _internal_param2();
}
inline void MissionItem::_internal_set_param2(float value) {
  
  param2_ = value;
}
inline void MissionItem::set_param2(float value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.param2)
}

// float param3 = 8;
inline void MissionItem::clear_param3() {
  param3_ = 0;
}
inline float MissionItem::_internal_param3() const {
  return param3_;
}
inline float MissionItem::param3() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.param3)
  return _internal_param3();
}
inline void MissionItem::_internal_set_param3(float value) {
  
  param3_ = value;
}
inline void MissionItem::set_param3(float value) {
  _internal_set_param3(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.param3)
}

// float param4 = 9;
inline void MissionItem::clear_param4() {
  param4_ = 0;
}
inline float MissionItem::_internal_param4() const {
  return param4_;
}
inline float MissionItem::param4() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.param4)
  return _internal_param4();
}
inline void MissionItem::_internal_set_param4(float value) {
  
  param4_ = value;
}
inline void MissionItem::set_param4(float value) {
  _internal_set_param4(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.param4)
}

// int32 x = 10;
inline void MissionItem::clear_x() {
  x_ = 0;
}
inline int32_t MissionItem::_internal_x() const {
  return x_;
}
inline int32_t MissionItem::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.x)
  return _internal_x();
}
inline void MissionItem::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void MissionItem::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.x)
}

// int32 y = 11;
inline void MissionItem::clear_y() {
  y_ = 0;
}
inline int32_t MissionItem::_internal_y() const {
  return y_;
}
inline int32_t MissionItem::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.y)
  return _internal_y();
}
inline void MissionItem::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void MissionItem::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.y)
}

// float z = 12;
inline void MissionItem::clear_z() {
  z_ = 0;
}
inline float MissionItem::_internal_z() const {
  return z_;
}
inline float MissionItem::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.z)
  return _internal_z();
}
inline void MissionItem::_internal_set_z(float value) {
  
  z_ = value;
}
inline void MissionItem::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.z)
}

// uint32 mission_type = 13;
inline void MissionItem::clear_mission_type() {
  mission_type_ = 0u;
}
inline uint32_t MissionItem::_internal_mission_type() const {
  return mission_type_;
}
inline uint32_t MissionItem::mission_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionItem.mission_type)
  return _internal_mission_type();
}
inline void MissionItem::_internal_set_mission_type(uint32_t value) {
  
  mission_type_ = value;
}
inline void MissionItem::set_mission_type(uint32_t value) {
  _internal_set_mission_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionItem.mission_type)
}

// -------------------------------------------------------------------

// MissionImportData

// repeated .mavsdk.rpc.mission_raw.MissionItem mission_items = 1;
inline int MissionImportData::_internal_mission_items_size() const {
  return mission_items_.size();
}
inline int MissionImportData::mission_items_size() const {
  return _internal_mission_items_size();
}
inline void MissionImportData::clear_mission_items() {
  mission_items_.Clear();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::mutable_mission_items(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.MissionImportData.mission_items)
  return mission_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
MissionImportData::mutable_mission_items() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mission_raw.MissionImportData.mission_items)
  return &mission_items_;
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& MissionImportData::_internal_mission_items(int index) const {
  return mission_items_.Get(index);
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& MissionImportData::mission_items(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionImportData.mission_items)
  return _internal_mission_items(index);
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::_internal_add_mission_items() {
  return mission_items_.Add();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::add_mission_items() {
  ::mavsdk::rpc::mission_raw::MissionItem* _add = _internal_add_mission_items();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mission_raw.MissionImportData.mission_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
MissionImportData::mission_items() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mission_raw.MissionImportData.mission_items)
  return mission_items_;
}

// repeated .mavsdk.rpc.mission_raw.MissionItem geofence_items = 2;
inline int MissionImportData::_internal_geofence_items_size() const {
  return geofence_items_.size();
}
inline int MissionImportData::geofence_items_size() const {
  return _internal_geofence_items_size();
}
inline void MissionImportData::clear_geofence_items() {
  geofence_items_.Clear();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::mutable_geofence_items(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.MissionImportData.geofence_items)
  return geofence_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
MissionImportData::mutable_geofence_items() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mission_raw.MissionImportData.geofence_items)
  return &geofence_items_;
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& MissionImportData::_internal_geofence_items(int index) const {
  return geofence_items_.Get(index);
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& MissionImportData::geofence_items(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionImportData.geofence_items)
  return _internal_geofence_items(index);
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::_internal_add_geofence_items() {
  return geofence_items_.Add();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::add_geofence_items() {
  ::mavsdk::rpc::mission_raw::MissionItem* _add = _internal_add_geofence_items();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mission_raw.MissionImportData.geofence_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
MissionImportData::geofence_items() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mission_raw.MissionImportData.geofence_items)
  return geofence_items_;
}

// repeated .mavsdk.rpc.mission_raw.MissionItem rally_items = 3;
inline int MissionImportData::_internal_rally_items_size() const {
  return rally_items_.size();
}
inline int MissionImportData::rally_items_size() const {
  return _internal_rally_items_size();
}
inline void MissionImportData::clear_rally_items() {
  rally_items_.Clear();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::mutable_rally_items(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.MissionImportData.rally_items)
  return rally_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >*
MissionImportData::mutable_rally_items() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mission_raw.MissionImportData.rally_items)
  return &rally_items_;
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& MissionImportData::_internal_rally_items(int index) const {
  return rally_items_.Get(index);
}
inline const ::mavsdk::rpc::mission_raw::MissionItem& MissionImportData::rally_items(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionImportData.rally_items)
  return _internal_rally_items(index);
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::_internal_add_rally_items() {
  return rally_items_.Add();
}
inline ::mavsdk::rpc::mission_raw::MissionItem* MissionImportData::add_rally_items() {
  ::mavsdk::rpc::mission_raw::MissionItem* _add = _internal_add_rally_items();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mission_raw.MissionImportData.rally_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw::MissionItem >&
MissionImportData::rally_items() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mission_raw.MissionImportData.rally_items)
  return rally_items_;
}

// -------------------------------------------------------------------

// MissionRawResult

// .mavsdk.rpc.mission_raw.MissionRawResult.Result result = 1;
inline void MissionRawResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult_Result MissionRawResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::mission_raw::MissionRawResult_Result >(result_);
}
inline ::mavsdk::rpc::mission_raw::MissionRawResult_Result MissionRawResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionRawResult.result)
  return _internal_result();
}
inline void MissionRawResult::_internal_set_result(::mavsdk::rpc::mission_raw::MissionRawResult_Result value) {
  
  result_ = value;
}
inline void MissionRawResult::set_result(::mavsdk::rpc::mission_raw::MissionRawResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionRawResult.result)
}

// string result_str = 2;
inline void MissionRawResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& MissionRawResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw.MissionRawResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MissionRawResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw.MissionRawResult.result_str)
}
inline std::string* MissionRawResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw.MissionRawResult.result_str)
  return _s;
}
inline const std::string& MissionRawResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void MissionRawResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* MissionRawResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* MissionRawResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw.MissionRawResult.result_str)
  return result_str_.Release();
}
inline void MissionRawResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw.MissionRawResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_raw
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::mission_raw::MissionRawResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mission_raw::MissionRawResult_Result>() {
  return ::mavsdk::rpc::mission_raw::MissionRawResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mission_5fraw_2fmission_5fraw_2eproto
