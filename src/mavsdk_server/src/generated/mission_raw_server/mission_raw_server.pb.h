// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mission_raw_server/mission_raw_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace mission_raw_server {
class ClearAllResponse;
struct ClearAllResponseDefaultTypeInternal;
extern ClearAllResponseDefaultTypeInternal _ClearAllResponse_default_instance_;
class CurrentItemChangedResponse;
struct CurrentItemChangedResponseDefaultTypeInternal;
extern CurrentItemChangedResponseDefaultTypeInternal _CurrentItemChangedResponse_default_instance_;
class IncomingMissionResponse;
struct IncomingMissionResponseDefaultTypeInternal;
extern IncomingMissionResponseDefaultTypeInternal _IncomingMissionResponse_default_instance_;
class MissionItem;
struct MissionItemDefaultTypeInternal;
extern MissionItemDefaultTypeInternal _MissionItem_default_instance_;
class MissionPlan;
struct MissionPlanDefaultTypeInternal;
extern MissionPlanDefaultTypeInternal _MissionPlan_default_instance_;
class MissionProgress;
struct MissionProgressDefaultTypeInternal;
extern MissionProgressDefaultTypeInternal _MissionProgress_default_instance_;
class MissionRawServerResult;
struct MissionRawServerResultDefaultTypeInternal;
extern MissionRawServerResultDefaultTypeInternal _MissionRawServerResult_default_instance_;
class SetCurrentItemCompleteRequest;
struct SetCurrentItemCompleteRequestDefaultTypeInternal;
extern SetCurrentItemCompleteRequestDefaultTypeInternal _SetCurrentItemCompleteRequest_default_instance_;
class SetCurrentItemCompleteResponse;
struct SetCurrentItemCompleteResponseDefaultTypeInternal;
extern SetCurrentItemCompleteResponseDefaultTypeInternal _SetCurrentItemCompleteResponse_default_instance_;
class SubscribeClearAllRequest;
struct SubscribeClearAllRequestDefaultTypeInternal;
extern SubscribeClearAllRequestDefaultTypeInternal _SubscribeClearAllRequest_default_instance_;
class SubscribeCurrentItemChangedRequest;
struct SubscribeCurrentItemChangedRequestDefaultTypeInternal;
extern SubscribeCurrentItemChangedRequestDefaultTypeInternal _SubscribeCurrentItemChangedRequest_default_instance_;
class SubscribeIncomingMissionRequest;
struct SubscribeIncomingMissionRequestDefaultTypeInternal;
extern SubscribeIncomingMissionRequestDefaultTypeInternal _SubscribeIncomingMissionRequest_default_instance_;
}  // namespace mission_raw_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::mission_raw_server::ClearAllResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::ClearAllResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::MissionItem* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::MissionItem>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::MissionPlan* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::MissionPlan>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::MissionProgress* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::MissionProgress>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::MissionRawServerResult>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest>(Arena*);
template<> ::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace mission_raw_server {

enum MissionRawServerResult_Result : int {
  MissionRawServerResult_Result_RESULT_UNKNOWN = 0,
  MissionRawServerResult_Result_RESULT_SUCCESS = 1,
  MissionRawServerResult_Result_RESULT_ERROR = 2,
  MissionRawServerResult_Result_RESULT_TOO_MANY_MISSION_ITEMS = 3,
  MissionRawServerResult_Result_RESULT_BUSY = 4,
  MissionRawServerResult_Result_RESULT_TIMEOUT = 5,
  MissionRawServerResult_Result_RESULT_INVALID_ARGUMENT = 6,
  MissionRawServerResult_Result_RESULT_UNSUPPORTED = 7,
  MissionRawServerResult_Result_RESULT_NO_MISSION_AVAILABLE = 8,
  MissionRawServerResult_Result_RESULT_UNSUPPORTED_MISSION_CMD = 11,
  MissionRawServerResult_Result_RESULT_TRANSFER_CANCELLED = 12,
  MissionRawServerResult_Result_RESULT_NO_SYSTEM = 13,
  MissionRawServerResult_Result_RESULT_NEXT = 14,
  MissionRawServerResult_Result_MissionRawServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MissionRawServerResult_Result_MissionRawServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MissionRawServerResult_Result_IsValid(int value);
constexpr MissionRawServerResult_Result MissionRawServerResult_Result_Result_MIN = MissionRawServerResult_Result_RESULT_UNKNOWN;
constexpr MissionRawServerResult_Result MissionRawServerResult_Result_Result_MAX = MissionRawServerResult_Result_RESULT_NEXT;
constexpr int MissionRawServerResult_Result_Result_ARRAYSIZE = MissionRawServerResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionRawServerResult_Result_descriptor();
template<typename T>
inline const std::string& MissionRawServerResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MissionRawServerResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MissionRawServerResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MissionRawServerResult_Result_descriptor(), enum_t_value);
}
inline bool MissionRawServerResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MissionRawServerResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MissionRawServerResult_Result>(
    MissionRawServerResult_Result_descriptor(), name, value);
}
// ===================================================================

class SubscribeIncomingMissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.SubscribeIncomingMissionRequest) */ {
 public:
  inline SubscribeIncomingMissionRequest() : SubscribeIncomingMissionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeIncomingMissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeIncomingMissionRequest(const SubscribeIncomingMissionRequest& from);
  SubscribeIncomingMissionRequest(SubscribeIncomingMissionRequest&& from) noexcept
    : SubscribeIncomingMissionRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeIncomingMissionRequest& operator=(const SubscribeIncomingMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeIncomingMissionRequest& operator=(SubscribeIncomingMissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeIncomingMissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeIncomingMissionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeIncomingMissionRequest*>(
               &_SubscribeIncomingMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeIncomingMissionRequest& a, SubscribeIncomingMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeIncomingMissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeIncomingMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeIncomingMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeIncomingMissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeIncomingMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeIncomingMissionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.SubscribeIncomingMissionRequest";
  }
  protected:
  explicit SubscribeIncomingMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.SubscribeIncomingMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class IncomingMissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.IncomingMissionResponse) */ {
 public:
  inline IncomingMissionResponse() : IncomingMissionResponse(nullptr) {}
  ~IncomingMissionResponse() override;
  explicit PROTOBUF_CONSTEXPR IncomingMissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncomingMissionResponse(const IncomingMissionResponse& from);
  IncomingMissionResponse(IncomingMissionResponse&& from) noexcept
    : IncomingMissionResponse() {
    *this = ::std::move(from);
  }

  inline IncomingMissionResponse& operator=(const IncomingMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingMissionResponse& operator=(IncomingMissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncomingMissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncomingMissionResponse* internal_default_instance() {
    return reinterpret_cast<const IncomingMissionResponse*>(
               &_IncomingMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncomingMissionResponse& a, IncomingMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomingMissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncomingMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncomingMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncomingMissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncomingMissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncomingMissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncomingMissionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.IncomingMissionResponse";
  }
  protected:
  explicit IncomingMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionRawServerResultFieldNumber = 1,
    kMissionPlanFieldNumber = 2,
  };
  // .mavsdk.rpc.mission_raw_server.MissionRawServerResult mission_raw_server_result = 1;
  bool has_mission_raw_server_result() const;
  private:
  bool _internal_has_mission_raw_server_result() const;
  public:
  void clear_mission_raw_server_result();
  const ::mavsdk::rpc::mission_raw_server::MissionRawServerResult& mission_raw_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* release_mission_raw_server_result();
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* mutable_mission_raw_server_result();
  void set_allocated_mission_raw_server_result(::mavsdk::rpc::mission_raw_server::MissionRawServerResult* mission_raw_server_result);
  private:
  const ::mavsdk::rpc::mission_raw_server::MissionRawServerResult& _internal_mission_raw_server_result() const;
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* _internal_mutable_mission_raw_server_result();
  public:
  void unsafe_arena_set_allocated_mission_raw_server_result(
      ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* mission_raw_server_result);
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* unsafe_arena_release_mission_raw_server_result();

  // .mavsdk.rpc.mission_raw_server.MissionPlan mission_plan = 2;
  bool has_mission_plan() const;
  private:
  bool _internal_has_mission_plan() const;
  public:
  void clear_mission_plan();
  const ::mavsdk::rpc::mission_raw_server::MissionPlan& mission_plan() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw_server::MissionPlan* release_mission_plan();
  ::mavsdk::rpc::mission_raw_server::MissionPlan* mutable_mission_plan();
  void set_allocated_mission_plan(::mavsdk::rpc::mission_raw_server::MissionPlan* mission_plan);
  private:
  const ::mavsdk::rpc::mission_raw_server::MissionPlan& _internal_mission_plan() const;
  ::mavsdk::rpc::mission_raw_server::MissionPlan* _internal_mutable_mission_plan();
  public:
  void unsafe_arena_set_allocated_mission_plan(
      ::mavsdk::rpc::mission_raw_server::MissionPlan* mission_plan);
  ::mavsdk::rpc::mission_raw_server::MissionPlan* unsafe_arena_release_mission_plan();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.IncomingMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* mission_raw_server_result_;
  ::mavsdk::rpc::mission_raw_server::MissionPlan* mission_plan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCurrentItemChangedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.SubscribeCurrentItemChangedRequest) */ {
 public:
  inline SubscribeCurrentItemChangedRequest() : SubscribeCurrentItemChangedRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCurrentItemChangedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCurrentItemChangedRequest(const SubscribeCurrentItemChangedRequest& from);
  SubscribeCurrentItemChangedRequest(SubscribeCurrentItemChangedRequest&& from) noexcept
    : SubscribeCurrentItemChangedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCurrentItemChangedRequest& operator=(const SubscribeCurrentItemChangedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCurrentItemChangedRequest& operator=(SubscribeCurrentItemChangedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCurrentItemChangedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCurrentItemChangedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCurrentItemChangedRequest*>(
               &_SubscribeCurrentItemChangedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeCurrentItemChangedRequest& a, SubscribeCurrentItemChangedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCurrentItemChangedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCurrentItemChangedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCurrentItemChangedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCurrentItemChangedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCurrentItemChangedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCurrentItemChangedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.SubscribeCurrentItemChangedRequest";
  }
  protected:
  explicit SubscribeCurrentItemChangedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.SubscribeCurrentItemChangedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CurrentItemChangedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse) */ {
 public:
  inline CurrentItemChangedResponse() : CurrentItemChangedResponse(nullptr) {}
  ~CurrentItemChangedResponse() override;
  explicit PROTOBUF_CONSTEXPR CurrentItemChangedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentItemChangedResponse(const CurrentItemChangedResponse& from);
  CurrentItemChangedResponse(CurrentItemChangedResponse&& from) noexcept
    : CurrentItemChangedResponse() {
    *this = ::std::move(from);
  }

  inline CurrentItemChangedResponse& operator=(const CurrentItemChangedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentItemChangedResponse& operator=(CurrentItemChangedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentItemChangedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentItemChangedResponse* internal_default_instance() {
    return reinterpret_cast<const CurrentItemChangedResponse*>(
               &_CurrentItemChangedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CurrentItemChangedResponse& a, CurrentItemChangedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentItemChangedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentItemChangedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentItemChangedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrentItemChangedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentItemChangedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CurrentItemChangedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentItemChangedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse";
  }
  protected:
  explicit CurrentItemChangedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionItemFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_raw_server.MissionItem mission_item = 1;
  bool has_mission_item() const;
  private:
  bool _internal_has_mission_item() const;
  public:
  void clear_mission_item();
  const ::mavsdk::rpc::mission_raw_server::MissionItem& mission_item() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mission_raw_server::MissionItem* release_mission_item();
  ::mavsdk::rpc::mission_raw_server::MissionItem* mutable_mission_item();
  void set_allocated_mission_item(::mavsdk::rpc::mission_raw_server::MissionItem* mission_item);
  private:
  const ::mavsdk::rpc::mission_raw_server::MissionItem& _internal_mission_item() const;
  ::mavsdk::rpc::mission_raw_server::MissionItem* _internal_mutable_mission_item();
  public:
  void unsafe_arena_set_allocated_mission_item(
      ::mavsdk::rpc::mission_raw_server::MissionItem* mission_item);
  ::mavsdk::rpc::mission_raw_server::MissionItem* unsafe_arena_release_mission_item();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_raw_server::MissionItem* mission_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeClearAllRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.SubscribeClearAllRequest) */ {
 public:
  inline SubscribeClearAllRequest() : SubscribeClearAllRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeClearAllRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeClearAllRequest(const SubscribeClearAllRequest& from);
  SubscribeClearAllRequest(SubscribeClearAllRequest&& from) noexcept
    : SubscribeClearAllRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeClearAllRequest& operator=(const SubscribeClearAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeClearAllRequest& operator=(SubscribeClearAllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeClearAllRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeClearAllRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeClearAllRequest*>(
               &_SubscribeClearAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeClearAllRequest& a, SubscribeClearAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeClearAllRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeClearAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeClearAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeClearAllRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeClearAllRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeClearAllRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.SubscribeClearAllRequest";
  }
  protected:
  explicit SubscribeClearAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.SubscribeClearAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ClearAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.ClearAllResponse) */ {
 public:
  inline ClearAllResponse() : ClearAllResponse(nullptr) {}
  ~ClearAllResponse() override;
  explicit PROTOBUF_CONSTEXPR ClearAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearAllResponse(const ClearAllResponse& from);
  ClearAllResponse(ClearAllResponse&& from) noexcept
    : ClearAllResponse() {
    *this = ::std::move(from);
  }

  inline ClearAllResponse& operator=(const ClearAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearAllResponse& operator=(ClearAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearAllResponse* internal_default_instance() {
    return reinterpret_cast<const ClearAllResponse*>(
               &_ClearAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClearAllResponse& a, ClearAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearAllResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClearAllResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClearAllResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearAllResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.ClearAllResponse";
  }
  protected:
  explicit ClearAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearTypeFieldNumber = 1,
  };
  // uint32 clear_type = 1;
  void clear_clear_type();
  uint32_t clear_type() const;
  void set_clear_type(uint32_t value);
  private:
  uint32_t _internal_clear_type() const;
  void _internal_set_clear_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.ClearAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t clear_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentItemCompleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteRequest) */ {
 public:
  inline SetCurrentItemCompleteRequest() : SetCurrentItemCompleteRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetCurrentItemCompleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCurrentItemCompleteRequest(const SetCurrentItemCompleteRequest& from);
  SetCurrentItemCompleteRequest(SetCurrentItemCompleteRequest&& from) noexcept
    : SetCurrentItemCompleteRequest() {
    *this = ::std::move(from);
  }

  inline SetCurrentItemCompleteRequest& operator=(const SetCurrentItemCompleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentItemCompleteRequest& operator=(SetCurrentItemCompleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCurrentItemCompleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCurrentItemCompleteRequest* internal_default_instance() {
    return reinterpret_cast<const SetCurrentItemCompleteRequest*>(
               &_SetCurrentItemCompleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetCurrentItemCompleteRequest& a, SetCurrentItemCompleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentItemCompleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentItemCompleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCurrentItemCompleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCurrentItemCompleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetCurrentItemCompleteRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetCurrentItemCompleteRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteRequest";
  }
  protected:
  explicit SetCurrentItemCompleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentItemCompleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteResponse) */ {
 public:
  inline SetCurrentItemCompleteResponse() : SetCurrentItemCompleteResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetCurrentItemCompleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCurrentItemCompleteResponse(const SetCurrentItemCompleteResponse& from);
  SetCurrentItemCompleteResponse(SetCurrentItemCompleteResponse&& from) noexcept
    : SetCurrentItemCompleteResponse() {
    *this = ::std::move(from);
  }

  inline SetCurrentItemCompleteResponse& operator=(const SetCurrentItemCompleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentItemCompleteResponse& operator=(SetCurrentItemCompleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCurrentItemCompleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCurrentItemCompleteResponse* internal_default_instance() {
    return reinterpret_cast<const SetCurrentItemCompleteResponse*>(
               &_SetCurrentItemCompleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetCurrentItemCompleteResponse& a, SetCurrentItemCompleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentItemCompleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentItemCompleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCurrentItemCompleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCurrentItemCompleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetCurrentItemCompleteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetCurrentItemCompleteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteResponse";
  }
  protected:
  explicit SetCurrentItemCompleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MissionItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.MissionItem) */ {
 public:
  inline MissionItem() : MissionItem(nullptr) {}
  ~MissionItem() override;
  explicit PROTOBUF_CONSTEXPR MissionItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionItem(const MissionItem& from);
  MissionItem(MissionItem&& from) noexcept
    : MissionItem() {
    *this = ::std::move(from);
  }

  inline MissionItem& operator=(const MissionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionItem& operator=(MissionItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionItem* internal_default_instance() {
    return reinterpret_cast<const MissionItem*>(
               &_MissionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MissionItem& a, MissionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.MissionItem";
  }
  protected:
  explicit MissionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqFieldNumber = 1,
    kFrameFieldNumber = 2,
    kCommandFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kAutocontinueFieldNumber = 5,
    kParam1FieldNumber = 6,
    kParam2FieldNumber = 7,
    kParam3FieldNumber = 8,
    kParam4FieldNumber = 9,
    kXFieldNumber = 10,
    kYFieldNumber = 11,
    kZFieldNumber = 12,
    kMissionTypeFieldNumber = 13,
  };
  // uint32 seq = 1;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // uint32 frame = 2;
  void clear_frame();
  uint32_t frame() const;
  void set_frame(uint32_t value);
  private:
  uint32_t _internal_frame() const;
  void _internal_set_frame(uint32_t value);
  public:

  // uint32 command = 3;
  void clear_command();
  uint32_t command() const;
  void set_command(uint32_t value);
  private:
  uint32_t _internal_command() const;
  void _internal_set_command(uint32_t value);
  public:

  // uint32 current = 4;
  void clear_current();
  uint32_t current() const;
  void set_current(uint32_t value);
  private:
  uint32_t _internal_current() const;
  void _internal_set_current(uint32_t value);
  public:

  // uint32 autocontinue = 5;
  void clear_autocontinue();
  uint32_t autocontinue() const;
  void set_autocontinue(uint32_t value);
  private:
  uint32_t _internal_autocontinue() const;
  void _internal_set_autocontinue(uint32_t value);
  public:

  // float param1 = 6;
  void clear_param1();
  float param1() const;
  void set_param1(float value);
  private:
  float _internal_param1() const;
  void _internal_set_param1(float value);
  public:

  // float param2 = 7;
  void clear_param2();
  float param2() const;
  void set_param2(float value);
  private:
  float _internal_param2() const;
  void _internal_set_param2(float value);
  public:

  // float param3 = 8;
  void clear_param3();
  float param3() const;
  void set_param3(float value);
  private:
  float _internal_param3() const;
  void _internal_set_param3(float value);
  public:

  // float param4 = 9;
  void clear_param4();
  float param4() const;
  void set_param4(float value);
  private:
  float _internal_param4() const;
  void _internal_set_param4(float value);
  public:

  // int32 x = 10;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 11;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // float z = 12;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // uint32 mission_type = 13;
  void clear_mission_type();
  uint32_t mission_type() const;
  void set_mission_type(uint32_t value);
  private:
  uint32_t _internal_mission_type() const;
  void _internal_set_mission_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.MissionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t seq_;
  uint32_t frame_;
  uint32_t command_;
  uint32_t current_;
  uint32_t autocontinue_;
  float param1_;
  float param2_;
  float param3_;
  float param4_;
  int32_t x_;
  int32_t y_;
  float z_;
  uint32_t mission_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MissionPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.MissionPlan) */ {
 public:
  inline MissionPlan() : MissionPlan(nullptr) {}
  ~MissionPlan() override;
  explicit PROTOBUF_CONSTEXPR MissionPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionPlan(const MissionPlan& from);
  MissionPlan(MissionPlan&& from) noexcept
    : MissionPlan() {
    *this = ::std::move(from);
  }

  inline MissionPlan& operator=(const MissionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionPlan& operator=(MissionPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionPlan* internal_default_instance() {
    return reinterpret_cast<const MissionPlan*>(
               &_MissionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MissionPlan& a, MissionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionPlan& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.MissionPlan";
  }
  protected:
  explicit MissionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionItemsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.mission_raw_server.MissionItem mission_items = 1;
  int mission_items_size() const;
  private:
  int _internal_mission_items_size() const;
  public:
  void clear_mission_items();
  ::mavsdk::rpc::mission_raw_server::MissionItem* mutable_mission_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw_server::MissionItem >*
      mutable_mission_items();
  private:
  const ::mavsdk::rpc::mission_raw_server::MissionItem& _internal_mission_items(int index) const;
  ::mavsdk::rpc::mission_raw_server::MissionItem* _internal_add_mission_items();
  public:
  const ::mavsdk::rpc::mission_raw_server::MissionItem& mission_items(int index) const;
  ::mavsdk::rpc::mission_raw_server::MissionItem* add_mission_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw_server::MissionItem >&
      mission_items() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.MissionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw_server::MissionItem > mission_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MissionProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.MissionProgress) */ {
 public:
  inline MissionProgress() : MissionProgress(nullptr) {}
  ~MissionProgress() override;
  explicit PROTOBUF_CONSTEXPR MissionProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionProgress(const MissionProgress& from);
  MissionProgress(MissionProgress&& from) noexcept
    : MissionProgress() {
    *this = ::std::move(from);
  }

  inline MissionProgress& operator=(const MissionProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionProgress& operator=(MissionProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionProgress* internal_default_instance() {
    return reinterpret_cast<const MissionProgress*>(
               &_MissionProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MissionProgress& a, MissionProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.MissionProgress";
  }
  protected:
  explicit MissionProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // int32 current = 1;
  void clear_current();
  int32_t current() const;
  void set_current(int32_t value);
  private:
  int32_t _internal_current() const;
  void _internal_set_current(int32_t value);
  public:

  // int32 total = 2;
  void clear_total();
  int32_t total() const;
  void set_total(int32_t value);
  private:
  int32_t _internal_total() const;
  void _internal_set_total(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.MissionProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t current_;
  int32_t total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MissionRawServerResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_raw_server.MissionRawServerResult) */ {
 public:
  inline MissionRawServerResult() : MissionRawServerResult(nullptr) {}
  ~MissionRawServerResult() override;
  explicit PROTOBUF_CONSTEXPR MissionRawServerResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionRawServerResult(const MissionRawServerResult& from);
  MissionRawServerResult(MissionRawServerResult&& from) noexcept
    : MissionRawServerResult() {
    *this = ::std::move(from);
  }

  inline MissionRawServerResult& operator=(const MissionRawServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionRawServerResult& operator=(MissionRawServerResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionRawServerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionRawServerResult* internal_default_instance() {
    return reinterpret_cast<const MissionRawServerResult*>(
               &_MissionRawServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MissionRawServerResult& a, MissionRawServerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionRawServerResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionRawServerResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissionRawServerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissionRawServerResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionRawServerResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionRawServerResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionRawServerResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_raw_server.MissionRawServerResult";
  }
  protected:
  explicit MissionRawServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MissionRawServerResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    MissionRawServerResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    MissionRawServerResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR =
    MissionRawServerResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TOO_MANY_MISSION_ITEMS =
    MissionRawServerResult_Result_RESULT_TOO_MANY_MISSION_ITEMS;
  static constexpr Result RESULT_BUSY =
    MissionRawServerResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_TIMEOUT =
    MissionRawServerResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_INVALID_ARGUMENT =
    MissionRawServerResult_Result_RESULT_INVALID_ARGUMENT;
  static constexpr Result RESULT_UNSUPPORTED =
    MissionRawServerResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_NO_MISSION_AVAILABLE =
    MissionRawServerResult_Result_RESULT_NO_MISSION_AVAILABLE;
  static constexpr Result RESULT_UNSUPPORTED_MISSION_CMD =
    MissionRawServerResult_Result_RESULT_UNSUPPORTED_MISSION_CMD;
  static constexpr Result RESULT_TRANSFER_CANCELLED =
    MissionRawServerResult_Result_RESULT_TRANSFER_CANCELLED;
  static constexpr Result RESULT_NO_SYSTEM =
    MissionRawServerResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_NEXT =
    MissionRawServerResult_Result_RESULT_NEXT;
  static inline bool Result_IsValid(int value) {
    return MissionRawServerResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    MissionRawServerResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    MissionRawServerResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    MissionRawServerResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return MissionRawServerResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return MissionRawServerResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return MissionRawServerResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.mission_raw_server.MissionRawServerResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result result() const;
  void set_result(::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result value);
  private:
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_raw_server.MissionRawServerResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeIncomingMissionRequest

// -------------------------------------------------------------------

// IncomingMissionResponse

// .mavsdk.rpc.mission_raw_server.MissionRawServerResult mission_raw_server_result = 1;
inline bool IncomingMissionResponse::_internal_has_mission_raw_server_result() const {
  return this != internal_default_instance() && mission_raw_server_result_ != nullptr;
}
inline bool IncomingMissionResponse::has_mission_raw_server_result() const {
  return _internal_has_mission_raw_server_result();
}
inline void IncomingMissionResponse::clear_mission_raw_server_result() {
  if (GetArenaForAllocation() == nullptr && mission_raw_server_result_ != nullptr) {
    delete mission_raw_server_result_;
  }
  mission_raw_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw_server::MissionRawServerResult& IncomingMissionResponse::_internal_mission_raw_server_result() const {
  const ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* p = mission_raw_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw_server::MissionRawServerResult&>(
      ::mavsdk::rpc::mission_raw_server::_MissionRawServerResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw_server::MissionRawServerResult& IncomingMissionResponse::mission_raw_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_raw_server_result)
  return _internal_mission_raw_server_result();
}
inline void IncomingMissionResponse::unsafe_arena_set_allocated_mission_raw_server_result(
    ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* mission_raw_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_raw_server_result_);
  }
  mission_raw_server_result_ = mission_raw_server_result;
  if (mission_raw_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_raw_server_result)
}
inline ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* IncomingMissionResponse::release_mission_raw_server_result() {
  
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* temp = mission_raw_server_result_;
  mission_raw_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* IncomingMissionResponse::unsafe_arena_release_mission_raw_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_raw_server_result)
  
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* temp = mission_raw_server_result_;
  mission_raw_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* IncomingMissionResponse::_internal_mutable_mission_raw_server_result() {
  
  if (mission_raw_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::MissionRawServerResult>(GetArenaForAllocation());
    mission_raw_server_result_ = p;
  }
  return mission_raw_server_result_;
}
inline ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* IncomingMissionResponse::mutable_mission_raw_server_result() {
  ::mavsdk::rpc::mission_raw_server::MissionRawServerResult* _msg = _internal_mutable_mission_raw_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_raw_server_result)
  return _msg;
}
inline void IncomingMissionResponse::set_allocated_mission_raw_server_result(::mavsdk::rpc::mission_raw_server::MissionRawServerResult* mission_raw_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_raw_server_result_;
  }
  if (mission_raw_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_raw_server_result);
    if (message_arena != submessage_arena) {
      mission_raw_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_raw_server_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_raw_server_result_ = mission_raw_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_raw_server_result)
}

// .mavsdk.rpc.mission_raw_server.MissionPlan mission_plan = 2;
inline bool IncomingMissionResponse::_internal_has_mission_plan() const {
  return this != internal_default_instance() && mission_plan_ != nullptr;
}
inline bool IncomingMissionResponse::has_mission_plan() const {
  return _internal_has_mission_plan();
}
inline void IncomingMissionResponse::clear_mission_plan() {
  if (GetArenaForAllocation() == nullptr && mission_plan_ != nullptr) {
    delete mission_plan_;
  }
  mission_plan_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw_server::MissionPlan& IncomingMissionResponse::_internal_mission_plan() const {
  const ::mavsdk::rpc::mission_raw_server::MissionPlan* p = mission_plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw_server::MissionPlan&>(
      ::mavsdk::rpc::mission_raw_server::_MissionPlan_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw_server::MissionPlan& IncomingMissionResponse::mission_plan() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_plan)
  return _internal_mission_plan();
}
inline void IncomingMissionResponse::unsafe_arena_set_allocated_mission_plan(
    ::mavsdk::rpc::mission_raw_server::MissionPlan* mission_plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_);
  }
  mission_plan_ = mission_plan;
  if (mission_plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_plan)
}
inline ::mavsdk::rpc::mission_raw_server::MissionPlan* IncomingMissionResponse::release_mission_plan() {
  
  ::mavsdk::rpc::mission_raw_server::MissionPlan* temp = mission_plan_;
  mission_plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw_server::MissionPlan* IncomingMissionResponse::unsafe_arena_release_mission_plan() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_plan)
  
  ::mavsdk::rpc::mission_raw_server::MissionPlan* temp = mission_plan_;
  mission_plan_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw_server::MissionPlan* IncomingMissionResponse::_internal_mutable_mission_plan() {
  
  if (mission_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::MissionPlan>(GetArenaForAllocation());
    mission_plan_ = p;
  }
  return mission_plan_;
}
inline ::mavsdk::rpc::mission_raw_server::MissionPlan* IncomingMissionResponse::mutable_mission_plan() {
  ::mavsdk::rpc::mission_raw_server::MissionPlan* _msg = _internal_mutable_mission_plan();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_plan)
  return _msg;
}
inline void IncomingMissionResponse::set_allocated_mission_plan(::mavsdk::rpc::mission_raw_server::MissionPlan* mission_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_plan_;
  }
  if (mission_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_plan);
    if (message_arena != submessage_arena) {
      mission_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_ = mission_plan;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw_server.IncomingMissionResponse.mission_plan)
}

// -------------------------------------------------------------------

// SubscribeCurrentItemChangedRequest

// -------------------------------------------------------------------

// CurrentItemChangedResponse

// .mavsdk.rpc.mission_raw_server.MissionItem mission_item = 1;
inline bool CurrentItemChangedResponse::_internal_has_mission_item() const {
  return this != internal_default_instance() && mission_item_ != nullptr;
}
inline bool CurrentItemChangedResponse::has_mission_item() const {
  return _internal_has_mission_item();
}
inline void CurrentItemChangedResponse::clear_mission_item() {
  if (GetArenaForAllocation() == nullptr && mission_item_ != nullptr) {
    delete mission_item_;
  }
  mission_item_ = nullptr;
}
inline const ::mavsdk::rpc::mission_raw_server::MissionItem& CurrentItemChangedResponse::_internal_mission_item() const {
  const ::mavsdk::rpc::mission_raw_server::MissionItem* p = mission_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_raw_server::MissionItem&>(
      ::mavsdk::rpc::mission_raw_server::_MissionItem_default_instance_);
}
inline const ::mavsdk::rpc::mission_raw_server::MissionItem& CurrentItemChangedResponse::mission_item() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse.mission_item)
  return _internal_mission_item();
}
inline void CurrentItemChangedResponse::unsafe_arena_set_allocated_mission_item(
    ::mavsdk::rpc::mission_raw_server::MissionItem* mission_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_item_);
  }
  mission_item_ = mission_item;
  if (mission_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse.mission_item)
}
inline ::mavsdk::rpc::mission_raw_server::MissionItem* CurrentItemChangedResponse::release_mission_item() {
  
  ::mavsdk::rpc::mission_raw_server::MissionItem* temp = mission_item_;
  mission_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mission_raw_server::MissionItem* CurrentItemChangedResponse::unsafe_arena_release_mission_item() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse.mission_item)
  
  ::mavsdk::rpc::mission_raw_server::MissionItem* temp = mission_item_;
  mission_item_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_raw_server::MissionItem* CurrentItemChangedResponse::_internal_mutable_mission_item() {
  
  if (mission_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_raw_server::MissionItem>(GetArenaForAllocation());
    mission_item_ = p;
  }
  return mission_item_;
}
inline ::mavsdk::rpc::mission_raw_server::MissionItem* CurrentItemChangedResponse::mutable_mission_item() {
  ::mavsdk::rpc::mission_raw_server::MissionItem* _msg = _internal_mutable_mission_item();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse.mission_item)
  return _msg;
}
inline void CurrentItemChangedResponse::set_allocated_mission_item(::mavsdk::rpc::mission_raw_server::MissionItem* mission_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mission_item_;
  }
  if (mission_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_item);
    if (message_arena != submessage_arena) {
      mission_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_item, submessage_arena);
    }
    
  } else {
    
  }
  mission_item_ = mission_item;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse.mission_item)
}

// -------------------------------------------------------------------

// SubscribeClearAllRequest

// -------------------------------------------------------------------

// ClearAllResponse

// uint32 clear_type = 1;
inline void ClearAllResponse::clear_clear_type() {
  clear_type_ = 0u;
}
inline uint32_t ClearAllResponse::_internal_clear_type() const {
  return clear_type_;
}
inline uint32_t ClearAllResponse::clear_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.ClearAllResponse.clear_type)
  return _internal_clear_type();
}
inline void ClearAllResponse::_internal_set_clear_type(uint32_t value) {
  
  clear_type_ = value;
}
inline void ClearAllResponse::set_clear_type(uint32_t value) {
  _internal_set_clear_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.ClearAllResponse.clear_type)
}

// -------------------------------------------------------------------

// SetCurrentItemCompleteRequest

// -------------------------------------------------------------------

// SetCurrentItemCompleteResponse

// -------------------------------------------------------------------

// MissionItem

// uint32 seq = 1;
inline void MissionItem::clear_seq() {
  seq_ = 0u;
}
inline uint32_t MissionItem::_internal_seq() const {
  return seq_;
}
inline uint32_t MissionItem::seq() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.seq)
  return _internal_seq();
}
inline void MissionItem::_internal_set_seq(uint32_t value) {
  
  seq_ = value;
}
inline void MissionItem::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.seq)
}

// uint32 frame = 2;
inline void MissionItem::clear_frame() {
  frame_ = 0u;
}
inline uint32_t MissionItem::_internal_frame() const {
  return frame_;
}
inline uint32_t MissionItem::frame() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.frame)
  return _internal_frame();
}
inline void MissionItem::_internal_set_frame(uint32_t value) {
  
  frame_ = value;
}
inline void MissionItem::set_frame(uint32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.frame)
}

// uint32 command = 3;
inline void MissionItem::clear_command() {
  command_ = 0u;
}
inline uint32_t MissionItem::_internal_command() const {
  return command_;
}
inline uint32_t MissionItem::command() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.command)
  return _internal_command();
}
inline void MissionItem::_internal_set_command(uint32_t value) {
  
  command_ = value;
}
inline void MissionItem::set_command(uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.command)
}

// uint32 current = 4;
inline void MissionItem::clear_current() {
  current_ = 0u;
}
inline uint32_t MissionItem::_internal_current() const {
  return current_;
}
inline uint32_t MissionItem::current() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.current)
  return _internal_current();
}
inline void MissionItem::_internal_set_current(uint32_t value) {
  
  current_ = value;
}
inline void MissionItem::set_current(uint32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.current)
}

// uint32 autocontinue = 5;
inline void MissionItem::clear_autocontinue() {
  autocontinue_ = 0u;
}
inline uint32_t MissionItem::_internal_autocontinue() const {
  return autocontinue_;
}
inline uint32_t MissionItem::autocontinue() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.autocontinue)
  return _internal_autocontinue();
}
inline void MissionItem::_internal_set_autocontinue(uint32_t value) {
  
  autocontinue_ = value;
}
inline void MissionItem::set_autocontinue(uint32_t value) {
  _internal_set_autocontinue(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.autocontinue)
}

// float param1 = 6;
inline void MissionItem::clear_param1() {
  param1_ = 0;
}
inline float MissionItem::_internal_param1() const {
  return param1_;
}
inline float MissionItem::param1() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.param1)
  return _internal_param1();
}
inline void MissionItem::_internal_set_param1(float value) {
  
  param1_ = value;
}
inline void MissionItem::set_param1(float value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.param1)
}

// float param2 = 7;
inline void MissionItem::clear_param2() {
  param2_ = 0;
}
inline float MissionItem::_internal_param2() const {
  return param2_;
}
inline float MissionItem::param2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.param2)
  return _internal_param2();
}
inline void MissionItem::_internal_set_param2(float value) {
  
  param2_ = value;
}
inline void MissionItem::set_param2(float value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.param2)
}

// float param3 = 8;
inline void MissionItem::clear_param3() {
  param3_ = 0;
}
inline float MissionItem::_internal_param3() const {
  return param3_;
}
inline float MissionItem::param3() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.param3)
  return _internal_param3();
}
inline void MissionItem::_internal_set_param3(float value) {
  
  param3_ = value;
}
inline void MissionItem::set_param3(float value) {
  _internal_set_param3(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.param3)
}

// float param4 = 9;
inline void MissionItem::clear_param4() {
  param4_ = 0;
}
inline float MissionItem::_internal_param4() const {
  return param4_;
}
inline float MissionItem::param4() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.param4)
  return _internal_param4();
}
inline void MissionItem::_internal_set_param4(float value) {
  
  param4_ = value;
}
inline void MissionItem::set_param4(float value) {
  _internal_set_param4(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.param4)
}

// int32 x = 10;
inline void MissionItem::clear_x() {
  x_ = 0;
}
inline int32_t MissionItem::_internal_x() const {
  return x_;
}
inline int32_t MissionItem::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.x)
  return _internal_x();
}
inline void MissionItem::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void MissionItem::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.x)
}

// int32 y = 11;
inline void MissionItem::clear_y() {
  y_ = 0;
}
inline int32_t MissionItem::_internal_y() const {
  return y_;
}
inline int32_t MissionItem::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.y)
  return _internal_y();
}
inline void MissionItem::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void MissionItem::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.y)
}

// float z = 12;
inline void MissionItem::clear_z() {
  z_ = 0;
}
inline float MissionItem::_internal_z() const {
  return z_;
}
inline float MissionItem::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.z)
  return _internal_z();
}
inline void MissionItem::_internal_set_z(float value) {
  
  z_ = value;
}
inline void MissionItem::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.z)
}

// uint32 mission_type = 13;
inline void MissionItem::clear_mission_type() {
  mission_type_ = 0u;
}
inline uint32_t MissionItem::_internal_mission_type() const {
  return mission_type_;
}
inline uint32_t MissionItem::mission_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionItem.mission_type)
  return _internal_mission_type();
}
inline void MissionItem::_internal_set_mission_type(uint32_t value) {
  
  mission_type_ = value;
}
inline void MissionItem::set_mission_type(uint32_t value) {
  _internal_set_mission_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionItem.mission_type)
}

// -------------------------------------------------------------------

// MissionPlan

// repeated .mavsdk.rpc.mission_raw_server.MissionItem mission_items = 1;
inline int MissionPlan::_internal_mission_items_size() const {
  return mission_items_.size();
}
inline int MissionPlan::mission_items_size() const {
  return _internal_mission_items_size();
}
inline void MissionPlan::clear_mission_items() {
  mission_items_.Clear();
}
inline ::mavsdk::rpc::mission_raw_server::MissionItem* MissionPlan::mutable_mission_items(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw_server.MissionPlan.mission_items)
  return mission_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw_server::MissionItem >*
MissionPlan::mutable_mission_items() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mission_raw_server.MissionPlan.mission_items)
  return &mission_items_;
}
inline const ::mavsdk::rpc::mission_raw_server::MissionItem& MissionPlan::_internal_mission_items(int index) const {
  return mission_items_.Get(index);
}
inline const ::mavsdk::rpc::mission_raw_server::MissionItem& MissionPlan::mission_items(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionPlan.mission_items)
  return _internal_mission_items(index);
}
inline ::mavsdk::rpc::mission_raw_server::MissionItem* MissionPlan::_internal_add_mission_items() {
  return mission_items_.Add();
}
inline ::mavsdk::rpc::mission_raw_server::MissionItem* MissionPlan::add_mission_items() {
  ::mavsdk::rpc::mission_raw_server::MissionItem* _add = _internal_add_mission_items();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mission_raw_server.MissionPlan.mission_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_raw_server::MissionItem >&
MissionPlan::mission_items() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mission_raw_server.MissionPlan.mission_items)
  return mission_items_;
}

// -------------------------------------------------------------------

// MissionProgress

// int32 current = 1;
inline void MissionProgress::clear_current() {
  current_ = 0;
}
inline int32_t MissionProgress::_internal_current() const {
  return current_;
}
inline int32_t MissionProgress::current() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionProgress.current)
  return _internal_current();
}
inline void MissionProgress::_internal_set_current(int32_t value) {
  
  current_ = value;
}
inline void MissionProgress::set_current(int32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionProgress.current)
}

// int32 total = 2;
inline void MissionProgress::clear_total() {
  total_ = 0;
}
inline int32_t MissionProgress::_internal_total() const {
  return total_;
}
inline int32_t MissionProgress::total() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionProgress.total)
  return _internal_total();
}
inline void MissionProgress::_internal_set_total(int32_t value) {
  
  total_ = value;
}
inline void MissionProgress::set_total(int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionProgress.total)
}

// -------------------------------------------------------------------

// MissionRawServerResult

// .mavsdk.rpc.mission_raw_server.MissionRawServerResult.Result result = 1;
inline void MissionRawServerResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result MissionRawServerResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result >(result_);
}
inline ::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result MissionRawServerResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionRawServerResult.result)
  return _internal_result();
}
inline void MissionRawServerResult::_internal_set_result(::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result value) {
  
  result_ = value;
}
inline void MissionRawServerResult::set_result(::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionRawServerResult.result)
}

// string result_str = 2;
inline void MissionRawServerResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& MissionRawServerResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_raw_server.MissionRawServerResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MissionRawServerResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_raw_server.MissionRawServerResult.result_str)
}
inline std::string* MissionRawServerResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_raw_server.MissionRawServerResult.result_str)
  return _s;
}
inline const std::string& MissionRawServerResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void MissionRawServerResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* MissionRawServerResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* MissionRawServerResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_raw_server.MissionRawServerResult.result_str)
  return result_str_.Release();
}
inline void MissionRawServerResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_raw_server.MissionRawServerResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_raw_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result>() {
  return ::mavsdk::rpc::mission_raw_server::MissionRawServerResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mission_5fraw_5fserver_2fmission_5fraw_5fserver_2eproto
