// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mocap/mocap.proto

#include "mocap/mocap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mavsdk {
namespace rpc {
namespace mocap {
constexpr SetVisionPositionEstimateRequest::SetVisionPositionEstimateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vision_position_estimate_(nullptr){}
struct SetVisionPositionEstimateRequestDefaultTypeInternal {
  constexpr SetVisionPositionEstimateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetVisionPositionEstimateRequestDefaultTypeInternal() {}
  union {
    SetVisionPositionEstimateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetVisionPositionEstimateRequestDefaultTypeInternal _SetVisionPositionEstimateRequest_default_instance_;
constexpr SetVisionPositionEstimateResponse::SetVisionPositionEstimateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mocap_result_(nullptr){}
struct SetVisionPositionEstimateResponseDefaultTypeInternal {
  constexpr SetVisionPositionEstimateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetVisionPositionEstimateResponseDefaultTypeInternal() {}
  union {
    SetVisionPositionEstimateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetVisionPositionEstimateResponseDefaultTypeInternal _SetVisionPositionEstimateResponse_default_instance_;
constexpr SetAttitudePositionMocapRequest::SetAttitudePositionMocapRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attitude_position_mocap_(nullptr){}
struct SetAttitudePositionMocapRequestDefaultTypeInternal {
  constexpr SetAttitudePositionMocapRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAttitudePositionMocapRequestDefaultTypeInternal() {}
  union {
    SetAttitudePositionMocapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAttitudePositionMocapRequestDefaultTypeInternal _SetAttitudePositionMocapRequest_default_instance_;
constexpr SetAttitudePositionMocapResponse::SetAttitudePositionMocapResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mocap_result_(nullptr){}
struct SetAttitudePositionMocapResponseDefaultTypeInternal {
  constexpr SetAttitudePositionMocapResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAttitudePositionMocapResponseDefaultTypeInternal() {}
  union {
    SetAttitudePositionMocapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAttitudePositionMocapResponseDefaultTypeInternal _SetAttitudePositionMocapResponse_default_instance_;
constexpr SetOdometryRequest::SetOdometryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : odometry_(nullptr){}
struct SetOdometryRequestDefaultTypeInternal {
  constexpr SetOdometryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetOdometryRequestDefaultTypeInternal() {}
  union {
    SetOdometryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetOdometryRequestDefaultTypeInternal _SetOdometryRequest_default_instance_;
constexpr SetOdometryResponse::SetOdometryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mocap_result_(nullptr){}
struct SetOdometryResponseDefaultTypeInternal {
  constexpr SetOdometryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetOdometryResponseDefaultTypeInternal() {}
  union {
    SetOdometryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetOdometryResponseDefaultTypeInternal _SetOdometryResponse_default_instance_;
constexpr PositionBody::PositionBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_m_(0)
  , y_m_(0)
  , z_m_(0){}
struct PositionBodyDefaultTypeInternal {
  constexpr PositionBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionBodyDefaultTypeInternal() {}
  union {
    PositionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
constexpr AngleBody::AngleBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_rad_(0)
  , pitch_rad_(0)
  , yaw_rad_(0){}
struct AngleBodyDefaultTypeInternal {
  constexpr AngleBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AngleBodyDefaultTypeInternal() {}
  union {
    AngleBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AngleBodyDefaultTypeInternal _AngleBody_default_instance_;
constexpr SpeedBody::SpeedBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_m_s_(0)
  , y_m_s_(0)
  , z_m_s_(0){}
struct SpeedBodyDefaultTypeInternal {
  constexpr SpeedBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedBodyDefaultTypeInternal() {}
  union {
    SpeedBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedBodyDefaultTypeInternal _SpeedBody_default_instance_;
constexpr AngularVelocityBody::AngularVelocityBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_rad_s_(0)
  , pitch_rad_s_(0)
  , yaw_rad_s_(0){}
struct AngularVelocityBodyDefaultTypeInternal {
  constexpr AngularVelocityBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AngularVelocityBodyDefaultTypeInternal() {}
  union {
    AngularVelocityBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
constexpr Covariance::Covariance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : covariance_matrix_(){}
struct CovarianceDefaultTypeInternal {
  constexpr CovarianceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CovarianceDefaultTypeInternal() {}
  union {
    Covariance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CovarianceDefaultTypeInternal _Covariance_default_instance_;
constexpr Quaternion::Quaternion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct QuaternionDefaultTypeInternal {
  constexpr QuaternionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuaternionDefaultTypeInternal _Quaternion_default_instance_;
constexpr VisionPositionEstimate::VisionPositionEstimate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_body_(nullptr)
  , angle_body_(nullptr)
  , pose_covariance_(nullptr)
  , time_usec_(uint64_t{0u}){}
struct VisionPositionEstimateDefaultTypeInternal {
  constexpr VisionPositionEstimateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisionPositionEstimateDefaultTypeInternal() {}
  union {
    VisionPositionEstimate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisionPositionEstimateDefaultTypeInternal _VisionPositionEstimate_default_instance_;
constexpr AttitudePositionMocap::AttitudePositionMocap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , position_body_(nullptr)
  , pose_covariance_(nullptr)
  , time_usec_(uint64_t{0u}){}
struct AttitudePositionMocapDefaultTypeInternal {
  constexpr AttitudePositionMocapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AttitudePositionMocapDefaultTypeInternal() {}
  union {
    AttitudePositionMocap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AttitudePositionMocapDefaultTypeInternal _AttitudePositionMocap_default_instance_;
constexpr Odometry::Odometry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_body_(nullptr)
  , q_(nullptr)
  , speed_body_(nullptr)
  , angular_velocity_body_(nullptr)
  , pose_covariance_(nullptr)
  , velocity_covariance_(nullptr)
  , time_usec_(uint64_t{0u})
  , frame_id_(0)
{}
struct OdometryDefaultTypeInternal {
  constexpr OdometryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OdometryDefaultTypeInternal _Odometry_default_instance_;
constexpr MocapResult::MocapResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct MocapResultDefaultTypeInternal {
  constexpr MocapResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MocapResultDefaultTypeInternal() {}
  union {
    MocapResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MocapResultDefaultTypeInternal _MocapResult_default_instance_;
}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mocap_2fmocap_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mocap_2fmocap_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mocap_2fmocap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mocap_2fmocap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, vision_position_estimate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse, mocap_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, attitude_position_mocap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse, mocap_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetOdometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetOdometryRequest, odometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetOdometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SetOdometryResponse, mocap_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::PositionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::PositionBody, x_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::PositionBody, y_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::PositionBody, z_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngleBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngleBody, roll_rad_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngleBody, pitch_rad_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngleBody, yaw_rad_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedBody, x_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedBody, y_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::SpeedBody, z_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngularVelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngularVelocityBody, roll_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngularVelocityBody, pitch_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AngularVelocityBody, yaw_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Covariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Covariance, covariance_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, w_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Quaternion, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, angle_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::VisionPositionEstimate, pose_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, q_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::AttitudePositionMocap, pose_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, frame_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, q_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, speed_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, angular_velocity_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, pose_covariance_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::Odometry, velocity_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::MocapResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::MocapResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mocap::MocapResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest)},
  { 6, -1, sizeof(::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse)},
  { 12, -1, sizeof(::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest)},
  { 18, -1, sizeof(::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse)},
  { 24, -1, sizeof(::mavsdk::rpc::mocap::SetOdometryRequest)},
  { 30, -1, sizeof(::mavsdk::rpc::mocap::SetOdometryResponse)},
  { 36, -1, sizeof(::mavsdk::rpc::mocap::PositionBody)},
  { 44, -1, sizeof(::mavsdk::rpc::mocap::AngleBody)},
  { 52, -1, sizeof(::mavsdk::rpc::mocap::SpeedBody)},
  { 60, -1, sizeof(::mavsdk::rpc::mocap::AngularVelocityBody)},
  { 68, -1, sizeof(::mavsdk::rpc::mocap::Covariance)},
  { 74, -1, sizeof(::mavsdk::rpc::mocap::Quaternion)},
  { 83, -1, sizeof(::mavsdk::rpc::mocap::VisionPositionEstimate)},
  { 92, -1, sizeof(::mavsdk::rpc::mocap::AttitudePositionMocap)},
  { 101, -1, sizeof(::mavsdk::rpc::mocap::Odometry)},
  { 114, -1, sizeof(::mavsdk::rpc::mocap::MocapResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_SetVisionPositionEstimateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_SetVisionPositionEstimateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_SetAttitudePositionMocapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_SetAttitudePositionMocapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_SetOdometryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_SetOdometryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_PositionBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_AngleBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_SpeedBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_AngularVelocityBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_Covariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_VisionPositionEstimate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_AttitudePositionMocap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_Odometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mocap::_MocapResult_default_instance_),
};

const char descriptor_table_protodef_mocap_2fmocap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021mocap/mocap.proto\022\020mavsdk.rpc.mocap\032\024m"
  "avsdk_options.proto\"n\n SetVisionPosition"
  "EstimateRequest\022J\n\030vision_position_estim"
  "ate\030\001 \001(\0132(.mavsdk.rpc.mocap.VisionPosit"
  "ionEstimate\"X\n!SetVisionPositionEstimate"
  "Response\0223\n\014mocap_result\030\001 \001(\0132\035.mavsdk."
  "rpc.mocap.MocapResult\"k\n\037SetAttitudePosi"
  "tionMocapRequest\022H\n\027attitude_position_mo"
  "cap\030\001 \001(\0132\'.mavsdk.rpc.mocap.AttitudePos"
  "itionMocap\"W\n SetAttitudePositionMocapRe"
  "sponse\0223\n\014mocap_result\030\001 \001(\0132\035.mavsdk.rp"
  "c.mocap.MocapResult\"B\n\022SetOdometryReques"
  "t\022,\n\010odometry\030\001 \001(\0132\032.mavsdk.rpc.mocap.O"
  "dometry\"J\n\023SetOdometryResponse\0223\n\014mocap_"
  "result\030\001 \001(\0132\035.mavsdk.rpc.mocap.MocapRes"
  "ult\"5\n\014PositionBody\022\013\n\003x_m\030\001 \001(\002\022\013\n\003y_m\030"
  "\002 \001(\002\022\013\n\003z_m\030\003 \001(\002\"A\n\tAngleBody\022\020\n\010roll_"
  "rad\030\001 \001(\002\022\021\n\tpitch_rad\030\002 \001(\002\022\017\n\007yaw_rad\030"
  "\003 \001(\002\"8\n\tSpeedBody\022\r\n\005x_m_s\030\001 \001(\002\022\r\n\005y_m"
  "_s\030\002 \001(\002\022\r\n\005z_m_s\030\003 \001(\002\"Q\n\023AngularVeloci"
  "tyBody\022\022\n\nroll_rad_s\030\001 \001(\002\022\023\n\013pitch_rad_"
  "s\030\002 \001(\002\022\021\n\tyaw_rad_s\030\003 \001(\002\"\'\n\nCovariance"
  "\022\031\n\021covariance_matrix\030\001 \003(\002\"8\n\nQuaternio"
  "n\022\t\n\001w\030\001 \001(\002\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030"
  "\004 \001(\002\"\312\001\n\026VisionPositionEstimate\022\021\n\ttime"
  "_usec\030\001 \001(\004\0225\n\rposition_body\030\002 \001(\0132\036.mav"
  "sdk.rpc.mocap.PositionBody\022/\n\nangle_body"
  "\030\003 \001(\0132\033.mavsdk.rpc.mocap.AngleBody\0225\n\017p"
  "ose_covariance\030\004 \001(\0132\034.mavsdk.rpc.mocap."
  "Covariance\"\301\001\n\025AttitudePositionMocap\022\021\n\t"
  "time_usec\030\001 \001(\004\022\'\n\001q\030\002 \001(\0132\034.mavsdk.rpc."
  "mocap.Quaternion\0225\n\rposition_body\030\003 \001(\0132"
  "\036.mavsdk.rpc.mocap.PositionBody\0225\n\017pose_"
  "covariance\030\004 \001(\0132\034.mavsdk.rpc.mocap.Cova"
  "riance\"\333\003\n\010Odometry\022\021\n\ttime_usec\030\001 \001(\004\0225"
  "\n\010frame_id\030\002 \001(\0162#.mavsdk.rpc.mocap.Odom"
  "etry.MavFrame\0225\n\rposition_body\030\003 \001(\0132\036.m"
  "avsdk.rpc.mocap.PositionBody\022\'\n\001q\030\004 \001(\0132"
  "\034.mavsdk.rpc.mocap.Quaternion\022/\n\nspeed_b"
  "ody\030\005 \001(\0132\033.mavsdk.rpc.mocap.SpeedBody\022D"
  "\n\025angular_velocity_body\030\006 \001(\0132%.mavsdk.r"
  "pc.mocap.AngularVelocityBody\0225\n\017pose_cov"
  "ariance\030\007 \001(\0132\034.mavsdk.rpc.mocap.Covaria"
  "nce\0229\n\023velocity_covariance\030\010 \001(\0132\034.mavsd"
  "k.rpc.mocap.Covariance\"<\n\010MavFrame\022\027\n\023MA"
  "V_FRAME_MOCAP_NED\020\000\022\027\n\023MAV_FRAME_LOCAL_F"
  "RD\020\001\"\366\001\n\013MocapResult\0224\n\006result\030\001 \001(\0162$.m"
  "avsdk.rpc.mocap.MocapResult.Result\022\022\n\nre"
  "sult_str\030\002 \001(\t\"\234\001\n\006Result\022\022\n\016RESULT_UNKN"
  "OWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\024\n\020RESULT_NO_S"
  "YSTEM\020\002\022\033\n\027RESULT_CONNECTION_ERROR\020\003\022\037\n\033"
  "RESULT_INVALID_REQUEST_DATA\020\004\022\026\n\022RESULT_"
  "UNSUPPORTED\020\0052\207\003\n\014MocapService\022\212\001\n\031SetVi"
  "sionPositionEstimate\0222.mavsdk.rpc.mocap."
  "SetVisionPositionEstimateRequest\0323.mavsd"
  "k.rpc.mocap.SetVisionPositionEstimateRes"
  "ponse\"\004\200\265\030\001\022\207\001\n\030SetAttitudePositionMocap"
  "\0221.mavsdk.rpc.mocap.SetAttitudePositionM"
  "ocapRequest\0322.mavsdk.rpc.mocap.SetAttitu"
  "dePositionMocapResponse\"\004\200\265\030\001\022`\n\013SetOdom"
  "etry\022$.mavsdk.rpc.mocap.SetOdometryReque"
  "st\032%.mavsdk.rpc.mocap.SetOdometryRespons"
  "e\"\004\200\265\030\001B\035\n\017io.mavsdk.mocapB\nMocapProtob\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mocap_2fmocap_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mocap_2fmocap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mocap_2fmocap_2eproto = {
  false, false, 2526, descriptor_table_protodef_mocap_2fmocap_2eproto, "mocap/mocap.proto", 
  &descriptor_table_mocap_2fmocap_2eproto_once, descriptor_table_mocap_2fmocap_2eproto_deps, 1, 16,
  schemas, file_default_instances, TableStruct_mocap_2fmocap_2eproto::offsets,
  file_level_metadata_mocap_2fmocap_2eproto, file_level_enum_descriptors_mocap_2fmocap_2eproto, file_level_service_descriptors_mocap_2fmocap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mocap_2fmocap_2eproto_getter() {
  return &descriptor_table_mocap_2fmocap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mocap_2fmocap_2eproto(&descriptor_table_mocap_2fmocap_2eproto);
namespace mavsdk {
namespace rpc {
namespace mocap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mocap_2fmocap_2eproto);
  return file_level_enum_descriptors_mocap_2fmocap_2eproto[0];
}
bool Odometry_MavFrame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Odometry_MavFrame Odometry::MAV_FRAME_MOCAP_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_LOCAL_FRD;
constexpr Odometry_MavFrame Odometry::MavFrame_MIN;
constexpr Odometry_MavFrame Odometry::MavFrame_MAX;
constexpr int Odometry::MavFrame_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MocapResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mocap_2fmocap_2eproto);
  return file_level_enum_descriptors_mocap_2fmocap_2eproto[1];
}
bool MocapResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MocapResult_Result MocapResult::RESULT_UNKNOWN;
constexpr MocapResult_Result MocapResult::RESULT_SUCCESS;
constexpr MocapResult_Result MocapResult::RESULT_NO_SYSTEM;
constexpr MocapResult_Result MocapResult::RESULT_CONNECTION_ERROR;
constexpr MocapResult_Result MocapResult::RESULT_INVALID_REQUEST_DATA;
constexpr MocapResult_Result MocapResult::RESULT_UNSUPPORTED;
constexpr MocapResult_Result MocapResult::Result_MIN;
constexpr MocapResult_Result MocapResult::Result_MAX;
constexpr int MocapResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SetVisionPositionEstimateRequest::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::VisionPositionEstimate& vision_position_estimate(const SetVisionPositionEstimateRequest* msg);
};

const ::mavsdk::rpc::mocap::VisionPositionEstimate&
SetVisionPositionEstimateRequest::_Internal::vision_position_estimate(const SetVisionPositionEstimateRequest* msg) {
  return *msg->vision_position_estimate_;
}
SetVisionPositionEstimateRequest::SetVisionPositionEstimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
}
SetVisionPositionEstimateRequest::SetVisionPositionEstimateRequest(const SetVisionPositionEstimateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vision_position_estimate()) {
    vision_position_estimate_ = new ::mavsdk::rpc::mocap::VisionPositionEstimate(*from.vision_position_estimate_);
  } else {
    vision_position_estimate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
}

inline void SetVisionPositionEstimateRequest::SharedCtor() {
vision_position_estimate_ = nullptr;
}

SetVisionPositionEstimateRequest::~SetVisionPositionEstimateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetVisionPositionEstimateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vision_position_estimate_;
}

void SetVisionPositionEstimateRequest::ArenaDtor(void* object) {
  SetVisionPositionEstimateRequest* _this = reinterpret_cast< SetVisionPositionEstimateRequest* >(object);
  (void)_this;
}
void SetVisionPositionEstimateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVisionPositionEstimateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetVisionPositionEstimateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vision_position_estimate_ != nullptr) {
    delete vision_position_estimate_;
  }
  vision_position_estimate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVisionPositionEstimateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vision_position_estimate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVisionPositionEstimateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
  if (this->_internal_has_vision_position_estimate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vision_position_estimate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  return target;
}

size_t SetVisionPositionEstimateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
  if (this->_internal_has_vision_position_estimate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vision_position_estimate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVisionPositionEstimateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetVisionPositionEstimateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVisionPositionEstimateRequest::GetClassData() const { return &_class_data_; }

void SetVisionPositionEstimateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetVisionPositionEstimateRequest *>(to)->MergeFrom(
      static_cast<const SetVisionPositionEstimateRequest &>(from));
}


void SetVisionPositionEstimateRequest::MergeFrom(const SetVisionPositionEstimateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vision_position_estimate()) {
    _internal_mutable_vision_position_estimate()->::mavsdk::rpc::mocap::VisionPositionEstimate::MergeFrom(from._internal_vision_position_estimate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVisionPositionEstimateRequest::CopyFrom(const SetVisionPositionEstimateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVisionPositionEstimateRequest::IsInitialized() const {
  return true;
}

void SetVisionPositionEstimateRequest::InternalSwap(SetVisionPositionEstimateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(vision_position_estimate_, other->vision_position_estimate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVisionPositionEstimateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[0]);
}

// ===================================================================

class SetVisionPositionEstimateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::MocapResult& mocap_result(const SetVisionPositionEstimateResponse* msg);
};

const ::mavsdk::rpc::mocap::MocapResult&
SetVisionPositionEstimateResponse::_Internal::mocap_result(const SetVisionPositionEstimateResponse* msg) {
  return *msg->mocap_result_;
}
SetVisionPositionEstimateResponse::SetVisionPositionEstimateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
}
SetVisionPositionEstimateResponse::SetVisionPositionEstimateResponse(const SetVisionPositionEstimateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mocap_result()) {
    mocap_result_ = new ::mavsdk::rpc::mocap::MocapResult(*from.mocap_result_);
  } else {
    mocap_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
}

inline void SetVisionPositionEstimateResponse::SharedCtor() {
mocap_result_ = nullptr;
}

SetVisionPositionEstimateResponse::~SetVisionPositionEstimateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetVisionPositionEstimateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mocap_result_;
}

void SetVisionPositionEstimateResponse::ArenaDtor(void* object) {
  SetVisionPositionEstimateResponse* _this = reinterpret_cast< SetVisionPositionEstimateResponse* >(object);
  (void)_this;
}
void SetVisionPositionEstimateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVisionPositionEstimateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetVisionPositionEstimateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mocap_result_ != nullptr) {
    delete mocap_result_;
  }
  mocap_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVisionPositionEstimateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mocap_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVisionPositionEstimateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mocap_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  return target;
}

size_t SetVisionPositionEstimateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mocap_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVisionPositionEstimateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetVisionPositionEstimateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVisionPositionEstimateResponse::GetClassData() const { return &_class_data_; }

void SetVisionPositionEstimateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetVisionPositionEstimateResponse *>(to)->MergeFrom(
      static_cast<const SetVisionPositionEstimateResponse &>(from));
}


void SetVisionPositionEstimateResponse::MergeFrom(const SetVisionPositionEstimateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mocap_result()) {
    _internal_mutable_mocap_result()->::mavsdk::rpc::mocap::MocapResult::MergeFrom(from._internal_mocap_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVisionPositionEstimateResponse::CopyFrom(const SetVisionPositionEstimateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVisionPositionEstimateResponse::IsInitialized() const {
  return true;
}

void SetVisionPositionEstimateResponse::InternalSwap(SetVisionPositionEstimateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mocap_result_, other->mocap_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVisionPositionEstimateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[1]);
}

// ===================================================================

class SetAttitudePositionMocapRequest::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::AttitudePositionMocap& attitude_position_mocap(const SetAttitudePositionMocapRequest* msg);
};

const ::mavsdk::rpc::mocap::AttitudePositionMocap&
SetAttitudePositionMocapRequest::_Internal::attitude_position_mocap(const SetAttitudePositionMocapRequest* msg) {
  return *msg->attitude_position_mocap_;
}
SetAttitudePositionMocapRequest::SetAttitudePositionMocapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
}
SetAttitudePositionMocapRequest::SetAttitudePositionMocapRequest(const SetAttitudePositionMocapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude_position_mocap()) {
    attitude_position_mocap_ = new ::mavsdk::rpc::mocap::AttitudePositionMocap(*from.attitude_position_mocap_);
  } else {
    attitude_position_mocap_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
}

inline void SetAttitudePositionMocapRequest::SharedCtor() {
attitude_position_mocap_ = nullptr;
}

SetAttitudePositionMocapRequest::~SetAttitudePositionMocapRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAttitudePositionMocapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attitude_position_mocap_;
}

void SetAttitudePositionMocapRequest::ArenaDtor(void* object) {
  SetAttitudePositionMocapRequest* _this = reinterpret_cast< SetAttitudePositionMocapRequest* >(object);
  (void)_this;
}
void SetAttitudePositionMocapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAttitudePositionMocapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAttitudePositionMocapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && attitude_position_mocap_ != nullptr) {
    delete attitude_position_mocap_;
  }
  attitude_position_mocap_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttitudePositionMocapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_position_mocap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAttitudePositionMocapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
  if (this->_internal_has_attitude_position_mocap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_position_mocap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  return target;
}

size_t SetAttitudePositionMocapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
  if (this->_internal_has_attitude_position_mocap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_position_mocap_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAttitudePositionMocapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAttitudePositionMocapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAttitudePositionMocapRequest::GetClassData() const { return &_class_data_; }

void SetAttitudePositionMocapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetAttitudePositionMocapRequest *>(to)->MergeFrom(
      static_cast<const SetAttitudePositionMocapRequest &>(from));
}


void SetAttitudePositionMocapRequest::MergeFrom(const SetAttitudePositionMocapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attitude_position_mocap()) {
    _internal_mutable_attitude_position_mocap()->::mavsdk::rpc::mocap::AttitudePositionMocap::MergeFrom(from._internal_attitude_position_mocap());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAttitudePositionMocapRequest::CopyFrom(const SetAttitudePositionMocapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttitudePositionMocapRequest::IsInitialized() const {
  return true;
}

void SetAttitudePositionMocapRequest::InternalSwap(SetAttitudePositionMocapRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(attitude_position_mocap_, other->attitude_position_mocap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttitudePositionMocapRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[2]);
}

// ===================================================================

class SetAttitudePositionMocapResponse::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::MocapResult& mocap_result(const SetAttitudePositionMocapResponse* msg);
};

const ::mavsdk::rpc::mocap::MocapResult&
SetAttitudePositionMocapResponse::_Internal::mocap_result(const SetAttitudePositionMocapResponse* msg) {
  return *msg->mocap_result_;
}
SetAttitudePositionMocapResponse::SetAttitudePositionMocapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
}
SetAttitudePositionMocapResponse::SetAttitudePositionMocapResponse(const SetAttitudePositionMocapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mocap_result()) {
    mocap_result_ = new ::mavsdk::rpc::mocap::MocapResult(*from.mocap_result_);
  } else {
    mocap_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
}

inline void SetAttitudePositionMocapResponse::SharedCtor() {
mocap_result_ = nullptr;
}

SetAttitudePositionMocapResponse::~SetAttitudePositionMocapResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAttitudePositionMocapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mocap_result_;
}

void SetAttitudePositionMocapResponse::ArenaDtor(void* object) {
  SetAttitudePositionMocapResponse* _this = reinterpret_cast< SetAttitudePositionMocapResponse* >(object);
  (void)_this;
}
void SetAttitudePositionMocapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAttitudePositionMocapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAttitudePositionMocapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mocap_result_ != nullptr) {
    delete mocap_result_;
  }
  mocap_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttitudePositionMocapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mocap_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAttitudePositionMocapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mocap_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  return target;
}

size_t SetAttitudePositionMocapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mocap_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAttitudePositionMocapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAttitudePositionMocapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAttitudePositionMocapResponse::GetClassData() const { return &_class_data_; }

void SetAttitudePositionMocapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetAttitudePositionMocapResponse *>(to)->MergeFrom(
      static_cast<const SetAttitudePositionMocapResponse &>(from));
}


void SetAttitudePositionMocapResponse::MergeFrom(const SetAttitudePositionMocapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mocap_result()) {
    _internal_mutable_mocap_result()->::mavsdk::rpc::mocap::MocapResult::MergeFrom(from._internal_mocap_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAttitudePositionMocapResponse::CopyFrom(const SetAttitudePositionMocapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttitudePositionMocapResponse::IsInitialized() const {
  return true;
}

void SetAttitudePositionMocapResponse::InternalSwap(SetAttitudePositionMocapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mocap_result_, other->mocap_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttitudePositionMocapResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[3]);
}

// ===================================================================

class SetOdometryRequest::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::Odometry& odometry(const SetOdometryRequest* msg);
};

const ::mavsdk::rpc::mocap::Odometry&
SetOdometryRequest::_Internal::odometry(const SetOdometryRequest* msg) {
  return *msg->odometry_;
}
SetOdometryRequest::SetOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetOdometryRequest)
}
SetOdometryRequest::SetOdometryRequest(const SetOdometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_odometry()) {
    odometry_ = new ::mavsdk::rpc::mocap::Odometry(*from.odometry_);
  } else {
    odometry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetOdometryRequest)
}

inline void SetOdometryRequest::SharedCtor() {
odometry_ = nullptr;
}

SetOdometryRequest::~SetOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetOdometryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetOdometryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete odometry_;
}

void SetOdometryRequest::ArenaDtor(void* object) {
  SetOdometryRequest* _this = reinterpret_cast< SetOdometryRequest* >(object);
  (void)_this;
}
void SetOdometryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetOdometryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOdometryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.Odometry odometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetOdometryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.Odometry odometry = 1;
  if (this->_internal_has_odometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::odometry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetOdometryRequest)
  return target;
}

size_t SetOdometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetOdometryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.Odometry odometry = 1;
  if (this->_internal_has_odometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odometry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOdometryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetOdometryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOdometryRequest::GetClassData() const { return &_class_data_; }

void SetOdometryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetOdometryRequest *>(to)->MergeFrom(
      static_cast<const SetOdometryRequest &>(from));
}


void SetOdometryRequest::MergeFrom(const SetOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_odometry()) {
    _internal_mutable_odometry()->::mavsdk::rpc::mocap::Odometry::MergeFrom(from._internal_odometry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetOdometryRequest::CopyFrom(const SetOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOdometryRequest::IsInitialized() const {
  return true;
}

void SetOdometryRequest::InternalSwap(SetOdometryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(odometry_, other->odometry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOdometryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[4]);
}

// ===================================================================

class SetOdometryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::MocapResult& mocap_result(const SetOdometryResponse* msg);
};

const ::mavsdk::rpc::mocap::MocapResult&
SetOdometryResponse::_Internal::mocap_result(const SetOdometryResponse* msg) {
  return *msg->mocap_result_;
}
SetOdometryResponse::SetOdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SetOdometryResponse)
}
SetOdometryResponse::SetOdometryResponse(const SetOdometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mocap_result()) {
    mocap_result_ = new ::mavsdk::rpc::mocap::MocapResult(*from.mocap_result_);
  } else {
    mocap_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SetOdometryResponse)
}

inline void SetOdometryResponse::SharedCtor() {
mocap_result_ = nullptr;
}

SetOdometryResponse::~SetOdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SetOdometryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetOdometryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mocap_result_;
}

void SetOdometryResponse::ArenaDtor(void* object) {
  SetOdometryResponse* _this = reinterpret_cast< SetOdometryResponse* >(object);
  (void)_this;
}
void SetOdometryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetOdometryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetOdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SetOdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mocap_result_ != nullptr) {
    delete mocap_result_;
  }
  mocap_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOdometryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mocap_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetOdometryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SetOdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mocap_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SetOdometryResponse)
  return target;
}

size_t SetOdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SetOdometryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  if (this->_internal_has_mocap_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mocap_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOdometryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetOdometryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOdometryResponse::GetClassData() const { return &_class_data_; }

void SetOdometryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetOdometryResponse *>(to)->MergeFrom(
      static_cast<const SetOdometryResponse &>(from));
}


void SetOdometryResponse::MergeFrom(const SetOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SetOdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mocap_result()) {
    _internal_mutable_mocap_result()->::mavsdk::rpc::mocap::MocapResult::MergeFrom(from._internal_mocap_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetOdometryResponse::CopyFrom(const SetOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SetOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOdometryResponse::IsInitialized() const {
  return true;
}

void SetOdometryResponse::InternalSwap(SetOdometryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mocap_result_, other->mocap_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOdometryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[5]);
}

// ===================================================================

class PositionBody::_Internal {
 public:
};

PositionBody::PositionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.PositionBody)
}
PositionBody::PositionBody(const PositionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_m_, &from.x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_) -
    reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.PositionBody)
}

inline void PositionBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_m_) -
    reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
}

PositionBody::~PositionBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.PositionBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PositionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionBody::ArenaDtor(void* object) {
  PositionBody* _this = reinterpret_cast< PositionBody* >(object);
  (void)_this;
}
void PositionBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.PositionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_) -
      reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.PositionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m = 1;
  if (!(this->_internal_x_m() <= 0 && this->_internal_x_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m(), target);
  }

  // float y_m = 2;
  if (!(this->_internal_y_m() <= 0 && this->_internal_y_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m(), target);
  }

  // float z_m = 3;
  if (!(this->_internal_z_m() <= 0 && this->_internal_z_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.PositionBody)
  return target;
}

size_t PositionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.PositionBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m = 1;
  if (!(this->_internal_x_m() <= 0 && this->_internal_x_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_m = 2;
  if (!(this->_internal_y_m() <= 0 && this->_internal_y_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_m = 3;
  if (!(this->_internal_z_m() <= 0 && this->_internal_z_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PositionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionBody::GetClassData() const { return &_class_data_; }

void PositionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PositionBody *>(to)->MergeFrom(
      static_cast<const PositionBody &>(from));
}


void PositionBody::MergeFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.PositionBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x_m() <= 0 && from._internal_x_m() >= 0)) {
    _internal_set_x_m(from._internal_x_m());
  }
  if (!(from._internal_y_m() <= 0 && from._internal_y_m() >= 0)) {
    _internal_set_y_m(from._internal_y_m());
  }
  if (!(from._internal_z_m() <= 0 && from._internal_z_m() >= 0)) {
    _internal_set_z_m(from._internal_z_m());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionBody::CopyFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionBody::IsInitialized() const {
  return true;
}

void PositionBody::InternalSwap(PositionBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionBody, z_m_)
      + sizeof(PositionBody::z_m_)
      - PROTOBUF_FIELD_OFFSET(PositionBody, x_m_)>(
          reinterpret_cast<char*>(&x_m_),
          reinterpret_cast<char*>(&other->x_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[6]);
}

// ===================================================================

class AngleBody::_Internal {
 public:
};

AngleBody::AngleBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.AngleBody)
}
AngleBody::AngleBody(const AngleBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_rad_, &from.roll_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rad_) -
    reinterpret_cast<char*>(&roll_rad_)) + sizeof(yaw_rad_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.AngleBody)
}

inline void AngleBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_rad_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_rad_) -
    reinterpret_cast<char*>(&roll_rad_)) + sizeof(yaw_rad_));
}

AngleBody::~AngleBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.AngleBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AngleBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AngleBody::ArenaDtor(void* object) {
  AngleBody* _this = reinterpret_cast< AngleBody* >(object);
  (void)_this;
}
void AngleBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngleBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AngleBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.AngleBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rad_) -
      reinterpret_cast<char*>(&roll_rad_)) + sizeof(yaw_rad_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngleBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float roll_rad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_rad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_rad = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngleBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.AngleBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_rad = 1;
  if (!(this->_internal_roll_rad() <= 0 && this->_internal_roll_rad() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rad(), target);
  }

  // float pitch_rad = 2;
  if (!(this->_internal_pitch_rad() <= 0 && this->_internal_pitch_rad() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rad(), target);
  }

  // float yaw_rad = 3;
  if (!(this->_internal_yaw_rad() <= 0 && this->_internal_yaw_rad() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.AngleBody)
  return target;
}

size_t AngleBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.AngleBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad = 1;
  if (!(this->_internal_roll_rad() <= 0 && this->_internal_roll_rad() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_rad = 2;
  if (!(this->_internal_pitch_rad() <= 0 && this->_internal_pitch_rad() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_rad = 3;
  if (!(this->_internal_yaw_rad() <= 0 && this->_internal_yaw_rad() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AngleBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AngleBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AngleBody::GetClassData() const { return &_class_data_; }

void AngleBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AngleBody *>(to)->MergeFrom(
      static_cast<const AngleBody &>(from));
}


void AngleBody::MergeFrom(const AngleBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.AngleBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_roll_rad() <= 0 && from._internal_roll_rad() >= 0)) {
    _internal_set_roll_rad(from._internal_roll_rad());
  }
  if (!(from._internal_pitch_rad() <= 0 && from._internal_pitch_rad() >= 0)) {
    _internal_set_pitch_rad(from._internal_pitch_rad());
  }
  if (!(from._internal_yaw_rad() <= 0 && from._internal_yaw_rad() >= 0)) {
    _internal_set_yaw_rad(from._internal_yaw_rad());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AngleBody::CopyFrom(const AngleBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.AngleBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngleBody::IsInitialized() const {
  return true;
}

void AngleBody::InternalSwap(AngleBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngleBody, yaw_rad_)
      + sizeof(AngleBody::yaw_rad_)
      - PROTOBUF_FIELD_OFFSET(AngleBody, roll_rad_)>(
          reinterpret_cast<char*>(&roll_rad_),
          reinterpret_cast<char*>(&other->roll_rad_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngleBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[7]);
}

// ===================================================================

class SpeedBody::_Internal {
 public:
};

SpeedBody::SpeedBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.SpeedBody)
}
SpeedBody::SpeedBody(const SpeedBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_m_s_, &from.x_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_s_) -
    reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.SpeedBody)
}

inline void SpeedBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_m_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_m_s_) -
    reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
}

SpeedBody::~SpeedBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.SpeedBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeedBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedBody::ArenaDtor(void* object) {
  SpeedBody* _this = reinterpret_cast< SpeedBody* >(object);
  (void)_this;
}
void SpeedBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeedBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.SpeedBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_s_) -
      reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.SpeedBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m_s = 1;
  if (!(this->_internal_x_m_s() <= 0 && this->_internal_x_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m_s(), target);
  }

  // float y_m_s = 2;
  if (!(this->_internal_y_m_s() <= 0 && this->_internal_y_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m_s(), target);
  }

  // float z_m_s = 3;
  if (!(this->_internal_z_m_s() <= 0 && this->_internal_z_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.SpeedBody)
  return target;
}

size_t SpeedBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.SpeedBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m_s = 1;
  if (!(this->_internal_x_m_s() <= 0 && this->_internal_x_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_m_s = 2;
  if (!(this->_internal_y_m_s() <= 0 && this->_internal_y_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_m_s = 3;
  if (!(this->_internal_z_m_s() <= 0 && this->_internal_z_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedBody::GetClassData() const { return &_class_data_; }

void SpeedBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpeedBody *>(to)->MergeFrom(
      static_cast<const SpeedBody &>(from));
}


void SpeedBody::MergeFrom(const SpeedBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.SpeedBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x_m_s() <= 0 && from._internal_x_m_s() >= 0)) {
    _internal_set_x_m_s(from._internal_x_m_s());
  }
  if (!(from._internal_y_m_s() <= 0 && from._internal_y_m_s() >= 0)) {
    _internal_set_y_m_s(from._internal_y_m_s());
  }
  if (!(from._internal_z_m_s() <= 0 && from._internal_z_m_s() >= 0)) {
    _internal_set_z_m_s(from._internal_z_m_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedBody::CopyFrom(const SpeedBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.SpeedBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBody::IsInitialized() const {
  return true;
}

void SpeedBody::InternalSwap(SpeedBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedBody, z_m_s_)
      + sizeof(SpeedBody::z_m_s_)
      - PROTOBUF_FIELD_OFFSET(SpeedBody, x_m_s_)>(
          reinterpret_cast<char*>(&x_m_s_),
          reinterpret_cast<char*>(&other->x_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[8]);
}

// ===================================================================

class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(const AngularVelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_rad_s_, &from.roll_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rad_s_) -
    reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.AngularVelocityBody)
}

inline void AngularVelocityBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_rad_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_rad_s_) -
    reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
}

AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.AngularVelocityBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AngularVelocityBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AngularVelocityBody::ArenaDtor(void* object) {
  AngularVelocityBody* _this = reinterpret_cast< AngularVelocityBody* >(object);
  (void)_this;
}
void AngularVelocityBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngularVelocityBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.AngularVelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rad_s_) -
      reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularVelocityBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float roll_rad_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_rad_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_rad_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularVelocityBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.AngularVelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_rad_s = 1;
  if (!(this->_internal_roll_rad_s() <= 0 && this->_internal_roll_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rad_s(), target);
  }

  // float pitch_rad_s = 2;
  if (!(this->_internal_pitch_rad_s() <= 0 && this->_internal_pitch_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rad_s(), target);
  }

  // float yaw_rad_s = 3;
  if (!(this->_internal_yaw_rad_s() <= 0 && this->_internal_yaw_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.AngularVelocityBody)
  return target;
}

size_t AngularVelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.AngularVelocityBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad_s = 1;
  if (!(this->_internal_roll_rad_s() <= 0 && this->_internal_roll_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_rad_s = 2;
  if (!(this->_internal_pitch_rad_s() <= 0 && this->_internal_pitch_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_rad_s = 3;
  if (!(this->_internal_yaw_rad_s() <= 0 && this->_internal_yaw_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AngularVelocityBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AngularVelocityBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AngularVelocityBody::GetClassData() const { return &_class_data_; }

void AngularVelocityBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AngularVelocityBody *>(to)->MergeFrom(
      static_cast<const AngularVelocityBody &>(from));
}


void AngularVelocityBody::MergeFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_roll_rad_s() <= 0 && from._internal_roll_rad_s() >= 0)) {
    _internal_set_roll_rad_s(from._internal_roll_rad_s());
  }
  if (!(from._internal_pitch_rad_s() <= 0 && from._internal_pitch_rad_s() >= 0)) {
    _internal_set_pitch_rad_s(from._internal_pitch_rad_s());
  }
  if (!(from._internal_yaw_rad_s() <= 0 && from._internal_yaw_rad_s() >= 0)) {
    _internal_set_yaw_rad_s(from._internal_yaw_rad_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityBody::IsInitialized() const {
  return true;
}

void AngularVelocityBody::InternalSwap(AngularVelocityBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityBody, yaw_rad_s_)
      + sizeof(AngularVelocityBody::yaw_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityBody, roll_rad_s_)>(
          reinterpret_cast<char*>(&roll_rad_s_),
          reinterpret_cast<char*>(&other->roll_rad_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[9]);
}

// ===================================================================

class Covariance::_Internal {
 public:
};

Covariance::Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  covariance_matrix_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.Covariance)
}
Covariance::Covariance(const Covariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_matrix_(from.covariance_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.Covariance)
}

inline void Covariance::SharedCtor() {
}

Covariance::~Covariance() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.Covariance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Covariance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Covariance::ArenaDtor(void* object) {
  Covariance* _this = reinterpret_cast< Covariance* >(object);
  (void)_this;
}
void Covariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Covariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_matrix_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Covariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float covariance_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_covariance_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Covariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  if (this->_internal_covariance_matrix_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_covariance_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.Covariance)
  return target;
}

size_t Covariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.Covariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Covariance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Covariance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Covariance::GetClassData() const { return &_class_data_; }

void Covariance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Covariance *>(to)->MergeFrom(
      static_cast<const Covariance &>(from));
}


void Covariance::MergeFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_matrix_.MergeFrom(from.covariance_matrix_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Covariance::CopyFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Covariance::IsInitialized() const {
  return true;
}

void Covariance::InternalSwap(Covariance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  covariance_matrix_.InternalSwap(&other->covariance_matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Covariance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[10]);
}

// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.Quaternion)
}

inline void Quaternion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.Quaternion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->_internal_w() <= 0 && this->_internal_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->_internal_w() <= 0 && this->_internal_w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternion::GetClassData() const { return &_class_data_; }

void Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Quaternion *>(to)->MergeFrom(
      static_cast<const Quaternion &>(from));
}


void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_w() <= 0 && from._internal_w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, z_)
      + sizeof(Quaternion::z_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[11]);
}

// ===================================================================

class VisionPositionEstimate::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::PositionBody& position_body(const VisionPositionEstimate* msg);
  static const ::mavsdk::rpc::mocap::AngleBody& angle_body(const VisionPositionEstimate* msg);
  static const ::mavsdk::rpc::mocap::Covariance& pose_covariance(const VisionPositionEstimate* msg);
};

const ::mavsdk::rpc::mocap::PositionBody&
VisionPositionEstimate::_Internal::position_body(const VisionPositionEstimate* msg) {
  return *msg->position_body_;
}
const ::mavsdk::rpc::mocap::AngleBody&
VisionPositionEstimate::_Internal::angle_body(const VisionPositionEstimate* msg) {
  return *msg->angle_body_;
}
const ::mavsdk::rpc::mocap::Covariance&
VisionPositionEstimate::_Internal::pose_covariance(const VisionPositionEstimate* msg) {
  return *msg->pose_covariance_;
}
VisionPositionEstimate::VisionPositionEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.VisionPositionEstimate)
}
VisionPositionEstimate::VisionPositionEstimate(const VisionPositionEstimate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_body()) {
    position_body_ = new ::mavsdk::rpc::mocap::PositionBody(*from.position_body_);
  } else {
    position_body_ = nullptr;
  }
  if (from._internal_has_angle_body()) {
    angle_body_ = new ::mavsdk::rpc::mocap::AngleBody(*from.angle_body_);
  } else {
    angle_body_ = nullptr;
  }
  if (from._internal_has_pose_covariance()) {
    pose_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from.pose_covariance_);
  } else {
    pose_covariance_ = nullptr;
  }
  time_usec_ = from.time_usec_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.VisionPositionEstimate)
}

inline void VisionPositionEstimate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_body_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_usec_) -
    reinterpret_cast<char*>(&position_body_)) + sizeof(time_usec_));
}

VisionPositionEstimate::~VisionPositionEstimate() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.VisionPositionEstimate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VisionPositionEstimate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_body_;
  if (this != internal_default_instance()) delete angle_body_;
  if (this != internal_default_instance()) delete pose_covariance_;
}

void VisionPositionEstimate::ArenaDtor(void* object) {
  VisionPositionEstimate* _this = reinterpret_cast< VisionPositionEstimate* >(object);
  (void)_this;
}
void VisionPositionEstimate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisionPositionEstimate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisionPositionEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angle_body_ != nullptr) {
    delete angle_body_;
  }
  angle_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
  time_usec_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionPositionEstimate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.PositionBody position_body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.AngleBody angle_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionPositionEstimate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.mocap.PositionBody position_body = 2;
  if (this->_internal_has_position_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position_body(this), target, stream);
  }

  // .mavsdk.rpc.mocap.AngleBody angle_body = 3;
  if (this->_internal_has_angle_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::angle_body(this), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  if (this->_internal_has_pose_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pose_covariance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.VisionPositionEstimate)
  return target;
}

size_t VisionPositionEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.PositionBody position_body = 2;
  if (this->_internal_has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_body_);
  }

  // .mavsdk.rpc.mocap.AngleBody angle_body = 3;
  if (this->_internal_has_angle_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angle_body_);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  if (this->_internal_has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_usec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisionPositionEstimate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VisionPositionEstimate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisionPositionEstimate::GetClassData() const { return &_class_data_; }

void VisionPositionEstimate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VisionPositionEstimate *>(to)->MergeFrom(
      static_cast<const VisionPositionEstimate &>(from));
}


void VisionPositionEstimate::MergeFrom(const VisionPositionEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position_body()) {
    _internal_mutable_position_body()->::mavsdk::rpc::mocap::PositionBody::MergeFrom(from._internal_position_body());
  }
  if (from._internal_has_angle_body()) {
    _internal_mutable_angle_body()->::mavsdk::rpc::mocap::AngleBody::MergeFrom(from._internal_angle_body());
  }
  if (from._internal_has_pose_covariance()) {
    _internal_mutable_pose_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(from._internal_pose_covariance());
  }
  if (from._internal_time_usec() != 0) {
    _internal_set_time_usec(from._internal_time_usec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisionPositionEstimate::CopyFrom(const VisionPositionEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.VisionPositionEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionPositionEstimate::IsInitialized() const {
  return true;
}

void VisionPositionEstimate::InternalSwap(VisionPositionEstimate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionPositionEstimate, time_usec_)
      + sizeof(VisionPositionEstimate::time_usec_)
      - PROTOBUF_FIELD_OFFSET(VisionPositionEstimate, position_body_)>(
          reinterpret_cast<char*>(&position_body_),
          reinterpret_cast<char*>(&other->position_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionPositionEstimate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[12]);
}

// ===================================================================

class AttitudePositionMocap::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::Quaternion& q(const AttitudePositionMocap* msg);
  static const ::mavsdk::rpc::mocap::PositionBody& position_body(const AttitudePositionMocap* msg);
  static const ::mavsdk::rpc::mocap::Covariance& pose_covariance(const AttitudePositionMocap* msg);
};

const ::mavsdk::rpc::mocap::Quaternion&
AttitudePositionMocap::_Internal::q(const AttitudePositionMocap* msg) {
  return *msg->q_;
}
const ::mavsdk::rpc::mocap::PositionBody&
AttitudePositionMocap::_Internal::position_body(const AttitudePositionMocap* msg) {
  return *msg->position_body_;
}
const ::mavsdk::rpc::mocap::Covariance&
AttitudePositionMocap::_Internal::pose_covariance(const AttitudePositionMocap* msg) {
  return *msg->pose_covariance_;
}
AttitudePositionMocap::AttitudePositionMocap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.AttitudePositionMocap)
}
AttitudePositionMocap::AttitudePositionMocap(const AttitudePositionMocap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::mavsdk::rpc::mocap::Quaternion(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_position_body()) {
    position_body_ = new ::mavsdk::rpc::mocap::PositionBody(*from.position_body_);
  } else {
    position_body_ = nullptr;
  }
  if (from._internal_has_pose_covariance()) {
    pose_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from.pose_covariance_);
  } else {
    pose_covariance_ = nullptr;
  }
  time_usec_ = from.time_usec_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.AttitudePositionMocap)
}

inline void AttitudePositionMocap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_usec_) -
    reinterpret_cast<char*>(&q_)) + sizeof(time_usec_));
}

AttitudePositionMocap::~AttitudePositionMocap() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.AttitudePositionMocap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AttitudePositionMocap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete position_body_;
  if (this != internal_default_instance()) delete pose_covariance_;
}

void AttitudePositionMocap::ArenaDtor(void* object) {
  AttitudePositionMocap* _this = reinterpret_cast< AttitudePositionMocap* >(object);
  (void)_this;
}
void AttitudePositionMocap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttitudePositionMocap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttitudePositionMocap::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
  time_usec_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttitudePositionMocap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Quaternion q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.PositionBody position_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudePositionMocap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.mocap.Quaternion q = 2;
  if (this->_internal_has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  if (this->_internal_has_position_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position_body(this), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  if (this->_internal_has_pose_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pose_covariance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.AttitudePositionMocap)
  return target;
}

size_t AttitudePositionMocap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.Quaternion q = 2;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  if (this->_internal_has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_body_);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  if (this->_internal_has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_usec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttitudePositionMocap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttitudePositionMocap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttitudePositionMocap::GetClassData() const { return &_class_data_; }

void AttitudePositionMocap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AttitudePositionMocap *>(to)->MergeFrom(
      static_cast<const AttitudePositionMocap &>(from));
}


void AttitudePositionMocap::MergeFrom(const AttitudePositionMocap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_q()) {
    _internal_mutable_q()->::mavsdk::rpc::mocap::Quaternion::MergeFrom(from._internal_q());
  }
  if (from._internal_has_position_body()) {
    _internal_mutable_position_body()->::mavsdk::rpc::mocap::PositionBody::MergeFrom(from._internal_position_body());
  }
  if (from._internal_has_pose_covariance()) {
    _internal_mutable_pose_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(from._internal_pose_covariance());
  }
  if (from._internal_time_usec() != 0) {
    _internal_set_time_usec(from._internal_time_usec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttitudePositionMocap::CopyFrom(const AttitudePositionMocap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.AttitudePositionMocap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudePositionMocap::IsInitialized() const {
  return true;
}

void AttitudePositionMocap::InternalSwap(AttitudePositionMocap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttitudePositionMocap, time_usec_)
      + sizeof(AttitudePositionMocap::time_usec_)
      - PROTOBUF_FIELD_OFFSET(AttitudePositionMocap, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudePositionMocap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[13]);
}

// ===================================================================

class Odometry::_Internal {
 public:
  static const ::mavsdk::rpc::mocap::PositionBody& position_body(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::Quaternion& q(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::SpeedBody& speed_body(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::AngularVelocityBody& angular_velocity_body(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::Covariance& pose_covariance(const Odometry* msg);
  static const ::mavsdk::rpc::mocap::Covariance& velocity_covariance(const Odometry* msg);
};

const ::mavsdk::rpc::mocap::PositionBody&
Odometry::_Internal::position_body(const Odometry* msg) {
  return *msg->position_body_;
}
const ::mavsdk::rpc::mocap::Quaternion&
Odometry::_Internal::q(const Odometry* msg) {
  return *msg->q_;
}
const ::mavsdk::rpc::mocap::SpeedBody&
Odometry::_Internal::speed_body(const Odometry* msg) {
  return *msg->speed_body_;
}
const ::mavsdk::rpc::mocap::AngularVelocityBody&
Odometry::_Internal::angular_velocity_body(const Odometry* msg) {
  return *msg->angular_velocity_body_;
}
const ::mavsdk::rpc::mocap::Covariance&
Odometry::_Internal::pose_covariance(const Odometry* msg) {
  return *msg->pose_covariance_;
}
const ::mavsdk::rpc::mocap::Covariance&
Odometry::_Internal::velocity_covariance(const Odometry* msg) {
  return *msg->velocity_covariance_;
}
Odometry::Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_body()) {
    position_body_ = new ::mavsdk::rpc::mocap::PositionBody(*from.position_body_);
  } else {
    position_body_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::mavsdk::rpc::mocap::Quaternion(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_speed_body()) {
    speed_body_ = new ::mavsdk::rpc::mocap::SpeedBody(*from.speed_body_);
  } else {
    speed_body_ = nullptr;
  }
  if (from._internal_has_angular_velocity_body()) {
    angular_velocity_body_ = new ::mavsdk::rpc::mocap::AngularVelocityBody(*from.angular_velocity_body_);
  } else {
    angular_velocity_body_ = nullptr;
  }
  if (from._internal_has_pose_covariance()) {
    pose_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from.pose_covariance_);
  } else {
    pose_covariance_ = nullptr;
  }
  if (from._internal_has_velocity_covariance()) {
    velocity_covariance_ = new ::mavsdk::rpc::mocap::Covariance(*from.velocity_covariance_);
  } else {
    velocity_covariance_ = nullptr;
  }
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.Odometry)
}

inline void Odometry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_body_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&position_body_)) + sizeof(frame_id_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.Odometry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Odometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_body_;
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete speed_body_;
  if (this != internal_default_instance()) delete angular_velocity_body_;
  if (this != internal_default_instance()) delete pose_covariance_;
  if (this != internal_default_instance()) delete velocity_covariance_;
}

void Odometry::ArenaDtor(void* object) {
  Odometry* _this = reinterpret_cast< Odometry* >(object);
  (void)_this;
}
void Odometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArenaForAllocation() == nullptr && speed_body_ != nullptr) {
    delete speed_body_;
  }
  speed_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_body_ != nullptr) {
    delete angular_velocity_body_;
  }
  angular_velocity_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && velocity_covariance_ != nullptr) {
    delete velocity_covariance_;
  }
  velocity_covariance_ = nullptr;
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_frame_id(static_cast<::mavsdk::rpc::mocap::Odometry_MavFrame>(val));
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.PositionBody position_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Quaternion q = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_frame_id(), target);
  }

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  if (this->_internal_has_position_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position_body(this), target, stream);
  }

  // .mavsdk.rpc.mocap.Quaternion q = 4;
  if (this->_internal_has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::q(this), target, stream);
  }

  // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
  if (this->_internal_has_speed_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::speed_body(this), target, stream);
  }

  // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
  if (this->_internal_has_angular_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::angular_velocity_body(this), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
  if (this->_internal_has_pose_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pose_covariance(this), target, stream);
  }

  // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
  if (this->_internal_has_velocity_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::velocity_covariance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.Odometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  if (this->_internal_has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_body_);
  }

  // .mavsdk.rpc.mocap.Quaternion q = 4;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
  if (this->_internal_has_speed_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_body_);
  }

  // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
  if (this->_internal_has_angular_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_body_);
  }

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
  if (this->_internal_has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_covariance_);
  }

  // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
  if (this->_internal_has_velocity_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_usec());
  }

  // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Odometry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Odometry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Odometry::GetClassData() const { return &_class_data_; }

void Odometry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Odometry *>(to)->MergeFrom(
      static_cast<const Odometry &>(from));
}


void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position_body()) {
    _internal_mutable_position_body()->::mavsdk::rpc::mocap::PositionBody::MergeFrom(from._internal_position_body());
  }
  if (from._internal_has_q()) {
    _internal_mutable_q()->::mavsdk::rpc::mocap::Quaternion::MergeFrom(from._internal_q());
  }
  if (from._internal_has_speed_body()) {
    _internal_mutable_speed_body()->::mavsdk::rpc::mocap::SpeedBody::MergeFrom(from._internal_speed_body());
  }
  if (from._internal_has_angular_velocity_body()) {
    _internal_mutable_angular_velocity_body()->::mavsdk::rpc::mocap::AngularVelocityBody::MergeFrom(from._internal_angular_velocity_body());
  }
  if (from._internal_has_pose_covariance()) {
    _internal_mutable_pose_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(from._internal_pose_covariance());
  }
  if (from._internal_has_velocity_covariance()) {
    _internal_mutable_velocity_covariance()->::mavsdk::rpc::mocap::Covariance::MergeFrom(from._internal_velocity_covariance());
  }
  if (from._internal_time_usec() != 0) {
    _internal_set_time_usec(from._internal_time_usec());
  }
  if (from._internal_frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, frame_id_)
      + sizeof(Odometry::frame_id_)
      - PROTOBUF_FIELD_OFFSET(Odometry, position_body_)>(
          reinterpret_cast<char*>(&position_body_),
          reinterpret_cast<char*>(&other->position_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[14]);
}

// ===================================================================

class MocapResult::_Internal {
 public:
};

MocapResult::MocapResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mocap.MocapResult)
}
MocapResult::MocapResult(const MocapResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_str(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mocap.MocapResult)
}

inline void MocapResult::SharedCtor() {
result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

MocapResult::~MocapResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mocap.MocapResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MocapResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MocapResult::ArenaDtor(void* object) {
  MocapResult* _this = reinterpret_cast< MocapResult* >(object);
  (void)_this;
}
void MocapResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MocapResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MocapResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mocap.MocapResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MocapResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.mocap.MocapResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::mocap::MocapResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.mocap.MocapResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MocapResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mocap.MocapResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mocap.MocapResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.mocap.MocapResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mocap.MocapResult)
  return target;
}

size_t MocapResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mocap.MocapResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.mocap.MocapResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MocapResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MocapResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MocapResult::GetClassData() const { return &_class_data_; }

void MocapResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MocapResult *>(to)->MergeFrom(
      static_cast<const MocapResult &>(from));
}


void MocapResult::MergeFrom(const MocapResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mocap.MocapResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MocapResult::CopyFrom(const MocapResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mocap.MocapResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MocapResult::IsInitialized() const {
  return true;
}

void MocapResult::InternalSwap(MocapResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_str_, GetArenaForAllocation(),
      &other->result_str_, other->GetArenaForAllocation()
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MocapResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mocap_2fmocap_2eproto_getter, &descriptor_table_mocap_2fmocap_2eproto_once,
      file_level_metadata_mocap_2fmocap_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetOdometryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetOdometryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetOdometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SetOdometryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SetOdometryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SetOdometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::PositionBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::PositionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::PositionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::AngleBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::AngleBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::AngleBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::SpeedBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::SpeedBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::SpeedBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::AngularVelocityBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::AngularVelocityBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::AngularVelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::Covariance* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::Covariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::Covariance >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::Quaternion* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::VisionPositionEstimate* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::VisionPositionEstimate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::VisionPositionEstimate >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::AttitudePositionMocap* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::AttitudePositionMocap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::AttitudePositionMocap >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::Odometry* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::Odometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::Odometry >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mocap::MocapResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::mocap::MocapResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mocap::MocapResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
