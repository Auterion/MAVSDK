// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mocap/mocap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mocap_2fmocap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mocap_2fmocap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mocap_2fmocap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mocap_2fmocap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mocap_2fmocap_2eproto;
namespace mavsdk {
namespace rpc {
namespace mocap {
class AngleBody;
struct AngleBodyDefaultTypeInternal;
extern AngleBodyDefaultTypeInternal _AngleBody_default_instance_;
class AngularVelocityBody;
struct AngularVelocityBodyDefaultTypeInternal;
extern AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
class AttitudePositionMocap;
struct AttitudePositionMocapDefaultTypeInternal;
extern AttitudePositionMocapDefaultTypeInternal _AttitudePositionMocap_default_instance_;
class Covariance;
struct CovarianceDefaultTypeInternal;
extern CovarianceDefaultTypeInternal _Covariance_default_instance_;
class MocapResult;
struct MocapResultDefaultTypeInternal;
extern MocapResultDefaultTypeInternal _MocapResult_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class PositionBody;
struct PositionBodyDefaultTypeInternal;
extern PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class SetAttitudePositionMocapRequest;
struct SetAttitudePositionMocapRequestDefaultTypeInternal;
extern SetAttitudePositionMocapRequestDefaultTypeInternal _SetAttitudePositionMocapRequest_default_instance_;
class SetAttitudePositionMocapResponse;
struct SetAttitudePositionMocapResponseDefaultTypeInternal;
extern SetAttitudePositionMocapResponseDefaultTypeInternal _SetAttitudePositionMocapResponse_default_instance_;
class SetOdometryRequest;
struct SetOdometryRequestDefaultTypeInternal;
extern SetOdometryRequestDefaultTypeInternal _SetOdometryRequest_default_instance_;
class SetOdometryResponse;
struct SetOdometryResponseDefaultTypeInternal;
extern SetOdometryResponseDefaultTypeInternal _SetOdometryResponse_default_instance_;
class SetVisionPositionEstimateRequest;
struct SetVisionPositionEstimateRequestDefaultTypeInternal;
extern SetVisionPositionEstimateRequestDefaultTypeInternal _SetVisionPositionEstimateRequest_default_instance_;
class SetVisionPositionEstimateResponse;
struct SetVisionPositionEstimateResponseDefaultTypeInternal;
extern SetVisionPositionEstimateResponseDefaultTypeInternal _SetVisionPositionEstimateResponse_default_instance_;
class SpeedBody;
struct SpeedBodyDefaultTypeInternal;
extern SpeedBodyDefaultTypeInternal _SpeedBody_default_instance_;
class VisionPositionEstimate;
struct VisionPositionEstimateDefaultTypeInternal;
extern VisionPositionEstimateDefaultTypeInternal _VisionPositionEstimate_default_instance_;
}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::mocap::AngleBody* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::AngleBody>(Arena*);
template<> ::mavsdk::rpc::mocap::AngularVelocityBody* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::AngularVelocityBody>(Arena*);
template<> ::mavsdk::rpc::mocap::AttitudePositionMocap* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::AttitudePositionMocap>(Arena*);
template<> ::mavsdk::rpc::mocap::Covariance* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(Arena*);
template<> ::mavsdk::rpc::mocap::MocapResult* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::MocapResult>(Arena*);
template<> ::mavsdk::rpc::mocap::Odometry* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::Odometry>(Arena*);
template<> ::mavsdk::rpc::mocap::PositionBody* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::PositionBody>(Arena*);
template<> ::mavsdk::rpc::mocap::Quaternion* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::Quaternion>(Arena*);
template<> ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest>(Arena*);
template<> ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>(Arena*);
template<> ::mavsdk::rpc::mocap::SetOdometryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::SetOdometryRequest>(Arena*);
template<> ::mavsdk::rpc::mocap::SetOdometryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::SetOdometryResponse>(Arena*);
template<> ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest>(Arena*);
template<> ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>(Arena*);
template<> ::mavsdk::rpc::mocap::SpeedBody* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::SpeedBody>(Arena*);
template<> ::mavsdk::rpc::mocap::VisionPositionEstimate* Arena::CreateMaybeMessage<::mavsdk::rpc::mocap::VisionPositionEstimate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace mocap {

enum Odometry_MavFrame : int {
  Odometry_MavFrame_MAV_FRAME_MOCAP_NED = 0,
  Odometry_MavFrame_MAV_FRAME_LOCAL_FRD = 1,
  Odometry_MavFrame_Odometry_MavFrame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Odometry_MavFrame_Odometry_MavFrame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Odometry_MavFrame_IsValid(int value);
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MIN = Odometry_MavFrame_MAV_FRAME_MOCAP_NED;
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MAX = Odometry_MavFrame_MAV_FRAME_LOCAL_FRD;
constexpr int Odometry_MavFrame_MavFrame_ARRAYSIZE = Odometry_MavFrame_MavFrame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor();
template<typename T>
inline const std::string& Odometry_MavFrame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Odometry_MavFrame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Odometry_MavFrame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Odometry_MavFrame_descriptor(), enum_t_value);
}
inline bool Odometry_MavFrame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Odometry_MavFrame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Odometry_MavFrame>(
    Odometry_MavFrame_descriptor(), name, value);
}
enum MocapResult_Result : int {
  MocapResult_Result_RESULT_UNKNOWN = 0,
  MocapResult_Result_RESULT_SUCCESS = 1,
  MocapResult_Result_RESULT_NO_SYSTEM = 2,
  MocapResult_Result_RESULT_CONNECTION_ERROR = 3,
  MocapResult_Result_RESULT_INVALID_REQUEST_DATA = 4,
  MocapResult_Result_RESULT_UNSUPPORTED = 5,
  MocapResult_Result_MocapResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MocapResult_Result_MocapResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MocapResult_Result_IsValid(int value);
constexpr MocapResult_Result MocapResult_Result_Result_MIN = MocapResult_Result_RESULT_UNKNOWN;
constexpr MocapResult_Result MocapResult_Result_Result_MAX = MocapResult_Result_RESULT_UNSUPPORTED;
constexpr int MocapResult_Result_Result_ARRAYSIZE = MocapResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MocapResult_Result_descriptor();
template<typename T>
inline const std::string& MocapResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MocapResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MocapResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MocapResult_Result_descriptor(), enum_t_value);
}
inline bool MocapResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MocapResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MocapResult_Result>(
    MocapResult_Result_descriptor(), name, value);
}
// ===================================================================

class SetVisionPositionEstimateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest) */ {
 public:
  inline SetVisionPositionEstimateRequest() : SetVisionPositionEstimateRequest(nullptr) {}
  ~SetVisionPositionEstimateRequest() override;
  explicit PROTOBUF_CONSTEXPR SetVisionPositionEstimateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVisionPositionEstimateRequest(const SetVisionPositionEstimateRequest& from);
  SetVisionPositionEstimateRequest(SetVisionPositionEstimateRequest&& from) noexcept
    : SetVisionPositionEstimateRequest() {
    *this = ::std::move(from);
  }

  inline SetVisionPositionEstimateRequest& operator=(const SetVisionPositionEstimateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVisionPositionEstimateRequest& operator=(SetVisionPositionEstimateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVisionPositionEstimateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVisionPositionEstimateRequest* internal_default_instance() {
    return reinterpret_cast<const SetVisionPositionEstimateRequest*>(
               &_SetVisionPositionEstimateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetVisionPositionEstimateRequest& a, SetVisionPositionEstimateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVisionPositionEstimateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVisionPositionEstimateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVisionPositionEstimateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVisionPositionEstimateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVisionPositionEstimateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVisionPositionEstimateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVisionPositionEstimateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.SetVisionPositionEstimateRequest";
  }
  protected:
  explicit SetVisionPositionEstimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisionPositionEstimateFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
  bool has_vision_position_estimate() const;
  private:
  bool _internal_has_vision_position_estimate() const;
  public:
  void clear_vision_position_estimate();
  const ::mavsdk::rpc::mocap::VisionPositionEstimate& vision_position_estimate() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::VisionPositionEstimate* release_vision_position_estimate();
  ::mavsdk::rpc::mocap::VisionPositionEstimate* mutable_vision_position_estimate();
  void set_allocated_vision_position_estimate(::mavsdk::rpc::mocap::VisionPositionEstimate* vision_position_estimate);
  private:
  const ::mavsdk::rpc::mocap::VisionPositionEstimate& _internal_vision_position_estimate() const;
  ::mavsdk::rpc::mocap::VisionPositionEstimate* _internal_mutable_vision_position_estimate();
  public:
  void unsafe_arena_set_allocated_vision_position_estimate(
      ::mavsdk::rpc::mocap::VisionPositionEstimate* vision_position_estimate);
  ::mavsdk::rpc::mocap::VisionPositionEstimate* unsafe_arena_release_vision_position_estimate();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::VisionPositionEstimate* vision_position_estimate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class SetVisionPositionEstimateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse) */ {
 public:
  inline SetVisionPositionEstimateResponse() : SetVisionPositionEstimateResponse(nullptr) {}
  ~SetVisionPositionEstimateResponse() override;
  explicit PROTOBUF_CONSTEXPR SetVisionPositionEstimateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVisionPositionEstimateResponse(const SetVisionPositionEstimateResponse& from);
  SetVisionPositionEstimateResponse(SetVisionPositionEstimateResponse&& from) noexcept
    : SetVisionPositionEstimateResponse() {
    *this = ::std::move(from);
  }

  inline SetVisionPositionEstimateResponse& operator=(const SetVisionPositionEstimateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVisionPositionEstimateResponse& operator=(SetVisionPositionEstimateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVisionPositionEstimateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVisionPositionEstimateResponse* internal_default_instance() {
    return reinterpret_cast<const SetVisionPositionEstimateResponse*>(
               &_SetVisionPositionEstimateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetVisionPositionEstimateResponse& a, SetVisionPositionEstimateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVisionPositionEstimateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVisionPositionEstimateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVisionPositionEstimateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVisionPositionEstimateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVisionPositionEstimateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVisionPositionEstimateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVisionPositionEstimateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.SetVisionPositionEstimateResponse";
  }
  protected:
  explicit SetVisionPositionEstimateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMocapResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  bool has_mocap_result() const;
  private:
  bool _internal_has_mocap_result() const;
  public:
  void clear_mocap_result();
  const ::mavsdk::rpc::mocap::MocapResult& mocap_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::MocapResult* release_mocap_result();
  ::mavsdk::rpc::mocap::MocapResult* mutable_mocap_result();
  void set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* mocap_result);
  private:
  const ::mavsdk::rpc::mocap::MocapResult& _internal_mocap_result() const;
  ::mavsdk::rpc::mocap::MocapResult* _internal_mutable_mocap_result();
  public:
  void unsafe_arena_set_allocated_mocap_result(
      ::mavsdk::rpc::mocap::MocapResult* mocap_result);
  ::mavsdk::rpc::mocap::MocapResult* unsafe_arena_release_mocap_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::MocapResult* mocap_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudePositionMocapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest) */ {
 public:
  inline SetAttitudePositionMocapRequest() : SetAttitudePositionMocapRequest(nullptr) {}
  ~SetAttitudePositionMocapRequest() override;
  explicit PROTOBUF_CONSTEXPR SetAttitudePositionMocapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAttitudePositionMocapRequest(const SetAttitudePositionMocapRequest& from);
  SetAttitudePositionMocapRequest(SetAttitudePositionMocapRequest&& from) noexcept
    : SetAttitudePositionMocapRequest() {
    *this = ::std::move(from);
  }

  inline SetAttitudePositionMocapRequest& operator=(const SetAttitudePositionMocapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudePositionMocapRequest& operator=(SetAttitudePositionMocapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudePositionMocapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudePositionMocapRequest* internal_default_instance() {
    return reinterpret_cast<const SetAttitudePositionMocapRequest*>(
               &_SetAttitudePositionMocapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetAttitudePositionMocapRequest& a, SetAttitudePositionMocapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudePositionMocapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudePositionMocapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudePositionMocapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudePositionMocapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAttitudePositionMocapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAttitudePositionMocapRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudePositionMocapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.SetAttitudePositionMocapRequest";
  }
  protected:
  explicit SetAttitudePositionMocapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudePositionMocapFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
  bool has_attitude_position_mocap() const;
  private:
  bool _internal_has_attitude_position_mocap() const;
  public:
  void clear_attitude_position_mocap();
  const ::mavsdk::rpc::mocap::AttitudePositionMocap& attitude_position_mocap() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::AttitudePositionMocap* release_attitude_position_mocap();
  ::mavsdk::rpc::mocap::AttitudePositionMocap* mutable_attitude_position_mocap();
  void set_allocated_attitude_position_mocap(::mavsdk::rpc::mocap::AttitudePositionMocap* attitude_position_mocap);
  private:
  const ::mavsdk::rpc::mocap::AttitudePositionMocap& _internal_attitude_position_mocap() const;
  ::mavsdk::rpc::mocap::AttitudePositionMocap* _internal_mutable_attitude_position_mocap();
  public:
  void unsafe_arena_set_allocated_attitude_position_mocap(
      ::mavsdk::rpc::mocap::AttitudePositionMocap* attitude_position_mocap);
  ::mavsdk::rpc::mocap::AttitudePositionMocap* unsafe_arena_release_attitude_position_mocap();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::AttitudePositionMocap* attitude_position_mocap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudePositionMocapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse) */ {
 public:
  inline SetAttitudePositionMocapResponse() : SetAttitudePositionMocapResponse(nullptr) {}
  ~SetAttitudePositionMocapResponse() override;
  explicit PROTOBUF_CONSTEXPR SetAttitudePositionMocapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAttitudePositionMocapResponse(const SetAttitudePositionMocapResponse& from);
  SetAttitudePositionMocapResponse(SetAttitudePositionMocapResponse&& from) noexcept
    : SetAttitudePositionMocapResponse() {
    *this = ::std::move(from);
  }

  inline SetAttitudePositionMocapResponse& operator=(const SetAttitudePositionMocapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudePositionMocapResponse& operator=(SetAttitudePositionMocapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudePositionMocapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudePositionMocapResponse* internal_default_instance() {
    return reinterpret_cast<const SetAttitudePositionMocapResponse*>(
               &_SetAttitudePositionMocapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetAttitudePositionMocapResponse& a, SetAttitudePositionMocapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudePositionMocapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudePositionMocapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudePositionMocapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudePositionMocapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAttitudePositionMocapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAttitudePositionMocapResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudePositionMocapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.SetAttitudePositionMocapResponse";
  }
  protected:
  explicit SetAttitudePositionMocapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMocapResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  bool has_mocap_result() const;
  private:
  bool _internal_has_mocap_result() const;
  public:
  void clear_mocap_result();
  const ::mavsdk::rpc::mocap::MocapResult& mocap_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::MocapResult* release_mocap_result();
  ::mavsdk::rpc::mocap::MocapResult* mutable_mocap_result();
  void set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* mocap_result);
  private:
  const ::mavsdk::rpc::mocap::MocapResult& _internal_mocap_result() const;
  ::mavsdk::rpc::mocap::MocapResult* _internal_mutable_mocap_result();
  public:
  void unsafe_arena_set_allocated_mocap_result(
      ::mavsdk::rpc::mocap::MocapResult* mocap_result);
  ::mavsdk::rpc::mocap::MocapResult* unsafe_arena_release_mocap_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::MocapResult* mocap_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class SetOdometryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetOdometryRequest) */ {
 public:
  inline SetOdometryRequest() : SetOdometryRequest(nullptr) {}
  ~SetOdometryRequest() override;
  explicit PROTOBUF_CONSTEXPR SetOdometryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetOdometryRequest(const SetOdometryRequest& from);
  SetOdometryRequest(SetOdometryRequest&& from) noexcept
    : SetOdometryRequest() {
    *this = ::std::move(from);
  }

  inline SetOdometryRequest& operator=(const SetOdometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOdometryRequest& operator=(SetOdometryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetOdometryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOdometryRequest* internal_default_instance() {
    return reinterpret_cast<const SetOdometryRequest*>(
               &_SetOdometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetOdometryRequest& a, SetOdometryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetOdometryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOdometryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetOdometryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetOdometryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetOdometryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetOdometryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetOdometryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.SetOdometryRequest";
  }
  protected:
  explicit SetOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOdometryFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.Odometry odometry = 1;
  bool has_odometry() const;
  private:
  bool _internal_has_odometry() const;
  public:
  void clear_odometry();
  const ::mavsdk::rpc::mocap::Odometry& odometry() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Odometry* release_odometry();
  ::mavsdk::rpc::mocap::Odometry* mutable_odometry();
  void set_allocated_odometry(::mavsdk::rpc::mocap::Odometry* odometry);
  private:
  const ::mavsdk::rpc::mocap::Odometry& _internal_odometry() const;
  ::mavsdk::rpc::mocap::Odometry* _internal_mutable_odometry();
  public:
  void unsafe_arena_set_allocated_odometry(
      ::mavsdk::rpc::mocap::Odometry* odometry);
  ::mavsdk::rpc::mocap::Odometry* unsafe_arena_release_odometry();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetOdometryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::Odometry* odometry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class SetOdometryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetOdometryResponse) */ {
 public:
  inline SetOdometryResponse() : SetOdometryResponse(nullptr) {}
  ~SetOdometryResponse() override;
  explicit PROTOBUF_CONSTEXPR SetOdometryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetOdometryResponse(const SetOdometryResponse& from);
  SetOdometryResponse(SetOdometryResponse&& from) noexcept
    : SetOdometryResponse() {
    *this = ::std::move(from);
  }

  inline SetOdometryResponse& operator=(const SetOdometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOdometryResponse& operator=(SetOdometryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetOdometryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOdometryResponse* internal_default_instance() {
    return reinterpret_cast<const SetOdometryResponse*>(
               &_SetOdometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetOdometryResponse& a, SetOdometryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetOdometryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOdometryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetOdometryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetOdometryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetOdometryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetOdometryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetOdometryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.SetOdometryResponse";
  }
  protected:
  explicit SetOdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMocapResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  bool has_mocap_result() const;
  private:
  bool _internal_has_mocap_result() const;
  public:
  void clear_mocap_result();
  const ::mavsdk::rpc::mocap::MocapResult& mocap_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::MocapResult* release_mocap_result();
  ::mavsdk::rpc::mocap::MocapResult* mutable_mocap_result();
  void set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* mocap_result);
  private:
  const ::mavsdk::rpc::mocap::MocapResult& _internal_mocap_result() const;
  ::mavsdk::rpc::mocap::MocapResult* _internal_mutable_mocap_result();
  public:
  void unsafe_arena_set_allocated_mocap_result(
      ::mavsdk::rpc::mocap::MocapResult* mocap_result);
  ::mavsdk::rpc::mocap::MocapResult* unsafe_arena_release_mocap_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetOdometryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::MocapResult* mocap_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class PositionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.PositionBody) */ {
 public:
  inline PositionBody() : PositionBody(nullptr) {}
  ~PositionBody() override;
  explicit PROTOBUF_CONSTEXPR PositionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionBody(const PositionBody& from);
  PositionBody(PositionBody&& from) noexcept
    : PositionBody() {
    *this = ::std::move(from);
  }

  inline PositionBody& operator=(const PositionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionBody& operator=(PositionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionBody* internal_default_instance() {
    return reinterpret_cast<const PositionBody*>(
               &_PositionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PositionBody& a, PositionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.PositionBody";
  }
  protected:
  explicit PositionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMFieldNumber = 1,
    kYMFieldNumber = 2,
    kZMFieldNumber = 3,
  };
  // float x_m = 1;
  void clear_x_m();
  float x_m() const;
  void set_x_m(float value);
  private:
  float _internal_x_m() const;
  void _internal_set_x_m(float value);
  public:

  // float y_m = 2;
  void clear_y_m();
  float y_m() const;
  void set_y_m(float value);
  private:
  float _internal_y_m() const;
  void _internal_set_y_m(float value);
  public:

  // float z_m = 3;
  void clear_z_m();
  float z_m() const;
  void set_z_m(float value);
  private:
  float _internal_z_m() const;
  void _internal_set_z_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.PositionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_m_;
  float y_m_;
  float z_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class AngleBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.AngleBody) */ {
 public:
  inline AngleBody() : AngleBody(nullptr) {}
  ~AngleBody() override;
  explicit PROTOBUF_CONSTEXPR AngleBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AngleBody(const AngleBody& from);
  AngleBody(AngleBody&& from) noexcept
    : AngleBody() {
    *this = ::std::move(from);
  }

  inline AngleBody& operator=(const AngleBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngleBody& operator=(AngleBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngleBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngleBody* internal_default_instance() {
    return reinterpret_cast<const AngleBody*>(
               &_AngleBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AngleBody& a, AngleBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AngleBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngleBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngleBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngleBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AngleBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AngleBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngleBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.AngleBody";
  }
  protected:
  explicit AngleBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRadFieldNumber = 1,
    kPitchRadFieldNumber = 2,
    kYawRadFieldNumber = 3,
  };
  // float roll_rad = 1;
  void clear_roll_rad();
  float roll_rad() const;
  void set_roll_rad(float value);
  private:
  float _internal_roll_rad() const;
  void _internal_set_roll_rad(float value);
  public:

  // float pitch_rad = 2;
  void clear_pitch_rad();
  float pitch_rad() const;
  void set_pitch_rad(float value);
  private:
  float _internal_pitch_rad() const;
  void _internal_set_pitch_rad(float value);
  public:

  // float yaw_rad = 3;
  void clear_yaw_rad();
  float yaw_rad() const;
  void set_yaw_rad(float value);
  private:
  float _internal_yaw_rad() const;
  void _internal_set_yaw_rad(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.AngleBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_rad_;
  float pitch_rad_;
  float yaw_rad_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class SpeedBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SpeedBody) */ {
 public:
  inline SpeedBody() : SpeedBody(nullptr) {}
  ~SpeedBody() override;
  explicit PROTOBUF_CONSTEXPR SpeedBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeedBody(const SpeedBody& from);
  SpeedBody(SpeedBody&& from) noexcept
    : SpeedBody() {
    *this = ::std::move(from);
  }

  inline SpeedBody& operator=(const SpeedBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedBody& operator=(SpeedBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedBody* internal_default_instance() {
    return reinterpret_cast<const SpeedBody*>(
               &_SpeedBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SpeedBody& a, SpeedBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeedBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeedBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeedBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.SpeedBody";
  }
  protected:
  explicit SpeedBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMSFieldNumber = 1,
    kYMSFieldNumber = 2,
    kZMSFieldNumber = 3,
  };
  // float x_m_s = 1;
  void clear_x_m_s();
  float x_m_s() const;
  void set_x_m_s(float value);
  private:
  float _internal_x_m_s() const;
  void _internal_set_x_m_s(float value);
  public:

  // float y_m_s = 2;
  void clear_y_m_s();
  float y_m_s() const;
  void set_y_m_s(float value);
  private:
  float _internal_y_m_s() const;
  void _internal_set_y_m_s(float value);
  public:

  // float z_m_s = 3;
  void clear_z_m_s();
  float z_m_s() const;
  void set_z_m_s(float value);
  private:
  float _internal_z_m_s() const;
  void _internal_set_z_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SpeedBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_m_s_;
  float y_m_s_;
  float z_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.AngularVelocityBody) */ {
 public:
  inline AngularVelocityBody() : AngularVelocityBody(nullptr) {}
  ~AngularVelocityBody() override;
  explicit PROTOBUF_CONSTEXPR AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AngularVelocityBody(const AngularVelocityBody& from);
  AngularVelocityBody(AngularVelocityBody&& from) noexcept
    : AngularVelocityBody() {
    *this = ::std::move(from);
  }

  inline AngularVelocityBody& operator=(const AngularVelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityBody& operator=(AngularVelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityBody* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityBody*>(
               &_AngularVelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AngularVelocityBody& a, AngularVelocityBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocityBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngularVelocityBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AngularVelocityBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AngularVelocityBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularVelocityBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.AngularVelocityBody";
  }
  protected:
  explicit AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRadSFieldNumber = 1,
    kPitchRadSFieldNumber = 2,
    kYawRadSFieldNumber = 3,
  };
  // float roll_rad_s = 1;
  void clear_roll_rad_s();
  float roll_rad_s() const;
  void set_roll_rad_s(float value);
  private:
  float _internal_roll_rad_s() const;
  void _internal_set_roll_rad_s(float value);
  public:

  // float pitch_rad_s = 2;
  void clear_pitch_rad_s();
  float pitch_rad_s() const;
  void set_pitch_rad_s(float value);
  private:
  float _internal_pitch_rad_s() const;
  void _internal_set_pitch_rad_s(float value);
  public:

  // float yaw_rad_s = 3;
  void clear_yaw_rad_s();
  float yaw_rad_s() const;
  void set_yaw_rad_s(float value);
  private:
  float _internal_yaw_rad_s() const;
  void _internal_set_yaw_rad_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.AngularVelocityBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_rad_s_;
  float pitch_rad_s_;
  float yaw_rad_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class Covariance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.Covariance) */ {
 public:
  inline Covariance() : Covariance(nullptr) {}
  ~Covariance() override;
  explicit PROTOBUF_CONSTEXPR Covariance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Covariance(const Covariance& from);
  Covariance(Covariance&& from) noexcept
    : Covariance() {
    *this = ::std::move(from);
  }

  inline Covariance& operator=(const Covariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Covariance& operator=(Covariance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Covariance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Covariance* internal_default_instance() {
    return reinterpret_cast<const Covariance*>(
               &_Covariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Covariance& a, Covariance& b) {
    a.Swap(&b);
  }
  inline void Swap(Covariance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Covariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Covariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Covariance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Covariance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Covariance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Covariance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.Covariance";
  }
  protected:
  explicit Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceMatrixFieldNumber = 1,
  };
  // repeated float covariance_matrix = 1;
  int covariance_matrix_size() const;
  private:
  int _internal_covariance_matrix_size() const;
  public:
  void clear_covariance_matrix();
  private:
  float _internal_covariance_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_covariance_matrix() const;
  void _internal_add_covariance_matrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_covariance_matrix();
  public:
  float covariance_matrix(int index) const;
  void set_covariance_matrix(int index, float value);
  void add_covariance_matrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      covariance_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_covariance_matrix();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.Covariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > covariance_matrix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Quaternion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float w_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class VisionPositionEstimate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.VisionPositionEstimate) */ {
 public:
  inline VisionPositionEstimate() : VisionPositionEstimate(nullptr) {}
  ~VisionPositionEstimate() override;
  explicit PROTOBUF_CONSTEXPR VisionPositionEstimate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisionPositionEstimate(const VisionPositionEstimate& from);
  VisionPositionEstimate(VisionPositionEstimate&& from) noexcept
    : VisionPositionEstimate() {
    *this = ::std::move(from);
  }

  inline VisionPositionEstimate& operator=(const VisionPositionEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionPositionEstimate& operator=(VisionPositionEstimate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisionPositionEstimate& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisionPositionEstimate* internal_default_instance() {
    return reinterpret_cast<const VisionPositionEstimate*>(
               &_VisionPositionEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VisionPositionEstimate& a, VisionPositionEstimate& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionPositionEstimate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisionPositionEstimate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisionPositionEstimate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisionPositionEstimate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisionPositionEstimate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VisionPositionEstimate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisionPositionEstimate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.VisionPositionEstimate";
  }
  protected:
  explicit VisionPositionEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionBodyFieldNumber = 2,
    kAngleBodyFieldNumber = 3,
    kPoseCovarianceFieldNumber = 4,
    kTimeUsecFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.PositionBody position_body = 2;
  bool has_position_body() const;
  private:
  bool _internal_has_position_body() const;
  public:
  void clear_position_body();
  const ::mavsdk::rpc::mocap::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::PositionBody* release_position_body();
  ::mavsdk::rpc::mocap::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* position_body);
  private:
  const ::mavsdk::rpc::mocap::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::mocap::PositionBody* _internal_mutable_position_body();
  public:
  void unsafe_arena_set_allocated_position_body(
      ::mavsdk::rpc::mocap::PositionBody* position_body);
  ::mavsdk::rpc::mocap::PositionBody* unsafe_arena_release_position_body();

  // .mavsdk.rpc.mocap.AngleBody angle_body = 3;
  bool has_angle_body() const;
  private:
  bool _internal_has_angle_body() const;
  public:
  void clear_angle_body();
  const ::mavsdk::rpc::mocap::AngleBody& angle_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::AngleBody* release_angle_body();
  ::mavsdk::rpc::mocap::AngleBody* mutable_angle_body();
  void set_allocated_angle_body(::mavsdk::rpc::mocap::AngleBody* angle_body);
  private:
  const ::mavsdk::rpc::mocap::AngleBody& _internal_angle_body() const;
  ::mavsdk::rpc::mocap::AngleBody* _internal_mutable_angle_body();
  public:
  void unsafe_arena_set_allocated_angle_body(
      ::mavsdk::rpc::mocap::AngleBody* angle_body);
  ::mavsdk::rpc::mocap::AngleBody* unsafe_arena_release_angle_body();

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  bool has_pose_covariance() const;
  private:
  bool _internal_has_pose_covariance() const;
  public:
  void clear_pose_covariance();
  const ::mavsdk::rpc::mocap::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Covariance* release_pose_covariance();
  ::mavsdk::rpc::mocap::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* pose_covariance);
  private:
  const ::mavsdk::rpc::mocap::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::mocap::Covariance* _internal_mutable_pose_covariance();
  public:
  void unsafe_arena_set_allocated_pose_covariance(
      ::mavsdk::rpc::mocap::Covariance* pose_covariance);
  ::mavsdk::rpc::mocap::Covariance* unsafe_arena_release_pose_covariance();

  // uint64 time_usec = 1;
  void clear_time_usec();
  uint64_t time_usec() const;
  void set_time_usec(uint64_t value);
  private:
  uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.VisionPositionEstimate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::PositionBody* position_body_;
  ::mavsdk::rpc::mocap::AngleBody* angle_body_;
  ::mavsdk::rpc::mocap::Covariance* pose_covariance_;
  uint64_t time_usec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class AttitudePositionMocap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.AttitudePositionMocap) */ {
 public:
  inline AttitudePositionMocap() : AttitudePositionMocap(nullptr) {}
  ~AttitudePositionMocap() override;
  explicit PROTOBUF_CONSTEXPR AttitudePositionMocap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttitudePositionMocap(const AttitudePositionMocap& from);
  AttitudePositionMocap(AttitudePositionMocap&& from) noexcept
    : AttitudePositionMocap() {
    *this = ::std::move(from);
  }

  inline AttitudePositionMocap& operator=(const AttitudePositionMocap& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudePositionMocap& operator=(AttitudePositionMocap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttitudePositionMocap& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttitudePositionMocap* internal_default_instance() {
    return reinterpret_cast<const AttitudePositionMocap*>(
               &_AttitudePositionMocap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AttitudePositionMocap& a, AttitudePositionMocap& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudePositionMocap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttitudePositionMocap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttitudePositionMocap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttitudePositionMocap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttitudePositionMocap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttitudePositionMocap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudePositionMocap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.AttitudePositionMocap";
  }
  protected:
  explicit AttitudePositionMocap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 2,
    kPositionBodyFieldNumber = 3,
    kPoseCovarianceFieldNumber = 4,
    kTimeUsecFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.Quaternion q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::mavsdk::rpc::mocap::Quaternion& q() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Quaternion* release_q();
  ::mavsdk::rpc::mocap::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::mocap::Quaternion* q);
  private:
  const ::mavsdk::rpc::mocap::Quaternion& _internal_q() const;
  ::mavsdk::rpc::mocap::Quaternion* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::mavsdk::rpc::mocap::Quaternion* q);
  ::mavsdk::rpc::mocap::Quaternion* unsafe_arena_release_q();

  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  bool has_position_body() const;
  private:
  bool _internal_has_position_body() const;
  public:
  void clear_position_body();
  const ::mavsdk::rpc::mocap::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::PositionBody* release_position_body();
  ::mavsdk::rpc::mocap::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* position_body);
  private:
  const ::mavsdk::rpc::mocap::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::mocap::PositionBody* _internal_mutable_position_body();
  public:
  void unsafe_arena_set_allocated_position_body(
      ::mavsdk::rpc::mocap::PositionBody* position_body);
  ::mavsdk::rpc::mocap::PositionBody* unsafe_arena_release_position_body();

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  bool has_pose_covariance() const;
  private:
  bool _internal_has_pose_covariance() const;
  public:
  void clear_pose_covariance();
  const ::mavsdk::rpc::mocap::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Covariance* release_pose_covariance();
  ::mavsdk::rpc::mocap::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* pose_covariance);
  private:
  const ::mavsdk::rpc::mocap::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::mocap::Covariance* _internal_mutable_pose_covariance();
  public:
  void unsafe_arena_set_allocated_pose_covariance(
      ::mavsdk::rpc::mocap::Covariance* pose_covariance);
  ::mavsdk::rpc::mocap::Covariance* unsafe_arena_release_pose_covariance();

  // uint64 time_usec = 1;
  void clear_time_usec();
  uint64_t time_usec() const;
  void set_time_usec(uint64_t value);
  private:
  uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.AttitudePositionMocap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::Quaternion* q_;
  ::mavsdk::rpc::mocap::PositionBody* position_body_;
  ::mavsdk::rpc::mocap::Covariance* pose_covariance_;
  uint64_t time_usec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class Odometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() override;
  explicit PROTOBUF_CONSTEXPR Odometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Odometry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Odometry_MavFrame MavFrame;
  static constexpr MavFrame MAV_FRAME_MOCAP_NED =
    Odometry_MavFrame_MAV_FRAME_MOCAP_NED;
  static constexpr MavFrame MAV_FRAME_LOCAL_FRD =
    Odometry_MavFrame_MAV_FRAME_LOCAL_FRD;
  static inline bool MavFrame_IsValid(int value) {
    return Odometry_MavFrame_IsValid(value);
  }
  static constexpr MavFrame MavFrame_MIN =
    Odometry_MavFrame_MavFrame_MIN;
  static constexpr MavFrame MavFrame_MAX =
    Odometry_MavFrame_MavFrame_MAX;
  static constexpr int MavFrame_ARRAYSIZE =
    Odometry_MavFrame_MavFrame_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MavFrame_descriptor() {
    return Odometry_MavFrame_descriptor();
  }
  template<typename T>
  static inline const std::string& MavFrame_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MavFrame>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MavFrame_Name.");
    return Odometry_MavFrame_Name(enum_t_value);
  }
  static inline bool MavFrame_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MavFrame* value) {
    return Odometry_MavFrame_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionBodyFieldNumber = 3,
    kQFieldNumber = 4,
    kSpeedBodyFieldNumber = 5,
    kAngularVelocityBodyFieldNumber = 6,
    kPoseCovarianceFieldNumber = 7,
    kVelocityCovarianceFieldNumber = 8,
    kTimeUsecFieldNumber = 1,
    kFrameIdFieldNumber = 2,
  };
  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  bool has_position_body() const;
  private:
  bool _internal_has_position_body() const;
  public:
  void clear_position_body();
  const ::mavsdk::rpc::mocap::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::PositionBody* release_position_body();
  ::mavsdk::rpc::mocap::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* position_body);
  private:
  const ::mavsdk::rpc::mocap::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::mocap::PositionBody* _internal_mutable_position_body();
  public:
  void unsafe_arena_set_allocated_position_body(
      ::mavsdk::rpc::mocap::PositionBody* position_body);
  ::mavsdk::rpc::mocap::PositionBody* unsafe_arena_release_position_body();

  // .mavsdk.rpc.mocap.Quaternion q = 4;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::mavsdk::rpc::mocap::Quaternion& q() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Quaternion* release_q();
  ::mavsdk::rpc::mocap::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::mocap::Quaternion* q);
  private:
  const ::mavsdk::rpc::mocap::Quaternion& _internal_q() const;
  ::mavsdk::rpc::mocap::Quaternion* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::mavsdk::rpc::mocap::Quaternion* q);
  ::mavsdk::rpc::mocap::Quaternion* unsafe_arena_release_q();

  // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
  bool has_speed_body() const;
  private:
  bool _internal_has_speed_body() const;
  public:
  void clear_speed_body();
  const ::mavsdk::rpc::mocap::SpeedBody& speed_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::SpeedBody* release_speed_body();
  ::mavsdk::rpc::mocap::SpeedBody* mutable_speed_body();
  void set_allocated_speed_body(::mavsdk::rpc::mocap::SpeedBody* speed_body);
  private:
  const ::mavsdk::rpc::mocap::SpeedBody& _internal_speed_body() const;
  ::mavsdk::rpc::mocap::SpeedBody* _internal_mutable_speed_body();
  public:
  void unsafe_arena_set_allocated_speed_body(
      ::mavsdk::rpc::mocap::SpeedBody* speed_body);
  ::mavsdk::rpc::mocap::SpeedBody* unsafe_arena_release_speed_body();

  // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
  bool has_angular_velocity_body() const;
  private:
  bool _internal_has_angular_velocity_body() const;
  public:
  void clear_angular_velocity_body();
  const ::mavsdk::rpc::mocap::AngularVelocityBody& angular_velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::AngularVelocityBody* release_angular_velocity_body();
  ::mavsdk::rpc::mocap::AngularVelocityBody* mutable_angular_velocity_body();
  void set_allocated_angular_velocity_body(::mavsdk::rpc::mocap::AngularVelocityBody* angular_velocity_body);
  private:
  const ::mavsdk::rpc::mocap::AngularVelocityBody& _internal_angular_velocity_body() const;
  ::mavsdk::rpc::mocap::AngularVelocityBody* _internal_mutable_angular_velocity_body();
  public:
  void unsafe_arena_set_allocated_angular_velocity_body(
      ::mavsdk::rpc::mocap::AngularVelocityBody* angular_velocity_body);
  ::mavsdk::rpc::mocap::AngularVelocityBody* unsafe_arena_release_angular_velocity_body();

  // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
  bool has_pose_covariance() const;
  private:
  bool _internal_has_pose_covariance() const;
  public:
  void clear_pose_covariance();
  const ::mavsdk::rpc::mocap::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Covariance* release_pose_covariance();
  ::mavsdk::rpc::mocap::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* pose_covariance);
  private:
  const ::mavsdk::rpc::mocap::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::mocap::Covariance* _internal_mutable_pose_covariance();
  public:
  void unsafe_arena_set_allocated_pose_covariance(
      ::mavsdk::rpc::mocap::Covariance* pose_covariance);
  ::mavsdk::rpc::mocap::Covariance* unsafe_arena_release_pose_covariance();

  // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
  bool has_velocity_covariance() const;
  private:
  bool _internal_has_velocity_covariance() const;
  public:
  void clear_velocity_covariance();
  const ::mavsdk::rpc::mocap::Covariance& velocity_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Covariance* release_velocity_covariance();
  ::mavsdk::rpc::mocap::Covariance* mutable_velocity_covariance();
  void set_allocated_velocity_covariance(::mavsdk::rpc::mocap::Covariance* velocity_covariance);
  private:
  const ::mavsdk::rpc::mocap::Covariance& _internal_velocity_covariance() const;
  ::mavsdk::rpc::mocap::Covariance* _internal_mutable_velocity_covariance();
  public:
  void unsafe_arena_set_allocated_velocity_covariance(
      ::mavsdk::rpc::mocap::Covariance* velocity_covariance);
  ::mavsdk::rpc::mocap::Covariance* unsafe_arena_release_velocity_covariance();

  // uint64 time_usec = 1;
  void clear_time_usec();
  uint64_t time_usec() const;
  void set_time_usec(uint64_t value);
  private:
  uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(uint64_t value);
  public:

  // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
  void clear_frame_id();
  ::mavsdk::rpc::mocap::Odometry_MavFrame frame_id() const;
  void set_frame_id(::mavsdk::rpc::mocap::Odometry_MavFrame value);
  private:
  ::mavsdk::rpc::mocap::Odometry_MavFrame _internal_frame_id() const;
  void _internal_set_frame_id(::mavsdk::rpc::mocap::Odometry_MavFrame value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.Odometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mocap::PositionBody* position_body_;
  ::mavsdk::rpc::mocap::Quaternion* q_;
  ::mavsdk::rpc::mocap::SpeedBody* speed_body_;
  ::mavsdk::rpc::mocap::AngularVelocityBody* angular_velocity_body_;
  ::mavsdk::rpc::mocap::Covariance* pose_covariance_;
  ::mavsdk::rpc::mocap::Covariance* velocity_covariance_;
  uint64_t time_usec_;
  int frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// -------------------------------------------------------------------

class MocapResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.MocapResult) */ {
 public:
  inline MocapResult() : MocapResult(nullptr) {}
  ~MocapResult() override;
  explicit PROTOBUF_CONSTEXPR MocapResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MocapResult(const MocapResult& from);
  MocapResult(MocapResult&& from) noexcept
    : MocapResult() {
    *this = ::std::move(from);
  }

  inline MocapResult& operator=(const MocapResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MocapResult& operator=(MocapResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MocapResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const MocapResult* internal_default_instance() {
    return reinterpret_cast<const MocapResult*>(
               &_MocapResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MocapResult& a, MocapResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MocapResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MocapResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MocapResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MocapResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MocapResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MocapResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MocapResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mocap.MocapResult";
  }
  protected:
  explicit MocapResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MocapResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    MocapResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    MocapResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    MocapResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    MocapResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_INVALID_REQUEST_DATA =
    MocapResult_Result_RESULT_INVALID_REQUEST_DATA;
  static constexpr Result RESULT_UNSUPPORTED =
    MocapResult_Result_RESULT_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return MocapResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    MocapResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    MocapResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    MocapResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return MocapResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return MocapResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return MocapResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.mocap.MocapResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::mocap::MocapResult_Result result() const;
  void set_result(::mavsdk::rpc::mocap::MocapResult_Result value);
  private:
  ::mavsdk::rpc::mocap::MocapResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::mocap::MocapResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.MocapResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetVisionPositionEstimateRequest

// .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
inline bool SetVisionPositionEstimateRequest::_internal_has_vision_position_estimate() const {
  return this != internal_default_instance() && vision_position_estimate_ != nullptr;
}
inline bool SetVisionPositionEstimateRequest::has_vision_position_estimate() const {
  return _internal_has_vision_position_estimate();
}
inline void SetVisionPositionEstimateRequest::clear_vision_position_estimate() {
  if (GetArenaForAllocation() == nullptr && vision_position_estimate_ != nullptr) {
    delete vision_position_estimate_;
  }
  vision_position_estimate_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::VisionPositionEstimate& SetVisionPositionEstimateRequest::_internal_vision_position_estimate() const {
  const ::mavsdk::rpc::mocap::VisionPositionEstimate* p = vision_position_estimate_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::VisionPositionEstimate&>(
      ::mavsdk::rpc::mocap::_VisionPositionEstimate_default_instance_);
}
inline const ::mavsdk::rpc::mocap::VisionPositionEstimate& SetVisionPositionEstimateRequest::vision_position_estimate() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
  return _internal_vision_position_estimate();
}
inline void SetVisionPositionEstimateRequest::unsafe_arena_set_allocated_vision_position_estimate(
    ::mavsdk::rpc::mocap::VisionPositionEstimate* vision_position_estimate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vision_position_estimate_);
  }
  vision_position_estimate_ = vision_position_estimate;
  if (vision_position_estimate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
}
inline ::mavsdk::rpc::mocap::VisionPositionEstimate* SetVisionPositionEstimateRequest::release_vision_position_estimate() {
  
  ::mavsdk::rpc::mocap::VisionPositionEstimate* temp = vision_position_estimate_;
  vision_position_estimate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::VisionPositionEstimate* SetVisionPositionEstimateRequest::unsafe_arena_release_vision_position_estimate() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
  
  ::mavsdk::rpc::mocap::VisionPositionEstimate* temp = vision_position_estimate_;
  vision_position_estimate_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::VisionPositionEstimate* SetVisionPositionEstimateRequest::_internal_mutable_vision_position_estimate() {
  
  if (vision_position_estimate_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::VisionPositionEstimate>(GetArenaForAllocation());
    vision_position_estimate_ = p;
  }
  return vision_position_estimate_;
}
inline ::mavsdk::rpc::mocap::VisionPositionEstimate* SetVisionPositionEstimateRequest::mutable_vision_position_estimate() {
  ::mavsdk::rpc::mocap::VisionPositionEstimate* _msg = _internal_mutable_vision_position_estimate();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
  return _msg;
}
inline void SetVisionPositionEstimateRequest::set_allocated_vision_position_estimate(::mavsdk::rpc::mocap::VisionPositionEstimate* vision_position_estimate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vision_position_estimate_;
  }
  if (vision_position_estimate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vision_position_estimate);
    if (message_arena != submessage_arena) {
      vision_position_estimate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vision_position_estimate, submessage_arena);
    }
    
  } else {
    
  }
  vision_position_estimate_ = vision_position_estimate;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
}

// -------------------------------------------------------------------

// SetVisionPositionEstimateResponse

// .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
inline bool SetVisionPositionEstimateResponse::_internal_has_mocap_result() const {
  return this != internal_default_instance() && mocap_result_ != nullptr;
}
inline bool SetVisionPositionEstimateResponse::has_mocap_result() const {
  return _internal_has_mocap_result();
}
inline void SetVisionPositionEstimateResponse::clear_mocap_result() {
  if (GetArenaForAllocation() == nullptr && mocap_result_ != nullptr) {
    delete mocap_result_;
  }
  mocap_result_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetVisionPositionEstimateResponse::_internal_mocap_result() const {
  const ::mavsdk::rpc::mocap::MocapResult* p = mocap_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::MocapResult&>(
      ::mavsdk::rpc::mocap::_MocapResult_default_instance_);
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetVisionPositionEstimateResponse::mocap_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
  return _internal_mocap_result();
}
inline void SetVisionPositionEstimateResponse::unsafe_arena_set_allocated_mocap_result(
    ::mavsdk::rpc::mocap::MocapResult* mocap_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mocap_result_);
  }
  mocap_result_ = mocap_result;
  if (mocap_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
}
inline ::mavsdk::rpc::mocap::MocapResult* SetVisionPositionEstimateResponse::release_mocap_result() {
  
  ::mavsdk::rpc::mocap::MocapResult* temp = mocap_result_;
  mocap_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetVisionPositionEstimateResponse::unsafe_arena_release_mocap_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
  
  ::mavsdk::rpc::mocap::MocapResult* temp = mocap_result_;
  mocap_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetVisionPositionEstimateResponse::_internal_mutable_mocap_result() {
  
  if (mocap_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::MocapResult>(GetArenaForAllocation());
    mocap_result_ = p;
  }
  return mocap_result_;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetVisionPositionEstimateResponse::mutable_mocap_result() {
  ::mavsdk::rpc::mocap::MocapResult* _msg = _internal_mutable_mocap_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
  return _msg;
}
inline void SetVisionPositionEstimateResponse::set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* mocap_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mocap_result_;
  }
  if (mocap_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mocap_result);
    if (message_arena != submessage_arena) {
      mocap_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mocap_result, submessage_arena);
    }
    
  } else {
    
  }
  mocap_result_ = mocap_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
}

// -------------------------------------------------------------------

// SetAttitudePositionMocapRequest

// .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
inline bool SetAttitudePositionMocapRequest::_internal_has_attitude_position_mocap() const {
  return this != internal_default_instance() && attitude_position_mocap_ != nullptr;
}
inline bool SetAttitudePositionMocapRequest::has_attitude_position_mocap() const {
  return _internal_has_attitude_position_mocap();
}
inline void SetAttitudePositionMocapRequest::clear_attitude_position_mocap() {
  if (GetArenaForAllocation() == nullptr && attitude_position_mocap_ != nullptr) {
    delete attitude_position_mocap_;
  }
  attitude_position_mocap_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::AttitudePositionMocap& SetAttitudePositionMocapRequest::_internal_attitude_position_mocap() const {
  const ::mavsdk::rpc::mocap::AttitudePositionMocap* p = attitude_position_mocap_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::AttitudePositionMocap&>(
      ::mavsdk::rpc::mocap::_AttitudePositionMocap_default_instance_);
}
inline const ::mavsdk::rpc::mocap::AttitudePositionMocap& SetAttitudePositionMocapRequest::attitude_position_mocap() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
  return _internal_attitude_position_mocap();
}
inline void SetAttitudePositionMocapRequest::unsafe_arena_set_allocated_attitude_position_mocap(
    ::mavsdk::rpc::mocap::AttitudePositionMocap* attitude_position_mocap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_position_mocap_);
  }
  attitude_position_mocap_ = attitude_position_mocap;
  if (attitude_position_mocap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
}
inline ::mavsdk::rpc::mocap::AttitudePositionMocap* SetAttitudePositionMocapRequest::release_attitude_position_mocap() {
  
  ::mavsdk::rpc::mocap::AttitudePositionMocap* temp = attitude_position_mocap_;
  attitude_position_mocap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::AttitudePositionMocap* SetAttitudePositionMocapRequest::unsafe_arena_release_attitude_position_mocap() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
  
  ::mavsdk::rpc::mocap::AttitudePositionMocap* temp = attitude_position_mocap_;
  attitude_position_mocap_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::AttitudePositionMocap* SetAttitudePositionMocapRequest::_internal_mutable_attitude_position_mocap() {
  
  if (attitude_position_mocap_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::AttitudePositionMocap>(GetArenaForAllocation());
    attitude_position_mocap_ = p;
  }
  return attitude_position_mocap_;
}
inline ::mavsdk::rpc::mocap::AttitudePositionMocap* SetAttitudePositionMocapRequest::mutable_attitude_position_mocap() {
  ::mavsdk::rpc::mocap::AttitudePositionMocap* _msg = _internal_mutable_attitude_position_mocap();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
  return _msg;
}
inline void SetAttitudePositionMocapRequest::set_allocated_attitude_position_mocap(::mavsdk::rpc::mocap::AttitudePositionMocap* attitude_position_mocap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_position_mocap_;
  }
  if (attitude_position_mocap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_position_mocap);
    if (message_arena != submessage_arena) {
      attitude_position_mocap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_position_mocap, submessage_arena);
    }
    
  } else {
    
  }
  attitude_position_mocap_ = attitude_position_mocap;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
}

// -------------------------------------------------------------------

// SetAttitudePositionMocapResponse

// .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
inline bool SetAttitudePositionMocapResponse::_internal_has_mocap_result() const {
  return this != internal_default_instance() && mocap_result_ != nullptr;
}
inline bool SetAttitudePositionMocapResponse::has_mocap_result() const {
  return _internal_has_mocap_result();
}
inline void SetAttitudePositionMocapResponse::clear_mocap_result() {
  if (GetArenaForAllocation() == nullptr && mocap_result_ != nullptr) {
    delete mocap_result_;
  }
  mocap_result_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetAttitudePositionMocapResponse::_internal_mocap_result() const {
  const ::mavsdk::rpc::mocap::MocapResult* p = mocap_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::MocapResult&>(
      ::mavsdk::rpc::mocap::_MocapResult_default_instance_);
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetAttitudePositionMocapResponse::mocap_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
  return _internal_mocap_result();
}
inline void SetAttitudePositionMocapResponse::unsafe_arena_set_allocated_mocap_result(
    ::mavsdk::rpc::mocap::MocapResult* mocap_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mocap_result_);
  }
  mocap_result_ = mocap_result;
  if (mocap_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
}
inline ::mavsdk::rpc::mocap::MocapResult* SetAttitudePositionMocapResponse::release_mocap_result() {
  
  ::mavsdk::rpc::mocap::MocapResult* temp = mocap_result_;
  mocap_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetAttitudePositionMocapResponse::unsafe_arena_release_mocap_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
  
  ::mavsdk::rpc::mocap::MocapResult* temp = mocap_result_;
  mocap_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetAttitudePositionMocapResponse::_internal_mutable_mocap_result() {
  
  if (mocap_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::MocapResult>(GetArenaForAllocation());
    mocap_result_ = p;
  }
  return mocap_result_;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetAttitudePositionMocapResponse::mutable_mocap_result() {
  ::mavsdk::rpc::mocap::MocapResult* _msg = _internal_mutable_mocap_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
  return _msg;
}
inline void SetAttitudePositionMocapResponse::set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* mocap_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mocap_result_;
  }
  if (mocap_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mocap_result);
    if (message_arena != submessage_arena) {
      mocap_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mocap_result, submessage_arena);
    }
    
  } else {
    
  }
  mocap_result_ = mocap_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
}

// -------------------------------------------------------------------

// SetOdometryRequest

// .mavsdk.rpc.mocap.Odometry odometry = 1;
inline bool SetOdometryRequest::_internal_has_odometry() const {
  return this != internal_default_instance() && odometry_ != nullptr;
}
inline bool SetOdometryRequest::has_odometry() const {
  return _internal_has_odometry();
}
inline void SetOdometryRequest::clear_odometry() {
  if (GetArenaForAllocation() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::Odometry& SetOdometryRequest::_internal_odometry() const {
  const ::mavsdk::rpc::mocap::Odometry* p = odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Odometry&>(
      ::mavsdk::rpc::mocap::_Odometry_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Odometry& SetOdometryRequest::odometry() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
  return _internal_odometry();
}
inline void SetOdometryRequest::unsafe_arena_set_allocated_odometry(
    ::mavsdk::rpc::mocap::Odometry* odometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry_);
  }
  odometry_ = odometry;
  if (odometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
}
inline ::mavsdk::rpc::mocap::Odometry* SetOdometryRequest::release_odometry() {
  
  ::mavsdk::rpc::mocap::Odometry* temp = odometry_;
  odometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::Odometry* SetOdometryRequest::unsafe_arena_release_odometry() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
  
  ::mavsdk::rpc::mocap::Odometry* temp = odometry_;
  odometry_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Odometry* SetOdometryRequest::_internal_mutable_odometry() {
  
  if (odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Odometry>(GetArenaForAllocation());
    odometry_ = p;
  }
  return odometry_;
}
inline ::mavsdk::rpc::mocap::Odometry* SetOdometryRequest::mutable_odometry() {
  ::mavsdk::rpc::mocap::Odometry* _msg = _internal_mutable_odometry();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
  return _msg;
}
inline void SetOdometryRequest::set_allocated_odometry(::mavsdk::rpc::mocap::Odometry* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete odometry_;
  }
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(odometry);
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    
  } else {
    
  }
  odometry_ = odometry;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
}

// -------------------------------------------------------------------

// SetOdometryResponse

// .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
inline bool SetOdometryResponse::_internal_has_mocap_result() const {
  return this != internal_default_instance() && mocap_result_ != nullptr;
}
inline bool SetOdometryResponse::has_mocap_result() const {
  return _internal_has_mocap_result();
}
inline void SetOdometryResponse::clear_mocap_result() {
  if (GetArenaForAllocation() == nullptr && mocap_result_ != nullptr) {
    delete mocap_result_;
  }
  mocap_result_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetOdometryResponse::_internal_mocap_result() const {
  const ::mavsdk::rpc::mocap::MocapResult* p = mocap_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::MocapResult&>(
      ::mavsdk::rpc::mocap::_MocapResult_default_instance_);
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetOdometryResponse::mocap_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
  return _internal_mocap_result();
}
inline void SetOdometryResponse::unsafe_arena_set_allocated_mocap_result(
    ::mavsdk::rpc::mocap::MocapResult* mocap_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mocap_result_);
  }
  mocap_result_ = mocap_result;
  if (mocap_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
}
inline ::mavsdk::rpc::mocap::MocapResult* SetOdometryResponse::release_mocap_result() {
  
  ::mavsdk::rpc::mocap::MocapResult* temp = mocap_result_;
  mocap_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetOdometryResponse::unsafe_arena_release_mocap_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
  
  ::mavsdk::rpc::mocap::MocapResult* temp = mocap_result_;
  mocap_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetOdometryResponse::_internal_mutable_mocap_result() {
  
  if (mocap_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::MocapResult>(GetArenaForAllocation());
    mocap_result_ = p;
  }
  return mocap_result_;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetOdometryResponse::mutable_mocap_result() {
  ::mavsdk::rpc::mocap::MocapResult* _msg = _internal_mutable_mocap_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
  return _msg;
}
inline void SetOdometryResponse::set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* mocap_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mocap_result_;
  }
  if (mocap_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mocap_result);
    if (message_arena != submessage_arena) {
      mocap_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mocap_result, submessage_arena);
    }
    
  } else {
    
  }
  mocap_result_ = mocap_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
}

// -------------------------------------------------------------------

// PositionBody

// float x_m = 1;
inline void PositionBody::clear_x_m() {
  x_m_ = 0;
}
inline float PositionBody::_internal_x_m() const {
  return x_m_;
}
inline float PositionBody::x_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.PositionBody.x_m)
  return _internal_x_m();
}
inline void PositionBody::_internal_set_x_m(float value) {
  
  x_m_ = value;
}
inline void PositionBody::set_x_m(float value) {
  _internal_set_x_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.PositionBody.x_m)
}

// float y_m = 2;
inline void PositionBody::clear_y_m() {
  y_m_ = 0;
}
inline float PositionBody::_internal_y_m() const {
  return y_m_;
}
inline float PositionBody::y_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.PositionBody.y_m)
  return _internal_y_m();
}
inline void PositionBody::_internal_set_y_m(float value) {
  
  y_m_ = value;
}
inline void PositionBody::set_y_m(float value) {
  _internal_set_y_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.PositionBody.y_m)
}

// float z_m = 3;
inline void PositionBody::clear_z_m() {
  z_m_ = 0;
}
inline float PositionBody::_internal_z_m() const {
  return z_m_;
}
inline float PositionBody::z_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.PositionBody.z_m)
  return _internal_z_m();
}
inline void PositionBody::_internal_set_z_m(float value) {
  
  z_m_ = value;
}
inline void PositionBody::set_z_m(float value) {
  _internal_set_z_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.PositionBody.z_m)
}

// -------------------------------------------------------------------

// AngleBody

// float roll_rad = 1;
inline void AngleBody::clear_roll_rad() {
  roll_rad_ = 0;
}
inline float AngleBody::_internal_roll_rad() const {
  return roll_rad_;
}
inline float AngleBody::roll_rad() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngleBody.roll_rad)
  return _internal_roll_rad();
}
inline void AngleBody::_internal_set_roll_rad(float value) {
  
  roll_rad_ = value;
}
inline void AngleBody::set_roll_rad(float value) {
  _internal_set_roll_rad(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngleBody.roll_rad)
}

// float pitch_rad = 2;
inline void AngleBody::clear_pitch_rad() {
  pitch_rad_ = 0;
}
inline float AngleBody::_internal_pitch_rad() const {
  return pitch_rad_;
}
inline float AngleBody::pitch_rad() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngleBody.pitch_rad)
  return _internal_pitch_rad();
}
inline void AngleBody::_internal_set_pitch_rad(float value) {
  
  pitch_rad_ = value;
}
inline void AngleBody::set_pitch_rad(float value) {
  _internal_set_pitch_rad(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngleBody.pitch_rad)
}

// float yaw_rad = 3;
inline void AngleBody::clear_yaw_rad() {
  yaw_rad_ = 0;
}
inline float AngleBody::_internal_yaw_rad() const {
  return yaw_rad_;
}
inline float AngleBody::yaw_rad() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngleBody.yaw_rad)
  return _internal_yaw_rad();
}
inline void AngleBody::_internal_set_yaw_rad(float value) {
  
  yaw_rad_ = value;
}
inline void AngleBody::set_yaw_rad(float value) {
  _internal_set_yaw_rad(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngleBody.yaw_rad)
}

// -------------------------------------------------------------------

// SpeedBody

// float x_m_s = 1;
inline void SpeedBody::clear_x_m_s() {
  x_m_s_ = 0;
}
inline float SpeedBody::_internal_x_m_s() const {
  return x_m_s_;
}
inline float SpeedBody::x_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SpeedBody.x_m_s)
  return _internal_x_m_s();
}
inline void SpeedBody::_internal_set_x_m_s(float value) {
  
  x_m_s_ = value;
}
inline void SpeedBody::set_x_m_s(float value) {
  _internal_set_x_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.SpeedBody.x_m_s)
}

// float y_m_s = 2;
inline void SpeedBody::clear_y_m_s() {
  y_m_s_ = 0;
}
inline float SpeedBody::_internal_y_m_s() const {
  return y_m_s_;
}
inline float SpeedBody::y_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SpeedBody.y_m_s)
  return _internal_y_m_s();
}
inline void SpeedBody::_internal_set_y_m_s(float value) {
  
  y_m_s_ = value;
}
inline void SpeedBody::set_y_m_s(float value) {
  _internal_set_y_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.SpeedBody.y_m_s)
}

// float z_m_s = 3;
inline void SpeedBody::clear_z_m_s() {
  z_m_s_ = 0;
}
inline float SpeedBody::_internal_z_m_s() const {
  return z_m_s_;
}
inline float SpeedBody::z_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SpeedBody.z_m_s)
  return _internal_z_m_s();
}
inline void SpeedBody::_internal_set_z_m_s(float value) {
  
  z_m_s_ = value;
}
inline void SpeedBody::set_z_m_s(float value) {
  _internal_set_z_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.SpeedBody.z_m_s)
}

// -------------------------------------------------------------------

// AngularVelocityBody

// float roll_rad_s = 1;
inline void AngularVelocityBody::clear_roll_rad_s() {
  roll_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_roll_rad_s() const {
  return roll_rad_s_;
}
inline float AngularVelocityBody::roll_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngularVelocityBody.roll_rad_s)
  return _internal_roll_rad_s();
}
inline void AngularVelocityBody::_internal_set_roll_rad_s(float value) {
  
  roll_rad_s_ = value;
}
inline void AngularVelocityBody::set_roll_rad_s(float value) {
  _internal_set_roll_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngularVelocityBody.roll_rad_s)
}

// float pitch_rad_s = 2;
inline void AngularVelocityBody::clear_pitch_rad_s() {
  pitch_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_pitch_rad_s() const {
  return pitch_rad_s_;
}
inline float AngularVelocityBody::pitch_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngularVelocityBody.pitch_rad_s)
  return _internal_pitch_rad_s();
}
inline void AngularVelocityBody::_internal_set_pitch_rad_s(float value) {
  
  pitch_rad_s_ = value;
}
inline void AngularVelocityBody::set_pitch_rad_s(float value) {
  _internal_set_pitch_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngularVelocityBody.pitch_rad_s)
}

// float yaw_rad_s = 3;
inline void AngularVelocityBody::clear_yaw_rad_s() {
  yaw_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_yaw_rad_s() const {
  return yaw_rad_s_;
}
inline float AngularVelocityBody::yaw_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngularVelocityBody.yaw_rad_s)
  return _internal_yaw_rad_s();
}
inline void AngularVelocityBody::_internal_set_yaw_rad_s(float value) {
  
  yaw_rad_s_ = value;
}
inline void AngularVelocityBody::set_yaw_rad_s(float value) {
  _internal_set_yaw_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngularVelocityBody.yaw_rad_s)
}

// -------------------------------------------------------------------

// Covariance

// repeated float covariance_matrix = 1;
inline int Covariance::_internal_covariance_matrix_size() const {
  return covariance_matrix_.size();
}
inline int Covariance::covariance_matrix_size() const {
  return _internal_covariance_matrix_size();
}
inline void Covariance::clear_covariance_matrix() {
  covariance_matrix_.Clear();
}
inline float Covariance::_internal_covariance_matrix(int index) const {
  return covariance_matrix_.Get(index);
}
inline float Covariance::covariance_matrix(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Covariance.covariance_matrix)
  return _internal_covariance_matrix(index);
}
inline void Covariance::set_covariance_matrix(int index, float value) {
  covariance_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Covariance.covariance_matrix)
}
inline void Covariance::_internal_add_covariance_matrix(float value) {
  covariance_matrix_.Add(value);
}
inline void Covariance::add_covariance_matrix(float value) {
  _internal_add_covariance_matrix(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mocap.Covariance.covariance_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Covariance::_internal_covariance_matrix() const {
  return covariance_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Covariance::covariance_matrix() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mocap.Covariance.covariance_matrix)
  return _internal_covariance_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Covariance::_internal_mutable_covariance_matrix() {
  return &covariance_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Covariance::mutable_covariance_matrix() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mocap.Covariance.covariance_matrix)
  return _internal_mutable_covariance_matrix();
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Quaternion.w)
}

// float x = 2;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Quaternion.x)
}

// float y = 3;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Quaternion.y)
}

// float z = 4;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Quaternion.z)
}

// -------------------------------------------------------------------

// VisionPositionEstimate

// uint64 time_usec = 1;
inline void VisionPositionEstimate::clear_time_usec() {
  time_usec_ = uint64_t{0u};
}
inline uint64_t VisionPositionEstimate::_internal_time_usec() const {
  return time_usec_;
}
inline uint64_t VisionPositionEstimate::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.VisionPositionEstimate.time_usec)
  return _internal_time_usec();
}
inline void VisionPositionEstimate::_internal_set_time_usec(uint64_t value) {
  
  time_usec_ = value;
}
inline void VisionPositionEstimate::set_time_usec(uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.VisionPositionEstimate.time_usec)
}

// .mavsdk.rpc.mocap.PositionBody position_body = 2;
inline bool VisionPositionEstimate::_internal_has_position_body() const {
  return this != internal_default_instance() && position_body_ != nullptr;
}
inline bool VisionPositionEstimate::has_position_body() const {
  return _internal_has_position_body();
}
inline void VisionPositionEstimate::clear_position_body() {
  if (GetArenaForAllocation() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::PositionBody& VisionPositionEstimate::_internal_position_body() const {
  const ::mavsdk::rpc::mocap::PositionBody* p = position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::PositionBody&>(
      ::mavsdk::rpc::mocap::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::PositionBody& VisionPositionEstimate::position_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
  return _internal_position_body();
}
inline void VisionPositionEstimate::unsafe_arena_set_allocated_position_body(
    ::mavsdk::rpc::mocap::PositionBody* position_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_body_);
  }
  position_body_ = position_body;
  if (position_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
}
inline ::mavsdk::rpc::mocap::PositionBody* VisionPositionEstimate::release_position_body() {
  
  ::mavsdk::rpc::mocap::PositionBody* temp = position_body_;
  position_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* VisionPositionEstimate::unsafe_arena_release_position_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
  
  ::mavsdk::rpc::mocap::PositionBody* temp = position_body_;
  position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* VisionPositionEstimate::_internal_mutable_position_body() {
  
  if (position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::PositionBody>(GetArenaForAllocation());
    position_body_ = p;
  }
  return position_body_;
}
inline ::mavsdk::rpc::mocap::PositionBody* VisionPositionEstimate::mutable_position_body() {
  ::mavsdk::rpc::mocap::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
  return _msg;
}
inline void VisionPositionEstimate::set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* position_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_body_;
  }
  if (position_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_body);
    if (message_arena != submessage_arena) {
      position_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_body, submessage_arena);
    }
    
  } else {
    
  }
  position_body_ = position_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
}

// .mavsdk.rpc.mocap.AngleBody angle_body = 3;
inline bool VisionPositionEstimate::_internal_has_angle_body() const {
  return this != internal_default_instance() && angle_body_ != nullptr;
}
inline bool VisionPositionEstimate::has_angle_body() const {
  return _internal_has_angle_body();
}
inline void VisionPositionEstimate::clear_angle_body() {
  if (GetArenaForAllocation() == nullptr && angle_body_ != nullptr) {
    delete angle_body_;
  }
  angle_body_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::AngleBody& VisionPositionEstimate::_internal_angle_body() const {
  const ::mavsdk::rpc::mocap::AngleBody* p = angle_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::AngleBody&>(
      ::mavsdk::rpc::mocap::_AngleBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::AngleBody& VisionPositionEstimate::angle_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
  return _internal_angle_body();
}
inline void VisionPositionEstimate::unsafe_arena_set_allocated_angle_body(
    ::mavsdk::rpc::mocap::AngleBody* angle_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_body_);
  }
  angle_body_ = angle_body;
  if (angle_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
}
inline ::mavsdk::rpc::mocap::AngleBody* VisionPositionEstimate::release_angle_body() {
  
  ::mavsdk::rpc::mocap::AngleBody* temp = angle_body_;
  angle_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::AngleBody* VisionPositionEstimate::unsafe_arena_release_angle_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
  
  ::mavsdk::rpc::mocap::AngleBody* temp = angle_body_;
  angle_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::AngleBody* VisionPositionEstimate::_internal_mutable_angle_body() {
  
  if (angle_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::AngleBody>(GetArenaForAllocation());
    angle_body_ = p;
  }
  return angle_body_;
}
inline ::mavsdk::rpc::mocap::AngleBody* VisionPositionEstimate::mutable_angle_body() {
  ::mavsdk::rpc::mocap::AngleBody* _msg = _internal_mutable_angle_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
  return _msg;
}
inline void VisionPositionEstimate::set_allocated_angle_body(::mavsdk::rpc::mocap::AngleBody* angle_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angle_body_;
  }
  if (angle_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angle_body);
    if (message_arena != submessage_arena) {
      angle_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle_body, submessage_arena);
    }
    
  } else {
    
  }
  angle_body_ = angle_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
}

// .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
inline bool VisionPositionEstimate::_internal_has_pose_covariance() const {
  return this != internal_default_instance() && pose_covariance_ != nullptr;
}
inline bool VisionPositionEstimate::has_pose_covariance() const {
  return _internal_has_pose_covariance();
}
inline void VisionPositionEstimate::clear_pose_covariance() {
  if (GetArenaForAllocation() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::Covariance& VisionPositionEstimate::_internal_pose_covariance() const {
  const ::mavsdk::rpc::mocap::Covariance* p = pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Covariance&>(
      ::mavsdk::rpc::mocap::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Covariance& VisionPositionEstimate::pose_covariance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
  return _internal_pose_covariance();
}
inline void VisionPositionEstimate::unsafe_arena_set_allocated_pose_covariance(
    ::mavsdk::rpc::mocap::Covariance* pose_covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_covariance_);
  }
  pose_covariance_ = pose_covariance;
  if (pose_covariance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
}
inline ::mavsdk::rpc::mocap::Covariance* VisionPositionEstimate::release_pose_covariance() {
  
  ::mavsdk::rpc::mocap::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* VisionPositionEstimate::unsafe_arena_release_pose_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
  
  ::mavsdk::rpc::mocap::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* VisionPositionEstimate::_internal_mutable_pose_covariance() {
  
  if (pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(GetArenaForAllocation());
    pose_covariance_ = p;
  }
  return pose_covariance_;
}
inline ::mavsdk::rpc::mocap::Covariance* VisionPositionEstimate::mutable_pose_covariance() {
  ::mavsdk::rpc::mocap::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
  return _msg;
}
inline void VisionPositionEstimate::set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* pose_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_covariance_;
  }
  if (pose_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose_covariance);
    if (message_arena != submessage_arena) {
      pose_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_covariance, submessage_arena);
    }
    
  } else {
    
  }
  pose_covariance_ = pose_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
}

// -------------------------------------------------------------------

// AttitudePositionMocap

// uint64 time_usec = 1;
inline void AttitudePositionMocap::clear_time_usec() {
  time_usec_ = uint64_t{0u};
}
inline uint64_t AttitudePositionMocap::_internal_time_usec() const {
  return time_usec_;
}
inline uint64_t AttitudePositionMocap::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AttitudePositionMocap.time_usec)
  return _internal_time_usec();
}
inline void AttitudePositionMocap::_internal_set_time_usec(uint64_t value) {
  
  time_usec_ = value;
}
inline void AttitudePositionMocap::set_time_usec(uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AttitudePositionMocap.time_usec)
}

// .mavsdk.rpc.mocap.Quaternion q = 2;
inline bool AttitudePositionMocap::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool AttitudePositionMocap::has_q() const {
  return _internal_has_q();
}
inline void AttitudePositionMocap::clear_q() {
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::Quaternion& AttitudePositionMocap::_internal_q() const {
  const ::mavsdk::rpc::mocap::Quaternion* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Quaternion&>(
      ::mavsdk::rpc::mocap::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Quaternion& AttitudePositionMocap::q() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AttitudePositionMocap.q)
  return _internal_q();
}
inline void AttitudePositionMocap::unsafe_arena_set_allocated_q(
    ::mavsdk::rpc::mocap::Quaternion* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.q)
}
inline ::mavsdk::rpc::mocap::Quaternion* AttitudePositionMocap::release_q() {
  
  ::mavsdk::rpc::mocap::Quaternion* temp = q_;
  q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::Quaternion* AttitudePositionMocap::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.AttitudePositionMocap.q)
  
  ::mavsdk::rpc::mocap::Quaternion* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Quaternion* AttitudePositionMocap::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Quaternion>(GetArenaForAllocation());
    q_ = p;
  }
  return q_;
}
inline ::mavsdk::rpc::mocap::Quaternion* AttitudePositionMocap::mutable_q() {
  ::mavsdk::rpc::mocap::Quaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.AttitudePositionMocap.q)
  return _msg;
}
inline void AttitudePositionMocap::set_allocated_q(::mavsdk::rpc::mocap::Quaternion* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.q)
}

// .mavsdk.rpc.mocap.PositionBody position_body = 3;
inline bool AttitudePositionMocap::_internal_has_position_body() const {
  return this != internal_default_instance() && position_body_ != nullptr;
}
inline bool AttitudePositionMocap::has_position_body() const {
  return _internal_has_position_body();
}
inline void AttitudePositionMocap::clear_position_body() {
  if (GetArenaForAllocation() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::PositionBody& AttitudePositionMocap::_internal_position_body() const {
  const ::mavsdk::rpc::mocap::PositionBody* p = position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::PositionBody&>(
      ::mavsdk::rpc::mocap::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::PositionBody& AttitudePositionMocap::position_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
  return _internal_position_body();
}
inline void AttitudePositionMocap::unsafe_arena_set_allocated_position_body(
    ::mavsdk::rpc::mocap::PositionBody* position_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_body_);
  }
  position_body_ = position_body;
  if (position_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
}
inline ::mavsdk::rpc::mocap::PositionBody* AttitudePositionMocap::release_position_body() {
  
  ::mavsdk::rpc::mocap::PositionBody* temp = position_body_;
  position_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* AttitudePositionMocap::unsafe_arena_release_position_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
  
  ::mavsdk::rpc::mocap::PositionBody* temp = position_body_;
  position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* AttitudePositionMocap::_internal_mutable_position_body() {
  
  if (position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::PositionBody>(GetArenaForAllocation());
    position_body_ = p;
  }
  return position_body_;
}
inline ::mavsdk::rpc::mocap::PositionBody* AttitudePositionMocap::mutable_position_body() {
  ::mavsdk::rpc::mocap::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
  return _msg;
}
inline void AttitudePositionMocap::set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* position_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_body_;
  }
  if (position_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_body);
    if (message_arena != submessage_arena) {
      position_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_body, submessage_arena);
    }
    
  } else {
    
  }
  position_body_ = position_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
}

// .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
inline bool AttitudePositionMocap::_internal_has_pose_covariance() const {
  return this != internal_default_instance() && pose_covariance_ != nullptr;
}
inline bool AttitudePositionMocap::has_pose_covariance() const {
  return _internal_has_pose_covariance();
}
inline void AttitudePositionMocap::clear_pose_covariance() {
  if (GetArenaForAllocation() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::Covariance& AttitudePositionMocap::_internal_pose_covariance() const {
  const ::mavsdk::rpc::mocap::Covariance* p = pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Covariance&>(
      ::mavsdk::rpc::mocap::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Covariance& AttitudePositionMocap::pose_covariance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
  return _internal_pose_covariance();
}
inline void AttitudePositionMocap::unsafe_arena_set_allocated_pose_covariance(
    ::mavsdk::rpc::mocap::Covariance* pose_covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_covariance_);
  }
  pose_covariance_ = pose_covariance;
  if (pose_covariance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
}
inline ::mavsdk::rpc::mocap::Covariance* AttitudePositionMocap::release_pose_covariance() {
  
  ::mavsdk::rpc::mocap::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* AttitudePositionMocap::unsafe_arena_release_pose_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
  
  ::mavsdk::rpc::mocap::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* AttitudePositionMocap::_internal_mutable_pose_covariance() {
  
  if (pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(GetArenaForAllocation());
    pose_covariance_ = p;
  }
  return pose_covariance_;
}
inline ::mavsdk::rpc::mocap::Covariance* AttitudePositionMocap::mutable_pose_covariance() {
  ::mavsdk::rpc::mocap::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
  return _msg;
}
inline void AttitudePositionMocap::set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* pose_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_covariance_;
  }
  if (pose_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose_covariance);
    if (message_arena != submessage_arena) {
      pose_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_covariance, submessage_arena);
    }
    
  } else {
    
  }
  pose_covariance_ = pose_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
}

// -------------------------------------------------------------------

// Odometry

// uint64 time_usec = 1;
inline void Odometry::clear_time_usec() {
  time_usec_ = uint64_t{0u};
}
inline uint64_t Odometry::_internal_time_usec() const {
  return time_usec_;
}
inline uint64_t Odometry::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.time_usec)
  return _internal_time_usec();
}
inline void Odometry::_internal_set_time_usec(uint64_t value) {
  
  time_usec_ = value;
}
inline void Odometry::set_time_usec(uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Odometry.time_usec)
}

// .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
inline void Odometry::clear_frame_id() {
  frame_id_ = 0;
}
inline ::mavsdk::rpc::mocap::Odometry_MavFrame Odometry::_internal_frame_id() const {
  return static_cast< ::mavsdk::rpc::mocap::Odometry_MavFrame >(frame_id_);
}
inline ::mavsdk::rpc::mocap::Odometry_MavFrame Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.frame_id)
  return _internal_frame_id();
}
inline void Odometry::_internal_set_frame_id(::mavsdk::rpc::mocap::Odometry_MavFrame value) {
  
  frame_id_ = value;
}
inline void Odometry::set_frame_id(::mavsdk::rpc::mocap::Odometry_MavFrame value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Odometry.frame_id)
}

// .mavsdk.rpc.mocap.PositionBody position_body = 3;
inline bool Odometry::_internal_has_position_body() const {
  return this != internal_default_instance() && position_body_ != nullptr;
}
inline bool Odometry::has_position_body() const {
  return _internal_has_position_body();
}
inline void Odometry::clear_position_body() {
  if (GetArenaForAllocation() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::PositionBody& Odometry::_internal_position_body() const {
  const ::mavsdk::rpc::mocap::PositionBody* p = position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::PositionBody&>(
      ::mavsdk::rpc::mocap::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::PositionBody& Odometry::position_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.position_body)
  return _internal_position_body();
}
inline void Odometry::unsafe_arena_set_allocated_position_body(
    ::mavsdk::rpc::mocap::PositionBody* position_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_body_);
  }
  position_body_ = position_body;
  if (position_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.position_body)
}
inline ::mavsdk::rpc::mocap::PositionBody* Odometry::release_position_body() {
  
  ::mavsdk::rpc::mocap::PositionBody* temp = position_body_;
  position_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* Odometry::unsafe_arena_release_position_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.position_body)
  
  ::mavsdk::rpc::mocap::PositionBody* temp = position_body_;
  position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* Odometry::_internal_mutable_position_body() {
  
  if (position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::PositionBody>(GetArenaForAllocation());
    position_body_ = p;
  }
  return position_body_;
}
inline ::mavsdk::rpc::mocap::PositionBody* Odometry::mutable_position_body() {
  ::mavsdk::rpc::mocap::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.position_body)
  return _msg;
}
inline void Odometry::set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* position_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_body_;
  }
  if (position_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_body);
    if (message_arena != submessage_arena) {
      position_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_body, submessage_arena);
    }
    
  } else {
    
  }
  position_body_ = position_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.position_body)
}

// .mavsdk.rpc.mocap.Quaternion q = 4;
inline bool Odometry::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool Odometry::has_q() const {
  return _internal_has_q();
}
inline void Odometry::clear_q() {
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::Quaternion& Odometry::_internal_q() const {
  const ::mavsdk::rpc::mocap::Quaternion* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Quaternion&>(
      ::mavsdk::rpc::mocap::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Quaternion& Odometry::q() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.q)
  return _internal_q();
}
inline void Odometry::unsafe_arena_set_allocated_q(
    ::mavsdk::rpc::mocap::Quaternion* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.q)
}
inline ::mavsdk::rpc::mocap::Quaternion* Odometry::release_q() {
  
  ::mavsdk::rpc::mocap::Quaternion* temp = q_;
  q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::Quaternion* Odometry::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.q)
  
  ::mavsdk::rpc::mocap::Quaternion* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Quaternion* Odometry::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Quaternion>(GetArenaForAllocation());
    q_ = p;
  }
  return q_;
}
inline ::mavsdk::rpc::mocap::Quaternion* Odometry::mutable_q() {
  ::mavsdk::rpc::mocap::Quaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.q)
  return _msg;
}
inline void Odometry::set_allocated_q(::mavsdk::rpc::mocap::Quaternion* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.q)
}

// .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
inline bool Odometry::_internal_has_speed_body() const {
  return this != internal_default_instance() && speed_body_ != nullptr;
}
inline bool Odometry::has_speed_body() const {
  return _internal_has_speed_body();
}
inline void Odometry::clear_speed_body() {
  if (GetArenaForAllocation() == nullptr && speed_body_ != nullptr) {
    delete speed_body_;
  }
  speed_body_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::SpeedBody& Odometry::_internal_speed_body() const {
  const ::mavsdk::rpc::mocap::SpeedBody* p = speed_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::SpeedBody&>(
      ::mavsdk::rpc::mocap::_SpeedBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::SpeedBody& Odometry::speed_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.speed_body)
  return _internal_speed_body();
}
inline void Odometry::unsafe_arena_set_allocated_speed_body(
    ::mavsdk::rpc::mocap::SpeedBody* speed_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_body_);
  }
  speed_body_ = speed_body;
  if (speed_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.speed_body)
}
inline ::mavsdk::rpc::mocap::SpeedBody* Odometry::release_speed_body() {
  
  ::mavsdk::rpc::mocap::SpeedBody* temp = speed_body_;
  speed_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::SpeedBody* Odometry::unsafe_arena_release_speed_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.speed_body)
  
  ::mavsdk::rpc::mocap::SpeedBody* temp = speed_body_;
  speed_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::SpeedBody* Odometry::_internal_mutable_speed_body() {
  
  if (speed_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::SpeedBody>(GetArenaForAllocation());
    speed_body_ = p;
  }
  return speed_body_;
}
inline ::mavsdk::rpc::mocap::SpeedBody* Odometry::mutable_speed_body() {
  ::mavsdk::rpc::mocap::SpeedBody* _msg = _internal_mutable_speed_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.speed_body)
  return _msg;
}
inline void Odometry::set_allocated_speed_body(::mavsdk::rpc::mocap::SpeedBody* speed_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete speed_body_;
  }
  if (speed_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speed_body);
    if (message_arena != submessage_arena) {
      speed_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_body, submessage_arena);
    }
    
  } else {
    
  }
  speed_body_ = speed_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.speed_body)
}

// .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
inline bool Odometry::_internal_has_angular_velocity_body() const {
  return this != internal_default_instance() && angular_velocity_body_ != nullptr;
}
inline bool Odometry::has_angular_velocity_body() const {
  return _internal_has_angular_velocity_body();
}
inline void Odometry::clear_angular_velocity_body() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_body_ != nullptr) {
    delete angular_velocity_body_;
  }
  angular_velocity_body_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::AngularVelocityBody& Odometry::_internal_angular_velocity_body() const {
  const ::mavsdk::rpc::mocap::AngularVelocityBody* p = angular_velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::AngularVelocityBody&>(
      ::mavsdk::rpc::mocap::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::AngularVelocityBody& Odometry::angular_velocity_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
  return _internal_angular_velocity_body();
}
inline void Odometry::unsafe_arena_set_allocated_angular_velocity_body(
    ::mavsdk::rpc::mocap::AngularVelocityBody* angular_velocity_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_body_);
  }
  angular_velocity_body_ = angular_velocity_body;
  if (angular_velocity_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
}
inline ::mavsdk::rpc::mocap::AngularVelocityBody* Odometry::release_angular_velocity_body() {
  
  ::mavsdk::rpc::mocap::AngularVelocityBody* temp = angular_velocity_body_;
  angular_velocity_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::AngularVelocityBody* Odometry::unsafe_arena_release_angular_velocity_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
  
  ::mavsdk::rpc::mocap::AngularVelocityBody* temp = angular_velocity_body_;
  angular_velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::AngularVelocityBody* Odometry::_internal_mutable_angular_velocity_body() {
  
  if (angular_velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::AngularVelocityBody>(GetArenaForAllocation());
    angular_velocity_body_ = p;
  }
  return angular_velocity_body_;
}
inline ::mavsdk::rpc::mocap::AngularVelocityBody* Odometry::mutable_angular_velocity_body() {
  ::mavsdk::rpc::mocap::AngularVelocityBody* _msg = _internal_mutable_angular_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
  return _msg;
}
inline void Odometry::set_allocated_angular_velocity_body(::mavsdk::rpc::mocap::AngularVelocityBody* angular_velocity_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_body_;
  }
  if (angular_velocity_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_velocity_body);
    if (message_arena != submessage_arena) {
      angular_velocity_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_body, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_body_ = angular_velocity_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
}

// .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
inline bool Odometry::_internal_has_pose_covariance() const {
  return this != internal_default_instance() && pose_covariance_ != nullptr;
}
inline bool Odometry::has_pose_covariance() const {
  return _internal_has_pose_covariance();
}
inline void Odometry::clear_pose_covariance() {
  if (GetArenaForAllocation() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::Covariance& Odometry::_internal_pose_covariance() const {
  const ::mavsdk::rpc::mocap::Covariance* p = pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Covariance&>(
      ::mavsdk::rpc::mocap::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Covariance& Odometry::pose_covariance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.pose_covariance)
  return _internal_pose_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_pose_covariance(
    ::mavsdk::rpc::mocap::Covariance* pose_covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_covariance_);
  }
  pose_covariance_ = pose_covariance;
  if (pose_covariance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.pose_covariance)
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::release_pose_covariance() {
  
  ::mavsdk::rpc::mocap::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::unsafe_arena_release_pose_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.pose_covariance)
  
  ::mavsdk::rpc::mocap::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::_internal_mutable_pose_covariance() {
  
  if (pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(GetArenaForAllocation());
    pose_covariance_ = p;
  }
  return pose_covariance_;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::mutable_pose_covariance() {
  ::mavsdk::rpc::mocap::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.pose_covariance)
  return _msg;
}
inline void Odometry::set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* pose_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_covariance_;
  }
  if (pose_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose_covariance);
    if (message_arena != submessage_arena) {
      pose_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_covariance, submessage_arena);
    }
    
  } else {
    
  }
  pose_covariance_ = pose_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.pose_covariance)
}

// .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
inline bool Odometry::_internal_has_velocity_covariance() const {
  return this != internal_default_instance() && velocity_covariance_ != nullptr;
}
inline bool Odometry::has_velocity_covariance() const {
  return _internal_has_velocity_covariance();
}
inline void Odometry::clear_velocity_covariance() {
  if (GetArenaForAllocation() == nullptr && velocity_covariance_ != nullptr) {
    delete velocity_covariance_;
  }
  velocity_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::mocap::Covariance& Odometry::_internal_velocity_covariance() const {
  const ::mavsdk::rpc::mocap::Covariance* p = velocity_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Covariance&>(
      ::mavsdk::rpc::mocap::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Covariance& Odometry::velocity_covariance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.velocity_covariance)
  return _internal_velocity_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_velocity_covariance(
    ::mavsdk::rpc::mocap::Covariance* velocity_covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_covariance_);
  }
  velocity_covariance_ = velocity_covariance;
  if (velocity_covariance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.velocity_covariance)
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::release_velocity_covariance() {
  
  ::mavsdk::rpc::mocap::Covariance* temp = velocity_covariance_;
  velocity_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::unsafe_arena_release_velocity_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.velocity_covariance)
  
  ::mavsdk::rpc::mocap::Covariance* temp = velocity_covariance_;
  velocity_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::_internal_mutable_velocity_covariance() {
  
  if (velocity_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(GetArenaForAllocation());
    velocity_covariance_ = p;
  }
  return velocity_covariance_;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::mutable_velocity_covariance() {
  ::mavsdk::rpc::mocap::Covariance* _msg = _internal_mutable_velocity_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.velocity_covariance)
  return _msg;
}
inline void Odometry::set_allocated_velocity_covariance(::mavsdk::rpc::mocap::Covariance* velocity_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_covariance_;
  }
  if (velocity_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_covariance);
    if (message_arena != submessage_arena) {
      velocity_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_covariance, submessage_arena);
    }
    
  } else {
    
  }
  velocity_covariance_ = velocity_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.velocity_covariance)
}

// -------------------------------------------------------------------

// MocapResult

// .mavsdk.rpc.mocap.MocapResult.Result result = 1;
inline void MocapResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::mocap::MocapResult_Result MocapResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::mocap::MocapResult_Result >(result_);
}
inline ::mavsdk::rpc::mocap::MocapResult_Result MocapResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.MocapResult.result)
  return _internal_result();
}
inline void MocapResult::_internal_set_result(::mavsdk::rpc::mocap::MocapResult_Result value) {
  
  result_ = value;
}
inline void MocapResult::set_result(::mavsdk::rpc::mocap::MocapResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.MocapResult.result)
}

// string result_str = 2;
inline void MocapResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& MocapResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.MocapResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MocapResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.MocapResult.result_str)
}
inline std::string* MocapResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.MocapResult.result_str)
  return _s;
}
inline const std::string& MocapResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void MocapResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* MocapResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* MocapResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.MocapResult.result_str)
  return result_str_.Release();
}
inline void MocapResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.MocapResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::mocap::Odometry_MavFrame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mocap::Odometry_MavFrame>() {
  return ::mavsdk::rpc::mocap::Odometry_MavFrame_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::mocap::MocapResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mocap::MocapResult_Result>() {
  return ::mavsdk::rpc::mocap::MocapResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mocap_2fmocap_2eproto
