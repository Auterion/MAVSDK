// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: obstacle_avoidance/obstacle_avoidance.proto

#include "obstacle_avoidance/obstacle_avoidance.pb.h"
#include "obstacle_avoidance/obstacle_avoidance.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance {

static const char* ObstacleAvoidanceService_method_names[] = {
  "/mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceService/Start",
  "/mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceService/Stop",
  "/mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceService/Restart",
  "/mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceService/StateEnable",
  "/mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceService/StateDisable",
};

std::unique_ptr< ObstacleAvoidanceService::Stub> ObstacleAvoidanceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ObstacleAvoidanceService::Stub> stub(new ObstacleAvoidanceService::Stub(channel, options));
  return stub;
}

ObstacleAvoidanceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Start_(ObstacleAvoidanceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(ObstacleAvoidanceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Restart_(ObstacleAvoidanceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateEnable_(ObstacleAvoidanceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateDisable_(ObstacleAvoidanceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ObstacleAvoidanceService::Stub::Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::mavsdk::rpc::obstacle_avoidance::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Start_, context, request, response);
}

void ObstacleAvoidanceService::Stub::async::Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::mavsdk::rpc::obstacle_avoidance::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void ObstacleAvoidanceService::Stub::async::Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StartResponse>* ObstacleAvoidanceService::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::obstacle_avoidance::StartResponse, ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StartResponse>* ObstacleAvoidanceService::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ObstacleAvoidanceService::Stub::Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::mavsdk::rpc::obstacle_avoidance::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void ObstacleAvoidanceService::Stub::async::Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::mavsdk::rpc::obstacle_avoidance::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void ObstacleAvoidanceService::Stub::async::Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StopResponse>* ObstacleAvoidanceService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::obstacle_avoidance::StopResponse, ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StopResponse>* ObstacleAvoidanceService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ObstacleAvoidanceService::Stub::Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::mavsdk::rpc::obstacle_avoidance::RestartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Restart_, context, request, response);
}

void ObstacleAvoidanceService::Stub::async::Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::mavsdk::rpc::obstacle_avoidance::RestartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Restart_, context, request, response, std::move(f));
}

void ObstacleAvoidanceService::Stub::async::Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Restart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* ObstacleAvoidanceService::Stub::PrepareAsyncRestartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::obstacle_avoidance::RestartResponse, ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Restart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* ObstacleAvoidanceService::Stub::AsyncRestartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRestartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ObstacleAvoidanceService::Stub::StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StateEnable_, context, request, response);
}

void ObstacleAvoidanceService::Stub::async::StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StateEnable_, context, request, response, std::move(f));
}

void ObstacleAvoidanceService::Stub::async::StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StateEnable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* ObstacleAvoidanceService::Stub::PrepareAsyncStateEnableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse, ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StateEnable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* ObstacleAvoidanceService::Stub::AsyncStateEnableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStateEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ObstacleAvoidanceService::Stub::StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StateDisable_, context, request, response);
}

void ObstacleAvoidanceService::Stub::async::StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StateDisable_, context, request, response, std::move(f));
}

void ObstacleAvoidanceService::Stub::async::StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StateDisable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* ObstacleAvoidanceService::Stub::PrepareAsyncStateDisableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse, ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StateDisable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* ObstacleAvoidanceService::Stub::AsyncStateDisableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStateDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

ObstacleAvoidanceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObstacleAvoidanceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObstacleAvoidanceService::Service, ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::mavsdk::rpc::obstacle_avoidance::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ObstacleAvoidanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::obstacle_avoidance::StartRequest* req,
             ::mavsdk::rpc::obstacle_avoidance::StartResponse* resp) {
               return service->Start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObstacleAvoidanceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObstacleAvoidanceService::Service, ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::mavsdk::rpc::obstacle_avoidance::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ObstacleAvoidanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::obstacle_avoidance::StopRequest* req,
             ::mavsdk::rpc::obstacle_avoidance::StopResponse* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObstacleAvoidanceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObstacleAvoidanceService::Service, ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::mavsdk::rpc::obstacle_avoidance::RestartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ObstacleAvoidanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* req,
             ::mavsdk::rpc::obstacle_avoidance::RestartResponse* resp) {
               return service->Restart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObstacleAvoidanceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObstacleAvoidanceService::Service, ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ObstacleAvoidanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* req,
             ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* resp) {
               return service->StateEnable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObstacleAvoidanceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObstacleAvoidanceService::Service, ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ObstacleAvoidanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* req,
             ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* resp) {
               return service->StateDisable(ctx, req, resp);
             }, this)));
}

ObstacleAvoidanceService::Service::~Service() {
}

::grpc::Status ObstacleAvoidanceService::Service::Start(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ObstacleAvoidanceService::Service::Stop(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ObstacleAvoidanceService::Service::Restart(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ObstacleAvoidanceService::Service::StateEnable(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ObstacleAvoidanceService::Service::StateDisable(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace obstacle_avoidance

