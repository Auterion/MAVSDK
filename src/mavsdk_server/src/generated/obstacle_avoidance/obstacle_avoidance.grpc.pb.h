// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: obstacle_avoidance/obstacle_avoidance.proto
#ifndef GRPC_obstacle_5favoidance_2fobstacle_5favoidance_2eproto__INCLUDED
#define GRPC_obstacle_5favoidance_2fobstacle_5favoidance_2eproto__INCLUDED

#include "obstacle_avoidance/obstacle_avoidance.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance {

//
// Plugin to manage and control obstacle avoidance services from the ground.
//
// Currently a single obstacle avoidance service instance is supported which
// needs to have component ID MAV_COMP_ID_OBSTACLE_AVOIDANCE.
//
// Note also that application/service specific configurations should live in
// the server application layer, as they are not defined at the MAVLink level.
class ObstacleAvoidanceService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Start obstacle avoidance service.
    virtual ::grpc::Status Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StartResponse>> AsyncStart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StartResponse>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StartResponse>> PrepareAsyncStart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StartResponse>>(PrepareAsyncStartRaw(context, request, cq));
    }
    //
    // Stop obstacle avoidance service.
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    //
    // Restart obstacle avoidance service.
    virtual ::grpc::Status Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>> AsyncRestart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>>(AsyncRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>> PrepareAsyncRestart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>>(PrepareAsyncRestartRaw(context, request, cq));
    }
    //
    // Enable obstacle avoidance service (switch from idle to active state).
    virtual ::grpc::Status StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>> AsyncStateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>>(AsyncStateEnableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>> PrepareAsyncStateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>>(PrepareAsyncStateEnableRaw(context, request, cq));
    }
    //
    // Disable obstacle avoidance service (switch from active to idle state).
    virtual ::grpc::Status StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>> AsyncStateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>>(AsyncStateDisableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>> PrepareAsyncStateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>>(PrepareAsyncStateDisableRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Start obstacle avoidance service.
      virtual void Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Stop obstacle avoidance service.
      virtual void Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Restart obstacle avoidance service.
      virtual void Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Enable obstacle avoidance service (switch from idle to active state).
      virtual void StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Disable obstacle avoidance service (switch from active to idle state).
      virtual void StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StartResponse>* AsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StartResponse>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* AsyncRestartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* PrepareAsyncRestartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* AsyncStateEnableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* PrepareAsyncStateEnableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* AsyncStateDisableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* PrepareAsyncStateDisableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StartResponse>> AsyncStart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StartResponse>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StartResponse>> PrepareAsyncStart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StartResponse>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>> AsyncRestart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>>(AsyncRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>> PrepareAsyncRestart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>>(PrepareAsyncRestartRaw(context, request, cq));
    }
    ::grpc::Status StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>> AsyncStateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>>(AsyncStateEnableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>> PrepareAsyncStateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>>(PrepareAsyncStateEnableRaw(context, request, cq));
    }
    ::grpc::Status StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>> AsyncStateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>>(AsyncStateDisableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>> PrepareAsyncStateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>>(PrepareAsyncStateDisableRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response, std::function<void(::grpc::Status)>) override;
      void Restart(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response, std::function<void(::grpc::Status)>) override;
      void StateEnable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response, std::function<void(::grpc::Status)>) override;
      void StateDisable(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StartResponse>* AsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StartResponse>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* AsyncRestartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* PrepareAsyncRestartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* AsyncStateEnableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* PrepareAsyncStateEnableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* AsyncStateDisableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* PrepareAsyncStateDisableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_Restart_;
    const ::grpc::internal::RpcMethod rpcmethod_StateEnable_;
    const ::grpc::internal::RpcMethod rpcmethod_StateDisable_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Start obstacle avoidance service.
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response);
    //
    // Stop obstacle avoidance service.
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response);
    //
    // Restart obstacle avoidance service.
    virtual ::grpc::Status Restart(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response);
    //
    // Enable obstacle avoidance service (switch from idle to active state).
    virtual ::grpc::Status StateEnable(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response);
    //
    // Disable obstacle avoidance service (switch from active to idle state).
    virtual ::grpc::Status StateDisable(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::obstacle_avoidance::StartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::obstacle_avoidance::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Restart() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestart(::grpc::ServerContext* context, ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StateEnable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StateEnable() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StateEnable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateEnable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStateEnable(::grpc::ServerContext* context, ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StateDisable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StateDisable() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StateDisable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateDisable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStateDisable(::grpc::ServerContext* context, ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Start<WithAsyncMethod_Stop<WithAsyncMethod_Restart<WithAsyncMethod_StateEnable<WithAsyncMethod_StateDisable<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Start() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::mavsdk::rpc::obstacle_avoidance::StartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* request, ::mavsdk::rpc::obstacle_avoidance::StartResponse* response) { return this->Start(context, request, response); }));}
    void SetMessageAllocatorFor_Start(
        ::grpc::MessageAllocator< ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::mavsdk::rpc::obstacle_avoidance::StartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::mavsdk::rpc::obstacle_avoidance::StartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Start(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::mavsdk::rpc::obstacle_avoidance::StopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* request, ::mavsdk::rpc::obstacle_avoidance::StopResponse* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::MessageAllocator< ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::mavsdk::rpc::obstacle_avoidance::StopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::mavsdk::rpc::obstacle_avoidance::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Restart() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::mavsdk::rpc::obstacle_avoidance::RestartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* request, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* response) { return this->Restart(context, request, response); }));}
    void SetMessageAllocatorFor_Restart(
        ::grpc::MessageAllocator< ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::mavsdk::rpc::obstacle_avoidance::RestartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Restart(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StateEnable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StateEnable() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* response) { return this->StateEnable(context, request, response); }));}
    void SetMessageAllocatorFor_StateEnable(
        ::grpc::MessageAllocator< ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StateEnable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateEnable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StateEnable(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StateDisable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StateDisable() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* request, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* response) { return this->StateDisable(context, request, response); }));}
    void SetMessageAllocatorFor_StateDisable(
        ::grpc::MessageAllocator< ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StateDisable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateDisable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StateDisable(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Start<WithCallbackMethod_Stop<WithCallbackMethod_Restart<WithCallbackMethod_StateEnable<WithCallbackMethod_StateDisable<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Restart() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StateEnable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StateEnable() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StateEnable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateEnable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StateDisable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StateDisable() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StateDisable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateDisable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Restart() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StateEnable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StateEnable() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StateEnable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateEnable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStateEnable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StateDisable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StateDisable() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StateDisable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateDisable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStateDisable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Start() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Start(context, request, response); }));
    }
    ~WithRawCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Restart() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Restart(context, request, response); }));
    }
    ~WithRawCallbackMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Restart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StateEnable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StateEnable() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StateEnable(context, request, response); }));
    }
    ~WithRawCallbackMethod_StateEnable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateEnable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StateEnable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StateDisable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StateDisable() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StateDisable(context, request, response); }));
    }
    ~WithRawCallbackMethod_StateDisable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StateDisable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StateDisable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::mavsdk::rpc::obstacle_avoidance::StartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::obstacle_avoidance::StartRequest, ::mavsdk::rpc::obstacle_avoidance::StartResponse>* streamer) {
                       return this->StreamedStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::obstacle_avoidance::StartRequest,::mavsdk::rpc::obstacle_avoidance::StartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::mavsdk::rpc::obstacle_avoidance::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::obstacle_avoidance::StopRequest, ::mavsdk::rpc::obstacle_avoidance::StopResponse>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StopRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::obstacle_avoidance::StopRequest,::mavsdk::rpc::obstacle_avoidance::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Restart() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::mavsdk::rpc::obstacle_avoidance::RestartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::obstacle_avoidance::RestartRequest, ::mavsdk::rpc::obstacle_avoidance::RestartResponse>* streamer) {
                       return this->StreamedRestart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::RestartRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::obstacle_avoidance::RestartRequest,::mavsdk::rpc::obstacle_avoidance::RestartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StateEnable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StateEnable() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* streamer) {
                       return this->StreamedStateEnable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StateEnable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StateEnable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStateEnable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest,::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StateDisable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StateDisable() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* streamer) {
                       return this->StreamedStateDisable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StateDisable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StateDisable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* /*request*/, ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStateDisable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest,::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_Restart<WithStreamedUnaryMethod_StateEnable<WithStreamedUnaryMethod_StateDisable<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_Restart<WithStreamedUnaryMethod_StateEnable<WithStreamedUnaryMethod_StateDisable<Service > > > > > StreamedService;
};

}  // namespace obstacle_avoidance
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_obstacle_5favoidance_2fobstacle_5favoidance_2eproto__INCLUDED
