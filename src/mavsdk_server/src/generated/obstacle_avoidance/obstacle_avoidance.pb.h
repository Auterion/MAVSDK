// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_avoidance/obstacle_avoidance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_2fobstacle_5favoidance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_2fobstacle_5favoidance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacle_5favoidance_2fobstacle_5favoidance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance {
class ObstacleAvoidanceResult;
class ObstacleAvoidanceResultDefaultTypeInternal;
extern ObstacleAvoidanceResultDefaultTypeInternal _ObstacleAvoidanceResult_default_instance_;
class RestartRequest;
class RestartRequestDefaultTypeInternal;
extern RestartRequestDefaultTypeInternal _RestartRequest_default_instance_;
class RestartResponse;
class RestartResponseDefaultTypeInternal;
extern RestartResponseDefaultTypeInternal _RestartResponse_default_instance_;
class StartRequest;
class StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StartResponse;
class StartResponseDefaultTypeInternal;
extern StartResponseDefaultTypeInternal _StartResponse_default_instance_;
class StateDisableRequest;
class StateDisableRequestDefaultTypeInternal;
extern StateDisableRequestDefaultTypeInternal _StateDisableRequest_default_instance_;
class StateDisableResponse;
class StateDisableResponseDefaultTypeInternal;
extern StateDisableResponseDefaultTypeInternal _StateDisableResponse_default_instance_;
class StateEnableRequest;
class StateEnableRequestDefaultTypeInternal;
extern StateEnableRequestDefaultTypeInternal _StateEnableRequest_default_instance_;
class StateEnableResponse;
class StateEnableResponseDefaultTypeInternal;
extern StateEnableResponseDefaultTypeInternal _StateEnableResponse_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace obstacle_avoidance
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::RestartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::RestartRequest>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::RestartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::RestartResponse>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::StartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::StartRequest>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::StartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::StartResponse>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::StateDisableRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::StateDisableRequest>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::StateDisableResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::StateDisableResponse>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::StateEnableRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::StateEnableRequest>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::StateEnableResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::StateEnableResponse>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::StopRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::StopRequest>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance::StopResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::StopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance {

enum ObstacleAvoidanceResult_Result : int {
  ObstacleAvoidanceResult_Result_RESULT_UNKNOWN = 0,
  ObstacleAvoidanceResult_Result_RESULT_SUCCESS = 1,
  ObstacleAvoidanceResult_Result_RESULT_NO_SYSTEM = 2,
  ObstacleAvoidanceResult_Result_RESULT_CONNECTION_ERROR = 3,
  ObstacleAvoidanceResult_Result_RESULT_BUSY = 4,
  ObstacleAvoidanceResult_Result_RESULT_COMMAND_DENIED = 5,
  ObstacleAvoidanceResult_Result_RESULT_TIMEOUT = 8,
  ObstacleAvoidanceResult_Result_ObstacleAvoidanceResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ObstacleAvoidanceResult_Result_ObstacleAvoidanceResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ObstacleAvoidanceResult_Result_IsValid(int value);
constexpr ObstacleAvoidanceResult_Result ObstacleAvoidanceResult_Result_Result_MIN = ObstacleAvoidanceResult_Result_RESULT_UNKNOWN;
constexpr ObstacleAvoidanceResult_Result ObstacleAvoidanceResult_Result_Result_MAX = ObstacleAvoidanceResult_Result_RESULT_TIMEOUT;
constexpr int ObstacleAvoidanceResult_Result_Result_ARRAYSIZE = ObstacleAvoidanceResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleAvoidanceResult_Result_descriptor();
template<typename T>
inline const std::string& ObstacleAvoidanceResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleAvoidanceResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleAvoidanceResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleAvoidanceResult_Result_descriptor(), enum_t_value);
}
inline bool ObstacleAvoidanceResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstacleAvoidanceResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleAvoidanceResult_Result>(
    ObstacleAvoidanceResult_Result_descriptor(), name, value);
}
// ===================================================================

class StartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  virtual ~StartRequest();

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return CreateMaybeMessage<StartRequest>(nullptr);
  }

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartRequest& from);
  void MergeFrom(const StartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class StartResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.StartResponse) */ {
 public:
  inline StartResponse() : StartResponse(nullptr) {}
  virtual ~StartResponse();

  StartResponse(const StartResponse& from);
  StartResponse(StartResponse&& from) noexcept
    : StartResponse() {
    *this = ::std::move(from);
  }

  inline StartResponse& operator=(const StartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResponse& operator=(StartResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartResponse* internal_default_instance() {
    return reinterpret_cast<const StartResponse*>(
               &_StartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartResponse& a, StartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartResponse* New() const final {
    return CreateMaybeMessage<StartResponse>(nullptr);
  }

  StartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartResponse& from);
  void MergeFrom(const StartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.StartResponse";
  }
  protected:
  explicit StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* release_result();
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* mutable_result();
  void set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  private:
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& _internal_result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.StartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class StopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class StopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* release_result();
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* mutable_result();
  void set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  private:
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& _internal_result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class RestartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.RestartRequest) */ {
 public:
  inline RestartRequest() : RestartRequest(nullptr) {}
  virtual ~RestartRequest();

  RestartRequest(const RestartRequest& from);
  RestartRequest(RestartRequest&& from) noexcept
    : RestartRequest() {
    *this = ::std::move(from);
  }

  inline RestartRequest& operator=(const RestartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartRequest& operator=(RestartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartRequest* internal_default_instance() {
    return reinterpret_cast<const RestartRequest*>(
               &_RestartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RestartRequest& a, RestartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartRequest* New() const final {
    return CreateMaybeMessage<RestartRequest>(nullptr);
  }

  RestartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestartRequest& from);
  void MergeFrom(const RestartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.RestartRequest";
  }
  protected:
  explicit RestartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.RestartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class RestartResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.RestartResponse) */ {
 public:
  inline RestartResponse() : RestartResponse(nullptr) {}
  virtual ~RestartResponse();

  RestartResponse(const RestartResponse& from);
  RestartResponse(RestartResponse&& from) noexcept
    : RestartResponse() {
    *this = ::std::move(from);
  }

  inline RestartResponse& operator=(const RestartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartResponse& operator=(RestartResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartResponse* internal_default_instance() {
    return reinterpret_cast<const RestartResponse*>(
               &_RestartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RestartResponse& a, RestartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartResponse* New() const final {
    return CreateMaybeMessage<RestartResponse>(nullptr);
  }

  RestartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestartResponse& from);
  void MergeFrom(const RestartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.RestartResponse";
  }
  protected:
  explicit RestartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* release_result();
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* mutable_result();
  void set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  private:
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& _internal_result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.RestartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class StateEnableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.StateEnableRequest) */ {
 public:
  inline StateEnableRequest() : StateEnableRequest(nullptr) {}
  virtual ~StateEnableRequest();

  StateEnableRequest(const StateEnableRequest& from);
  StateEnableRequest(StateEnableRequest&& from) noexcept
    : StateEnableRequest() {
    *this = ::std::move(from);
  }

  inline StateEnableRequest& operator=(const StateEnableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateEnableRequest& operator=(StateEnableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateEnableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateEnableRequest* internal_default_instance() {
    return reinterpret_cast<const StateEnableRequest*>(
               &_StateEnableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StateEnableRequest& a, StateEnableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StateEnableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateEnableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateEnableRequest* New() const final {
    return CreateMaybeMessage<StateEnableRequest>(nullptr);
  }

  StateEnableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateEnableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateEnableRequest& from);
  void MergeFrom(const StateEnableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateEnableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.StateEnableRequest";
  }
  protected:
  explicit StateEnableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.StateEnableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class StateEnableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.StateEnableResponse) */ {
 public:
  inline StateEnableResponse() : StateEnableResponse(nullptr) {}
  virtual ~StateEnableResponse();

  StateEnableResponse(const StateEnableResponse& from);
  StateEnableResponse(StateEnableResponse&& from) noexcept
    : StateEnableResponse() {
    *this = ::std::move(from);
  }

  inline StateEnableResponse& operator=(const StateEnableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateEnableResponse& operator=(StateEnableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateEnableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateEnableResponse* internal_default_instance() {
    return reinterpret_cast<const StateEnableResponse*>(
               &_StateEnableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StateEnableResponse& a, StateEnableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StateEnableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateEnableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateEnableResponse* New() const final {
    return CreateMaybeMessage<StateEnableResponse>(nullptr);
  }

  StateEnableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateEnableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateEnableResponse& from);
  void MergeFrom(const StateEnableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateEnableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.StateEnableResponse";
  }
  protected:
  explicit StateEnableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* release_result();
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* mutable_result();
  void set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  private:
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& _internal_result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.StateEnableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class StateDisableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.StateDisableRequest) */ {
 public:
  inline StateDisableRequest() : StateDisableRequest(nullptr) {}
  virtual ~StateDisableRequest();

  StateDisableRequest(const StateDisableRequest& from);
  StateDisableRequest(StateDisableRequest&& from) noexcept
    : StateDisableRequest() {
    *this = ::std::move(from);
  }

  inline StateDisableRequest& operator=(const StateDisableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateDisableRequest& operator=(StateDisableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateDisableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateDisableRequest* internal_default_instance() {
    return reinterpret_cast<const StateDisableRequest*>(
               &_StateDisableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StateDisableRequest& a, StateDisableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StateDisableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateDisableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateDisableRequest* New() const final {
    return CreateMaybeMessage<StateDisableRequest>(nullptr);
  }

  StateDisableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateDisableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateDisableRequest& from);
  void MergeFrom(const StateDisableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateDisableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.StateDisableRequest";
  }
  protected:
  explicit StateDisableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.StateDisableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class StateDisableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.StateDisableResponse) */ {
 public:
  inline StateDisableResponse() : StateDisableResponse(nullptr) {}
  virtual ~StateDisableResponse();

  StateDisableResponse(const StateDisableResponse& from);
  StateDisableResponse(StateDisableResponse&& from) noexcept
    : StateDisableResponse() {
    *this = ::std::move(from);
  }

  inline StateDisableResponse& operator=(const StateDisableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateDisableResponse& operator=(StateDisableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateDisableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateDisableResponse* internal_default_instance() {
    return reinterpret_cast<const StateDisableResponse*>(
               &_StateDisableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StateDisableResponse& a, StateDisableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StateDisableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateDisableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateDisableResponse* New() const final {
    return CreateMaybeMessage<StateDisableResponse>(nullptr);
  }

  StateDisableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateDisableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateDisableResponse& from);
  void MergeFrom(const StateDisableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateDisableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.StateDisableResponse";
  }
  protected:
  explicit StateDisableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* release_result();
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* mutable_result();
  void set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  private:
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& _internal_result() const;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result);
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.StateDisableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// -------------------------------------------------------------------

class ObstacleAvoidanceResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult) */ {
 public:
  inline ObstacleAvoidanceResult() : ObstacleAvoidanceResult(nullptr) {}
  virtual ~ObstacleAvoidanceResult();

  ObstacleAvoidanceResult(const ObstacleAvoidanceResult& from);
  ObstacleAvoidanceResult(ObstacleAvoidanceResult&& from) noexcept
    : ObstacleAvoidanceResult() {
    *this = ::std::move(from);
  }

  inline ObstacleAvoidanceResult& operator=(const ObstacleAvoidanceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleAvoidanceResult& operator=(ObstacleAvoidanceResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleAvoidanceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleAvoidanceResult* internal_default_instance() {
    return reinterpret_cast<const ObstacleAvoidanceResult*>(
               &_ObstacleAvoidanceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ObstacleAvoidanceResult& a, ObstacleAvoidanceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleAvoidanceResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleAvoidanceResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleAvoidanceResult* New() const final {
    return CreateMaybeMessage<ObstacleAvoidanceResult>(nullptr);
  }

  ObstacleAvoidanceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleAvoidanceResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleAvoidanceResult& from);
  void MergeFrom(const ObstacleAvoidanceResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleAvoidanceResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult";
  }
  protected:
  explicit ObstacleAvoidanceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto);
    return ::descriptor_table_obstacle_5favoidance_2fobstacle_5favoidance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObstacleAvoidanceResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    ObstacleAvoidanceResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    ObstacleAvoidanceResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    ObstacleAvoidanceResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    ObstacleAvoidanceResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    ObstacleAvoidanceResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    ObstacleAvoidanceResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT =
    ObstacleAvoidanceResult_Result_RESULT_TIMEOUT;
  static inline bool Result_IsValid(int value) {
    return ObstacleAvoidanceResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ObstacleAvoidanceResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ObstacleAvoidanceResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ObstacleAvoidanceResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ObstacleAvoidanceResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ObstacleAvoidanceResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return ObstacleAvoidanceResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result result() const;
  void set_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result value);
  private:
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_2fobstacle_5favoidance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartRequest

// -------------------------------------------------------------------

// StartResponse

// .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
inline bool StartResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StartResponse::has_result() const {
  return _internal_has_result();
}
inline void StartResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& StartResponse::_internal_result() const {
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult*>(
      &::mavsdk::rpc::obstacle_avoidance::_ObstacleAvoidanceResult_default_instance_);
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& StartResponse::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance.StartResponse.result)
  return _internal_result();
}
inline void StartResponse::unsafe_arena_set_allocated_result(
    ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.obstacle_avoidance.StartResponse.result)
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StartResponse::release_result() {
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StartResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.obstacle_avoidance.StartResponse.result)
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StartResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StartResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.obstacle_avoidance.StartResponse.result)
  return _internal_mutable_result();
}
inline void StartResponse::set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.obstacle_avoidance.StartResponse.result)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

// .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
inline bool StopResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StopResponse::has_result() const {
  return _internal_has_result();
}
inline void StopResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& StopResponse::_internal_result() const {
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult*>(
      &::mavsdk::rpc::obstacle_avoidance::_ObstacleAvoidanceResult_default_instance_);
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& StopResponse::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance.StopResponse.result)
  return _internal_result();
}
inline void StopResponse::unsafe_arena_set_allocated_result(
    ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.obstacle_avoidance.StopResponse.result)
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StopResponse::release_result() {
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StopResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.obstacle_avoidance.StopResponse.result)
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StopResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StopResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.obstacle_avoidance.StopResponse.result)
  return _internal_mutable_result();
}
inline void StopResponse::set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.obstacle_avoidance.StopResponse.result)
}

// -------------------------------------------------------------------

// RestartRequest

// -------------------------------------------------------------------

// RestartResponse

// .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
inline bool RestartResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RestartResponse::has_result() const {
  return _internal_has_result();
}
inline void RestartResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& RestartResponse::_internal_result() const {
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult*>(
      &::mavsdk::rpc::obstacle_avoidance::_ObstacleAvoidanceResult_default_instance_);
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& RestartResponse::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance.RestartResponse.result)
  return _internal_result();
}
inline void RestartResponse::unsafe_arena_set_allocated_result(
    ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.obstacle_avoidance.RestartResponse.result)
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* RestartResponse::release_result() {
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* RestartResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.obstacle_avoidance.RestartResponse.result)
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* RestartResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* RestartResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.obstacle_avoidance.RestartResponse.result)
  return _internal_mutable_result();
}
inline void RestartResponse::set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.obstacle_avoidance.RestartResponse.result)
}

// -------------------------------------------------------------------

// StateEnableRequest

// -------------------------------------------------------------------

// StateEnableResponse

// .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
inline bool StateEnableResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StateEnableResponse::has_result() const {
  return _internal_has_result();
}
inline void StateEnableResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& StateEnableResponse::_internal_result() const {
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult*>(
      &::mavsdk::rpc::obstacle_avoidance::_ObstacleAvoidanceResult_default_instance_);
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& StateEnableResponse::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance.StateEnableResponse.result)
  return _internal_result();
}
inline void StateEnableResponse::unsafe_arena_set_allocated_result(
    ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.obstacle_avoidance.StateEnableResponse.result)
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StateEnableResponse::release_result() {
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StateEnableResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.obstacle_avoidance.StateEnableResponse.result)
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StateEnableResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StateEnableResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.obstacle_avoidance.StateEnableResponse.result)
  return _internal_mutable_result();
}
inline void StateEnableResponse::set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.obstacle_avoidance.StateEnableResponse.result)
}

// -------------------------------------------------------------------

// StateDisableRequest

// -------------------------------------------------------------------

// StateDisableResponse

// .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult result = 1;
inline bool StateDisableResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StateDisableResponse::has_result() const {
  return _internal_has_result();
}
inline void StateDisableResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& StateDisableResponse::_internal_result() const {
  const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult*>(
      &::mavsdk::rpc::obstacle_avoidance::_ObstacleAvoidanceResult_default_instance_);
}
inline const ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult& StateDisableResponse::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance.StateDisableResponse.result)
  return _internal_result();
}
inline void StateDisableResponse::unsafe_arena_set_allocated_result(
    ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.obstacle_avoidance.StateDisableResponse.result)
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StateDisableResponse::release_result() {
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StateDisableResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.obstacle_avoidance.StateDisableResponse.result)
  
  ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StateDisableResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* StateDisableResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.obstacle_avoidance.StateDisableResponse.result)
  return _internal_mutable_result();
}
inline void StateDisableResponse::set_allocated_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.obstacle_avoidance.StateDisableResponse.result)
}

// -------------------------------------------------------------------

// ObstacleAvoidanceResult

// .mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult.Result result = 1;
inline void ObstacleAvoidanceResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result ObstacleAvoidanceResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result >(result_);
}
inline ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result ObstacleAvoidanceResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult.result)
  return _internal_result();
}
inline void ObstacleAvoidanceResult::_internal_set_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result value) {
  
  result_ = value;
}
inline void ObstacleAvoidanceResult::set_result(::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.obstacle_avoidance.ObstacleAvoidanceResult.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace obstacle_avoidance
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result>() {
  return ::mavsdk::rpc::obstacle_avoidance::ObstacleAvoidanceResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_2fobstacle_5favoidance_2eproto
