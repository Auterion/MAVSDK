// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: obstacle_avoidance_server/obstacle_avoidance_server.proto
#ifndef GRPC_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto__INCLUDED
#define GRPC_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto__INCLUDED

#include "obstacle_avoidance_server/obstacle_avoidance_server.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance_server {

//
// Companion computer/server side API to manage and control obstacle avoidance
// services.
//
// Currently a single obstacle avoidance service instance is supported which
// needs to have component ID MAV_COMP_ID_OBSTACLE_AVOIDANCE.
//
// Note also that application/service specific configurations should live in
// the application layer, as they are not defined at the MAVLink level.
class ObstacleAvoidanceServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.obstacle_avoidance_server.ObstacleAvoidanceServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Receive and process obstacle avoidance service control commands.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>> SubscribeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>>(SubscribeControlRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>> AsyncSubscribeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>>(AsyncSubscribeControlRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>> PrepareAsyncSubscribeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>>(PrepareAsyncSubscribeControlRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      // Receive and process obstacle avoidance service control commands.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeControl(::grpc::ClientContext* context, ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* reactor) = 0;
      #else
      virtual void SubscribeControl(::grpc::ClientContext* context, ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* SubscribeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* AsyncSubscribeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* PrepareAsyncSubscribeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>> SubscribeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>>(SubscribeControlRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>> AsyncSubscribeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>>(AsyncSubscribeControlRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>> PrepareAsyncSubscribeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>>(PrepareAsyncSubscribeControlRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeControl(::grpc::ClientContext* context, ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* reactor) override;
      #else
      void SubscribeControl(::grpc::ClientContext* context, ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* SubscribeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* AsyncSubscribeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* PrepareAsyncSubscribeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeControl_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Receive and process obstacle avoidance service control commands.
    virtual ::grpc::Status SubscribeControl(::grpc::ServerContext* context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeControl() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeControl(::grpc::ServerContext* context, ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeControl<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest, ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* request) { return this->SubscribeControl(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* SubscribeControl(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* SubscribeControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SubscribeControl<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SubscribeControl<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeControl() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeControl() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeControl(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeControl() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest, ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest, ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* streamer) {
                       return this->StreamedSubscribeControl(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeControl(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest,::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeControl<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeControl<Service > StreamedService;
};

}  // namespace obstacle_avoidance_server
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto__INCLUDED
