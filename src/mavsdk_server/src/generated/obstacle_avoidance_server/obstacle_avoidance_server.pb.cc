// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_avoidance_server/obstacle_avoidance_server.proto

#include "obstacle_avoidance_server/obstacle_avoidance_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlType_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance_server {
class SubscribeControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeControlRequest> _instance;
} _SubscribeControlRequest_default_instance_;
class SubscribeControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeControlResponse> _instance;
} _SubscribeControlResponse_default_instance_;
class ControlTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlType> _instance;
} _ControlType_default_instance_;
}  // namespace obstacle_avoidance_server
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_ControlType_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::obstacle_avoidance_server::_ControlType_default_instance_;
    new (ptr) ::mavsdk::rpc::obstacle_avoidance_server::ControlType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlType_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlType_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeControlRequest_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::obstacle_avoidance_server::_SubscribeControlRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeControlRequest_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeControlRequest_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeControlResponse_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::obstacle_avoidance_server::_SubscribeControlResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeControlResponse_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeControlResponse_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto}, {
      &scc_info_ControlType_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse, control_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::obstacle_avoidance_server::ControlType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::obstacle_avoidance_server::ControlType, control_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::obstacle_avoidance_server::ControlType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::obstacle_avoidance_server::_SubscribeControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::obstacle_avoidance_server::_SubscribeControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::obstacle_avoidance_server::_ControlType_default_instance_),
};

const char descriptor_table_protodef_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9obstacle_avoidance_server/obstacle_avo"
  "idance_server.proto\022$mavsdk.rpc.obstacle"
  "_avoidance_server\"\031\n\027SubscribeControlReq"
  "uest\"c\n\030SubscribeControlResponse\022G\n\014cont"
  "rol_type\030\001 \001(\01321.mavsdk.rpc.obstacle_avo"
  "idance_server.ControlType\"\333\001\n\013ControlTyp"
  "e\022L\n\014control_type\030\001 \001(\01626.mavsdk.rpc.obs"
  "tacle_avoidance_server.ControlType.Type\""
  "~\n\004Type\022\023\n\017CONTROL_UNKNOWN\020\000\022\021\n\rCONTROL_"
  "START\020\001\022\020\n\014CONTROL_STOP\020\002\022\023\n\017CONTROL_RES"
  "TART\020\003\022\022\n\016CONTROL_ENABLE\020\004\022\023\n\017CONTROL_DI"
  "SABLE\020\0052\270\001\n\036ObstacleAvoidanceServerServi"
  "ce\022\225\001\n\020SubscribeControl\022=.mavsdk.rpc.obs"
  "tacle_avoidance_server.SubscribeControlR"
  "equest\032>.mavsdk.rpc.obstacle_avoidance_s"
  "erver.SubscribeControlResponse\"\0000\001BC\n#io"
  ".mavsdk.obstacle_avoidance_serverB\034Obsta"
  "cleAvoidanceServerProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto_sccs[3] = {
  &scc_info_ControlType_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.base,
  &scc_info_SubscribeControlRequest_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.base,
  &scc_info_SubscribeControlResponse_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto = {
  false, false, descriptor_table_protodef_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto, "obstacle_avoidance_server/obstacle_avoidance_server.proto", 711,
  &descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto_once, descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto_sccs, descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto::offsets,
  file_level_metadata_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto, 3, file_level_enum_descriptors_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto, file_level_service_descriptors_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto)), true);
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlType_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto);
  return file_level_enum_descriptors_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto[0];
}
bool ControlType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlType_Type ControlType::CONTROL_UNKNOWN;
constexpr ControlType_Type ControlType::CONTROL_START;
constexpr ControlType_Type ControlType::CONTROL_STOP;
constexpr ControlType_Type ControlType::CONTROL_RESTART;
constexpr ControlType_Type ControlType::CONTROL_ENABLE;
constexpr ControlType_Type ControlType::CONTROL_DISABLE;
constexpr ControlType_Type ControlType::Type_MIN;
constexpr ControlType_Type ControlType::Type_MAX;
constexpr int ControlType::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SubscribeControlRequest::InitAsDefaultInstance() {
}
class SubscribeControlRequest::_Internal {
 public:
};

SubscribeControlRequest::SubscribeControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
}
SubscribeControlRequest::SubscribeControlRequest(const SubscribeControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
}

void SubscribeControlRequest::SharedCtor() {
}

SubscribeControlRequest::~SubscribeControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeControlRequest::ArenaDtor(void* object) {
  SubscribeControlRequest* _this = reinterpret_cast< SubscribeControlRequest* >(object);
  (void)_this;
}
void SubscribeControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeControlRequest& SubscribeControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeControlRequest_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.base);
  return *internal_default_instance();
}


void SubscribeControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  return target;
}

size_t SubscribeControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
    MergeFrom(*source);
  }
}

void SubscribeControlRequest::MergeFrom(const SubscribeControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeControlRequest::CopyFrom(const SubscribeControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeControlRequest::IsInitialized() const {
  return true;
}

void SubscribeControlRequest::InternalSwap(SubscribeControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeControlResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::obstacle_avoidance_server::_SubscribeControlResponse_default_instance_._instance.get_mutable()->control_type_ = const_cast< ::mavsdk::rpc::obstacle_avoidance_server::ControlType*>(
      ::mavsdk::rpc::obstacle_avoidance_server::ControlType::internal_default_instance());
}
class SubscribeControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::obstacle_avoidance_server::ControlType& control_type(const SubscribeControlResponse* msg);
};

const ::mavsdk::rpc::obstacle_avoidance_server::ControlType&
SubscribeControlResponse::_Internal::control_type(const SubscribeControlResponse* msg) {
  return *msg->control_type_;
}
SubscribeControlResponse::SubscribeControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
}
SubscribeControlResponse::SubscribeControlResponse(const SubscribeControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control_type()) {
    control_type_ = new ::mavsdk::rpc::obstacle_avoidance_server::ControlType(*from.control_type_);
  } else {
    control_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
}

void SubscribeControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeControlResponse_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.base);
  control_type_ = nullptr;
}

SubscribeControlResponse::~SubscribeControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete control_type_;
}

void SubscribeControlResponse::ArenaDtor(void* object) {
  SubscribeControlResponse* _this = reinterpret_cast< SubscribeControlResponse* >(object);
  (void)_this;
}
void SubscribeControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeControlResponse& SubscribeControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeControlResponse_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.base);
  return *internal_default_instance();
}


void SubscribeControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && control_type_ != nullptr) {
    delete control_type_;
  }
  control_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.obstacle_avoidance_server.ControlType control_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.obstacle_avoidance_server.ControlType control_type = 1;
  if (this->has_control_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::control_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  return target;
}

size_t SubscribeControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.obstacle_avoidance_server.ControlType control_type = 1;
  if (this->has_control_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
    MergeFrom(*source);
  }
}

void SubscribeControlResponse::MergeFrom(const SubscribeControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_control_type()) {
    _internal_mutable_control_type()->::mavsdk::rpc::obstacle_avoidance_server::ControlType::MergeFrom(from._internal_control_type());
  }
}

void SubscribeControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeControlResponse::CopyFrom(const SubscribeControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeControlResponse::IsInitialized() const {
  return true;
}

void SubscribeControlResponse::InternalSwap(SubscribeControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(control_type_, other->control_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlType::InitAsDefaultInstance() {
}
class ControlType::_Internal {
 public:
};

ControlType::ControlType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.obstacle_avoidance_server.ControlType)
}
ControlType::ControlType(const ControlType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_type_ = from.control_type_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.obstacle_avoidance_server.ControlType)
}

void ControlType::SharedCtor() {
  control_type_ = 0;
}

ControlType::~ControlType() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlType::ArenaDtor(void* object) {
  ControlType* _this = reinterpret_cast< ControlType* >(object);
  (void)_this;
}
void ControlType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlType& ControlType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlType_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ControlType::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.obstacle_avoidance_server.ControlType.Type control_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_type(static_cast<::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.obstacle_avoidance_server.ControlType.Type control_type = 1;
  if (this->control_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_control_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  return target;
}

size_t ControlType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.obstacle_avoidance_server.ControlType.Type control_type = 1;
  if (this->control_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.obstacle_avoidance_server.ControlType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.obstacle_avoidance_server.ControlType)
    MergeFrom(*source);
  }
}

void ControlType::MergeFrom(const ControlType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.control_type() != 0) {
    _internal_set_control_type(from._internal_control_type());
  }
}

void ControlType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlType::CopyFrom(const ControlType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.obstacle_avoidance_server.ControlType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlType::IsInitialized() const {
  return true;
}

void ControlType::InternalSwap(ControlType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(control_type_, other->control_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace obstacle_avoidance_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::obstacle_avoidance_server::ControlType* Arena::CreateMaybeMessage< ::mavsdk::rpc::obstacle_avoidance_server::ControlType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::obstacle_avoidance_server::ControlType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
