// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_avoidance_server/obstacle_avoidance_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance_server {
class ControlType;
class ControlTypeDefaultTypeInternal;
extern ControlTypeDefaultTypeInternal _ControlType_default_instance_;
class SubscribeControlRequest;
class SubscribeControlRequestDefaultTypeInternal;
extern SubscribeControlRequestDefaultTypeInternal _SubscribeControlRequest_default_instance_;
class SubscribeControlResponse;
class SubscribeControlResponseDefaultTypeInternal;
extern SubscribeControlResponseDefaultTypeInternal _SubscribeControlResponse_default_instance_;
}  // namespace obstacle_avoidance_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::obstacle_avoidance_server::ControlType* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance_server::ControlType>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance_server {

enum ControlType_Type : int {
  ControlType_Type_CONTROL_UNKNOWN = 0,
  ControlType_Type_CONTROL_START = 1,
  ControlType_Type_CONTROL_STOP = 2,
  ControlType_Type_CONTROL_RESTART = 3,
  ControlType_Type_CONTROL_ENABLE = 4,
  ControlType_Type_CONTROL_DISABLE = 5,
  ControlType_Type_ControlType_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlType_Type_ControlType_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlType_Type_IsValid(int value);
constexpr ControlType_Type ControlType_Type_Type_MIN = ControlType_Type_CONTROL_UNKNOWN;
constexpr ControlType_Type ControlType_Type_Type_MAX = ControlType_Type_CONTROL_DISABLE;
constexpr int ControlType_Type_Type_ARRAYSIZE = ControlType_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlType_Type_descriptor();
template<typename T>
inline const std::string& ControlType_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlType_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlType_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlType_Type_descriptor(), enum_t_value);
}
inline bool ControlType_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlType_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlType_Type>(
    ControlType_Type_descriptor(), name, value);
}
// ===================================================================

class SubscribeControlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest) */ {
 public:
  inline SubscribeControlRequest() : SubscribeControlRequest(nullptr) {}
  virtual ~SubscribeControlRequest();

  SubscribeControlRequest(const SubscribeControlRequest& from);
  SubscribeControlRequest(SubscribeControlRequest&& from) noexcept
    : SubscribeControlRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeControlRequest& operator=(const SubscribeControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeControlRequest& operator=(SubscribeControlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeControlRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeControlRequest*>(
               &_SubscribeControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeControlRequest& a, SubscribeControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeControlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeControlRequest* New() const final {
    return CreateMaybeMessage<SubscribeControlRequest>(nullptr);
  }

  SubscribeControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeControlRequest& from);
  void MergeFrom(const SubscribeControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest";
  }
  protected:
  explicit SubscribeControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto);
    return ::descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeControlResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse) */ {
 public:
  inline SubscribeControlResponse() : SubscribeControlResponse(nullptr) {}
  virtual ~SubscribeControlResponse();

  SubscribeControlResponse(const SubscribeControlResponse& from);
  SubscribeControlResponse(SubscribeControlResponse&& from) noexcept
    : SubscribeControlResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeControlResponse& operator=(const SubscribeControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeControlResponse& operator=(SubscribeControlResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeControlResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeControlResponse*>(
               &_SubscribeControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubscribeControlResponse& a, SubscribeControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeControlResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeControlResponse* New() const final {
    return CreateMaybeMessage<SubscribeControlResponse>(nullptr);
  }

  SubscribeControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeControlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeControlResponse& from);
  void MergeFrom(const SubscribeControlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse";
  }
  protected:
  explicit SubscribeControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto);
    return ::descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlTypeFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance_server.ControlType control_type = 1;
  bool has_control_type() const;
  private:
  bool _internal_has_control_type() const;
  public:
  void clear_control_type();
  const ::mavsdk::rpc::obstacle_avoidance_server::ControlType& control_type() const;
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType* release_control_type();
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType* mutable_control_type();
  void set_allocated_control_type(::mavsdk::rpc::obstacle_avoidance_server::ControlType* control_type);
  private:
  const ::mavsdk::rpc::obstacle_avoidance_server::ControlType& _internal_control_type() const;
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType* _internal_mutable_control_type();
  public:
  void unsafe_arena_set_allocated_control_type(
      ::mavsdk::rpc::obstacle_avoidance_server::ControlType* control_type);
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType* unsafe_arena_release_control_type();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType* control_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ControlType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance_server.ControlType) */ {
 public:
  inline ControlType() : ControlType(nullptr) {}
  virtual ~ControlType();

  ControlType(const ControlType& from);
  ControlType(ControlType&& from) noexcept
    : ControlType() {
    *this = ::std::move(from);
  }

  inline ControlType& operator=(const ControlType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlType& operator=(ControlType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlType* internal_default_instance() {
    return reinterpret_cast<const ControlType*>(
               &_ControlType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControlType& a, ControlType& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlType* New() const final {
    return CreateMaybeMessage<ControlType>(nullptr);
  }

  ControlType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlType& from);
  void MergeFrom(const ControlType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance_server.ControlType";
  }
  protected:
  explicit ControlType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto);
    return ::descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ControlType_Type Type;
  static constexpr Type CONTROL_UNKNOWN =
    ControlType_Type_CONTROL_UNKNOWN;
  static constexpr Type CONTROL_START =
    ControlType_Type_CONTROL_START;
  static constexpr Type CONTROL_STOP =
    ControlType_Type_CONTROL_STOP;
  static constexpr Type CONTROL_RESTART =
    ControlType_Type_CONTROL_RESTART;
  static constexpr Type CONTROL_ENABLE =
    ControlType_Type_CONTROL_ENABLE;
  static constexpr Type CONTROL_DISABLE =
    ControlType_Type_CONTROL_DISABLE;
  static inline bool Type_IsValid(int value) {
    return ControlType_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ControlType_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ControlType_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ControlType_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ControlType_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ControlType_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ControlType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kControlTypeFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance_server.ControlType.Type control_type = 1;
  void clear_control_type();
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type control_type() const;
  void set_control_type(::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type value);
  private:
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type _internal_control_type() const;
  void _internal_set_control_type(::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance_server.ControlType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int control_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeControlRequest

// -------------------------------------------------------------------

// SubscribeControlResponse

// .mavsdk.rpc.obstacle_avoidance_server.ControlType control_type = 1;
inline bool SubscribeControlResponse::_internal_has_control_type() const {
  return this != internal_default_instance() && control_type_ != nullptr;
}
inline bool SubscribeControlResponse::has_control_type() const {
  return _internal_has_control_type();
}
inline void SubscribeControlResponse::clear_control_type() {
  if (GetArena() == nullptr && control_type_ != nullptr) {
    delete control_type_;
  }
  control_type_ = nullptr;
}
inline const ::mavsdk::rpc::obstacle_avoidance_server::ControlType& SubscribeControlResponse::_internal_control_type() const {
  const ::mavsdk::rpc::obstacle_avoidance_server::ControlType* p = control_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::obstacle_avoidance_server::ControlType*>(
      &::mavsdk::rpc::obstacle_avoidance_server::_ControlType_default_instance_);
}
inline const ::mavsdk::rpc::obstacle_avoidance_server::ControlType& SubscribeControlResponse::control_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse.control_type)
  return _internal_control_type();
}
inline void SubscribeControlResponse::unsafe_arena_set_allocated_control_type(
    ::mavsdk::rpc::obstacle_avoidance_server::ControlType* control_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_type_);
  }
  control_type_ = control_type;
  if (control_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse.control_type)
}
inline ::mavsdk::rpc::obstacle_avoidance_server::ControlType* SubscribeControlResponse::release_control_type() {
  
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType* temp = control_type_;
  control_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance_server::ControlType* SubscribeControlResponse::unsafe_arena_release_control_type() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse.control_type)
  
  ::mavsdk::rpc::obstacle_avoidance_server::ControlType* temp = control_type_;
  control_type_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance_server::ControlType* SubscribeControlResponse::_internal_mutable_control_type() {
  
  if (control_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance_server::ControlType>(GetArena());
    control_type_ = p;
  }
  return control_type_;
}
inline ::mavsdk::rpc::obstacle_avoidance_server::ControlType* SubscribeControlResponse::mutable_control_type() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse.control_type)
  return _internal_mutable_control_type();
}
inline void SubscribeControlResponse::set_allocated_control_type(::mavsdk::rpc::obstacle_avoidance_server::ControlType* control_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete control_type_;
  }
  if (control_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control_type);
    if (message_arena != submessage_arena) {
      control_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_type, submessage_arena);
    }
    
  } else {
    
  }
  control_type_ = control_type;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlResponse.control_type)
}

// -------------------------------------------------------------------

// ControlType

// .mavsdk.rpc.obstacle_avoidance_server.ControlType.Type control_type = 1;
inline void ControlType::clear_control_type() {
  control_type_ = 0;
}
inline ::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type ControlType::_internal_control_type() const {
  return static_cast< ::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type >(control_type_);
}
inline ::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type ControlType::control_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance_server.ControlType.control_type)
  return _internal_control_type();
}
inline void ControlType::_internal_set_control_type(::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type value) {
  
  control_type_ = value;
}
inline void ControlType::set_control_type(::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type value) {
  _internal_set_control_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.obstacle_avoidance_server.ControlType.control_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace obstacle_avoidance_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type>() {
  return ::mavsdk::rpc::obstacle_avoidance_server::ControlType_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto
