// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_avoidance_server/obstacle_avoidance_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance_server {
class Control;
struct ControlDefaultTypeInternal;
extern ControlDefaultTypeInternal _Control_default_instance_;
class ControlResponse;
struct ControlResponseDefaultTypeInternal;
extern ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;
class SubscribeControlRequest;
struct SubscribeControlRequestDefaultTypeInternal;
extern SubscribeControlRequestDefaultTypeInternal _SubscribeControlRequest_default_instance_;
}  // namespace obstacle_avoidance_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::obstacle_avoidance_server::Control* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance_server::Control>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance_server::ControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance_server::ControlResponse>(Arena*);
template<> ::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace obstacle_avoidance_server {

enum Control_ControlType : int {
  Control_ControlType_CONTROL_TYPE_UNKNOWN = 0,
  Control_ControlType_CONTROL_TYPE_START = 1,
  Control_ControlType_CONTROL_TYPE_STOP = 2,
  Control_ControlType_CONTROL_TYPE_RESTART = 3,
  Control_ControlType_CONTROL_TYPE_ENABLE = 4,
  Control_ControlType_CONTROL_TYPE_DISABLE = 5,
  Control_ControlType_Control_ControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Control_ControlType_Control_ControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Control_ControlType_IsValid(int value);
constexpr Control_ControlType Control_ControlType_ControlType_MIN = Control_ControlType_CONTROL_TYPE_UNKNOWN;
constexpr Control_ControlType Control_ControlType_ControlType_MAX = Control_ControlType_CONTROL_TYPE_DISABLE;
constexpr int Control_ControlType_ControlType_ARRAYSIZE = Control_ControlType_ControlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_ControlType_descriptor();
template<typename T>
inline const std::string& Control_ControlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Control_ControlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Control_ControlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Control_ControlType_descriptor(), enum_t_value);
}
inline bool Control_ControlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Control_ControlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Control_ControlType>(
    Control_ControlType_descriptor(), name, value);
}
// ===================================================================

class SubscribeControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest) */ {
 public:
  inline SubscribeControlRequest() : SubscribeControlRequest(nullptr) {}
  ~SubscribeControlRequest() override;
  explicit constexpr SubscribeControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeControlRequest(const SubscribeControlRequest& from);
  SubscribeControlRequest(SubscribeControlRequest&& from) noexcept
    : SubscribeControlRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeControlRequest& operator=(const SubscribeControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeControlRequest& operator=(SubscribeControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeControlRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeControlRequest*>(
               &_SubscribeControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeControlRequest& a, SubscribeControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeControlRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeControlRequest* New() const final {
    return new SubscribeControlRequest();
  }

  SubscribeControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubscribeControlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest";
  }
  protected:
  explicit SubscribeControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance_server.SubscribeControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance_server.ControlResponse) */ {
 public:
  inline ControlResponse() : ControlResponse(nullptr) {}
  ~ControlResponse() override;
  explicit constexpr ControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlResponse(const ControlResponse& from);
  ControlResponse(ControlResponse&& from) noexcept
    : ControlResponse() {
    *this = ::std::move(from);
  }

  inline ControlResponse& operator=(const ControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlResponse& operator=(ControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlResponse* internal_default_instance() {
    return reinterpret_cast<const ControlResponse*>(
               &_ControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlResponse& a, ControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlResponse* New() const final {
    return new ControlResponse();
  }

  ControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance_server.ControlResponse";
  }
  protected:
  explicit ControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance_server.Control control = 1;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::mavsdk::rpc::obstacle_avoidance_server::Control& control() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::obstacle_avoidance_server::Control* release_control();
  ::mavsdk::rpc::obstacle_avoidance_server::Control* mutable_control();
  void set_allocated_control(::mavsdk::rpc::obstacle_avoidance_server::Control* control);
  private:
  const ::mavsdk::rpc::obstacle_avoidance_server::Control& _internal_control() const;
  ::mavsdk::rpc::obstacle_avoidance_server::Control* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::mavsdk::rpc::obstacle_avoidance_server::Control* control);
  ::mavsdk::rpc::obstacle_avoidance_server::Control* unsafe_arena_release_control();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance_server.ControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::obstacle_avoidance_server::Control* control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Control final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.obstacle_avoidance_server.Control) */ {
 public:
  inline Control() : Control(nullptr) {}
  ~Control() override;
  explicit constexpr Control(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Control(const Control& from);
  Control(Control&& from) noexcept
    : Control() {
    *this = ::std::move(from);
  }

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control& operator=(Control&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Control& default_instance() {
    return *internal_default_instance();
  }
  static inline const Control* internal_default_instance() {
    return reinterpret_cast<const Control*>(
               &_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Control& a, Control& b) {
    a.Swap(&b);
  }
  inline void Swap(Control* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Control* New() const final {
    return new Control();
  }

  Control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Control>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Control& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Control& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Control* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.obstacle_avoidance_server.Control";
  }
  protected:
  explicit Control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Control_ControlType ControlType;
  static constexpr ControlType CONTROL_TYPE_UNKNOWN =
    Control_ControlType_CONTROL_TYPE_UNKNOWN;
  static constexpr ControlType CONTROL_TYPE_START =
    Control_ControlType_CONTROL_TYPE_START;
  static constexpr ControlType CONTROL_TYPE_STOP =
    Control_ControlType_CONTROL_TYPE_STOP;
  static constexpr ControlType CONTROL_TYPE_RESTART =
    Control_ControlType_CONTROL_TYPE_RESTART;
  static constexpr ControlType CONTROL_TYPE_ENABLE =
    Control_ControlType_CONTROL_TYPE_ENABLE;
  static constexpr ControlType CONTROL_TYPE_DISABLE =
    Control_ControlType_CONTROL_TYPE_DISABLE;
  static inline bool ControlType_IsValid(int value) {
    return Control_ControlType_IsValid(value);
  }
  static constexpr ControlType ControlType_MIN =
    Control_ControlType_ControlType_MIN;
  static constexpr ControlType ControlType_MAX =
    Control_ControlType_ControlType_MAX;
  static constexpr int ControlType_ARRAYSIZE =
    Control_ControlType_ControlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ControlType_descriptor() {
    return Control_ControlType_descriptor();
  }
  template<typename T>
  static inline const std::string& ControlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ControlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ControlType_Name.");
    return Control_ControlType_Name(enum_t_value);
  }
  static inline bool ControlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ControlType* value) {
    return Control_ControlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kControlTypeFieldNumber = 1,
  };
  // .mavsdk.rpc.obstacle_avoidance_server.Control.ControlType control_type = 1;
  void clear_control_type();
  ::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType control_type() const;
  void set_control_type(::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType value);
  private:
  ::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType _internal_control_type() const;
  void _internal_set_control_type(::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.obstacle_avoidance_server.Control)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int control_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeControlRequest

// -------------------------------------------------------------------

// ControlResponse

// .mavsdk.rpc.obstacle_avoidance_server.Control control = 1;
inline bool ControlResponse::_internal_has_control() const {
  return this != internal_default_instance() && control_ != nullptr;
}
inline bool ControlResponse::has_control() const {
  return _internal_has_control();
}
inline void ControlResponse::clear_control() {
  if (GetArenaForAllocation() == nullptr && control_ != nullptr) {
    delete control_;
  }
  control_ = nullptr;
}
inline const ::mavsdk::rpc::obstacle_avoidance_server::Control& ControlResponse::_internal_control() const {
  const ::mavsdk::rpc::obstacle_avoidance_server::Control* p = control_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::obstacle_avoidance_server::Control&>(
      ::mavsdk::rpc::obstacle_avoidance_server::_Control_default_instance_);
}
inline const ::mavsdk::rpc::obstacle_avoidance_server::Control& ControlResponse::control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance_server.ControlResponse.control)
  return _internal_control();
}
inline void ControlResponse::unsafe_arena_set_allocated_control(
    ::mavsdk::rpc::obstacle_avoidance_server::Control* control) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  control_ = control;
  if (control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.obstacle_avoidance_server.ControlResponse.control)
}
inline ::mavsdk::rpc::obstacle_avoidance_server::Control* ControlResponse::release_control() {
  
  ::mavsdk::rpc::obstacle_avoidance_server::Control* temp = control_;
  control_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance_server::Control* ControlResponse::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.obstacle_avoidance_server.ControlResponse.control)
  
  ::mavsdk::rpc::obstacle_avoidance_server::Control* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::obstacle_avoidance_server::Control* ControlResponse::_internal_mutable_control() {
  
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::obstacle_avoidance_server::Control>(GetArenaForAllocation());
    control_ = p;
  }
  return control_;
}
inline ::mavsdk::rpc::obstacle_avoidance_server::Control* ControlResponse::mutable_control() {
  ::mavsdk::rpc::obstacle_avoidance_server::Control* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.obstacle_avoidance_server.ControlResponse.control)
  return _msg;
}
inline void ControlResponse::set_allocated_control(::mavsdk::rpc::obstacle_avoidance_server::Control* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::obstacle_avoidance_server::Control>::GetOwningArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    
  } else {
    
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.obstacle_avoidance_server.ControlResponse.control)
}

// -------------------------------------------------------------------

// Control

// .mavsdk.rpc.obstacle_avoidance_server.Control.ControlType control_type = 1;
inline void Control::clear_control_type() {
  control_type_ = 0;
}
inline ::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType Control::_internal_control_type() const {
  return static_cast< ::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType >(control_type_);
}
inline ::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType Control::control_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.obstacle_avoidance_server.Control.control_type)
  return _internal_control_type();
}
inline void Control::_internal_set_control_type(::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType value) {
  
  control_type_ = value;
}
inline void Control::set_control_type(::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType value) {
  _internal_set_control_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.obstacle_avoidance_server.Control.control_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace obstacle_avoidance_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType>() {
  return ::mavsdk::rpc::obstacle_avoidance_server::Control_ControlType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacle_5favoidance_5fserver_2fobstacle_5favoidance_5fserver_2eproto
