// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offboard/offboard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_offboard_2foffboard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_offboard_2foffboard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_offboard_2foffboard_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offboard_2foffboard_2eproto;
namespace mavsdk {
namespace rpc {
namespace offboard {
class AccelerationNed;
struct AccelerationNedDefaultTypeInternal;
extern AccelerationNedDefaultTypeInternal _AccelerationNed_default_instance_;
class ActuatorControl;
struct ActuatorControlDefaultTypeInternal;
extern ActuatorControlDefaultTypeInternal _ActuatorControl_default_instance_;
class ActuatorControlGroup;
struct ActuatorControlGroupDefaultTypeInternal;
extern ActuatorControlGroupDefaultTypeInternal _ActuatorControlGroup_default_instance_;
class Attitude;
struct AttitudeDefaultTypeInternal;
extern AttitudeDefaultTypeInternal _Attitude_default_instance_;
class AttitudeRate;
struct AttitudeRateDefaultTypeInternal;
extern AttitudeRateDefaultTypeInternal _AttitudeRate_default_instance_;
class IsActiveRequest;
struct IsActiveRequestDefaultTypeInternal;
extern IsActiveRequestDefaultTypeInternal _IsActiveRequest_default_instance_;
class IsActiveResponse;
struct IsActiveResponseDefaultTypeInternal;
extern IsActiveResponseDefaultTypeInternal _IsActiveResponse_default_instance_;
class OffboardResult;
struct OffboardResultDefaultTypeInternal;
extern OffboardResultDefaultTypeInternal _OffboardResult_default_instance_;
class PositionGlobalYaw;
struct PositionGlobalYawDefaultTypeInternal;
extern PositionGlobalYawDefaultTypeInternal _PositionGlobalYaw_default_instance_;
class PositionNedYaw;
struct PositionNedYawDefaultTypeInternal;
extern PositionNedYawDefaultTypeInternal _PositionNedYaw_default_instance_;
class SetAccelerationNedRequest;
struct SetAccelerationNedRequestDefaultTypeInternal;
extern SetAccelerationNedRequestDefaultTypeInternal _SetAccelerationNedRequest_default_instance_;
class SetAccelerationNedResponse;
struct SetAccelerationNedResponseDefaultTypeInternal;
extern SetAccelerationNedResponseDefaultTypeInternal _SetAccelerationNedResponse_default_instance_;
class SetActuatorControlRequest;
struct SetActuatorControlRequestDefaultTypeInternal;
extern SetActuatorControlRequestDefaultTypeInternal _SetActuatorControlRequest_default_instance_;
class SetActuatorControlResponse;
struct SetActuatorControlResponseDefaultTypeInternal;
extern SetActuatorControlResponseDefaultTypeInternal _SetActuatorControlResponse_default_instance_;
class SetAttitudeRateRequest;
struct SetAttitudeRateRequestDefaultTypeInternal;
extern SetAttitudeRateRequestDefaultTypeInternal _SetAttitudeRateRequest_default_instance_;
class SetAttitudeRateResponse;
struct SetAttitudeRateResponseDefaultTypeInternal;
extern SetAttitudeRateResponseDefaultTypeInternal _SetAttitudeRateResponse_default_instance_;
class SetAttitudeRequest;
struct SetAttitudeRequestDefaultTypeInternal;
extern SetAttitudeRequestDefaultTypeInternal _SetAttitudeRequest_default_instance_;
class SetAttitudeResponse;
struct SetAttitudeResponseDefaultTypeInternal;
extern SetAttitudeResponseDefaultTypeInternal _SetAttitudeResponse_default_instance_;
class SetPositionGlobalRequest;
struct SetPositionGlobalRequestDefaultTypeInternal;
extern SetPositionGlobalRequestDefaultTypeInternal _SetPositionGlobalRequest_default_instance_;
class SetPositionGlobalResponse;
struct SetPositionGlobalResponseDefaultTypeInternal;
extern SetPositionGlobalResponseDefaultTypeInternal _SetPositionGlobalResponse_default_instance_;
class SetPositionNedRequest;
struct SetPositionNedRequestDefaultTypeInternal;
extern SetPositionNedRequestDefaultTypeInternal _SetPositionNedRequest_default_instance_;
class SetPositionNedResponse;
struct SetPositionNedResponseDefaultTypeInternal;
extern SetPositionNedResponseDefaultTypeInternal _SetPositionNedResponse_default_instance_;
class SetPositionVelocityNedRequest;
struct SetPositionVelocityNedRequestDefaultTypeInternal;
extern SetPositionVelocityNedRequestDefaultTypeInternal _SetPositionVelocityNedRequest_default_instance_;
class SetPositionVelocityNedResponse;
struct SetPositionVelocityNedResponseDefaultTypeInternal;
extern SetPositionVelocityNedResponseDefaultTypeInternal _SetPositionVelocityNedResponse_default_instance_;
class SetVelocityBodyRequest;
struct SetVelocityBodyRequestDefaultTypeInternal;
extern SetVelocityBodyRequestDefaultTypeInternal _SetVelocityBodyRequest_default_instance_;
class SetVelocityBodyResponse;
struct SetVelocityBodyResponseDefaultTypeInternal;
extern SetVelocityBodyResponseDefaultTypeInternal _SetVelocityBodyResponse_default_instance_;
class SetVelocityNedRequest;
struct SetVelocityNedRequestDefaultTypeInternal;
extern SetVelocityNedRequestDefaultTypeInternal _SetVelocityNedRequest_default_instance_;
class SetVelocityNedResponse;
struct SetVelocityNedResponseDefaultTypeInternal;
extern SetVelocityNedResponseDefaultTypeInternal _SetVelocityNedResponse_default_instance_;
class StartRequest;
struct StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StartResponse;
struct StartResponseDefaultTypeInternal;
extern StartResponseDefaultTypeInternal _StartResponse_default_instance_;
class StopRequest;
struct StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
struct StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
class VelocityBodyYawspeed;
struct VelocityBodyYawspeedDefaultTypeInternal;
extern VelocityBodyYawspeedDefaultTypeInternal _VelocityBodyYawspeed_default_instance_;
class VelocityNedYaw;
struct VelocityNedYawDefaultTypeInternal;
extern VelocityNedYawDefaultTypeInternal _VelocityNedYaw_default_instance_;
}  // namespace offboard
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::offboard::AccelerationNed* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::AccelerationNed>(Arena*);
template<> ::mavsdk::rpc::offboard::ActuatorControl* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::ActuatorControl>(Arena*);
template<> ::mavsdk::rpc::offboard::ActuatorControlGroup* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::ActuatorControlGroup>(Arena*);
template<> ::mavsdk::rpc::offboard::Attitude* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::Attitude>(Arena*);
template<> ::mavsdk::rpc::offboard::AttitudeRate* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::AttitudeRate>(Arena*);
template<> ::mavsdk::rpc::offboard::IsActiveRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::IsActiveRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::IsActiveResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::IsActiveResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::OffboardResult* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(Arena*);
template<> ::mavsdk::rpc::offboard::PositionGlobalYaw* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::PositionGlobalYaw>(Arena*);
template<> ::mavsdk::rpc::offboard::PositionNedYaw* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::PositionNedYaw>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAccelerationNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAccelerationNedRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAccelerationNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAccelerationNedResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetActuatorControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetActuatorControlRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetActuatorControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetActuatorControlResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAttitudeRateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAttitudeRateRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAttitudeRateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAttitudeRateResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAttitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAttitudeRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAttitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAttitudeResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionGlobalRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionGlobalRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionGlobalResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionGlobalResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionNedRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionNedResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionVelocityNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionVelocityNedRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionVelocityNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionVelocityNedResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityBodyRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityBodyRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityBodyResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityBodyResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityNedRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityNedResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::StartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::StartRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::StartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::StartResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::StopRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::StopRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::StopResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::StopResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::VelocityBodyYawspeed* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityBodyYawspeed>(Arena*);
template<> ::mavsdk::rpc::offboard::VelocityNedYaw* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityNedYaw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace offboard {

enum PositionGlobalYaw_AltitudeType : int {
  PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_REL_HOME = 0,
  PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AMSL = 1,
  PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AGL = 2,
  PositionGlobalYaw_AltitudeType_PositionGlobalYaw_AltitudeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PositionGlobalYaw_AltitudeType_PositionGlobalYaw_AltitudeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PositionGlobalYaw_AltitudeType_IsValid(int value);
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw_AltitudeType_AltitudeType_MIN = PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_REL_HOME;
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw_AltitudeType_AltitudeType_MAX = PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AGL;
constexpr int PositionGlobalYaw_AltitudeType_AltitudeType_ARRAYSIZE = PositionGlobalYaw_AltitudeType_AltitudeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionGlobalYaw_AltitudeType_descriptor();
template<typename T>
inline const std::string& PositionGlobalYaw_AltitudeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PositionGlobalYaw_AltitudeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PositionGlobalYaw_AltitudeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PositionGlobalYaw_AltitudeType_descriptor(), enum_t_value);
}
inline bool PositionGlobalYaw_AltitudeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PositionGlobalYaw_AltitudeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PositionGlobalYaw_AltitudeType>(
    PositionGlobalYaw_AltitudeType_descriptor(), name, value);
}
enum OffboardResult_Result : int {
  OffboardResult_Result_RESULT_UNKNOWN = 0,
  OffboardResult_Result_RESULT_SUCCESS = 1,
  OffboardResult_Result_RESULT_NO_SYSTEM = 2,
  OffboardResult_Result_RESULT_CONNECTION_ERROR = 3,
  OffboardResult_Result_RESULT_BUSY = 4,
  OffboardResult_Result_RESULT_COMMAND_DENIED = 5,
  OffboardResult_Result_RESULT_TIMEOUT = 6,
  OffboardResult_Result_RESULT_NO_SETPOINT_SET = 7,
  OffboardResult_Result_RESULT_FAILED = 8,
  OffboardResult_Result_OffboardResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OffboardResult_Result_OffboardResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OffboardResult_Result_IsValid(int value);
constexpr OffboardResult_Result OffboardResult_Result_Result_MIN = OffboardResult_Result_RESULT_UNKNOWN;
constexpr OffboardResult_Result OffboardResult_Result_Result_MAX = OffboardResult_Result_RESULT_FAILED;
constexpr int OffboardResult_Result_Result_ARRAYSIZE = OffboardResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OffboardResult_Result_descriptor();
template<typename T>
inline const std::string& OffboardResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OffboardResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OffboardResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OffboardResult_Result_descriptor(), enum_t_value);
}
inline bool OffboardResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OffboardResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OffboardResult_Result>(
    OffboardResult_Result_descriptor(), name, value);
}
// ===================================================================

class StartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class StartResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.StartResponse) */ {
 public:
  inline StartResponse() : StartResponse(nullptr) {}
  ~StartResponse() override;
  explicit PROTOBUF_CONSTEXPR StartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartResponse(const StartResponse& from);
  StartResponse(StartResponse&& from) noexcept
    : StartResponse() {
    *this = ::std::move(from);
  }

  inline StartResponse& operator=(const StartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResponse& operator=(StartResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartResponse* internal_default_instance() {
    return reinterpret_cast<const StartResponse*>(
               &_StartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartResponse& a, StartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.StartResponse";
  }
  protected:
  explicit StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.StartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class StopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  ~StopResponse() override;
  explicit PROTOBUF_CONSTEXPR StopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class IsActiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.IsActiveRequest) */ {
 public:
  inline IsActiveRequest() : IsActiveRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR IsActiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsActiveRequest(const IsActiveRequest& from);
  IsActiveRequest(IsActiveRequest&& from) noexcept
    : IsActiveRequest() {
    *this = ::std::move(from);
  }

  inline IsActiveRequest& operator=(const IsActiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsActiveRequest& operator=(IsActiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsActiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsActiveRequest* internal_default_instance() {
    return reinterpret_cast<const IsActiveRequest*>(
               &_IsActiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IsActiveRequest& a, IsActiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsActiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsActiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsActiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsActiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IsActiveRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IsActiveRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.IsActiveRequest";
  }
  protected:
  explicit IsActiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.IsActiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class IsActiveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.IsActiveResponse) */ {
 public:
  inline IsActiveResponse() : IsActiveResponse(nullptr) {}
  ~IsActiveResponse() override;
  explicit PROTOBUF_CONSTEXPR IsActiveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsActiveResponse(const IsActiveResponse& from);
  IsActiveResponse(IsActiveResponse&& from) noexcept
    : IsActiveResponse() {
    *this = ::std::move(from);
  }

  inline IsActiveResponse& operator=(const IsActiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsActiveResponse& operator=(IsActiveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsActiveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsActiveResponse* internal_default_instance() {
    return reinterpret_cast<const IsActiveResponse*>(
               &_IsActiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IsActiveResponse& a, IsActiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsActiveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsActiveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsActiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsActiveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsActiveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IsActiveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsActiveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.IsActiveResponse";
  }
  protected:
  explicit IsActiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsActiveFieldNumber = 1,
  };
  // bool is_active = 1;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.IsActiveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAttitudeRequest) */ {
 public:
  inline SetAttitudeRequest() : SetAttitudeRequest(nullptr) {}
  ~SetAttitudeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetAttitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAttitudeRequest(const SetAttitudeRequest& from);
  SetAttitudeRequest(SetAttitudeRequest&& from) noexcept
    : SetAttitudeRequest() {
    *this = ::std::move(from);
  }

  inline SetAttitudeRequest& operator=(const SetAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeRequest& operator=(SetAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeRequest*>(
               &_SetAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetAttitudeRequest& a, SetAttitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAttitudeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAttitudeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAttitudeRequest";
  }
  protected:
  explicit SetAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.Attitude attitude = 1;
  bool has_attitude() const;
  private:
  bool _internal_has_attitude() const;
  public:
  void clear_attitude();
  const ::mavsdk::rpc::offboard::Attitude& attitude() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::Attitude* release_attitude();
  ::mavsdk::rpc::offboard::Attitude* mutable_attitude();
  void set_allocated_attitude(::mavsdk::rpc::offboard::Attitude* attitude);
  private:
  const ::mavsdk::rpc::offboard::Attitude& _internal_attitude() const;
  ::mavsdk::rpc::offboard::Attitude* _internal_mutable_attitude();
  public:
  void unsafe_arena_set_allocated_attitude(
      ::mavsdk::rpc::offboard::Attitude* attitude);
  ::mavsdk::rpc::offboard::Attitude* unsafe_arena_release_attitude();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAttitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::Attitude* attitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAttitudeResponse) */ {
 public:
  inline SetAttitudeResponse() : SetAttitudeResponse(nullptr) {}
  ~SetAttitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetAttitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAttitudeResponse(const SetAttitudeResponse& from);
  SetAttitudeResponse(SetAttitudeResponse&& from) noexcept
    : SetAttitudeResponse() {
    *this = ::std::move(from);
  }

  inline SetAttitudeResponse& operator=(const SetAttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeResponse& operator=(SetAttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeResponse*>(
               &_SetAttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetAttitudeResponse& a, SetAttitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAttitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAttitudeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAttitudeResponse";
  }
  protected:
  explicit SetAttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAttitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetActuatorControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetActuatorControlRequest) */ {
 public:
  inline SetActuatorControlRequest() : SetActuatorControlRequest(nullptr) {}
  ~SetActuatorControlRequest() override;
  explicit PROTOBUF_CONSTEXPR SetActuatorControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetActuatorControlRequest(const SetActuatorControlRequest& from);
  SetActuatorControlRequest(SetActuatorControlRequest&& from) noexcept
    : SetActuatorControlRequest() {
    *this = ::std::move(from);
  }

  inline SetActuatorControlRequest& operator=(const SetActuatorControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActuatorControlRequest& operator=(SetActuatorControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActuatorControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActuatorControlRequest* internal_default_instance() {
    return reinterpret_cast<const SetActuatorControlRequest*>(
               &_SetActuatorControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetActuatorControlRequest& a, SetActuatorControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActuatorControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActuatorControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetActuatorControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetActuatorControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetActuatorControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetActuatorControlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActuatorControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetActuatorControlRequest";
  }
  protected:
  explicit SetActuatorControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorControlFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.ActuatorControl actuator_control = 1;
  bool has_actuator_control() const;
  private:
  bool _internal_has_actuator_control() const;
  public:
  void clear_actuator_control();
  const ::mavsdk::rpc::offboard::ActuatorControl& actuator_control() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::ActuatorControl* release_actuator_control();
  ::mavsdk::rpc::offboard::ActuatorControl* mutable_actuator_control();
  void set_allocated_actuator_control(::mavsdk::rpc::offboard::ActuatorControl* actuator_control);
  private:
  const ::mavsdk::rpc::offboard::ActuatorControl& _internal_actuator_control() const;
  ::mavsdk::rpc::offboard::ActuatorControl* _internal_mutable_actuator_control();
  public:
  void unsafe_arena_set_allocated_actuator_control(
      ::mavsdk::rpc::offboard::ActuatorControl* actuator_control);
  ::mavsdk::rpc::offboard::ActuatorControl* unsafe_arena_release_actuator_control();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetActuatorControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::ActuatorControl* actuator_control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetActuatorControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetActuatorControlResponse) */ {
 public:
  inline SetActuatorControlResponse() : SetActuatorControlResponse(nullptr) {}
  ~SetActuatorControlResponse() override;
  explicit PROTOBUF_CONSTEXPR SetActuatorControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetActuatorControlResponse(const SetActuatorControlResponse& from);
  SetActuatorControlResponse(SetActuatorControlResponse&& from) noexcept
    : SetActuatorControlResponse() {
    *this = ::std::move(from);
  }

  inline SetActuatorControlResponse& operator=(const SetActuatorControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActuatorControlResponse& operator=(SetActuatorControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActuatorControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActuatorControlResponse* internal_default_instance() {
    return reinterpret_cast<const SetActuatorControlResponse*>(
               &_SetActuatorControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetActuatorControlResponse& a, SetActuatorControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActuatorControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActuatorControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetActuatorControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetActuatorControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetActuatorControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetActuatorControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActuatorControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetActuatorControlResponse";
  }
  protected:
  explicit SetActuatorControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetActuatorControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudeRateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAttitudeRateRequest) */ {
 public:
  inline SetAttitudeRateRequest() : SetAttitudeRateRequest(nullptr) {}
  ~SetAttitudeRateRequest() override;
  explicit PROTOBUF_CONSTEXPR SetAttitudeRateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAttitudeRateRequest(const SetAttitudeRateRequest& from);
  SetAttitudeRateRequest(SetAttitudeRateRequest&& from) noexcept
    : SetAttitudeRateRequest() {
    *this = ::std::move(from);
  }

  inline SetAttitudeRateRequest& operator=(const SetAttitudeRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeRateRequest& operator=(SetAttitudeRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudeRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudeRateRequest* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeRateRequest*>(
               &_SetAttitudeRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetAttitudeRateRequest& a, SetAttitudeRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeRateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudeRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudeRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudeRateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAttitudeRateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAttitudeRateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudeRateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAttitudeRateRequest";
  }
  protected:
  explicit SetAttitudeRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeRateFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1;
  bool has_attitude_rate() const;
  private:
  bool _internal_has_attitude_rate() const;
  public:
  void clear_attitude_rate();
  const ::mavsdk::rpc::offboard::AttitudeRate& attitude_rate() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::AttitudeRate* release_attitude_rate();
  ::mavsdk::rpc::offboard::AttitudeRate* mutable_attitude_rate();
  void set_allocated_attitude_rate(::mavsdk::rpc::offboard::AttitudeRate* attitude_rate);
  private:
  const ::mavsdk::rpc::offboard::AttitudeRate& _internal_attitude_rate() const;
  ::mavsdk::rpc::offboard::AttitudeRate* _internal_mutable_attitude_rate();
  public:
  void unsafe_arena_set_allocated_attitude_rate(
      ::mavsdk::rpc::offboard::AttitudeRate* attitude_rate);
  ::mavsdk::rpc::offboard::AttitudeRate* unsafe_arena_release_attitude_rate();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAttitudeRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::AttitudeRate* attitude_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudeRateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAttitudeRateResponse) */ {
 public:
  inline SetAttitudeRateResponse() : SetAttitudeRateResponse(nullptr) {}
  ~SetAttitudeRateResponse() override;
  explicit PROTOBUF_CONSTEXPR SetAttitudeRateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAttitudeRateResponse(const SetAttitudeRateResponse& from);
  SetAttitudeRateResponse(SetAttitudeRateResponse&& from) noexcept
    : SetAttitudeRateResponse() {
    *this = ::std::move(from);
  }

  inline SetAttitudeRateResponse& operator=(const SetAttitudeRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeRateResponse& operator=(SetAttitudeRateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudeRateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudeRateResponse* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeRateResponse*>(
               &_SetAttitudeRateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetAttitudeRateResponse& a, SetAttitudeRateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeRateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudeRateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudeRateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudeRateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAttitudeRateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAttitudeRateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudeRateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAttitudeRateResponse";
  }
  protected:
  explicit SetAttitudeRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAttitudeRateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionNedRequest) */ {
 public:
  inline SetPositionNedRequest() : SetPositionNedRequest(nullptr) {}
  ~SetPositionNedRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPositionNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPositionNedRequest(const SetPositionNedRequest& from);
  SetPositionNedRequest(SetPositionNedRequest&& from) noexcept
    : SetPositionNedRequest() {
    *this = ::std::move(from);
  }

  inline SetPositionNedRequest& operator=(const SetPositionNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionNedRequest& operator=(SetPositionNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPositionNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPositionNedRequest* internal_default_instance() {
    return reinterpret_cast<const SetPositionNedRequest*>(
               &_SetPositionNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SetPositionNedRequest& a, SetPositionNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPositionNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPositionNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPositionNedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPositionNedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionNedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionNedRequest";
  }
  protected:
  explicit SetPositionNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionNedYawFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
  bool has_position_ned_yaw() const;
  private:
  bool _internal_has_position_ned_yaw() const;
  public:
  void clear_position_ned_yaw();
  const ::mavsdk::rpc::offboard::PositionNedYaw& position_ned_yaw() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::PositionNedYaw* release_position_ned_yaw();
  ::mavsdk::rpc::offboard::PositionNedYaw* mutable_position_ned_yaw();
  void set_allocated_position_ned_yaw(::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw);
  private:
  const ::mavsdk::rpc::offboard::PositionNedYaw& _internal_position_ned_yaw() const;
  ::mavsdk::rpc::offboard::PositionNedYaw* _internal_mutable_position_ned_yaw();
  public:
  void unsafe_arena_set_allocated_position_ned_yaw(
      ::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw);
  ::mavsdk::rpc::offboard::PositionNedYaw* unsafe_arena_release_position_ned_yaw();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionNedResponse) */ {
 public:
  inline SetPositionNedResponse() : SetPositionNedResponse(nullptr) {}
  ~SetPositionNedResponse() override;
  explicit PROTOBUF_CONSTEXPR SetPositionNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPositionNedResponse(const SetPositionNedResponse& from);
  SetPositionNedResponse(SetPositionNedResponse&& from) noexcept
    : SetPositionNedResponse() {
    *this = ::std::move(from);
  }

  inline SetPositionNedResponse& operator=(const SetPositionNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionNedResponse& operator=(SetPositionNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPositionNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPositionNedResponse* internal_default_instance() {
    return reinterpret_cast<const SetPositionNedResponse*>(
               &_SetPositionNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetPositionNedResponse& a, SetPositionNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPositionNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPositionNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPositionNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPositionNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionNedResponse";
  }
  protected:
  explicit SetPositionNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionGlobalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionGlobalRequest) */ {
 public:
  inline SetPositionGlobalRequest() : SetPositionGlobalRequest(nullptr) {}
  ~SetPositionGlobalRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPositionGlobalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPositionGlobalRequest(const SetPositionGlobalRequest& from);
  SetPositionGlobalRequest(SetPositionGlobalRequest&& from) noexcept
    : SetPositionGlobalRequest() {
    *this = ::std::move(from);
  }

  inline SetPositionGlobalRequest& operator=(const SetPositionGlobalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionGlobalRequest& operator=(SetPositionGlobalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPositionGlobalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPositionGlobalRequest* internal_default_instance() {
    return reinterpret_cast<const SetPositionGlobalRequest*>(
               &_SetPositionGlobalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetPositionGlobalRequest& a, SetPositionGlobalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionGlobalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionGlobalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPositionGlobalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPositionGlobalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPositionGlobalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPositionGlobalRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionGlobalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionGlobalRequest";
  }
  protected:
  explicit SetPositionGlobalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionGlobalYawFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.PositionGlobalYaw position_global_yaw = 1;
  bool has_position_global_yaw() const;
  private:
  bool _internal_has_position_global_yaw() const;
  public:
  void clear_position_global_yaw();
  const ::mavsdk::rpc::offboard::PositionGlobalYaw& position_global_yaw() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::PositionGlobalYaw* release_position_global_yaw();
  ::mavsdk::rpc::offboard::PositionGlobalYaw* mutable_position_global_yaw();
  void set_allocated_position_global_yaw(::mavsdk::rpc::offboard::PositionGlobalYaw* position_global_yaw);
  private:
  const ::mavsdk::rpc::offboard::PositionGlobalYaw& _internal_position_global_yaw() const;
  ::mavsdk::rpc::offboard::PositionGlobalYaw* _internal_mutable_position_global_yaw();
  public:
  void unsafe_arena_set_allocated_position_global_yaw(
      ::mavsdk::rpc::offboard::PositionGlobalYaw* position_global_yaw);
  ::mavsdk::rpc::offboard::PositionGlobalYaw* unsafe_arena_release_position_global_yaw();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionGlobalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::PositionGlobalYaw* position_global_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionGlobalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionGlobalResponse) */ {
 public:
  inline SetPositionGlobalResponse() : SetPositionGlobalResponse(nullptr) {}
  ~SetPositionGlobalResponse() override;
  explicit PROTOBUF_CONSTEXPR SetPositionGlobalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPositionGlobalResponse(const SetPositionGlobalResponse& from);
  SetPositionGlobalResponse(SetPositionGlobalResponse&& from) noexcept
    : SetPositionGlobalResponse() {
    *this = ::std::move(from);
  }

  inline SetPositionGlobalResponse& operator=(const SetPositionGlobalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionGlobalResponse& operator=(SetPositionGlobalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPositionGlobalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPositionGlobalResponse* internal_default_instance() {
    return reinterpret_cast<const SetPositionGlobalResponse*>(
               &_SetPositionGlobalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetPositionGlobalResponse& a, SetPositionGlobalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionGlobalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionGlobalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPositionGlobalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPositionGlobalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPositionGlobalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPositionGlobalResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionGlobalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionGlobalResponse";
  }
  protected:
  explicit SetPositionGlobalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionGlobalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityBodyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityBodyRequest) */ {
 public:
  inline SetVelocityBodyRequest() : SetVelocityBodyRequest(nullptr) {}
  ~SetVelocityBodyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVelocityBodyRequest(const SetVelocityBodyRequest& from);
  SetVelocityBodyRequest(SetVelocityBodyRequest&& from) noexcept
    : SetVelocityBodyRequest() {
    *this = ::std::move(from);
  }

  inline SetVelocityBodyRequest& operator=(const SetVelocityBodyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityBodyRequest& operator=(SetVelocityBodyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVelocityBodyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVelocityBodyRequest* internal_default_instance() {
    return reinterpret_cast<const SetVelocityBodyRequest*>(
               &_SetVelocityBodyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetVelocityBodyRequest& a, SetVelocityBodyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityBodyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVelocityBodyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVelocityBodyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVelocityBodyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVelocityBodyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVelocityBodyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityBodyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityBodyRequest";
  }
  protected:
  explicit SetVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityBodyYawspeedFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1;
  bool has_velocity_body_yawspeed() const;
  private:
  bool _internal_has_velocity_body_yawspeed() const;
  public:
  void clear_velocity_body_yawspeed();
  const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& velocity_body_yawspeed() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::VelocityBodyYawspeed* release_velocity_body_yawspeed();
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* mutable_velocity_body_yawspeed();
  void set_allocated_velocity_body_yawspeed(::mavsdk::rpc::offboard::VelocityBodyYawspeed* velocity_body_yawspeed);
  private:
  const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& _internal_velocity_body_yawspeed() const;
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* _internal_mutable_velocity_body_yawspeed();
  public:
  void unsafe_arena_set_allocated_velocity_body_yawspeed(
      ::mavsdk::rpc::offboard::VelocityBodyYawspeed* velocity_body_yawspeed);
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* unsafe_arena_release_velocity_body_yawspeed();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityBodyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* velocity_body_yawspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityBodyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityBodyResponse) */ {
 public:
  inline SetVelocityBodyResponse() : SetVelocityBodyResponse(nullptr) {}
  ~SetVelocityBodyResponse() override;
  explicit PROTOBUF_CONSTEXPR SetVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVelocityBodyResponse(const SetVelocityBodyResponse& from);
  SetVelocityBodyResponse(SetVelocityBodyResponse&& from) noexcept
    : SetVelocityBodyResponse() {
    *this = ::std::move(from);
  }

  inline SetVelocityBodyResponse& operator=(const SetVelocityBodyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityBodyResponse& operator=(SetVelocityBodyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVelocityBodyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVelocityBodyResponse* internal_default_instance() {
    return reinterpret_cast<const SetVelocityBodyResponse*>(
               &_SetVelocityBodyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetVelocityBodyResponse& a, SetVelocityBodyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityBodyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVelocityBodyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVelocityBodyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVelocityBodyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVelocityBodyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVelocityBodyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityBodyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityBodyResponse";
  }
  protected:
  explicit SetVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityBodyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityNedRequest) */ {
 public:
  inline SetVelocityNedRequest() : SetVelocityNedRequest(nullptr) {}
  ~SetVelocityNedRequest() override;
  explicit PROTOBUF_CONSTEXPR SetVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVelocityNedRequest(const SetVelocityNedRequest& from);
  SetVelocityNedRequest(SetVelocityNedRequest&& from) noexcept
    : SetVelocityNedRequest() {
    *this = ::std::move(from);
  }

  inline SetVelocityNedRequest& operator=(const SetVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityNedRequest& operator=(SetVelocityNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVelocityNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const SetVelocityNedRequest*>(
               &_SetVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetVelocityNedRequest& a, SetVelocityNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVelocityNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVelocityNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVelocityNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVelocityNedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVelocityNedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityNedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityNedRequest";
  }
  protected:
  explicit SetVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityNedYawFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1;
  bool has_velocity_ned_yaw() const;
  private:
  bool _internal_has_velocity_ned_yaw() const;
  public:
  void clear_velocity_ned_yaw();
  const ::mavsdk::rpc::offboard::VelocityNedYaw& velocity_ned_yaw() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::VelocityNedYaw* release_velocity_ned_yaw();
  ::mavsdk::rpc::offboard::VelocityNedYaw* mutable_velocity_ned_yaw();
  void set_allocated_velocity_ned_yaw(::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw);
  private:
  const ::mavsdk::rpc::offboard::VelocityNedYaw& _internal_velocity_ned_yaw() const;
  ::mavsdk::rpc::offboard::VelocityNedYaw* _internal_mutable_velocity_ned_yaw();
  public:
  void unsafe_arena_set_allocated_velocity_ned_yaw(
      ::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw);
  ::mavsdk::rpc::offboard::VelocityNedYaw* unsafe_arena_release_velocity_ned_yaw();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityNedResponse) */ {
 public:
  inline SetVelocityNedResponse() : SetVelocityNedResponse(nullptr) {}
  ~SetVelocityNedResponse() override;
  explicit PROTOBUF_CONSTEXPR SetVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVelocityNedResponse(const SetVelocityNedResponse& from);
  SetVelocityNedResponse(SetVelocityNedResponse&& from) noexcept
    : SetVelocityNedResponse() {
    *this = ::std::move(from);
  }

  inline SetVelocityNedResponse& operator=(const SetVelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityNedResponse& operator=(SetVelocityNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVelocityNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const SetVelocityNedResponse*>(
               &_SetVelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetVelocityNedResponse& a, SetVelocityNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVelocityNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVelocityNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVelocityNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVelocityNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVelocityNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityNedResponse";
  }
  protected:
  explicit SetVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionVelocityNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionVelocityNedRequest) */ {
 public:
  inline SetPositionVelocityNedRequest() : SetPositionVelocityNedRequest(nullptr) {}
  ~SetPositionVelocityNedRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPositionVelocityNedRequest(const SetPositionVelocityNedRequest& from);
  SetPositionVelocityNedRequest(SetPositionVelocityNedRequest&& from) noexcept
    : SetPositionVelocityNedRequest() {
    *this = ::std::move(from);
  }

  inline SetPositionVelocityNedRequest& operator=(const SetPositionVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionVelocityNedRequest& operator=(SetPositionVelocityNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPositionVelocityNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPositionVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const SetPositionVelocityNedRequest*>(
               &_SetPositionVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetPositionVelocityNedRequest& a, SetPositionVelocityNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionVelocityNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionVelocityNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPositionVelocityNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPositionVelocityNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPositionVelocityNedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPositionVelocityNedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionVelocityNedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionVelocityNedRequest";
  }
  protected:
  explicit SetPositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionNedYawFieldNumber = 1,
    kVelocityNedYawFieldNumber = 2,
  };
  // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
  bool has_position_ned_yaw() const;
  private:
  bool _internal_has_position_ned_yaw() const;
  public:
  void clear_position_ned_yaw();
  const ::mavsdk::rpc::offboard::PositionNedYaw& position_ned_yaw() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::PositionNedYaw* release_position_ned_yaw();
  ::mavsdk::rpc::offboard::PositionNedYaw* mutable_position_ned_yaw();
  void set_allocated_position_ned_yaw(::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw);
  private:
  const ::mavsdk::rpc::offboard::PositionNedYaw& _internal_position_ned_yaw() const;
  ::mavsdk::rpc::offboard::PositionNedYaw* _internal_mutable_position_ned_yaw();
  public:
  void unsafe_arena_set_allocated_position_ned_yaw(
      ::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw);
  ::mavsdk::rpc::offboard::PositionNedYaw* unsafe_arena_release_position_ned_yaw();

  // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2;
  bool has_velocity_ned_yaw() const;
  private:
  bool _internal_has_velocity_ned_yaw() const;
  public:
  void clear_velocity_ned_yaw();
  const ::mavsdk::rpc::offboard::VelocityNedYaw& velocity_ned_yaw() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::VelocityNedYaw* release_velocity_ned_yaw();
  ::mavsdk::rpc::offboard::VelocityNedYaw* mutable_velocity_ned_yaw();
  void set_allocated_velocity_ned_yaw(::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw);
  private:
  const ::mavsdk::rpc::offboard::VelocityNedYaw& _internal_velocity_ned_yaw() const;
  ::mavsdk::rpc::offboard::VelocityNedYaw* _internal_mutable_velocity_ned_yaw();
  public:
  void unsafe_arena_set_allocated_velocity_ned_yaw(
      ::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw);
  ::mavsdk::rpc::offboard::VelocityNedYaw* unsafe_arena_release_velocity_ned_yaw();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw_;
  ::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionVelocityNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionVelocityNedResponse) */ {
 public:
  inline SetPositionVelocityNedResponse() : SetPositionVelocityNedResponse(nullptr) {}
  ~SetPositionVelocityNedResponse() override;
  explicit PROTOBUF_CONSTEXPR SetPositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPositionVelocityNedResponse(const SetPositionVelocityNedResponse& from);
  SetPositionVelocityNedResponse(SetPositionVelocityNedResponse&& from) noexcept
    : SetPositionVelocityNedResponse() {
    *this = ::std::move(from);
  }

  inline SetPositionVelocityNedResponse& operator=(const SetPositionVelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionVelocityNedResponse& operator=(SetPositionVelocityNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPositionVelocityNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPositionVelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const SetPositionVelocityNedResponse*>(
               &_SetPositionVelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SetPositionVelocityNedResponse& a, SetPositionVelocityNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionVelocityNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionVelocityNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPositionVelocityNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPositionVelocityNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPositionVelocityNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPositionVelocityNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionVelocityNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionVelocityNedResponse";
  }
  protected:
  explicit SetPositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAccelerationNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAccelerationNedRequest) */ {
 public:
  inline SetAccelerationNedRequest() : SetAccelerationNedRequest(nullptr) {}
  ~SetAccelerationNedRequest() override;
  explicit PROTOBUF_CONSTEXPR SetAccelerationNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAccelerationNedRequest(const SetAccelerationNedRequest& from);
  SetAccelerationNedRequest(SetAccelerationNedRequest&& from) noexcept
    : SetAccelerationNedRequest() {
    *this = ::std::move(from);
  }

  inline SetAccelerationNedRequest& operator=(const SetAccelerationNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAccelerationNedRequest& operator=(SetAccelerationNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAccelerationNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAccelerationNedRequest* internal_default_instance() {
    return reinterpret_cast<const SetAccelerationNedRequest*>(
               &_SetAccelerationNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetAccelerationNedRequest& a, SetAccelerationNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAccelerationNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAccelerationNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAccelerationNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAccelerationNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAccelerationNedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAccelerationNedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccelerationNedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAccelerationNedRequest";
  }
  protected:
  explicit SetAccelerationNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationNedFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.AccelerationNed acceleration_ned = 1;
  bool has_acceleration_ned() const;
  private:
  bool _internal_has_acceleration_ned() const;
  public:
  void clear_acceleration_ned();
  const ::mavsdk::rpc::offboard::AccelerationNed& acceleration_ned() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::AccelerationNed* release_acceleration_ned();
  ::mavsdk::rpc::offboard::AccelerationNed* mutable_acceleration_ned();
  void set_allocated_acceleration_ned(::mavsdk::rpc::offboard::AccelerationNed* acceleration_ned);
  private:
  const ::mavsdk::rpc::offboard::AccelerationNed& _internal_acceleration_ned() const;
  ::mavsdk::rpc::offboard::AccelerationNed* _internal_mutable_acceleration_ned();
  public:
  void unsafe_arena_set_allocated_acceleration_ned(
      ::mavsdk::rpc::offboard::AccelerationNed* acceleration_ned);
  ::mavsdk::rpc::offboard::AccelerationNed* unsafe_arena_release_acceleration_ned();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAccelerationNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::AccelerationNed* acceleration_ned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAccelerationNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAccelerationNedResponse) */ {
 public:
  inline SetAccelerationNedResponse() : SetAccelerationNedResponse(nullptr) {}
  ~SetAccelerationNedResponse() override;
  explicit PROTOBUF_CONSTEXPR SetAccelerationNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAccelerationNedResponse(const SetAccelerationNedResponse& from);
  SetAccelerationNedResponse(SetAccelerationNedResponse&& from) noexcept
    : SetAccelerationNedResponse() {
    *this = ::std::move(from);
  }

  inline SetAccelerationNedResponse& operator=(const SetAccelerationNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAccelerationNedResponse& operator=(SetAccelerationNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAccelerationNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAccelerationNedResponse* internal_default_instance() {
    return reinterpret_cast<const SetAccelerationNedResponse*>(
               &_SetAccelerationNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetAccelerationNedResponse& a, SetAccelerationNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAccelerationNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAccelerationNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAccelerationNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAccelerationNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAccelerationNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAccelerationNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccelerationNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAccelerationNedResponse";
  }
  protected:
  explicit SetAccelerationNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:
  void unsafe_arena_set_allocated_offboard_result(
      ::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  ::mavsdk::rpc::offboard::OffboardResult* unsafe_arena_release_offboard_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAccelerationNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class Attitude final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.Attitude) */ {
 public:
  inline Attitude() : Attitude(nullptr) {}
  ~Attitude() override;
  explicit PROTOBUF_CONSTEXPR Attitude(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attitude(const Attitude& from);
  Attitude(Attitude&& from) noexcept
    : Attitude() {
    *this = ::std::move(from);
  }

  inline Attitude& operator=(const Attitude& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attitude& operator=(Attitude&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attitude& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attitude* internal_default_instance() {
    return reinterpret_cast<const Attitude*>(
               &_Attitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Attitude& a, Attitude& b) {
    a.Swap(&b);
  }
  inline void Swap(Attitude* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attitude* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attitude* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attitude>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attitude& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Attitude& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attitude* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.Attitude";
  }
  protected:
  explicit Attitude(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kYawDegFieldNumber = 3,
    kThrustValueFieldNumber = 4,
  };
  // float roll_deg = 1;
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 2;
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // float yaw_deg = 3;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // float thrust_value = 4;
  void clear_thrust_value();
  float thrust_value() const;
  void set_thrust_value(float value);
  private:
  float _internal_thrust_value() const;
  void _internal_set_thrust_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.Attitude)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_deg_;
  float pitch_deg_;
  float yaw_deg_;
  float thrust_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControlGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.ActuatorControlGroup) */ {
 public:
  inline ActuatorControlGroup() : ActuatorControlGroup(nullptr) {}
  ~ActuatorControlGroup() override;
  explicit PROTOBUF_CONSTEXPR ActuatorControlGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorControlGroup(const ActuatorControlGroup& from);
  ActuatorControlGroup(ActuatorControlGroup&& from) noexcept
    : ActuatorControlGroup() {
    *this = ::std::move(from);
  }

  inline ActuatorControlGroup& operator=(const ActuatorControlGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControlGroup& operator=(ActuatorControlGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorControlGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorControlGroup* internal_default_instance() {
    return reinterpret_cast<const ActuatorControlGroup*>(
               &_ActuatorControlGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ActuatorControlGroup& a, ActuatorControlGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControlGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorControlGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorControlGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorControlGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorControlGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorControlGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControlGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.ActuatorControlGroup";
  }
  protected:
  explicit ActuatorControlGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlsFieldNumber = 1,
  };
  // repeated float controls = 1;
  int controls_size() const;
  private:
  int _internal_controls_size() const;
  public:
  void clear_controls();
  private:
  float _internal_controls(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_controls() const;
  void _internal_add_controls(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_controls();
  public:
  float controls(int index) const;
  void set_controls(int index, float value);
  void add_controls(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      controls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_controls();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.ActuatorControlGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > controls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.ActuatorControl) */ {
 public:
  inline ActuatorControl() : ActuatorControl(nullptr) {}
  ~ActuatorControl() override;
  explicit PROTOBUF_CONSTEXPR ActuatorControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorControl(const ActuatorControl& from);
  ActuatorControl(ActuatorControl&& from) noexcept
    : ActuatorControl() {
    *this = ::std::move(from);
  }

  inline ActuatorControl& operator=(const ActuatorControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControl& operator=(ActuatorControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorControl* internal_default_instance() {
    return reinterpret_cast<const ActuatorControl*>(
               &_ActuatorControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ActuatorControl& a, ActuatorControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorControl& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.ActuatorControl";
  }
  protected:
  explicit ActuatorControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.offboard.ActuatorControlGroup groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::mavsdk::rpc::offboard::ActuatorControlGroup* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup >*
      mutable_groups();
  private:
  const ::mavsdk::rpc::offboard::ActuatorControlGroup& _internal_groups(int index) const;
  ::mavsdk::rpc::offboard::ActuatorControlGroup* _internal_add_groups();
  public:
  const ::mavsdk::rpc::offboard::ActuatorControlGroup& groups(int index) const;
  ::mavsdk::rpc::offboard::ActuatorControlGroup* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup >&
      groups() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.ActuatorControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class AttitudeRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.AttitudeRate) */ {
 public:
  inline AttitudeRate() : AttitudeRate(nullptr) {}
  ~AttitudeRate() override;
  explicit PROTOBUF_CONSTEXPR AttitudeRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttitudeRate(const AttitudeRate& from);
  AttitudeRate(AttitudeRate&& from) noexcept
    : AttitudeRate() {
    *this = ::std::move(from);
  }

  inline AttitudeRate& operator=(const AttitudeRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeRate& operator=(AttitudeRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttitudeRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttitudeRate* internal_default_instance() {
    return reinterpret_cast<const AttitudeRate*>(
               &_AttitudeRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AttitudeRate& a, AttitudeRate& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttitudeRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttitudeRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttitudeRate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttitudeRate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttitudeRate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.AttitudeRate";
  }
  protected:
  explicit AttitudeRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegSFieldNumber = 1,
    kPitchDegSFieldNumber = 2,
    kYawDegSFieldNumber = 3,
    kThrustValueFieldNumber = 4,
  };
  // float roll_deg_s = 1;
  void clear_roll_deg_s();
  float roll_deg_s() const;
  void set_roll_deg_s(float value);
  private:
  float _internal_roll_deg_s() const;
  void _internal_set_roll_deg_s(float value);
  public:

  // float pitch_deg_s = 2;
  void clear_pitch_deg_s();
  float pitch_deg_s() const;
  void set_pitch_deg_s(float value);
  private:
  float _internal_pitch_deg_s() const;
  void _internal_set_pitch_deg_s(float value);
  public:

  // float yaw_deg_s = 3;
  void clear_yaw_deg_s();
  float yaw_deg_s() const;
  void set_yaw_deg_s(float value);
  private:
  float _internal_yaw_deg_s() const;
  void _internal_set_yaw_deg_s(float value);
  public:

  // float thrust_value = 4;
  void clear_thrust_value();
  float thrust_value() const;
  void set_thrust_value(float value);
  private:
  float _internal_thrust_value() const;
  void _internal_set_thrust_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.AttitudeRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_deg_s_;
  float pitch_deg_s_;
  float yaw_deg_s_;
  float thrust_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class PositionNedYaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.PositionNedYaw) */ {
 public:
  inline PositionNedYaw() : PositionNedYaw(nullptr) {}
  ~PositionNedYaw() override;
  explicit PROTOBUF_CONSTEXPR PositionNedYaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionNedYaw(const PositionNedYaw& from);
  PositionNedYaw(PositionNedYaw&& from) noexcept
    : PositionNedYaw() {
    *this = ::std::move(from);
  }

  inline PositionNedYaw& operator=(const PositionNedYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionNedYaw& operator=(PositionNedYaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionNedYaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionNedYaw* internal_default_instance() {
    return reinterpret_cast<const PositionNedYaw*>(
               &_PositionNedYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PositionNedYaw& a, PositionNedYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionNedYaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionNedYaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionNedYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionNedYaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionNedYaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionNedYaw& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionNedYaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.PositionNedYaw";
  }
  protected:
  explicit PositionNedYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMFieldNumber = 1,
    kEastMFieldNumber = 2,
    kDownMFieldNumber = 3,
    kYawDegFieldNumber = 4,
  };
  // float north_m = 1;
  void clear_north_m();
  float north_m() const;
  void set_north_m(float value);
  private:
  float _internal_north_m() const;
  void _internal_set_north_m(float value);
  public:

  // float east_m = 2;
  void clear_east_m();
  float east_m() const;
  void set_east_m(float value);
  private:
  float _internal_east_m() const;
  void _internal_set_east_m(float value);
  public:

  // float down_m = 3;
  void clear_down_m();
  float down_m() const;
  void set_down_m(float value);
  private:
  float _internal_down_m() const;
  void _internal_set_down_m(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.PositionNedYaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_;
  float east_m_;
  float down_m_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class PositionGlobalYaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.PositionGlobalYaw) */ {
 public:
  inline PositionGlobalYaw() : PositionGlobalYaw(nullptr) {}
  ~PositionGlobalYaw() override;
  explicit PROTOBUF_CONSTEXPR PositionGlobalYaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionGlobalYaw(const PositionGlobalYaw& from);
  PositionGlobalYaw(PositionGlobalYaw&& from) noexcept
    : PositionGlobalYaw() {
    *this = ::std::move(from);
  }

  inline PositionGlobalYaw& operator=(const PositionGlobalYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionGlobalYaw& operator=(PositionGlobalYaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionGlobalYaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionGlobalYaw* internal_default_instance() {
    return reinterpret_cast<const PositionGlobalYaw*>(
               &_PositionGlobalYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PositionGlobalYaw& a, PositionGlobalYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionGlobalYaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionGlobalYaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionGlobalYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionGlobalYaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionGlobalYaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionGlobalYaw& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionGlobalYaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.PositionGlobalYaw";
  }
  protected:
  explicit PositionGlobalYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PositionGlobalYaw_AltitudeType AltitudeType;
  static constexpr AltitudeType ALTITUDE_TYPE_REL_HOME =
    PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_REL_HOME;
  static constexpr AltitudeType ALTITUDE_TYPE_AMSL =
    PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AMSL;
  static constexpr AltitudeType ALTITUDE_TYPE_AGL =
    PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AGL;
  static inline bool AltitudeType_IsValid(int value) {
    return PositionGlobalYaw_AltitudeType_IsValid(value);
  }
  static constexpr AltitudeType AltitudeType_MIN =
    PositionGlobalYaw_AltitudeType_AltitudeType_MIN;
  static constexpr AltitudeType AltitudeType_MAX =
    PositionGlobalYaw_AltitudeType_AltitudeType_MAX;
  static constexpr int AltitudeType_ARRAYSIZE =
    PositionGlobalYaw_AltitudeType_AltitudeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AltitudeType_descriptor() {
    return PositionGlobalYaw_AltitudeType_descriptor();
  }
  template<typename T>
  static inline const std::string& AltitudeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AltitudeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AltitudeType_Name.");
    return PositionGlobalYaw_AltitudeType_Name(enum_t_value);
  }
  static inline bool AltitudeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AltitudeType* value) {
    return PositionGlobalYaw_AltitudeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLatDegFieldNumber = 1,
    kLonDegFieldNumber = 2,
    kAltMFieldNumber = 3,
    kYawDegFieldNumber = 4,
    kAltitudeTypeFieldNumber = 5,
  };
  // double lat_deg = 1;
  void clear_lat_deg();
  double lat_deg() const;
  void set_lat_deg(double value);
  private:
  double _internal_lat_deg() const;
  void _internal_set_lat_deg(double value);
  public:

  // double lon_deg = 2;
  void clear_lon_deg();
  double lon_deg() const;
  void set_lon_deg(double value);
  private:
  double _internal_lon_deg() const;
  void _internal_set_lon_deg(double value);
  public:

  // float alt_m = 3;
  void clear_alt_m();
  float alt_m() const;
  void set_alt_m(float value);
  private:
  float _internal_alt_m() const;
  void _internal_set_alt_m(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // .mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType altitude_type = 5;
  void clear_altitude_type();
  ::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType altitude_type() const;
  void set_altitude_type(::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType value);
  private:
  ::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType _internal_altitude_type() const;
  void _internal_set_altitude_type(::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.PositionGlobalYaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_deg_;
  double lon_deg_;
  float alt_m_;
  float yaw_deg_;
  int altitude_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class VelocityBodyYawspeed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.VelocityBodyYawspeed) */ {
 public:
  inline VelocityBodyYawspeed() : VelocityBodyYawspeed(nullptr) {}
  ~VelocityBodyYawspeed() override;
  explicit PROTOBUF_CONSTEXPR VelocityBodyYawspeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelocityBodyYawspeed(const VelocityBodyYawspeed& from);
  VelocityBodyYawspeed(VelocityBodyYawspeed&& from) noexcept
    : VelocityBodyYawspeed() {
    *this = ::std::move(from);
  }

  inline VelocityBodyYawspeed& operator=(const VelocityBodyYawspeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityBodyYawspeed& operator=(VelocityBodyYawspeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityBodyYawspeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityBodyYawspeed* internal_default_instance() {
    return reinterpret_cast<const VelocityBodyYawspeed*>(
               &_VelocityBodyYawspeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(VelocityBodyYawspeed& a, VelocityBodyYawspeed& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityBodyYawspeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityBodyYawspeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityBodyYawspeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelocityBodyYawspeed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelocityBodyYawspeed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelocityBodyYawspeed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityBodyYawspeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.VelocityBodyYawspeed";
  }
  protected:
  explicit VelocityBodyYawspeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardMSFieldNumber = 1,
    kRightMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
    kYawspeedDegSFieldNumber = 4,
  };
  // float forward_m_s = 1;
  void clear_forward_m_s();
  float forward_m_s() const;
  void set_forward_m_s(float value);
  private:
  float _internal_forward_m_s() const;
  void _internal_set_forward_m_s(float value);
  public:

  // float right_m_s = 2;
  void clear_right_m_s();
  float right_m_s() const;
  void set_right_m_s(float value);
  private:
  float _internal_right_m_s() const;
  void _internal_set_right_m_s(float value);
  public:

  // float down_m_s = 3;
  void clear_down_m_s();
  float down_m_s() const;
  void set_down_m_s(float value);
  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);
  public:

  // float yawspeed_deg_s = 4;
  void clear_yawspeed_deg_s();
  float yawspeed_deg_s() const;
  void set_yawspeed_deg_s(float value);
  private:
  float _internal_yawspeed_deg_s() const;
  void _internal_set_yawspeed_deg_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.VelocityBodyYawspeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float forward_m_s_;
  float right_m_s_;
  float down_m_s_;
  float yawspeed_deg_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class VelocityNedYaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.VelocityNedYaw) */ {
 public:
  inline VelocityNedYaw() : VelocityNedYaw(nullptr) {}
  ~VelocityNedYaw() override;
  explicit PROTOBUF_CONSTEXPR VelocityNedYaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelocityNedYaw(const VelocityNedYaw& from);
  VelocityNedYaw(VelocityNedYaw&& from) noexcept
    : VelocityNedYaw() {
    *this = ::std::move(from);
  }

  inline VelocityNedYaw& operator=(const VelocityNedYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityNedYaw& operator=(VelocityNedYaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityNedYaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityNedYaw* internal_default_instance() {
    return reinterpret_cast<const VelocityNedYaw*>(
               &_VelocityNedYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(VelocityNedYaw& a, VelocityNedYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityNedYaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityNedYaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityNedYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelocityNedYaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelocityNedYaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelocityNedYaw& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityNedYaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.VelocityNedYaw";
  }
  protected:
  explicit VelocityNedYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMSFieldNumber = 1,
    kEastMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
    kYawDegFieldNumber = 4,
  };
  // float north_m_s = 1;
  void clear_north_m_s();
  float north_m_s() const;
  void set_north_m_s(float value);
  private:
  float _internal_north_m_s() const;
  void _internal_set_north_m_s(float value);
  public:

  // float east_m_s = 2;
  void clear_east_m_s();
  float east_m_s() const;
  void set_east_m_s(float value);
  private:
  float _internal_east_m_s() const;
  void _internal_set_east_m_s(float value);
  public:

  // float down_m_s = 3;
  void clear_down_m_s();
  float down_m_s() const;
  void set_down_m_s(float value);
  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.VelocityNedYaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_s_;
  float east_m_s_;
  float down_m_s_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class AccelerationNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.AccelerationNed) */ {
 public:
  inline AccelerationNed() : AccelerationNed(nullptr) {}
  ~AccelerationNed() override;
  explicit PROTOBUF_CONSTEXPR AccelerationNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccelerationNed(const AccelerationNed& from);
  AccelerationNed(AccelerationNed&& from) noexcept
    : AccelerationNed() {
    *this = ::std::move(from);
  }

  inline AccelerationNed& operator=(const AccelerationNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelerationNed& operator=(AccelerationNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccelerationNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccelerationNed* internal_default_instance() {
    return reinterpret_cast<const AccelerationNed*>(
               &_AccelerationNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AccelerationNed& a, AccelerationNed& b) {
    a.Swap(&b);
  }
  inline void Swap(AccelerationNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccelerationNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccelerationNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccelerationNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccelerationNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccelerationNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelerationNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.AccelerationNed";
  }
  protected:
  explicit AccelerationNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMS2FieldNumber = 1,
    kEastMS2FieldNumber = 2,
    kDownMS2FieldNumber = 3,
  };
  // float north_m_s2 = 1;
  void clear_north_m_s2();
  float north_m_s2() const;
  void set_north_m_s2(float value);
  private:
  float _internal_north_m_s2() const;
  void _internal_set_north_m_s2(float value);
  public:

  // float east_m_s2 = 2;
  void clear_east_m_s2();
  float east_m_s2() const;
  void set_east_m_s2(float value);
  private:
  float _internal_east_m_s2() const;
  void _internal_set_east_m_s2(float value);
  public:

  // float down_m_s2 = 3;
  void clear_down_m_s2();
  float down_m_s2() const;
  void set_down_m_s2(float value);
  private:
  float _internal_down_m_s2() const;
  void _internal_set_down_m_s2(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.AccelerationNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_s2_;
  float east_m_s2_;
  float down_m_s2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class OffboardResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.OffboardResult) */ {
 public:
  inline OffboardResult() : OffboardResult(nullptr) {}
  ~OffboardResult() override;
  explicit PROTOBUF_CONSTEXPR OffboardResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OffboardResult(const OffboardResult& from);
  OffboardResult(OffboardResult&& from) noexcept
    : OffboardResult() {
    *this = ::std::move(from);
  }

  inline OffboardResult& operator=(const OffboardResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OffboardResult& operator=(OffboardResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OffboardResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OffboardResult* internal_default_instance() {
    return reinterpret_cast<const OffboardResult*>(
               &_OffboardResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(OffboardResult& a, OffboardResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OffboardResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OffboardResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OffboardResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OffboardResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OffboardResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OffboardResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OffboardResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.OffboardResult";
  }
  protected:
  explicit OffboardResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OffboardResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    OffboardResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    OffboardResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    OffboardResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    OffboardResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    OffboardResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    OffboardResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT =
    OffboardResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_NO_SETPOINT_SET =
    OffboardResult_Result_RESULT_NO_SETPOINT_SET;
  static constexpr Result RESULT_FAILED =
    OffboardResult_Result_RESULT_FAILED;
  static inline bool Result_IsValid(int value) {
    return OffboardResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    OffboardResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    OffboardResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    OffboardResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return OffboardResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return OffboardResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return OffboardResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.offboard.OffboardResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::offboard::OffboardResult_Result result() const;
  void set_result(::mavsdk::rpc::offboard::OffboardResult_Result value);
  private:
  ::mavsdk::rpc::offboard::OffboardResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::offboard::OffboardResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.OffboardResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartRequest

// -------------------------------------------------------------------

// StartResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool StartResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool StartResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void StartResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& StartResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& StartResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.StartResponse.offboard_result)
  return _internal_offboard_result();
}
inline void StartResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.StartResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* StartResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StartResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.StartResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StartResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StartResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.StartResponse.offboard_result)
  return _msg;
}
inline void StartResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.StartResponse.offboard_result)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool StopResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool StopResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void StopResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& StopResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& StopResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.StopResponse.offboard_result)
  return _internal_offboard_result();
}
inline void StopResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.StopResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* StopResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StopResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.StopResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StopResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StopResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.StopResponse.offboard_result)
  return _msg;
}
inline void StopResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.StopResponse.offboard_result)
}

// -------------------------------------------------------------------

// IsActiveRequest

// -------------------------------------------------------------------

// IsActiveResponse

// bool is_active = 1;
inline void IsActiveResponse::clear_is_active() {
  is_active_ = false;
}
inline bool IsActiveResponse::_internal_is_active() const {
  return is_active_;
}
inline bool IsActiveResponse::is_active() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.IsActiveResponse.is_active)
  return _internal_is_active();
}
inline void IsActiveResponse::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void IsActiveResponse::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.IsActiveResponse.is_active)
}

// -------------------------------------------------------------------

// SetAttitudeRequest

// .mavsdk.rpc.offboard.Attitude attitude = 1;
inline bool SetAttitudeRequest::_internal_has_attitude() const {
  return this != internal_default_instance() && attitude_ != nullptr;
}
inline bool SetAttitudeRequest::has_attitude() const {
  return _internal_has_attitude();
}
inline void SetAttitudeRequest::clear_attitude() {
  if (GetArenaForAllocation() == nullptr && attitude_ != nullptr) {
    delete attitude_;
  }
  attitude_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::Attitude& SetAttitudeRequest::_internal_attitude() const {
  const ::mavsdk::rpc::offboard::Attitude* p = attitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::Attitude&>(
      ::mavsdk::rpc::offboard::_Attitude_default_instance_);
}
inline const ::mavsdk::rpc::offboard::Attitude& SetAttitudeRequest::attitude() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
  return _internal_attitude();
}
inline void SetAttitudeRequest::unsafe_arena_set_allocated_attitude(
    ::mavsdk::rpc::offboard::Attitude* attitude) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_);
  }
  attitude_ = attitude;
  if (attitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
}
inline ::mavsdk::rpc::offboard::Attitude* SetAttitudeRequest::release_attitude() {
  
  ::mavsdk::rpc::offboard::Attitude* temp = attitude_;
  attitude_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::Attitude* SetAttitudeRequest::unsafe_arena_release_attitude() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
  
  ::mavsdk::rpc::offboard::Attitude* temp = attitude_;
  attitude_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::Attitude* SetAttitudeRequest::_internal_mutable_attitude() {
  
  if (attitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::Attitude>(GetArenaForAllocation());
    attitude_ = p;
  }
  return attitude_;
}
inline ::mavsdk::rpc::offboard::Attitude* SetAttitudeRequest::mutable_attitude() {
  ::mavsdk::rpc::offboard::Attitude* _msg = _internal_mutable_attitude();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
  return _msg;
}
inline void SetAttitudeRequest::set_allocated_attitude(::mavsdk::rpc::offboard::Attitude* attitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_;
  }
  if (attitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude);
    if (message_arena != submessage_arena) {
      attitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude, submessage_arena);
    }
    
  } else {
    
  }
  attitude_ = attitude;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
}

// -------------------------------------------------------------------

// SetAttitudeResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetAttitudeResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetAttitudeResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetAttitudeResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAttitudeResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAttitudeResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetAttitudeResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
  return _msg;
}
inline void SetAttitudeResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetActuatorControlRequest

// .mavsdk.rpc.offboard.ActuatorControl actuator_control = 1;
inline bool SetActuatorControlRequest::_internal_has_actuator_control() const {
  return this != internal_default_instance() && actuator_control_ != nullptr;
}
inline bool SetActuatorControlRequest::has_actuator_control() const {
  return _internal_has_actuator_control();
}
inline void SetActuatorControlRequest::clear_actuator_control() {
  if (GetArenaForAllocation() == nullptr && actuator_control_ != nullptr) {
    delete actuator_control_;
  }
  actuator_control_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::ActuatorControl& SetActuatorControlRequest::_internal_actuator_control() const {
  const ::mavsdk::rpc::offboard::ActuatorControl* p = actuator_control_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::ActuatorControl&>(
      ::mavsdk::rpc::offboard::_ActuatorControl_default_instance_);
}
inline const ::mavsdk::rpc::offboard::ActuatorControl& SetActuatorControlRequest::actuator_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
  return _internal_actuator_control();
}
inline void SetActuatorControlRequest::unsafe_arena_set_allocated_actuator_control(
    ::mavsdk::rpc::offboard::ActuatorControl* actuator_control) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actuator_control_);
  }
  actuator_control_ = actuator_control;
  if (actuator_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
}
inline ::mavsdk::rpc::offboard::ActuatorControl* SetActuatorControlRequest::release_actuator_control() {
  
  ::mavsdk::rpc::offboard::ActuatorControl* temp = actuator_control_;
  actuator_control_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::ActuatorControl* SetActuatorControlRequest::unsafe_arena_release_actuator_control() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
  
  ::mavsdk::rpc::offboard::ActuatorControl* temp = actuator_control_;
  actuator_control_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::ActuatorControl* SetActuatorControlRequest::_internal_mutable_actuator_control() {
  
  if (actuator_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::ActuatorControl>(GetArenaForAllocation());
    actuator_control_ = p;
  }
  return actuator_control_;
}
inline ::mavsdk::rpc::offboard::ActuatorControl* SetActuatorControlRequest::mutable_actuator_control() {
  ::mavsdk::rpc::offboard::ActuatorControl* _msg = _internal_mutable_actuator_control();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
  return _msg;
}
inline void SetActuatorControlRequest::set_allocated_actuator_control(::mavsdk::rpc::offboard::ActuatorControl* actuator_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete actuator_control_;
  }
  if (actuator_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actuator_control);
    if (message_arena != submessage_arena) {
      actuator_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actuator_control, submessage_arena);
    }
    
  } else {
    
  }
  actuator_control_ = actuator_control;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
}

// -------------------------------------------------------------------

// SetActuatorControlResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetActuatorControlResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetActuatorControlResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetActuatorControlResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetActuatorControlResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetActuatorControlResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetActuatorControlResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetActuatorControlResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetActuatorControlResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetActuatorControlResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetActuatorControlResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
  return _msg;
}
inline void SetActuatorControlResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetAttitudeRateRequest

// .mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1;
inline bool SetAttitudeRateRequest::_internal_has_attitude_rate() const {
  return this != internal_default_instance() && attitude_rate_ != nullptr;
}
inline bool SetAttitudeRateRequest::has_attitude_rate() const {
  return _internal_has_attitude_rate();
}
inline void SetAttitudeRateRequest::clear_attitude_rate() {
  if (GetArenaForAllocation() == nullptr && attitude_rate_ != nullptr) {
    delete attitude_rate_;
  }
  attitude_rate_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::AttitudeRate& SetAttitudeRateRequest::_internal_attitude_rate() const {
  const ::mavsdk::rpc::offboard::AttitudeRate* p = attitude_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::AttitudeRate&>(
      ::mavsdk::rpc::offboard::_AttitudeRate_default_instance_);
}
inline const ::mavsdk::rpc::offboard::AttitudeRate& SetAttitudeRateRequest::attitude_rate() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
  return _internal_attitude_rate();
}
inline void SetAttitudeRateRequest::unsafe_arena_set_allocated_attitude_rate(
    ::mavsdk::rpc::offboard::AttitudeRate* attitude_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_rate_);
  }
  attitude_rate_ = attitude_rate;
  if (attitude_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
}
inline ::mavsdk::rpc::offboard::AttitudeRate* SetAttitudeRateRequest::release_attitude_rate() {
  
  ::mavsdk::rpc::offboard::AttitudeRate* temp = attitude_rate_;
  attitude_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::AttitudeRate* SetAttitudeRateRequest::unsafe_arena_release_attitude_rate() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
  
  ::mavsdk::rpc::offboard::AttitudeRate* temp = attitude_rate_;
  attitude_rate_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::AttitudeRate* SetAttitudeRateRequest::_internal_mutable_attitude_rate() {
  
  if (attitude_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::AttitudeRate>(GetArenaForAllocation());
    attitude_rate_ = p;
  }
  return attitude_rate_;
}
inline ::mavsdk::rpc::offboard::AttitudeRate* SetAttitudeRateRequest::mutable_attitude_rate() {
  ::mavsdk::rpc::offboard::AttitudeRate* _msg = _internal_mutable_attitude_rate();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
  return _msg;
}
inline void SetAttitudeRateRequest::set_allocated_attitude_rate(::mavsdk::rpc::offboard::AttitudeRate* attitude_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_rate_;
  }
  if (attitude_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_rate);
    if (message_arena != submessage_arena) {
      attitude_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_rate, submessage_arena);
    }
    
  } else {
    
  }
  attitude_rate_ = attitude_rate;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
}

// -------------------------------------------------------------------

// SetAttitudeRateResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetAttitudeRateResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetAttitudeRateResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetAttitudeRateResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAttitudeRateResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAttitudeRateResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetAttitudeRateResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeRateResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeRateResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeRateResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeRateResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
  return _msg;
}
inline void SetAttitudeRateResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetPositionNedRequest

// .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
inline bool SetPositionNedRequest::_internal_has_position_ned_yaw() const {
  return this != internal_default_instance() && position_ned_yaw_ != nullptr;
}
inline bool SetPositionNedRequest::has_position_ned_yaw() const {
  return _internal_has_position_ned_yaw();
}
inline void SetPositionNedRequest::clear_position_ned_yaw() {
  if (GetArenaForAllocation() == nullptr && position_ned_yaw_ != nullptr) {
    delete position_ned_yaw_;
  }
  position_ned_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::PositionNedYaw& SetPositionNedRequest::_internal_position_ned_yaw() const {
  const ::mavsdk::rpc::offboard::PositionNedYaw* p = position_ned_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::PositionNedYaw&>(
      ::mavsdk::rpc::offboard::_PositionNedYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::PositionNedYaw& SetPositionNedRequest::position_ned_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
  return _internal_position_ned_yaw();
}
inline void SetPositionNedRequest::unsafe_arena_set_allocated_position_ned_yaw(
    ::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_ned_yaw_);
  }
  position_ned_yaw_ = position_ned_yaw;
  if (position_ned_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionNedRequest::release_position_ned_yaw() {
  
  ::mavsdk::rpc::offboard::PositionNedYaw* temp = position_ned_yaw_;
  position_ned_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionNedRequest::unsafe_arena_release_position_ned_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
  
  ::mavsdk::rpc::offboard::PositionNedYaw* temp = position_ned_yaw_;
  position_ned_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionNedRequest::_internal_mutable_position_ned_yaw() {
  
  if (position_ned_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::PositionNedYaw>(GetArenaForAllocation());
    position_ned_yaw_ = p;
  }
  return position_ned_yaw_;
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionNedRequest::mutable_position_ned_yaw() {
  ::mavsdk::rpc::offboard::PositionNedYaw* _msg = _internal_mutable_position_ned_yaw();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
  return _msg;
}
inline void SetPositionNedRequest::set_allocated_position_ned_yaw(::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_ned_yaw_;
  }
  if (position_ned_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_ned_yaw);
    if (message_arena != submessage_arena) {
      position_ned_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_ned_yaw, submessage_arena);
    }
    
  } else {
    
  }
  position_ned_yaw_ = position_ned_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
}

// -------------------------------------------------------------------

// SetPositionNedResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetPositionNedResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetPositionNedResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetPositionNedResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionNedResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionNedResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetPositionNedResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionNedResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionNedResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionNedResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionNedResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
  return _msg;
}
inline void SetPositionNedResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetPositionGlobalRequest

// .mavsdk.rpc.offboard.PositionGlobalYaw position_global_yaw = 1;
inline bool SetPositionGlobalRequest::_internal_has_position_global_yaw() const {
  return this != internal_default_instance() && position_global_yaw_ != nullptr;
}
inline bool SetPositionGlobalRequest::has_position_global_yaw() const {
  return _internal_has_position_global_yaw();
}
inline void SetPositionGlobalRequest::clear_position_global_yaw() {
  if (GetArenaForAllocation() == nullptr && position_global_yaw_ != nullptr) {
    delete position_global_yaw_;
  }
  position_global_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::PositionGlobalYaw& SetPositionGlobalRequest::_internal_position_global_yaw() const {
  const ::mavsdk::rpc::offboard::PositionGlobalYaw* p = position_global_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::PositionGlobalYaw&>(
      ::mavsdk::rpc::offboard::_PositionGlobalYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::PositionGlobalYaw& SetPositionGlobalRequest::position_global_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
  return _internal_position_global_yaw();
}
inline void SetPositionGlobalRequest::unsafe_arena_set_allocated_position_global_yaw(
    ::mavsdk::rpc::offboard::PositionGlobalYaw* position_global_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_global_yaw_);
  }
  position_global_yaw_ = position_global_yaw;
  if (position_global_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw* SetPositionGlobalRequest::release_position_global_yaw() {
  
  ::mavsdk::rpc::offboard::PositionGlobalYaw* temp = position_global_yaw_;
  position_global_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw* SetPositionGlobalRequest::unsafe_arena_release_position_global_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
  
  ::mavsdk::rpc::offboard::PositionGlobalYaw* temp = position_global_yaw_;
  position_global_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw* SetPositionGlobalRequest::_internal_mutable_position_global_yaw() {
  
  if (position_global_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::PositionGlobalYaw>(GetArenaForAllocation());
    position_global_yaw_ = p;
  }
  return position_global_yaw_;
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw* SetPositionGlobalRequest::mutable_position_global_yaw() {
  ::mavsdk::rpc::offboard::PositionGlobalYaw* _msg = _internal_mutable_position_global_yaw();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
  return _msg;
}
inline void SetPositionGlobalRequest::set_allocated_position_global_yaw(::mavsdk::rpc::offboard::PositionGlobalYaw* position_global_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_global_yaw_;
  }
  if (position_global_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_global_yaw);
    if (message_arena != submessage_arena) {
      position_global_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_global_yaw, submessage_arena);
    }
    
  } else {
    
  }
  position_global_yaw_ = position_global_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
}

// -------------------------------------------------------------------

// SetPositionGlobalResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetPositionGlobalResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetPositionGlobalResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetPositionGlobalResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionGlobalResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionGlobalResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetPositionGlobalResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionGlobalResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionGlobalResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionGlobalResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionGlobalResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
  return _msg;
}
inline void SetPositionGlobalResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetVelocityBodyRequest

// .mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1;
inline bool SetVelocityBodyRequest::_internal_has_velocity_body_yawspeed() const {
  return this != internal_default_instance() && velocity_body_yawspeed_ != nullptr;
}
inline bool SetVelocityBodyRequest::has_velocity_body_yawspeed() const {
  return _internal_has_velocity_body_yawspeed();
}
inline void SetVelocityBodyRequest::clear_velocity_body_yawspeed() {
  if (GetArenaForAllocation() == nullptr && velocity_body_yawspeed_ != nullptr) {
    delete velocity_body_yawspeed_;
  }
  velocity_body_yawspeed_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& SetVelocityBodyRequest::_internal_velocity_body_yawspeed() const {
  const ::mavsdk::rpc::offboard::VelocityBodyYawspeed* p = velocity_body_yawspeed_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::VelocityBodyYawspeed&>(
      ::mavsdk::rpc::offboard::_VelocityBodyYawspeed_default_instance_);
}
inline const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& SetVelocityBodyRequest::velocity_body_yawspeed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
  return _internal_velocity_body_yawspeed();
}
inline void SetVelocityBodyRequest::unsafe_arena_set_allocated_velocity_body_yawspeed(
    ::mavsdk::rpc::offboard::VelocityBodyYawspeed* velocity_body_yawspeed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_body_yawspeed_);
  }
  velocity_body_yawspeed_ = velocity_body_yawspeed;
  if (velocity_body_yawspeed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
}
inline ::mavsdk::rpc::offboard::VelocityBodyYawspeed* SetVelocityBodyRequest::release_velocity_body_yawspeed() {
  
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* temp = velocity_body_yawspeed_;
  velocity_body_yawspeed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityBodyYawspeed* SetVelocityBodyRequest::unsafe_arena_release_velocity_body_yawspeed() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
  
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* temp = velocity_body_yawspeed_;
  velocity_body_yawspeed_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityBodyYawspeed* SetVelocityBodyRequest::_internal_mutable_velocity_body_yawspeed() {
  
  if (velocity_body_yawspeed_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityBodyYawspeed>(GetArenaForAllocation());
    velocity_body_yawspeed_ = p;
  }
  return velocity_body_yawspeed_;
}
inline ::mavsdk::rpc::offboard::VelocityBodyYawspeed* SetVelocityBodyRequest::mutable_velocity_body_yawspeed() {
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* _msg = _internal_mutable_velocity_body_yawspeed();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
  return _msg;
}
inline void SetVelocityBodyRequest::set_allocated_velocity_body_yawspeed(::mavsdk::rpc::offboard::VelocityBodyYawspeed* velocity_body_yawspeed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_body_yawspeed_;
  }
  if (velocity_body_yawspeed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_body_yawspeed);
    if (message_arena != submessage_arena) {
      velocity_body_yawspeed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_body_yawspeed, submessage_arena);
    }
    
  } else {
    
  }
  velocity_body_yawspeed_ = velocity_body_yawspeed;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
}

// -------------------------------------------------------------------

// SetVelocityBodyResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetVelocityBodyResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetVelocityBodyResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetVelocityBodyResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityBodyResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityBodyResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetVelocityBodyResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityBodyResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityBodyResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityBodyResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityBodyResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
  return _msg;
}
inline void SetVelocityBodyResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetVelocityNedRequest

// .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1;
inline bool SetVelocityNedRequest::_internal_has_velocity_ned_yaw() const {
  return this != internal_default_instance() && velocity_ned_yaw_ != nullptr;
}
inline bool SetVelocityNedRequest::has_velocity_ned_yaw() const {
  return _internal_has_velocity_ned_yaw();
}
inline void SetVelocityNedRequest::clear_velocity_ned_yaw() {
  if (GetArenaForAllocation() == nullptr && velocity_ned_yaw_ != nullptr) {
    delete velocity_ned_yaw_;
  }
  velocity_ned_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::VelocityNedYaw& SetVelocityNedRequest::_internal_velocity_ned_yaw() const {
  const ::mavsdk::rpc::offboard::VelocityNedYaw* p = velocity_ned_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::VelocityNedYaw&>(
      ::mavsdk::rpc::offboard::_VelocityNedYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::VelocityNedYaw& SetVelocityNedRequest::velocity_ned_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
  return _internal_velocity_ned_yaw();
}
inline void SetVelocityNedRequest::unsafe_arena_set_allocated_velocity_ned_yaw(
    ::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_ned_yaw_);
  }
  velocity_ned_yaw_ = velocity_ned_yaw;
  if (velocity_ned_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetVelocityNedRequest::release_velocity_ned_yaw() {
  
  ::mavsdk::rpc::offboard::VelocityNedYaw* temp = velocity_ned_yaw_;
  velocity_ned_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetVelocityNedRequest::unsafe_arena_release_velocity_ned_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
  
  ::mavsdk::rpc::offboard::VelocityNedYaw* temp = velocity_ned_yaw_;
  velocity_ned_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetVelocityNedRequest::_internal_mutable_velocity_ned_yaw() {
  
  if (velocity_ned_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityNedYaw>(GetArenaForAllocation());
    velocity_ned_yaw_ = p;
  }
  return velocity_ned_yaw_;
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetVelocityNedRequest::mutable_velocity_ned_yaw() {
  ::mavsdk::rpc::offboard::VelocityNedYaw* _msg = _internal_mutable_velocity_ned_yaw();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
  return _msg;
}
inline void SetVelocityNedRequest::set_allocated_velocity_ned_yaw(::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_ned_yaw_;
  }
  if (velocity_ned_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_ned_yaw);
    if (message_arena != submessage_arena) {
      velocity_ned_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_ned_yaw, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ned_yaw_ = velocity_ned_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
}

// -------------------------------------------------------------------

// SetVelocityNedResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetVelocityNedResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetVelocityNedResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetVelocityNedResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityNedResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityNedResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetVelocityNedResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityNedResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityNedResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityNedResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityNedResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
  return _msg;
}
inline void SetVelocityNedResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetPositionVelocityNedRequest

// .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
inline bool SetPositionVelocityNedRequest::_internal_has_position_ned_yaw() const {
  return this != internal_default_instance() && position_ned_yaw_ != nullptr;
}
inline bool SetPositionVelocityNedRequest::has_position_ned_yaw() const {
  return _internal_has_position_ned_yaw();
}
inline void SetPositionVelocityNedRequest::clear_position_ned_yaw() {
  if (GetArenaForAllocation() == nullptr && position_ned_yaw_ != nullptr) {
    delete position_ned_yaw_;
  }
  position_ned_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::PositionNedYaw& SetPositionVelocityNedRequest::_internal_position_ned_yaw() const {
  const ::mavsdk::rpc::offboard::PositionNedYaw* p = position_ned_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::PositionNedYaw&>(
      ::mavsdk::rpc::offboard::_PositionNedYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::PositionNedYaw& SetPositionVelocityNedRequest::position_ned_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.position_ned_yaw)
  return _internal_position_ned_yaw();
}
inline void SetPositionVelocityNedRequest::unsafe_arena_set_allocated_position_ned_yaw(
    ::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_ned_yaw_);
  }
  position_ned_yaw_ = position_ned_yaw;
  if (position_ned_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.position_ned_yaw)
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionVelocityNedRequest::release_position_ned_yaw() {
  
  ::mavsdk::rpc::offboard::PositionNedYaw* temp = position_ned_yaw_;
  position_ned_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionVelocityNedRequest::unsafe_arena_release_position_ned_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.position_ned_yaw)
  
  ::mavsdk::rpc::offboard::PositionNedYaw* temp = position_ned_yaw_;
  position_ned_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionVelocityNedRequest::_internal_mutable_position_ned_yaw() {
  
  if (position_ned_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::PositionNedYaw>(GetArenaForAllocation());
    position_ned_yaw_ = p;
  }
  return position_ned_yaw_;
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionVelocityNedRequest::mutable_position_ned_yaw() {
  ::mavsdk::rpc::offboard::PositionNedYaw* _msg = _internal_mutable_position_ned_yaw();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.position_ned_yaw)
  return _msg;
}
inline void SetPositionVelocityNedRequest::set_allocated_position_ned_yaw(::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_ned_yaw_;
  }
  if (position_ned_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_ned_yaw);
    if (message_arena != submessage_arena) {
      position_ned_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_ned_yaw, submessage_arena);
    }
    
  } else {
    
  }
  position_ned_yaw_ = position_ned_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.position_ned_yaw)
}

// .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2;
inline bool SetPositionVelocityNedRequest::_internal_has_velocity_ned_yaw() const {
  return this != internal_default_instance() && velocity_ned_yaw_ != nullptr;
}
inline bool SetPositionVelocityNedRequest::has_velocity_ned_yaw() const {
  return _internal_has_velocity_ned_yaw();
}
inline void SetPositionVelocityNedRequest::clear_velocity_ned_yaw() {
  if (GetArenaForAllocation() == nullptr && velocity_ned_yaw_ != nullptr) {
    delete velocity_ned_yaw_;
  }
  velocity_ned_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::VelocityNedYaw& SetPositionVelocityNedRequest::_internal_velocity_ned_yaw() const {
  const ::mavsdk::rpc::offboard::VelocityNedYaw* p = velocity_ned_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::VelocityNedYaw&>(
      ::mavsdk::rpc::offboard::_VelocityNedYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::VelocityNedYaw& SetPositionVelocityNedRequest::velocity_ned_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.velocity_ned_yaw)
  return _internal_velocity_ned_yaw();
}
inline void SetPositionVelocityNedRequest::unsafe_arena_set_allocated_velocity_ned_yaw(
    ::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_ned_yaw_);
  }
  velocity_ned_yaw_ = velocity_ned_yaw;
  if (velocity_ned_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.velocity_ned_yaw)
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetPositionVelocityNedRequest::release_velocity_ned_yaw() {
  
  ::mavsdk::rpc::offboard::VelocityNedYaw* temp = velocity_ned_yaw_;
  velocity_ned_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetPositionVelocityNedRequest::unsafe_arena_release_velocity_ned_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.velocity_ned_yaw)
  
  ::mavsdk::rpc::offboard::VelocityNedYaw* temp = velocity_ned_yaw_;
  velocity_ned_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetPositionVelocityNedRequest::_internal_mutable_velocity_ned_yaw() {
  
  if (velocity_ned_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityNedYaw>(GetArenaForAllocation());
    velocity_ned_yaw_ = p;
  }
  return velocity_ned_yaw_;
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetPositionVelocityNedRequest::mutable_velocity_ned_yaw() {
  ::mavsdk::rpc::offboard::VelocityNedYaw* _msg = _internal_mutable_velocity_ned_yaw();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.velocity_ned_yaw)
  return _msg;
}
inline void SetPositionVelocityNedRequest::set_allocated_velocity_ned_yaw(::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_ned_yaw_;
  }
  if (velocity_ned_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_ned_yaw);
    if (message_arena != submessage_arena) {
      velocity_ned_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_ned_yaw, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ned_yaw_ = velocity_ned_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionVelocityNedRequest.velocity_ned_yaw)
}

// -------------------------------------------------------------------

// SetPositionVelocityNedResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetPositionVelocityNedResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetPositionVelocityNedResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetPositionVelocityNedResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionVelocityNedResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionVelocityNedResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionVelocityNedResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetPositionVelocityNedResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetPositionVelocityNedResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionVelocityNedResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionVelocityNedResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionVelocityNedResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionVelocityNedResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionVelocityNedResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionVelocityNedResponse.offboard_result)
  return _msg;
}
inline void SetPositionVelocityNedResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionVelocityNedResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetAccelerationNedRequest

// .mavsdk.rpc.offboard.AccelerationNed acceleration_ned = 1;
inline bool SetAccelerationNedRequest::_internal_has_acceleration_ned() const {
  return this != internal_default_instance() && acceleration_ned_ != nullptr;
}
inline bool SetAccelerationNedRequest::has_acceleration_ned() const {
  return _internal_has_acceleration_ned();
}
inline void SetAccelerationNedRequest::clear_acceleration_ned() {
  if (GetArenaForAllocation() == nullptr && acceleration_ned_ != nullptr) {
    delete acceleration_ned_;
  }
  acceleration_ned_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::AccelerationNed& SetAccelerationNedRequest::_internal_acceleration_ned() const {
  const ::mavsdk::rpc::offboard::AccelerationNed* p = acceleration_ned_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::AccelerationNed&>(
      ::mavsdk::rpc::offboard::_AccelerationNed_default_instance_);
}
inline const ::mavsdk::rpc::offboard::AccelerationNed& SetAccelerationNedRequest::acceleration_ned() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAccelerationNedRequest.acceleration_ned)
  return _internal_acceleration_ned();
}
inline void SetAccelerationNedRequest::unsafe_arena_set_allocated_acceleration_ned(
    ::mavsdk::rpc::offboard::AccelerationNed* acceleration_ned) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_ned_);
  }
  acceleration_ned_ = acceleration_ned;
  if (acceleration_ned) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetAccelerationNedRequest.acceleration_ned)
}
inline ::mavsdk::rpc::offboard::AccelerationNed* SetAccelerationNedRequest::release_acceleration_ned() {
  
  ::mavsdk::rpc::offboard::AccelerationNed* temp = acceleration_ned_;
  acceleration_ned_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::AccelerationNed* SetAccelerationNedRequest::unsafe_arena_release_acceleration_ned() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAccelerationNedRequest.acceleration_ned)
  
  ::mavsdk::rpc::offboard::AccelerationNed* temp = acceleration_ned_;
  acceleration_ned_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::AccelerationNed* SetAccelerationNedRequest::_internal_mutable_acceleration_ned() {
  
  if (acceleration_ned_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::AccelerationNed>(GetArenaForAllocation());
    acceleration_ned_ = p;
  }
  return acceleration_ned_;
}
inline ::mavsdk::rpc::offboard::AccelerationNed* SetAccelerationNedRequest::mutable_acceleration_ned() {
  ::mavsdk::rpc::offboard::AccelerationNed* _msg = _internal_mutable_acceleration_ned();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAccelerationNedRequest.acceleration_ned)
  return _msg;
}
inline void SetAccelerationNedRequest::set_allocated_acceleration_ned(::mavsdk::rpc::offboard::AccelerationNed* acceleration_ned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acceleration_ned_;
  }
  if (acceleration_ned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acceleration_ned);
    if (message_arena != submessage_arena) {
      acceleration_ned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration_ned, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ned_ = acceleration_ned;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAccelerationNedRequest.acceleration_ned)
}

// -------------------------------------------------------------------

// SetAccelerationNedResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetAccelerationNedResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetAccelerationNedResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetAccelerationNedResponse::clear_offboard_result() {
  if (GetArenaForAllocation() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAccelerationNedResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult&>(
      ::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAccelerationNedResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAccelerationNedResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetAccelerationNedResponse::unsafe_arena_set_allocated_offboard_result(
    ::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offboard_result_);
  }
  offboard_result_ = offboard_result;
  if (offboard_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.offboard.SetAccelerationNedResponse.offboard_result)
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAccelerationNedResponse::release_offboard_result() {
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAccelerationNedResponse::unsafe_arena_release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAccelerationNedResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAccelerationNedResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaForAllocation());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAccelerationNedResponse::mutable_offboard_result() {
  ::mavsdk::rpc::offboard::OffboardResult* _msg = _internal_mutable_offboard_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAccelerationNedResponse.offboard_result)
  return _msg;
}
inline void SetAccelerationNedResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offboard_result);
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAccelerationNedResponse.offboard_result)
}

// -------------------------------------------------------------------

// Attitude

// float roll_deg = 1;
inline void Attitude::clear_roll_deg() {
  roll_deg_ = 0;
}
inline float Attitude::_internal_roll_deg() const {
  return roll_deg_;
}
inline float Attitude::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.Attitude.roll_deg)
  return _internal_roll_deg();
}
inline void Attitude::_internal_set_roll_deg(float value) {
  
  roll_deg_ = value;
}
inline void Attitude::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.Attitude.roll_deg)
}

// float pitch_deg = 2;
inline void Attitude::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline float Attitude::_internal_pitch_deg() const {
  return pitch_deg_;
}
inline float Attitude::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.Attitude.pitch_deg)
  return _internal_pitch_deg();
}
inline void Attitude::_internal_set_pitch_deg(float value) {
  
  pitch_deg_ = value;
}
inline void Attitude::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.Attitude.pitch_deg)
}

// float yaw_deg = 3;
inline void Attitude::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float Attitude::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float Attitude::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.Attitude.yaw_deg)
  return _internal_yaw_deg();
}
inline void Attitude::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void Attitude::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.Attitude.yaw_deg)
}

// float thrust_value = 4;
inline void Attitude::clear_thrust_value() {
  thrust_value_ = 0;
}
inline float Attitude::_internal_thrust_value() const {
  return thrust_value_;
}
inline float Attitude::thrust_value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.Attitude.thrust_value)
  return _internal_thrust_value();
}
inline void Attitude::_internal_set_thrust_value(float value) {
  
  thrust_value_ = value;
}
inline void Attitude::set_thrust_value(float value) {
  _internal_set_thrust_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.Attitude.thrust_value)
}

// -------------------------------------------------------------------

// ActuatorControlGroup

// repeated float controls = 1;
inline int ActuatorControlGroup::_internal_controls_size() const {
  return controls_.size();
}
inline int ActuatorControlGroup::controls_size() const {
  return _internal_controls_size();
}
inline void ActuatorControlGroup::clear_controls() {
  controls_.Clear();
}
inline float ActuatorControlGroup::_internal_controls(int index) const {
  return controls_.Get(index);
}
inline float ActuatorControlGroup::controls(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
  return _internal_controls(index);
}
inline void ActuatorControlGroup::set_controls(int index, float value) {
  controls_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
}
inline void ActuatorControlGroup::_internal_add_controls(float value) {
  controls_.Add(value);
}
inline void ActuatorControlGroup::add_controls(float value) {
  _internal_add_controls(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlGroup::_internal_controls() const {
  return controls_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlGroup::controls() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
  return _internal_controls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlGroup::_internal_mutable_controls() {
  return &controls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlGroup::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
  return _internal_mutable_controls();
}

// -------------------------------------------------------------------

// ActuatorControl

// repeated .mavsdk.rpc.offboard.ActuatorControlGroup groups = 1;
inline int ActuatorControl::_internal_groups_size() const {
  return groups_.size();
}
inline int ActuatorControl::groups_size() const {
  return _internal_groups_size();
}
inline void ActuatorControl::clear_groups() {
  groups_.Clear();
}
inline ::mavsdk::rpc::offboard::ActuatorControlGroup* ActuatorControl::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.ActuatorControl.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup >*
ActuatorControl::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.offboard.ActuatorControl.groups)
  return &groups_;
}
inline const ::mavsdk::rpc::offboard::ActuatorControlGroup& ActuatorControl::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::mavsdk::rpc::offboard::ActuatorControlGroup& ActuatorControl::groups(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.ActuatorControl.groups)
  return _internal_groups(index);
}
inline ::mavsdk::rpc::offboard::ActuatorControlGroup* ActuatorControl::_internal_add_groups() {
  return groups_.Add();
}
inline ::mavsdk::rpc::offboard::ActuatorControlGroup* ActuatorControl::add_groups() {
  ::mavsdk::rpc::offboard::ActuatorControlGroup* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.offboard.ActuatorControl.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup >&
ActuatorControl::groups() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.offboard.ActuatorControl.groups)
  return groups_;
}

// -------------------------------------------------------------------

// AttitudeRate

// float roll_deg_s = 1;
inline void AttitudeRate::clear_roll_deg_s() {
  roll_deg_s_ = 0;
}
inline float AttitudeRate::_internal_roll_deg_s() const {
  return roll_deg_s_;
}
inline float AttitudeRate::roll_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AttitudeRate.roll_deg_s)
  return _internal_roll_deg_s();
}
inline void AttitudeRate::_internal_set_roll_deg_s(float value) {
  
  roll_deg_s_ = value;
}
inline void AttitudeRate::set_roll_deg_s(float value) {
  _internal_set_roll_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AttitudeRate.roll_deg_s)
}

// float pitch_deg_s = 2;
inline void AttitudeRate::clear_pitch_deg_s() {
  pitch_deg_s_ = 0;
}
inline float AttitudeRate::_internal_pitch_deg_s() const {
  return pitch_deg_s_;
}
inline float AttitudeRate::pitch_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AttitudeRate.pitch_deg_s)
  return _internal_pitch_deg_s();
}
inline void AttitudeRate::_internal_set_pitch_deg_s(float value) {
  
  pitch_deg_s_ = value;
}
inline void AttitudeRate::set_pitch_deg_s(float value) {
  _internal_set_pitch_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AttitudeRate.pitch_deg_s)
}

// float yaw_deg_s = 3;
inline void AttitudeRate::clear_yaw_deg_s() {
  yaw_deg_s_ = 0;
}
inline float AttitudeRate::_internal_yaw_deg_s() const {
  return yaw_deg_s_;
}
inline float AttitudeRate::yaw_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AttitudeRate.yaw_deg_s)
  return _internal_yaw_deg_s();
}
inline void AttitudeRate::_internal_set_yaw_deg_s(float value) {
  
  yaw_deg_s_ = value;
}
inline void AttitudeRate::set_yaw_deg_s(float value) {
  _internal_set_yaw_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AttitudeRate.yaw_deg_s)
}

// float thrust_value = 4;
inline void AttitudeRate::clear_thrust_value() {
  thrust_value_ = 0;
}
inline float AttitudeRate::_internal_thrust_value() const {
  return thrust_value_;
}
inline float AttitudeRate::thrust_value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AttitudeRate.thrust_value)
  return _internal_thrust_value();
}
inline void AttitudeRate::_internal_set_thrust_value(float value) {
  
  thrust_value_ = value;
}
inline void AttitudeRate::set_thrust_value(float value) {
  _internal_set_thrust_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AttitudeRate.thrust_value)
}

// -------------------------------------------------------------------

// PositionNedYaw

// float north_m = 1;
inline void PositionNedYaw::clear_north_m() {
  north_m_ = 0;
}
inline float PositionNedYaw::_internal_north_m() const {
  return north_m_;
}
inline float PositionNedYaw::north_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionNedYaw.north_m)
  return _internal_north_m();
}
inline void PositionNedYaw::_internal_set_north_m(float value) {
  
  north_m_ = value;
}
inline void PositionNedYaw::set_north_m(float value) {
  _internal_set_north_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionNedYaw.north_m)
}

// float east_m = 2;
inline void PositionNedYaw::clear_east_m() {
  east_m_ = 0;
}
inline float PositionNedYaw::_internal_east_m() const {
  return east_m_;
}
inline float PositionNedYaw::east_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionNedYaw.east_m)
  return _internal_east_m();
}
inline void PositionNedYaw::_internal_set_east_m(float value) {
  
  east_m_ = value;
}
inline void PositionNedYaw::set_east_m(float value) {
  _internal_set_east_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionNedYaw.east_m)
}

// float down_m = 3;
inline void PositionNedYaw::clear_down_m() {
  down_m_ = 0;
}
inline float PositionNedYaw::_internal_down_m() const {
  return down_m_;
}
inline float PositionNedYaw::down_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionNedYaw.down_m)
  return _internal_down_m();
}
inline void PositionNedYaw::_internal_set_down_m(float value) {
  
  down_m_ = value;
}
inline void PositionNedYaw::set_down_m(float value) {
  _internal_set_down_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionNedYaw.down_m)
}

// float yaw_deg = 4;
inline void PositionNedYaw::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float PositionNedYaw::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float PositionNedYaw::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionNedYaw.yaw_deg)
  return _internal_yaw_deg();
}
inline void PositionNedYaw::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void PositionNedYaw::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionNedYaw.yaw_deg)
}

// -------------------------------------------------------------------

// PositionGlobalYaw

// double lat_deg = 1;
inline void PositionGlobalYaw::clear_lat_deg() {
  lat_deg_ = 0;
}
inline double PositionGlobalYaw::_internal_lat_deg() const {
  return lat_deg_;
}
inline double PositionGlobalYaw::lat_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.lat_deg)
  return _internal_lat_deg();
}
inline void PositionGlobalYaw::_internal_set_lat_deg(double value) {
  
  lat_deg_ = value;
}
inline void PositionGlobalYaw::set_lat_deg(double value) {
  _internal_set_lat_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.lat_deg)
}

// double lon_deg = 2;
inline void PositionGlobalYaw::clear_lon_deg() {
  lon_deg_ = 0;
}
inline double PositionGlobalYaw::_internal_lon_deg() const {
  return lon_deg_;
}
inline double PositionGlobalYaw::lon_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.lon_deg)
  return _internal_lon_deg();
}
inline void PositionGlobalYaw::_internal_set_lon_deg(double value) {
  
  lon_deg_ = value;
}
inline void PositionGlobalYaw::set_lon_deg(double value) {
  _internal_set_lon_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.lon_deg)
}

// float alt_m = 3;
inline void PositionGlobalYaw::clear_alt_m() {
  alt_m_ = 0;
}
inline float PositionGlobalYaw::_internal_alt_m() const {
  return alt_m_;
}
inline float PositionGlobalYaw::alt_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.alt_m)
  return _internal_alt_m();
}
inline void PositionGlobalYaw::_internal_set_alt_m(float value) {
  
  alt_m_ = value;
}
inline void PositionGlobalYaw::set_alt_m(float value) {
  _internal_set_alt_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.alt_m)
}

// float yaw_deg = 4;
inline void PositionGlobalYaw::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float PositionGlobalYaw::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float PositionGlobalYaw::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.yaw_deg)
  return _internal_yaw_deg();
}
inline void PositionGlobalYaw::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void PositionGlobalYaw::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.yaw_deg)
}

// .mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType altitude_type = 5;
inline void PositionGlobalYaw::clear_altitude_type() {
  altitude_type_ = 0;
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType PositionGlobalYaw::_internal_altitude_type() const {
  return static_cast< ::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType >(altitude_type_);
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType PositionGlobalYaw::altitude_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.altitude_type)
  return _internal_altitude_type();
}
inline void PositionGlobalYaw::_internal_set_altitude_type(::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType value) {
  
  altitude_type_ = value;
}
inline void PositionGlobalYaw::set_altitude_type(::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType value) {
  _internal_set_altitude_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.altitude_type)
}

// -------------------------------------------------------------------

// VelocityBodyYawspeed

// float forward_m_s = 1;
inline void VelocityBodyYawspeed::clear_forward_m_s() {
  forward_m_s_ = 0;
}
inline float VelocityBodyYawspeed::_internal_forward_m_s() const {
  return forward_m_s_;
}
inline float VelocityBodyYawspeed::forward_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityBodyYawspeed.forward_m_s)
  return _internal_forward_m_s();
}
inline void VelocityBodyYawspeed::_internal_set_forward_m_s(float value) {
  
  forward_m_s_ = value;
}
inline void VelocityBodyYawspeed::set_forward_m_s(float value) {
  _internal_set_forward_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityBodyYawspeed.forward_m_s)
}

// float right_m_s = 2;
inline void VelocityBodyYawspeed::clear_right_m_s() {
  right_m_s_ = 0;
}
inline float VelocityBodyYawspeed::_internal_right_m_s() const {
  return right_m_s_;
}
inline float VelocityBodyYawspeed::right_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityBodyYawspeed.right_m_s)
  return _internal_right_m_s();
}
inline void VelocityBodyYawspeed::_internal_set_right_m_s(float value) {
  
  right_m_s_ = value;
}
inline void VelocityBodyYawspeed::set_right_m_s(float value) {
  _internal_set_right_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityBodyYawspeed.right_m_s)
}

// float down_m_s = 3;
inline void VelocityBodyYawspeed::clear_down_m_s() {
  down_m_s_ = 0;
}
inline float VelocityBodyYawspeed::_internal_down_m_s() const {
  return down_m_s_;
}
inline float VelocityBodyYawspeed::down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityBodyYawspeed.down_m_s)
  return _internal_down_m_s();
}
inline void VelocityBodyYawspeed::_internal_set_down_m_s(float value) {
  
  down_m_s_ = value;
}
inline void VelocityBodyYawspeed::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityBodyYawspeed.down_m_s)
}

// float yawspeed_deg_s = 4;
inline void VelocityBodyYawspeed::clear_yawspeed_deg_s() {
  yawspeed_deg_s_ = 0;
}
inline float VelocityBodyYawspeed::_internal_yawspeed_deg_s() const {
  return yawspeed_deg_s_;
}
inline float VelocityBodyYawspeed::yawspeed_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityBodyYawspeed.yawspeed_deg_s)
  return _internal_yawspeed_deg_s();
}
inline void VelocityBodyYawspeed::_internal_set_yawspeed_deg_s(float value) {
  
  yawspeed_deg_s_ = value;
}
inline void VelocityBodyYawspeed::set_yawspeed_deg_s(float value) {
  _internal_set_yawspeed_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityBodyYawspeed.yawspeed_deg_s)
}

// -------------------------------------------------------------------

// VelocityNedYaw

// float north_m_s = 1;
inline void VelocityNedYaw::clear_north_m_s() {
  north_m_s_ = 0;
}
inline float VelocityNedYaw::_internal_north_m_s() const {
  return north_m_s_;
}
inline float VelocityNedYaw::north_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityNedYaw.north_m_s)
  return _internal_north_m_s();
}
inline void VelocityNedYaw::_internal_set_north_m_s(float value) {
  
  north_m_s_ = value;
}
inline void VelocityNedYaw::set_north_m_s(float value) {
  _internal_set_north_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityNedYaw.north_m_s)
}

// float east_m_s = 2;
inline void VelocityNedYaw::clear_east_m_s() {
  east_m_s_ = 0;
}
inline float VelocityNedYaw::_internal_east_m_s() const {
  return east_m_s_;
}
inline float VelocityNedYaw::east_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityNedYaw.east_m_s)
  return _internal_east_m_s();
}
inline void VelocityNedYaw::_internal_set_east_m_s(float value) {
  
  east_m_s_ = value;
}
inline void VelocityNedYaw::set_east_m_s(float value) {
  _internal_set_east_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityNedYaw.east_m_s)
}

// float down_m_s = 3;
inline void VelocityNedYaw::clear_down_m_s() {
  down_m_s_ = 0;
}
inline float VelocityNedYaw::_internal_down_m_s() const {
  return down_m_s_;
}
inline float VelocityNedYaw::down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityNedYaw.down_m_s)
  return _internal_down_m_s();
}
inline void VelocityNedYaw::_internal_set_down_m_s(float value) {
  
  down_m_s_ = value;
}
inline void VelocityNedYaw::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityNedYaw.down_m_s)
}

// float yaw_deg = 4;
inline void VelocityNedYaw::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float VelocityNedYaw::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float VelocityNedYaw::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityNedYaw.yaw_deg)
  return _internal_yaw_deg();
}
inline void VelocityNedYaw::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void VelocityNedYaw::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityNedYaw.yaw_deg)
}

// -------------------------------------------------------------------

// AccelerationNed

// float north_m_s2 = 1;
inline void AccelerationNed::clear_north_m_s2() {
  north_m_s2_ = 0;
}
inline float AccelerationNed::_internal_north_m_s2() const {
  return north_m_s2_;
}
inline float AccelerationNed::north_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AccelerationNed.north_m_s2)
  return _internal_north_m_s2();
}
inline void AccelerationNed::_internal_set_north_m_s2(float value) {
  
  north_m_s2_ = value;
}
inline void AccelerationNed::set_north_m_s2(float value) {
  _internal_set_north_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AccelerationNed.north_m_s2)
}

// float east_m_s2 = 2;
inline void AccelerationNed::clear_east_m_s2() {
  east_m_s2_ = 0;
}
inline float AccelerationNed::_internal_east_m_s2() const {
  return east_m_s2_;
}
inline float AccelerationNed::east_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AccelerationNed.east_m_s2)
  return _internal_east_m_s2();
}
inline void AccelerationNed::_internal_set_east_m_s2(float value) {
  
  east_m_s2_ = value;
}
inline void AccelerationNed::set_east_m_s2(float value) {
  _internal_set_east_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AccelerationNed.east_m_s2)
}

// float down_m_s2 = 3;
inline void AccelerationNed::clear_down_m_s2() {
  down_m_s2_ = 0;
}
inline float AccelerationNed::_internal_down_m_s2() const {
  return down_m_s2_;
}
inline float AccelerationNed::down_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AccelerationNed.down_m_s2)
  return _internal_down_m_s2();
}
inline void AccelerationNed::_internal_set_down_m_s2(float value) {
  
  down_m_s2_ = value;
}
inline void AccelerationNed::set_down_m_s2(float value) {
  _internal_set_down_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AccelerationNed.down_m_s2)
}

// -------------------------------------------------------------------

// OffboardResult

// .mavsdk.rpc.offboard.OffboardResult.Result result = 1;
inline void OffboardResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::offboard::OffboardResult_Result OffboardResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::offboard::OffboardResult_Result >(result_);
}
inline ::mavsdk::rpc::offboard::OffboardResult_Result OffboardResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.OffboardResult.result)
  return _internal_result();
}
inline void OffboardResult::_internal_set_result(::mavsdk::rpc::offboard::OffboardResult_Result value) {
  
  result_ = value;
}
inline void OffboardResult::set_result(::mavsdk::rpc::offboard::OffboardResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.OffboardResult.result)
}

// string result_str = 2;
inline void OffboardResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& OffboardResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.OffboardResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OffboardResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.OffboardResult.result_str)
}
inline std::string* OffboardResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.OffboardResult.result_str)
  return _s;
}
inline const std::string& OffboardResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void OffboardResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* OffboardResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* OffboardResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.OffboardResult.result_str)
  return result_str_.Release();
}
inline void OffboardResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.OffboardResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace offboard
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType>() {
  return ::mavsdk::rpc::offboard::PositionGlobalYaw_AltitudeType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::offboard::OffboardResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::offboard::OffboardResult_Result>() {
  return ::mavsdk::rpc::offboard::OffboardResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_offboard_2foffboard_2eproto
