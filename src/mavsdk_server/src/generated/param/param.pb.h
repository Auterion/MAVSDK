// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param/param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_param_2fparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_param_2fparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_param_2fparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_param_2fparam_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_param_2fparam_2eproto;
namespace mavsdk {
namespace rpc {
namespace param {
class AllParams;
struct AllParamsDefaultTypeInternal;
extern AllParamsDefaultTypeInternal _AllParams_default_instance_;
class CustomParam;
struct CustomParamDefaultTypeInternal;
extern CustomParamDefaultTypeInternal _CustomParam_default_instance_;
class FloatParam;
struct FloatParamDefaultTypeInternal;
extern FloatParamDefaultTypeInternal _FloatParam_default_instance_;
class GetAllParamsRequest;
struct GetAllParamsRequestDefaultTypeInternal;
extern GetAllParamsRequestDefaultTypeInternal _GetAllParamsRequest_default_instance_;
class GetAllParamsResponse;
struct GetAllParamsResponseDefaultTypeInternal;
extern GetAllParamsResponseDefaultTypeInternal _GetAllParamsResponse_default_instance_;
class GetParamCustomRequest;
struct GetParamCustomRequestDefaultTypeInternal;
extern GetParamCustomRequestDefaultTypeInternal _GetParamCustomRequest_default_instance_;
class GetParamCustomResponse;
struct GetParamCustomResponseDefaultTypeInternal;
extern GetParamCustomResponseDefaultTypeInternal _GetParamCustomResponse_default_instance_;
class GetParamFloatRequest;
struct GetParamFloatRequestDefaultTypeInternal;
extern GetParamFloatRequestDefaultTypeInternal _GetParamFloatRequest_default_instance_;
class GetParamFloatResponse;
struct GetParamFloatResponseDefaultTypeInternal;
extern GetParamFloatResponseDefaultTypeInternal _GetParamFloatResponse_default_instance_;
class GetParamIntRequest;
struct GetParamIntRequestDefaultTypeInternal;
extern GetParamIntRequestDefaultTypeInternal _GetParamIntRequest_default_instance_;
class GetParamIntResponse;
struct GetParamIntResponseDefaultTypeInternal;
extern GetParamIntResponseDefaultTypeInternal _GetParamIntResponse_default_instance_;
class IntParam;
struct IntParamDefaultTypeInternal;
extern IntParamDefaultTypeInternal _IntParam_default_instance_;
class ParamResult;
struct ParamResultDefaultTypeInternal;
extern ParamResultDefaultTypeInternal _ParamResult_default_instance_;
class SetParamCustomRequest;
struct SetParamCustomRequestDefaultTypeInternal;
extern SetParamCustomRequestDefaultTypeInternal _SetParamCustomRequest_default_instance_;
class SetParamCustomResponse;
struct SetParamCustomResponseDefaultTypeInternal;
extern SetParamCustomResponseDefaultTypeInternal _SetParamCustomResponse_default_instance_;
class SetParamFloatRequest;
struct SetParamFloatRequestDefaultTypeInternal;
extern SetParamFloatRequestDefaultTypeInternal _SetParamFloatRequest_default_instance_;
class SetParamFloatResponse;
struct SetParamFloatResponseDefaultTypeInternal;
extern SetParamFloatResponseDefaultTypeInternal _SetParamFloatResponse_default_instance_;
class SetParamIntRequest;
struct SetParamIntRequestDefaultTypeInternal;
extern SetParamIntRequestDefaultTypeInternal _SetParamIntRequest_default_instance_;
class SetParamIntResponse;
struct SetParamIntResponseDefaultTypeInternal;
extern SetParamIntResponseDefaultTypeInternal _SetParamIntResponse_default_instance_;
}  // namespace param
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::param::AllParams* Arena::CreateMaybeMessage<::mavsdk::rpc::param::AllParams>(Arena*);
template<> ::mavsdk::rpc::param::CustomParam* Arena::CreateMaybeMessage<::mavsdk::rpc::param::CustomParam>(Arena*);
template<> ::mavsdk::rpc::param::FloatParam* Arena::CreateMaybeMessage<::mavsdk::rpc::param::FloatParam>(Arena*);
template<> ::mavsdk::rpc::param::GetAllParamsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::param::GetAllParamsRequest>(Arena*);
template<> ::mavsdk::rpc::param::GetAllParamsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::param::GetAllParamsResponse>(Arena*);
template<> ::mavsdk::rpc::param::GetParamCustomRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::param::GetParamCustomRequest>(Arena*);
template<> ::mavsdk::rpc::param::GetParamCustomResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::param::GetParamCustomResponse>(Arena*);
template<> ::mavsdk::rpc::param::GetParamFloatRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::param::GetParamFloatRequest>(Arena*);
template<> ::mavsdk::rpc::param::GetParamFloatResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::param::GetParamFloatResponse>(Arena*);
template<> ::mavsdk::rpc::param::GetParamIntRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::param::GetParamIntRequest>(Arena*);
template<> ::mavsdk::rpc::param::GetParamIntResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::param::GetParamIntResponse>(Arena*);
template<> ::mavsdk::rpc::param::IntParam* Arena::CreateMaybeMessage<::mavsdk::rpc::param::IntParam>(Arena*);
template<> ::mavsdk::rpc::param::ParamResult* Arena::CreateMaybeMessage<::mavsdk::rpc::param::ParamResult>(Arena*);
template<> ::mavsdk::rpc::param::SetParamCustomRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::param::SetParamCustomRequest>(Arena*);
template<> ::mavsdk::rpc::param::SetParamCustomResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::param::SetParamCustomResponse>(Arena*);
template<> ::mavsdk::rpc::param::SetParamFloatRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::param::SetParamFloatRequest>(Arena*);
template<> ::mavsdk::rpc::param::SetParamFloatResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::param::SetParamFloatResponse>(Arena*);
template<> ::mavsdk::rpc::param::SetParamIntRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::param::SetParamIntRequest>(Arena*);
template<> ::mavsdk::rpc::param::SetParamIntResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::param::SetParamIntResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace param {

enum ParamResult_Result : int {
  ParamResult_Result_RESULT_UNKNOWN = 0,
  ParamResult_Result_RESULT_SUCCESS = 1,
  ParamResult_Result_RESULT_TIMEOUT = 2,
  ParamResult_Result_RESULT_CONNECTION_ERROR = 3,
  ParamResult_Result_RESULT_WRONG_TYPE = 4,
  ParamResult_Result_RESULT_PARAM_NAME_TOO_LONG = 5,
  ParamResult_Result_RESULT_NO_SYSTEM = 6,
  ParamResult_Result_RESULT_PARAM_VALUE_TOO_LONG = 7,
  ParamResult_Result_ParamResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ParamResult_Result_ParamResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ParamResult_Result_IsValid(int value);
constexpr ParamResult_Result ParamResult_Result_Result_MIN = ParamResult_Result_RESULT_UNKNOWN;
constexpr ParamResult_Result ParamResult_Result_Result_MAX = ParamResult_Result_RESULT_PARAM_VALUE_TOO_LONG;
constexpr int ParamResult_Result_Result_ARRAYSIZE = ParamResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamResult_Result_descriptor();
template<typename T>
inline const std::string& ParamResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParamResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParamResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParamResult_Result_descriptor(), enum_t_value);
}
inline bool ParamResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParamResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParamResult_Result>(
    ParamResult_Result_descriptor(), name, value);
}
// ===================================================================

class GetParamIntRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.GetParamIntRequest) */ {
 public:
  inline GetParamIntRequest() : GetParamIntRequest(nullptr) {}
  ~GetParamIntRequest() override;
  explicit PROTOBUF_CONSTEXPR GetParamIntRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetParamIntRequest(const GetParamIntRequest& from);
  GetParamIntRequest(GetParamIntRequest&& from) noexcept
    : GetParamIntRequest() {
    *this = ::std::move(from);
  }

  inline GetParamIntRequest& operator=(const GetParamIntRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParamIntRequest& operator=(GetParamIntRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetParamIntRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetParamIntRequest* internal_default_instance() {
    return reinterpret_cast<const GetParamIntRequest*>(
               &_GetParamIntRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetParamIntRequest& a, GetParamIntRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParamIntRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParamIntRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetParamIntRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetParamIntRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetParamIntRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetParamIntRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParamIntRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.GetParamIntRequest";
  }
  protected:
  explicit GetParamIntRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.GetParamIntRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class GetParamIntResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.GetParamIntResponse) */ {
 public:
  inline GetParamIntResponse() : GetParamIntResponse(nullptr) {}
  ~GetParamIntResponse() override;
  explicit PROTOBUF_CONSTEXPR GetParamIntResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetParamIntResponse(const GetParamIntResponse& from);
  GetParamIntResponse(GetParamIntResponse&& from) noexcept
    : GetParamIntResponse() {
    *this = ::std::move(from);
  }

  inline GetParamIntResponse& operator=(const GetParamIntResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParamIntResponse& operator=(GetParamIntResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetParamIntResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetParamIntResponse* internal_default_instance() {
    return reinterpret_cast<const GetParamIntResponse*>(
               &_GetParamIntResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetParamIntResponse& a, GetParamIntResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParamIntResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParamIntResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetParamIntResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetParamIntResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetParamIntResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetParamIntResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParamIntResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.GetParamIntResponse";
  }
  protected:
  explicit GetParamIntResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamResultFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .mavsdk.rpc.param.ParamResult param_result = 1;
  bool has_param_result() const;
  private:
  bool _internal_has_param_result() const;
  public:
  void clear_param_result();
  const ::mavsdk::rpc::param::ParamResult& param_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::param::ParamResult* release_param_result();
  ::mavsdk::rpc::param::ParamResult* mutable_param_result();
  void set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result);
  private:
  const ::mavsdk::rpc::param::ParamResult& _internal_param_result() const;
  ::mavsdk::rpc::param::ParamResult* _internal_mutable_param_result();
  public:
  void unsafe_arena_set_allocated_param_result(
      ::mavsdk::rpc::param::ParamResult* param_result);
  ::mavsdk::rpc::param::ParamResult* unsafe_arena_release_param_result();

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.GetParamIntResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::param::ParamResult* param_result_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class SetParamIntRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.SetParamIntRequest) */ {
 public:
  inline SetParamIntRequest() : SetParamIntRequest(nullptr) {}
  ~SetParamIntRequest() override;
  explicit PROTOBUF_CONSTEXPR SetParamIntRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetParamIntRequest(const SetParamIntRequest& from);
  SetParamIntRequest(SetParamIntRequest&& from) noexcept
    : SetParamIntRequest() {
    *this = ::std::move(from);
  }

  inline SetParamIntRequest& operator=(const SetParamIntRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamIntRequest& operator=(SetParamIntRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetParamIntRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetParamIntRequest* internal_default_instance() {
    return reinterpret_cast<const SetParamIntRequest*>(
               &_SetParamIntRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetParamIntRequest& a, SetParamIntRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamIntRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamIntRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetParamIntRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetParamIntRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetParamIntRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetParamIntRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamIntRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.SetParamIntRequest";
  }
  protected:
  explicit SetParamIntRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.SetParamIntRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class SetParamIntResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.SetParamIntResponse) */ {
 public:
  inline SetParamIntResponse() : SetParamIntResponse(nullptr) {}
  ~SetParamIntResponse() override;
  explicit PROTOBUF_CONSTEXPR SetParamIntResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetParamIntResponse(const SetParamIntResponse& from);
  SetParamIntResponse(SetParamIntResponse&& from) noexcept
    : SetParamIntResponse() {
    *this = ::std::move(from);
  }

  inline SetParamIntResponse& operator=(const SetParamIntResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamIntResponse& operator=(SetParamIntResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetParamIntResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetParamIntResponse* internal_default_instance() {
    return reinterpret_cast<const SetParamIntResponse*>(
               &_SetParamIntResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetParamIntResponse& a, SetParamIntResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamIntResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamIntResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetParamIntResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetParamIntResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetParamIntResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetParamIntResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamIntResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.SetParamIntResponse";
  }
  protected:
  explicit SetParamIntResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamResultFieldNumber = 1,
  };
  // .mavsdk.rpc.param.ParamResult param_result = 1;
  bool has_param_result() const;
  private:
  bool _internal_has_param_result() const;
  public:
  void clear_param_result();
  const ::mavsdk::rpc::param::ParamResult& param_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::param::ParamResult* release_param_result();
  ::mavsdk::rpc::param::ParamResult* mutable_param_result();
  void set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result);
  private:
  const ::mavsdk::rpc::param::ParamResult& _internal_param_result() const;
  ::mavsdk::rpc::param::ParamResult* _internal_mutable_param_result();
  public:
  void unsafe_arena_set_allocated_param_result(
      ::mavsdk::rpc::param::ParamResult* param_result);
  ::mavsdk::rpc::param::ParamResult* unsafe_arena_release_param_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.SetParamIntResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::param::ParamResult* param_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class GetParamFloatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.GetParamFloatRequest) */ {
 public:
  inline GetParamFloatRequest() : GetParamFloatRequest(nullptr) {}
  ~GetParamFloatRequest() override;
  explicit PROTOBUF_CONSTEXPR GetParamFloatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetParamFloatRequest(const GetParamFloatRequest& from);
  GetParamFloatRequest(GetParamFloatRequest&& from) noexcept
    : GetParamFloatRequest() {
    *this = ::std::move(from);
  }

  inline GetParamFloatRequest& operator=(const GetParamFloatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParamFloatRequest& operator=(GetParamFloatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetParamFloatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetParamFloatRequest* internal_default_instance() {
    return reinterpret_cast<const GetParamFloatRequest*>(
               &_GetParamFloatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetParamFloatRequest& a, GetParamFloatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParamFloatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParamFloatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetParamFloatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetParamFloatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetParamFloatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetParamFloatRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParamFloatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.GetParamFloatRequest";
  }
  protected:
  explicit GetParamFloatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.GetParamFloatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class GetParamFloatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.GetParamFloatResponse) */ {
 public:
  inline GetParamFloatResponse() : GetParamFloatResponse(nullptr) {}
  ~GetParamFloatResponse() override;
  explicit PROTOBUF_CONSTEXPR GetParamFloatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetParamFloatResponse(const GetParamFloatResponse& from);
  GetParamFloatResponse(GetParamFloatResponse&& from) noexcept
    : GetParamFloatResponse() {
    *this = ::std::move(from);
  }

  inline GetParamFloatResponse& operator=(const GetParamFloatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParamFloatResponse& operator=(GetParamFloatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetParamFloatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetParamFloatResponse* internal_default_instance() {
    return reinterpret_cast<const GetParamFloatResponse*>(
               &_GetParamFloatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetParamFloatResponse& a, GetParamFloatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParamFloatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParamFloatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetParamFloatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetParamFloatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetParamFloatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetParamFloatResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParamFloatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.GetParamFloatResponse";
  }
  protected:
  explicit GetParamFloatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamResultFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .mavsdk.rpc.param.ParamResult param_result = 1;
  bool has_param_result() const;
  private:
  bool _internal_has_param_result() const;
  public:
  void clear_param_result();
  const ::mavsdk::rpc::param::ParamResult& param_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::param::ParamResult* release_param_result();
  ::mavsdk::rpc::param::ParamResult* mutable_param_result();
  void set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result);
  private:
  const ::mavsdk::rpc::param::ParamResult& _internal_param_result() const;
  ::mavsdk::rpc::param::ParamResult* _internal_mutable_param_result();
  public:
  void unsafe_arena_set_allocated_param_result(
      ::mavsdk::rpc::param::ParamResult* param_result);
  ::mavsdk::rpc::param::ParamResult* unsafe_arena_release_param_result();

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.GetParamFloatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::param::ParamResult* param_result_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class SetParamFloatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.SetParamFloatRequest) */ {
 public:
  inline SetParamFloatRequest() : SetParamFloatRequest(nullptr) {}
  ~SetParamFloatRequest() override;
  explicit PROTOBUF_CONSTEXPR SetParamFloatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetParamFloatRequest(const SetParamFloatRequest& from);
  SetParamFloatRequest(SetParamFloatRequest&& from) noexcept
    : SetParamFloatRequest() {
    *this = ::std::move(from);
  }

  inline SetParamFloatRequest& operator=(const SetParamFloatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamFloatRequest& operator=(SetParamFloatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetParamFloatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetParamFloatRequest* internal_default_instance() {
    return reinterpret_cast<const SetParamFloatRequest*>(
               &_SetParamFloatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetParamFloatRequest& a, SetParamFloatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamFloatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamFloatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetParamFloatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetParamFloatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetParamFloatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetParamFloatRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamFloatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.SetParamFloatRequest";
  }
  protected:
  explicit SetParamFloatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.SetParamFloatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class SetParamFloatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.SetParamFloatResponse) */ {
 public:
  inline SetParamFloatResponse() : SetParamFloatResponse(nullptr) {}
  ~SetParamFloatResponse() override;
  explicit PROTOBUF_CONSTEXPR SetParamFloatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetParamFloatResponse(const SetParamFloatResponse& from);
  SetParamFloatResponse(SetParamFloatResponse&& from) noexcept
    : SetParamFloatResponse() {
    *this = ::std::move(from);
  }

  inline SetParamFloatResponse& operator=(const SetParamFloatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamFloatResponse& operator=(SetParamFloatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetParamFloatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetParamFloatResponse* internal_default_instance() {
    return reinterpret_cast<const SetParamFloatResponse*>(
               &_SetParamFloatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetParamFloatResponse& a, SetParamFloatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamFloatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamFloatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetParamFloatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetParamFloatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetParamFloatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetParamFloatResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamFloatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.SetParamFloatResponse";
  }
  protected:
  explicit SetParamFloatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamResultFieldNumber = 1,
  };
  // .mavsdk.rpc.param.ParamResult param_result = 1;
  bool has_param_result() const;
  private:
  bool _internal_has_param_result() const;
  public:
  void clear_param_result();
  const ::mavsdk::rpc::param::ParamResult& param_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::param::ParamResult* release_param_result();
  ::mavsdk::rpc::param::ParamResult* mutable_param_result();
  void set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result);
  private:
  const ::mavsdk::rpc::param::ParamResult& _internal_param_result() const;
  ::mavsdk::rpc::param::ParamResult* _internal_mutable_param_result();
  public:
  void unsafe_arena_set_allocated_param_result(
      ::mavsdk::rpc::param::ParamResult* param_result);
  ::mavsdk::rpc::param::ParamResult* unsafe_arena_release_param_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.SetParamFloatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::param::ParamResult* param_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class GetParamCustomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.GetParamCustomRequest) */ {
 public:
  inline GetParamCustomRequest() : GetParamCustomRequest(nullptr) {}
  ~GetParamCustomRequest() override;
  explicit PROTOBUF_CONSTEXPR GetParamCustomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetParamCustomRequest(const GetParamCustomRequest& from);
  GetParamCustomRequest(GetParamCustomRequest&& from) noexcept
    : GetParamCustomRequest() {
    *this = ::std::move(from);
  }

  inline GetParamCustomRequest& operator=(const GetParamCustomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParamCustomRequest& operator=(GetParamCustomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetParamCustomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetParamCustomRequest* internal_default_instance() {
    return reinterpret_cast<const GetParamCustomRequest*>(
               &_GetParamCustomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetParamCustomRequest& a, GetParamCustomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParamCustomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParamCustomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetParamCustomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetParamCustomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetParamCustomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetParamCustomRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParamCustomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.GetParamCustomRequest";
  }
  protected:
  explicit GetParamCustomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.GetParamCustomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class GetParamCustomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.GetParamCustomResponse) */ {
 public:
  inline GetParamCustomResponse() : GetParamCustomResponse(nullptr) {}
  ~GetParamCustomResponse() override;
  explicit PROTOBUF_CONSTEXPR GetParamCustomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetParamCustomResponse(const GetParamCustomResponse& from);
  GetParamCustomResponse(GetParamCustomResponse&& from) noexcept
    : GetParamCustomResponse() {
    *this = ::std::move(from);
  }

  inline GetParamCustomResponse& operator=(const GetParamCustomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParamCustomResponse& operator=(GetParamCustomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetParamCustomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetParamCustomResponse* internal_default_instance() {
    return reinterpret_cast<const GetParamCustomResponse*>(
               &_GetParamCustomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetParamCustomResponse& a, GetParamCustomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParamCustomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParamCustomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetParamCustomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetParamCustomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetParamCustomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetParamCustomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParamCustomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.GetParamCustomResponse";
  }
  protected:
  explicit GetParamCustomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kParamResultFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .mavsdk.rpc.param.ParamResult param_result = 1;
  bool has_param_result() const;
  private:
  bool _internal_has_param_result() const;
  public:
  void clear_param_result();
  const ::mavsdk::rpc::param::ParamResult& param_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::param::ParamResult* release_param_result();
  ::mavsdk::rpc::param::ParamResult* mutable_param_result();
  void set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result);
  private:
  const ::mavsdk::rpc::param::ParamResult& _internal_param_result() const;
  ::mavsdk::rpc::param::ParamResult* _internal_mutable_param_result();
  public:
  void unsafe_arena_set_allocated_param_result(
      ::mavsdk::rpc::param::ParamResult* param_result);
  ::mavsdk::rpc::param::ParamResult* unsafe_arena_release_param_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.GetParamCustomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::mavsdk::rpc::param::ParamResult* param_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class SetParamCustomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.SetParamCustomRequest) */ {
 public:
  inline SetParamCustomRequest() : SetParamCustomRequest(nullptr) {}
  ~SetParamCustomRequest() override;
  explicit PROTOBUF_CONSTEXPR SetParamCustomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetParamCustomRequest(const SetParamCustomRequest& from);
  SetParamCustomRequest(SetParamCustomRequest&& from) noexcept
    : SetParamCustomRequest() {
    *this = ::std::move(from);
  }

  inline SetParamCustomRequest& operator=(const SetParamCustomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamCustomRequest& operator=(SetParamCustomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetParamCustomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetParamCustomRequest* internal_default_instance() {
    return reinterpret_cast<const SetParamCustomRequest*>(
               &_SetParamCustomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetParamCustomRequest& a, SetParamCustomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamCustomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamCustomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetParamCustomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetParamCustomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetParamCustomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetParamCustomRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamCustomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.SetParamCustomRequest";
  }
  protected:
  explicit SetParamCustomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.SetParamCustomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class SetParamCustomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.SetParamCustomResponse) */ {
 public:
  inline SetParamCustomResponse() : SetParamCustomResponse(nullptr) {}
  ~SetParamCustomResponse() override;
  explicit PROTOBUF_CONSTEXPR SetParamCustomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetParamCustomResponse(const SetParamCustomResponse& from);
  SetParamCustomResponse(SetParamCustomResponse&& from) noexcept
    : SetParamCustomResponse() {
    *this = ::std::move(from);
  }

  inline SetParamCustomResponse& operator=(const SetParamCustomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamCustomResponse& operator=(SetParamCustomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetParamCustomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetParamCustomResponse* internal_default_instance() {
    return reinterpret_cast<const SetParamCustomResponse*>(
               &_SetParamCustomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetParamCustomResponse& a, SetParamCustomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamCustomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamCustomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetParamCustomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetParamCustomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetParamCustomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetParamCustomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamCustomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.SetParamCustomResponse";
  }
  protected:
  explicit SetParamCustomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamResultFieldNumber = 1,
  };
  // .mavsdk.rpc.param.ParamResult param_result = 1;
  bool has_param_result() const;
  private:
  bool _internal_has_param_result() const;
  public:
  void clear_param_result();
  const ::mavsdk::rpc::param::ParamResult& param_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::param::ParamResult* release_param_result();
  ::mavsdk::rpc::param::ParamResult* mutable_param_result();
  void set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result);
  private:
  const ::mavsdk::rpc::param::ParamResult& _internal_param_result() const;
  ::mavsdk::rpc::param::ParamResult* _internal_mutable_param_result();
  public:
  void unsafe_arena_set_allocated_param_result(
      ::mavsdk::rpc::param::ParamResult* param_result);
  ::mavsdk::rpc::param::ParamResult* unsafe_arena_release_param_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.SetParamCustomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::param::ParamResult* param_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class GetAllParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.GetAllParamsRequest) */ {
 public:
  inline GetAllParamsRequest() : GetAllParamsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetAllParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllParamsRequest(const GetAllParamsRequest& from);
  GetAllParamsRequest(GetAllParamsRequest&& from) noexcept
    : GetAllParamsRequest() {
    *this = ::std::move(from);
  }

  inline GetAllParamsRequest& operator=(const GetAllParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllParamsRequest& operator=(GetAllParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllParamsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllParamsRequest*>(
               &_GetAllParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetAllParamsRequest& a, GetAllParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllParamsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAllParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAllParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.GetAllParamsRequest";
  }
  protected:
  explicit GetAllParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.GetAllParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class GetAllParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.GetAllParamsResponse) */ {
 public:
  inline GetAllParamsResponse() : GetAllParamsResponse(nullptr) {}
  ~GetAllParamsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllParamsResponse(const GetAllParamsResponse& from);
  GetAllParamsResponse(GetAllParamsResponse&& from) noexcept
    : GetAllParamsResponse() {
    *this = ::std::move(from);
  }

  inline GetAllParamsResponse& operator=(const GetAllParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllParamsResponse& operator=(GetAllParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllParamsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllParamsResponse*>(
               &_GetAllParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetAllParamsResponse& a, GetAllParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllParamsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAllParamsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.GetAllParamsResponse";
  }
  protected:
  explicit GetAllParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .mavsdk.rpc.param.AllParams params = 1;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::mavsdk::rpc::param::AllParams& params() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::param::AllParams* release_params();
  ::mavsdk::rpc::param::AllParams* mutable_params();
  void set_allocated_params(::mavsdk::rpc::param::AllParams* params);
  private:
  const ::mavsdk::rpc::param::AllParams& _internal_params() const;
  ::mavsdk::rpc::param::AllParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::mavsdk::rpc::param::AllParams* params);
  ::mavsdk::rpc::param::AllParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.GetAllParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::param::AllParams* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class IntParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.IntParam) */ {
 public:
  inline IntParam() : IntParam(nullptr) {}
  ~IntParam() override;
  explicit PROTOBUF_CONSTEXPR IntParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntParam(const IntParam& from);
  IntParam(IntParam&& from) noexcept
    : IntParam() {
    *this = ::std::move(from);
  }

  inline IntParam& operator=(const IntParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntParam& operator=(IntParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntParam* internal_default_instance() {
    return reinterpret_cast<const IntParam*>(
               &_IntParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(IntParam& a, IntParam& b) {
    a.Swap(&b);
  }
  inline void Swap(IntParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IntParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.IntParam";
  }
  protected:
  explicit IntParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.IntParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class FloatParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.FloatParam) */ {
 public:
  inline FloatParam() : FloatParam(nullptr) {}
  ~FloatParam() override;
  explicit PROTOBUF_CONSTEXPR FloatParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatParam(const FloatParam& from);
  FloatParam(FloatParam&& from) noexcept
    : FloatParam() {
    *this = ::std::move(from);
  }

  inline FloatParam& operator=(const FloatParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatParam& operator=(FloatParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatParam* internal_default_instance() {
    return reinterpret_cast<const FloatParam*>(
               &_FloatParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FloatParam& a, FloatParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.FloatParam";
  }
  protected:
  explicit FloatParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.FloatParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class CustomParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.CustomParam) */ {
 public:
  inline CustomParam() : CustomParam(nullptr) {}
  ~CustomParam() override;
  explicit PROTOBUF_CONSTEXPR CustomParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomParam(const CustomParam& from);
  CustomParam(CustomParam&& from) noexcept
    : CustomParam() {
    *this = ::std::move(from);
  }

  inline CustomParam& operator=(const CustomParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomParam& operator=(CustomParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomParam* internal_default_instance() {
    return reinterpret_cast<const CustomParam*>(
               &_CustomParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CustomParam& a, CustomParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CustomParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.CustomParam";
  }
  protected:
  explicit CustomParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.CustomParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class AllParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.AllParams) */ {
 public:
  inline AllParams() : AllParams(nullptr) {}
  ~AllParams() override;
  explicit PROTOBUF_CONSTEXPR AllParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllParams(const AllParams& from);
  AllParams(AllParams&& from) noexcept
    : AllParams() {
    *this = ::std::move(from);
  }

  inline AllParams& operator=(const AllParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllParams& operator=(AllParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllParams* internal_default_instance() {
    return reinterpret_cast<const AllParams*>(
               &_AllParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AllParams& a, AllParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AllParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AllParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.AllParams";
  }
  protected:
  explicit AllParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntParamsFieldNumber = 1,
    kFloatParamsFieldNumber = 2,
    kCustomParamsFieldNumber = 3,
  };
  // repeated .mavsdk.rpc.param.IntParam int_params = 1;
  int int_params_size() const;
  private:
  int _internal_int_params_size() const;
  public:
  void clear_int_params();
  ::mavsdk::rpc::param::IntParam* mutable_int_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::IntParam >*
      mutable_int_params();
  private:
  const ::mavsdk::rpc::param::IntParam& _internal_int_params(int index) const;
  ::mavsdk::rpc::param::IntParam* _internal_add_int_params();
  public:
  const ::mavsdk::rpc::param::IntParam& int_params(int index) const;
  ::mavsdk::rpc::param::IntParam* add_int_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::IntParam >&
      int_params() const;

  // repeated .mavsdk.rpc.param.FloatParam float_params = 2;
  int float_params_size() const;
  private:
  int _internal_float_params_size() const;
  public:
  void clear_float_params();
  ::mavsdk::rpc::param::FloatParam* mutable_float_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::FloatParam >*
      mutable_float_params();
  private:
  const ::mavsdk::rpc::param::FloatParam& _internal_float_params(int index) const;
  ::mavsdk::rpc::param::FloatParam* _internal_add_float_params();
  public:
  const ::mavsdk::rpc::param::FloatParam& float_params(int index) const;
  ::mavsdk::rpc::param::FloatParam* add_float_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::FloatParam >&
      float_params() const;

  // repeated .mavsdk.rpc.param.CustomParam custom_params = 3;
  int custom_params_size() const;
  private:
  int _internal_custom_params_size() const;
  public:
  void clear_custom_params();
  ::mavsdk::rpc::param::CustomParam* mutable_custom_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::CustomParam >*
      mutable_custom_params();
  private:
  const ::mavsdk::rpc::param::CustomParam& _internal_custom_params(int index) const;
  ::mavsdk::rpc::param::CustomParam* _internal_add_custom_params();
  public:
  const ::mavsdk::rpc::param::CustomParam& custom_params(int index) const;
  ::mavsdk::rpc::param::CustomParam* add_custom_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::CustomParam >&
      custom_params() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.AllParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::IntParam > int_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::FloatParam > float_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::CustomParam > custom_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// -------------------------------------------------------------------

class ParamResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.param.ParamResult) */ {
 public:
  inline ParamResult() : ParamResult(nullptr) {}
  ~ParamResult() override;
  explicit PROTOBUF_CONSTEXPR ParamResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamResult(const ParamResult& from);
  ParamResult(ParamResult&& from) noexcept
    : ParamResult() {
    *this = ::std::move(from);
  }

  inline ParamResult& operator=(const ParamResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamResult& operator=(ParamResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamResult* internal_default_instance() {
    return reinterpret_cast<const ParamResult*>(
               &_ParamResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ParamResult& a, ParamResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParamResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParamResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParamResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.param.ParamResult";
  }
  protected:
  explicit ParamResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParamResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    ParamResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    ParamResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_TIMEOUT =
    ParamResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_CONNECTION_ERROR =
    ParamResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_WRONG_TYPE =
    ParamResult_Result_RESULT_WRONG_TYPE;
  static constexpr Result RESULT_PARAM_NAME_TOO_LONG =
    ParamResult_Result_RESULT_PARAM_NAME_TOO_LONG;
  static constexpr Result RESULT_NO_SYSTEM =
    ParamResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_PARAM_VALUE_TOO_LONG =
    ParamResult_Result_RESULT_PARAM_VALUE_TOO_LONG;
  static inline bool Result_IsValid(int value) {
    return ParamResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ParamResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ParamResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ParamResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ParamResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ParamResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return ParamResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.param.ParamResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::param::ParamResult_Result result() const;
  void set_result(::mavsdk::rpc::param::ParamResult_Result value);
  private:
  ::mavsdk::rpc::param::ParamResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::param::ParamResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.param.ParamResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_param_2fparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetParamIntRequest

// string name = 1;
inline void GetParamIntRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetParamIntRequest::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamIntRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetParamIntRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.GetParamIntRequest.name)
}
inline std::string* GetParamIntRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.GetParamIntRequest.name)
  return _s;
}
inline const std::string& GetParamIntRequest::_internal_name() const {
  return name_.Get();
}
inline void GetParamIntRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetParamIntRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetParamIntRequest::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.GetParamIntRequest.name)
  return name_.Release();
}
inline void GetParamIntRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.GetParamIntRequest.name)
}

// -------------------------------------------------------------------

// GetParamIntResponse

// .mavsdk.rpc.param.ParamResult param_result = 1;
inline bool GetParamIntResponse::_internal_has_param_result() const {
  return this != internal_default_instance() && param_result_ != nullptr;
}
inline bool GetParamIntResponse::has_param_result() const {
  return _internal_has_param_result();
}
inline void GetParamIntResponse::clear_param_result() {
  if (GetArenaForAllocation() == nullptr && param_result_ != nullptr) {
    delete param_result_;
  }
  param_result_ = nullptr;
}
inline const ::mavsdk::rpc::param::ParamResult& GetParamIntResponse::_internal_param_result() const {
  const ::mavsdk::rpc::param::ParamResult* p = param_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::param::ParamResult&>(
      ::mavsdk::rpc::param::_ParamResult_default_instance_);
}
inline const ::mavsdk::rpc::param::ParamResult& GetParamIntResponse::param_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamIntResponse.param_result)
  return _internal_param_result();
}
inline void GetParamIntResponse::unsafe_arena_set_allocated_param_result(
    ::mavsdk::rpc::param::ParamResult* param_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_result_);
  }
  param_result_ = param_result;
  if (param_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.param.GetParamIntResponse.param_result)
}
inline ::mavsdk::rpc::param::ParamResult* GetParamIntResponse::release_param_result() {
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamIntResponse::unsafe_arena_release_param_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.GetParamIntResponse.param_result)
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamIntResponse::_internal_mutable_param_result() {
  
  if (param_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::param::ParamResult>(GetArenaForAllocation());
    param_result_ = p;
  }
  return param_result_;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamIntResponse::mutable_param_result() {
  ::mavsdk::rpc::param::ParamResult* _msg = _internal_mutable_param_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.GetParamIntResponse.param_result)
  return _msg;
}
inline void GetParamIntResponse::set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete param_result_;
  }
  if (param_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(param_result);
    if (message_arena != submessage_arena) {
      param_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param_result, submessage_arena);
    }
    
  } else {
    
  }
  param_result_ = param_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.GetParamIntResponse.param_result)
}

// int32 value = 2;
inline void GetParamIntResponse::clear_value() {
  value_ = 0;
}
inline int32_t GetParamIntResponse::_internal_value() const {
  return value_;
}
inline int32_t GetParamIntResponse::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamIntResponse.value)
  return _internal_value();
}
inline void GetParamIntResponse::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void GetParamIntResponse::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.GetParamIntResponse.value)
}

// -------------------------------------------------------------------

// SetParamIntRequest

// string name = 1;
inline void SetParamIntRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SetParamIntRequest::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamIntRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetParamIntRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.SetParamIntRequest.name)
}
inline std::string* SetParamIntRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.SetParamIntRequest.name)
  return _s;
}
inline const std::string& SetParamIntRequest::_internal_name() const {
  return name_.Get();
}
inline void SetParamIntRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetParamIntRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetParamIntRequest::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.SetParamIntRequest.name)
  return name_.Release();
}
inline void SetParamIntRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.SetParamIntRequest.name)
}

// int32 value = 2;
inline void SetParamIntRequest::clear_value() {
  value_ = 0;
}
inline int32_t SetParamIntRequest::_internal_value() const {
  return value_;
}
inline int32_t SetParamIntRequest::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamIntRequest.value)
  return _internal_value();
}
inline void SetParamIntRequest::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void SetParamIntRequest::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.SetParamIntRequest.value)
}

// -------------------------------------------------------------------

// SetParamIntResponse

// .mavsdk.rpc.param.ParamResult param_result = 1;
inline bool SetParamIntResponse::_internal_has_param_result() const {
  return this != internal_default_instance() && param_result_ != nullptr;
}
inline bool SetParamIntResponse::has_param_result() const {
  return _internal_has_param_result();
}
inline void SetParamIntResponse::clear_param_result() {
  if (GetArenaForAllocation() == nullptr && param_result_ != nullptr) {
    delete param_result_;
  }
  param_result_ = nullptr;
}
inline const ::mavsdk::rpc::param::ParamResult& SetParamIntResponse::_internal_param_result() const {
  const ::mavsdk::rpc::param::ParamResult* p = param_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::param::ParamResult&>(
      ::mavsdk::rpc::param::_ParamResult_default_instance_);
}
inline const ::mavsdk::rpc::param::ParamResult& SetParamIntResponse::param_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamIntResponse.param_result)
  return _internal_param_result();
}
inline void SetParamIntResponse::unsafe_arena_set_allocated_param_result(
    ::mavsdk::rpc::param::ParamResult* param_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_result_);
  }
  param_result_ = param_result;
  if (param_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.param.SetParamIntResponse.param_result)
}
inline ::mavsdk::rpc::param::ParamResult* SetParamIntResponse::release_param_result() {
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamIntResponse::unsafe_arena_release_param_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.SetParamIntResponse.param_result)
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamIntResponse::_internal_mutable_param_result() {
  
  if (param_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::param::ParamResult>(GetArenaForAllocation());
    param_result_ = p;
  }
  return param_result_;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamIntResponse::mutable_param_result() {
  ::mavsdk::rpc::param::ParamResult* _msg = _internal_mutable_param_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.SetParamIntResponse.param_result)
  return _msg;
}
inline void SetParamIntResponse::set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete param_result_;
  }
  if (param_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(param_result);
    if (message_arena != submessage_arena) {
      param_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param_result, submessage_arena);
    }
    
  } else {
    
  }
  param_result_ = param_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.SetParamIntResponse.param_result)
}

// -------------------------------------------------------------------

// GetParamFloatRequest

// string name = 1;
inline void GetParamFloatRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetParamFloatRequest::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamFloatRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetParamFloatRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.GetParamFloatRequest.name)
}
inline std::string* GetParamFloatRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.GetParamFloatRequest.name)
  return _s;
}
inline const std::string& GetParamFloatRequest::_internal_name() const {
  return name_.Get();
}
inline void GetParamFloatRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetParamFloatRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetParamFloatRequest::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.GetParamFloatRequest.name)
  return name_.Release();
}
inline void GetParamFloatRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.GetParamFloatRequest.name)
}

// -------------------------------------------------------------------

// GetParamFloatResponse

// .mavsdk.rpc.param.ParamResult param_result = 1;
inline bool GetParamFloatResponse::_internal_has_param_result() const {
  return this != internal_default_instance() && param_result_ != nullptr;
}
inline bool GetParamFloatResponse::has_param_result() const {
  return _internal_has_param_result();
}
inline void GetParamFloatResponse::clear_param_result() {
  if (GetArenaForAllocation() == nullptr && param_result_ != nullptr) {
    delete param_result_;
  }
  param_result_ = nullptr;
}
inline const ::mavsdk::rpc::param::ParamResult& GetParamFloatResponse::_internal_param_result() const {
  const ::mavsdk::rpc::param::ParamResult* p = param_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::param::ParamResult&>(
      ::mavsdk::rpc::param::_ParamResult_default_instance_);
}
inline const ::mavsdk::rpc::param::ParamResult& GetParamFloatResponse::param_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamFloatResponse.param_result)
  return _internal_param_result();
}
inline void GetParamFloatResponse::unsafe_arena_set_allocated_param_result(
    ::mavsdk::rpc::param::ParamResult* param_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_result_);
  }
  param_result_ = param_result;
  if (param_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.param.GetParamFloatResponse.param_result)
}
inline ::mavsdk::rpc::param::ParamResult* GetParamFloatResponse::release_param_result() {
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamFloatResponse::unsafe_arena_release_param_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.GetParamFloatResponse.param_result)
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamFloatResponse::_internal_mutable_param_result() {
  
  if (param_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::param::ParamResult>(GetArenaForAllocation());
    param_result_ = p;
  }
  return param_result_;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamFloatResponse::mutable_param_result() {
  ::mavsdk::rpc::param::ParamResult* _msg = _internal_mutable_param_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.GetParamFloatResponse.param_result)
  return _msg;
}
inline void GetParamFloatResponse::set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete param_result_;
  }
  if (param_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(param_result);
    if (message_arena != submessage_arena) {
      param_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param_result, submessage_arena);
    }
    
  } else {
    
  }
  param_result_ = param_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.GetParamFloatResponse.param_result)
}

// float value = 2;
inline void GetParamFloatResponse::clear_value() {
  value_ = 0;
}
inline float GetParamFloatResponse::_internal_value() const {
  return value_;
}
inline float GetParamFloatResponse::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamFloatResponse.value)
  return _internal_value();
}
inline void GetParamFloatResponse::_internal_set_value(float value) {
  
  value_ = value;
}
inline void GetParamFloatResponse::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.GetParamFloatResponse.value)
}

// -------------------------------------------------------------------

// SetParamFloatRequest

// string name = 1;
inline void SetParamFloatRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SetParamFloatRequest::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamFloatRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetParamFloatRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.SetParamFloatRequest.name)
}
inline std::string* SetParamFloatRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.SetParamFloatRequest.name)
  return _s;
}
inline const std::string& SetParamFloatRequest::_internal_name() const {
  return name_.Get();
}
inline void SetParamFloatRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetParamFloatRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetParamFloatRequest::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.SetParamFloatRequest.name)
  return name_.Release();
}
inline void SetParamFloatRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.SetParamFloatRequest.name)
}

// float value = 2;
inline void SetParamFloatRequest::clear_value() {
  value_ = 0;
}
inline float SetParamFloatRequest::_internal_value() const {
  return value_;
}
inline float SetParamFloatRequest::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamFloatRequest.value)
  return _internal_value();
}
inline void SetParamFloatRequest::_internal_set_value(float value) {
  
  value_ = value;
}
inline void SetParamFloatRequest::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.SetParamFloatRequest.value)
}

// -------------------------------------------------------------------

// SetParamFloatResponse

// .mavsdk.rpc.param.ParamResult param_result = 1;
inline bool SetParamFloatResponse::_internal_has_param_result() const {
  return this != internal_default_instance() && param_result_ != nullptr;
}
inline bool SetParamFloatResponse::has_param_result() const {
  return _internal_has_param_result();
}
inline void SetParamFloatResponse::clear_param_result() {
  if (GetArenaForAllocation() == nullptr && param_result_ != nullptr) {
    delete param_result_;
  }
  param_result_ = nullptr;
}
inline const ::mavsdk::rpc::param::ParamResult& SetParamFloatResponse::_internal_param_result() const {
  const ::mavsdk::rpc::param::ParamResult* p = param_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::param::ParamResult&>(
      ::mavsdk::rpc::param::_ParamResult_default_instance_);
}
inline const ::mavsdk::rpc::param::ParamResult& SetParamFloatResponse::param_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamFloatResponse.param_result)
  return _internal_param_result();
}
inline void SetParamFloatResponse::unsafe_arena_set_allocated_param_result(
    ::mavsdk::rpc::param::ParamResult* param_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_result_);
  }
  param_result_ = param_result;
  if (param_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.param.SetParamFloatResponse.param_result)
}
inline ::mavsdk::rpc::param::ParamResult* SetParamFloatResponse::release_param_result() {
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamFloatResponse::unsafe_arena_release_param_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.SetParamFloatResponse.param_result)
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamFloatResponse::_internal_mutable_param_result() {
  
  if (param_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::param::ParamResult>(GetArenaForAllocation());
    param_result_ = p;
  }
  return param_result_;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamFloatResponse::mutable_param_result() {
  ::mavsdk::rpc::param::ParamResult* _msg = _internal_mutable_param_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.SetParamFloatResponse.param_result)
  return _msg;
}
inline void SetParamFloatResponse::set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete param_result_;
  }
  if (param_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(param_result);
    if (message_arena != submessage_arena) {
      param_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param_result, submessage_arena);
    }
    
  } else {
    
  }
  param_result_ = param_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.SetParamFloatResponse.param_result)
}

// -------------------------------------------------------------------

// GetParamCustomRequest

// string name = 1;
inline void GetParamCustomRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetParamCustomRequest::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamCustomRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetParamCustomRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.GetParamCustomRequest.name)
}
inline std::string* GetParamCustomRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.GetParamCustomRequest.name)
  return _s;
}
inline const std::string& GetParamCustomRequest::_internal_name() const {
  return name_.Get();
}
inline void GetParamCustomRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetParamCustomRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetParamCustomRequest::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.GetParamCustomRequest.name)
  return name_.Release();
}
inline void GetParamCustomRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.GetParamCustomRequest.name)
}

// -------------------------------------------------------------------

// GetParamCustomResponse

// .mavsdk.rpc.param.ParamResult param_result = 1;
inline bool GetParamCustomResponse::_internal_has_param_result() const {
  return this != internal_default_instance() && param_result_ != nullptr;
}
inline bool GetParamCustomResponse::has_param_result() const {
  return _internal_has_param_result();
}
inline void GetParamCustomResponse::clear_param_result() {
  if (GetArenaForAllocation() == nullptr && param_result_ != nullptr) {
    delete param_result_;
  }
  param_result_ = nullptr;
}
inline const ::mavsdk::rpc::param::ParamResult& GetParamCustomResponse::_internal_param_result() const {
  const ::mavsdk::rpc::param::ParamResult* p = param_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::param::ParamResult&>(
      ::mavsdk::rpc::param::_ParamResult_default_instance_);
}
inline const ::mavsdk::rpc::param::ParamResult& GetParamCustomResponse::param_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamCustomResponse.param_result)
  return _internal_param_result();
}
inline void GetParamCustomResponse::unsafe_arena_set_allocated_param_result(
    ::mavsdk::rpc::param::ParamResult* param_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_result_);
  }
  param_result_ = param_result;
  if (param_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.param.GetParamCustomResponse.param_result)
}
inline ::mavsdk::rpc::param::ParamResult* GetParamCustomResponse::release_param_result() {
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamCustomResponse::unsafe_arena_release_param_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.GetParamCustomResponse.param_result)
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamCustomResponse::_internal_mutable_param_result() {
  
  if (param_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::param::ParamResult>(GetArenaForAllocation());
    param_result_ = p;
  }
  return param_result_;
}
inline ::mavsdk::rpc::param::ParamResult* GetParamCustomResponse::mutable_param_result() {
  ::mavsdk::rpc::param::ParamResult* _msg = _internal_mutable_param_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.GetParamCustomResponse.param_result)
  return _msg;
}
inline void GetParamCustomResponse::set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete param_result_;
  }
  if (param_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(param_result);
    if (message_arena != submessage_arena) {
      param_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param_result, submessage_arena);
    }
    
  } else {
    
  }
  param_result_ = param_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.GetParamCustomResponse.param_result)
}

// string value = 2;
inline void GetParamCustomResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GetParamCustomResponse::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetParamCustomResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetParamCustomResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.GetParamCustomResponse.value)
}
inline std::string* GetParamCustomResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.GetParamCustomResponse.value)
  return _s;
}
inline const std::string& GetParamCustomResponse::_internal_value() const {
  return value_.Get();
}
inline void GetParamCustomResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* GetParamCustomResponse::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* GetParamCustomResponse::release_value() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.GetParamCustomResponse.value)
  return value_.Release();
}
inline void GetParamCustomResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.GetParamCustomResponse.value)
}

// -------------------------------------------------------------------

// SetParamCustomRequest

// string name = 1;
inline void SetParamCustomRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SetParamCustomRequest::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamCustomRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetParamCustomRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.SetParamCustomRequest.name)
}
inline std::string* SetParamCustomRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.SetParamCustomRequest.name)
  return _s;
}
inline const std::string& SetParamCustomRequest::_internal_name() const {
  return name_.Get();
}
inline void SetParamCustomRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetParamCustomRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetParamCustomRequest::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.SetParamCustomRequest.name)
  return name_.Release();
}
inline void SetParamCustomRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.SetParamCustomRequest.name)
}

// string value = 2;
inline void SetParamCustomRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& SetParamCustomRequest::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamCustomRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetParamCustomRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.SetParamCustomRequest.value)
}
inline std::string* SetParamCustomRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.SetParamCustomRequest.value)
  return _s;
}
inline const std::string& SetParamCustomRequest::_internal_value() const {
  return value_.Get();
}
inline void SetParamCustomRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* SetParamCustomRequest::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* SetParamCustomRequest::release_value() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.SetParamCustomRequest.value)
  return value_.Release();
}
inline void SetParamCustomRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.SetParamCustomRequest.value)
}

// -------------------------------------------------------------------

// SetParamCustomResponse

// .mavsdk.rpc.param.ParamResult param_result = 1;
inline bool SetParamCustomResponse::_internal_has_param_result() const {
  return this != internal_default_instance() && param_result_ != nullptr;
}
inline bool SetParamCustomResponse::has_param_result() const {
  return _internal_has_param_result();
}
inline void SetParamCustomResponse::clear_param_result() {
  if (GetArenaForAllocation() == nullptr && param_result_ != nullptr) {
    delete param_result_;
  }
  param_result_ = nullptr;
}
inline const ::mavsdk::rpc::param::ParamResult& SetParamCustomResponse::_internal_param_result() const {
  const ::mavsdk::rpc::param::ParamResult* p = param_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::param::ParamResult&>(
      ::mavsdk::rpc::param::_ParamResult_default_instance_);
}
inline const ::mavsdk::rpc::param::ParamResult& SetParamCustomResponse::param_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.SetParamCustomResponse.param_result)
  return _internal_param_result();
}
inline void SetParamCustomResponse::unsafe_arena_set_allocated_param_result(
    ::mavsdk::rpc::param::ParamResult* param_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_result_);
  }
  param_result_ = param_result;
  if (param_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.param.SetParamCustomResponse.param_result)
}
inline ::mavsdk::rpc::param::ParamResult* SetParamCustomResponse::release_param_result() {
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamCustomResponse::unsafe_arena_release_param_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.SetParamCustomResponse.param_result)
  
  ::mavsdk::rpc::param::ParamResult* temp = param_result_;
  param_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamCustomResponse::_internal_mutable_param_result() {
  
  if (param_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::param::ParamResult>(GetArenaForAllocation());
    param_result_ = p;
  }
  return param_result_;
}
inline ::mavsdk::rpc::param::ParamResult* SetParamCustomResponse::mutable_param_result() {
  ::mavsdk::rpc::param::ParamResult* _msg = _internal_mutable_param_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.SetParamCustomResponse.param_result)
  return _msg;
}
inline void SetParamCustomResponse::set_allocated_param_result(::mavsdk::rpc::param::ParamResult* param_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete param_result_;
  }
  if (param_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(param_result);
    if (message_arena != submessage_arena) {
      param_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param_result, submessage_arena);
    }
    
  } else {
    
  }
  param_result_ = param_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.SetParamCustomResponse.param_result)
}

// -------------------------------------------------------------------

// GetAllParamsRequest

// -------------------------------------------------------------------

// GetAllParamsResponse

// .mavsdk.rpc.param.AllParams params = 1;
inline bool GetAllParamsResponse::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool GetAllParamsResponse::has_params() const {
  return _internal_has_params();
}
inline void GetAllParamsResponse::clear_params() {
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::mavsdk::rpc::param::AllParams& GetAllParamsResponse::_internal_params() const {
  const ::mavsdk::rpc::param::AllParams* p = params_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::param::AllParams&>(
      ::mavsdk::rpc::param::_AllParams_default_instance_);
}
inline const ::mavsdk::rpc::param::AllParams& GetAllParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.GetAllParamsResponse.params)
  return _internal_params();
}
inline void GetAllParamsResponse::unsafe_arena_set_allocated_params(
    ::mavsdk::rpc::param::AllParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.param.GetAllParamsResponse.params)
}
inline ::mavsdk::rpc::param::AllParams* GetAllParamsResponse::release_params() {
  
  ::mavsdk::rpc::param::AllParams* temp = params_;
  params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::param::AllParams* GetAllParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.GetAllParamsResponse.params)
  
  ::mavsdk::rpc::param::AllParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::param::AllParams* GetAllParamsResponse::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::param::AllParams>(GetArenaForAllocation());
    params_ = p;
  }
  return params_;
}
inline ::mavsdk::rpc::param::AllParams* GetAllParamsResponse::mutable_params() {
  ::mavsdk::rpc::param::AllParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.GetAllParamsResponse.params)
  return _msg;
}
inline void GetAllParamsResponse::set_allocated_params(::mavsdk::rpc::param::AllParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.GetAllParamsResponse.params)
}

// -------------------------------------------------------------------

// IntParam

// string name = 1;
inline void IntParam::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& IntParam::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.IntParam.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IntParam::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.IntParam.name)
}
inline std::string* IntParam::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.IntParam.name)
  return _s;
}
inline const std::string& IntParam::_internal_name() const {
  return name_.Get();
}
inline void IntParam::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* IntParam::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* IntParam::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.IntParam.name)
  return name_.Release();
}
inline void IntParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.IntParam.name)
}

// int32 value = 2;
inline void IntParam::clear_value() {
  value_ = 0;
}
inline int32_t IntParam::_internal_value() const {
  return value_;
}
inline int32_t IntParam::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.IntParam.value)
  return _internal_value();
}
inline void IntParam::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void IntParam::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.IntParam.value)
}

// -------------------------------------------------------------------

// FloatParam

// string name = 1;
inline void FloatParam::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FloatParam::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.FloatParam.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FloatParam::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.FloatParam.name)
}
inline std::string* FloatParam::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.FloatParam.name)
  return _s;
}
inline const std::string& FloatParam::_internal_name() const {
  return name_.Get();
}
inline void FloatParam::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* FloatParam::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* FloatParam::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.FloatParam.name)
  return name_.Release();
}
inline void FloatParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.FloatParam.name)
}

// float value = 2;
inline void FloatParam::clear_value() {
  value_ = 0;
}
inline float FloatParam::_internal_value() const {
  return value_;
}
inline float FloatParam::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.FloatParam.value)
  return _internal_value();
}
inline void FloatParam::_internal_set_value(float value) {
  
  value_ = value;
}
inline void FloatParam::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.FloatParam.value)
}

// -------------------------------------------------------------------

// CustomParam

// string name = 1;
inline void CustomParam::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CustomParam::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.CustomParam.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomParam::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.CustomParam.name)
}
inline std::string* CustomParam::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.CustomParam.name)
  return _s;
}
inline const std::string& CustomParam::_internal_name() const {
  return name_.Get();
}
inline void CustomParam::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomParam::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomParam::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.CustomParam.name)
  return name_.Release();
}
inline void CustomParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.CustomParam.name)
}

// string value = 2;
inline void CustomParam::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& CustomParam::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.CustomParam.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomParam::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.CustomParam.value)
}
inline std::string* CustomParam::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.CustomParam.value)
  return _s;
}
inline const std::string& CustomParam::_internal_value() const {
  return value_.Get();
}
inline void CustomParam::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomParam::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomParam::release_value() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.CustomParam.value)
  return value_.Release();
}
inline void CustomParam::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.CustomParam.value)
}

// -------------------------------------------------------------------

// AllParams

// repeated .mavsdk.rpc.param.IntParam int_params = 1;
inline int AllParams::_internal_int_params_size() const {
  return int_params_.size();
}
inline int AllParams::int_params_size() const {
  return _internal_int_params_size();
}
inline void AllParams::clear_int_params() {
  int_params_.Clear();
}
inline ::mavsdk::rpc::param::IntParam* AllParams::mutable_int_params(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.AllParams.int_params)
  return int_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::IntParam >*
AllParams::mutable_int_params() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.param.AllParams.int_params)
  return &int_params_;
}
inline const ::mavsdk::rpc::param::IntParam& AllParams::_internal_int_params(int index) const {
  return int_params_.Get(index);
}
inline const ::mavsdk::rpc::param::IntParam& AllParams::int_params(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.AllParams.int_params)
  return _internal_int_params(index);
}
inline ::mavsdk::rpc::param::IntParam* AllParams::_internal_add_int_params() {
  return int_params_.Add();
}
inline ::mavsdk::rpc::param::IntParam* AllParams::add_int_params() {
  ::mavsdk::rpc::param::IntParam* _add = _internal_add_int_params();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.param.AllParams.int_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::IntParam >&
AllParams::int_params() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.param.AllParams.int_params)
  return int_params_;
}

// repeated .mavsdk.rpc.param.FloatParam float_params = 2;
inline int AllParams::_internal_float_params_size() const {
  return float_params_.size();
}
inline int AllParams::float_params_size() const {
  return _internal_float_params_size();
}
inline void AllParams::clear_float_params() {
  float_params_.Clear();
}
inline ::mavsdk::rpc::param::FloatParam* AllParams::mutable_float_params(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.AllParams.float_params)
  return float_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::FloatParam >*
AllParams::mutable_float_params() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.param.AllParams.float_params)
  return &float_params_;
}
inline const ::mavsdk::rpc::param::FloatParam& AllParams::_internal_float_params(int index) const {
  return float_params_.Get(index);
}
inline const ::mavsdk::rpc::param::FloatParam& AllParams::float_params(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.AllParams.float_params)
  return _internal_float_params(index);
}
inline ::mavsdk::rpc::param::FloatParam* AllParams::_internal_add_float_params() {
  return float_params_.Add();
}
inline ::mavsdk::rpc::param::FloatParam* AllParams::add_float_params() {
  ::mavsdk::rpc::param::FloatParam* _add = _internal_add_float_params();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.param.AllParams.float_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::FloatParam >&
AllParams::float_params() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.param.AllParams.float_params)
  return float_params_;
}

// repeated .mavsdk.rpc.param.CustomParam custom_params = 3;
inline int AllParams::_internal_custom_params_size() const {
  return custom_params_.size();
}
inline int AllParams::custom_params_size() const {
  return _internal_custom_params_size();
}
inline void AllParams::clear_custom_params() {
  custom_params_.Clear();
}
inline ::mavsdk::rpc::param::CustomParam* AllParams::mutable_custom_params(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.AllParams.custom_params)
  return custom_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::CustomParam >*
AllParams::mutable_custom_params() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.param.AllParams.custom_params)
  return &custom_params_;
}
inline const ::mavsdk::rpc::param::CustomParam& AllParams::_internal_custom_params(int index) const {
  return custom_params_.Get(index);
}
inline const ::mavsdk::rpc::param::CustomParam& AllParams::custom_params(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.AllParams.custom_params)
  return _internal_custom_params(index);
}
inline ::mavsdk::rpc::param::CustomParam* AllParams::_internal_add_custom_params() {
  return custom_params_.Add();
}
inline ::mavsdk::rpc::param::CustomParam* AllParams::add_custom_params() {
  ::mavsdk::rpc::param::CustomParam* _add = _internal_add_custom_params();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.param.AllParams.custom_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::param::CustomParam >&
AllParams::custom_params() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.param.AllParams.custom_params)
  return custom_params_;
}

// -------------------------------------------------------------------

// ParamResult

// .mavsdk.rpc.param.ParamResult.Result result = 1;
inline void ParamResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::param::ParamResult_Result ParamResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::param::ParamResult_Result >(result_);
}
inline ::mavsdk::rpc::param::ParamResult_Result ParamResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.ParamResult.result)
  return _internal_result();
}
inline void ParamResult::_internal_set_result(::mavsdk::rpc::param::ParamResult_Result value) {
  
  result_ = value;
}
inline void ParamResult::set_result(::mavsdk::rpc::param::ParamResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.ParamResult.result)
}

// string result_str = 2;
inline void ParamResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& ParamResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.param.ParamResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParamResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.param.ParamResult.result_str)
}
inline std::string* ParamResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.param.ParamResult.result_str)
  return _s;
}
inline const std::string& ParamResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void ParamResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ParamResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* ParamResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.param.ParamResult.result_str)
  return result_str_.Release();
}
inline void ParamResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.param.ParamResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace param
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::param::ParamResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::param::ParamResult_Result>() {
  return ::mavsdk::rpc::param::ParamResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_param_2fparam_2eproto
