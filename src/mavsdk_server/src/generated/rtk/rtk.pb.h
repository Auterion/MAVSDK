// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtk/rtk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rtk_2frtk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rtk_2frtk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rtk_2frtk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rtk_2frtk_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rtk_2frtk_2eproto;
namespace mavsdk {
namespace rpc {
namespace rtk {
class RtcmData;
struct RtcmDataDefaultTypeInternal;
extern RtcmDataDefaultTypeInternal _RtcmData_default_instance_;
class RtkResult;
struct RtkResultDefaultTypeInternal;
extern RtkResultDefaultTypeInternal _RtkResult_default_instance_;
class SendRtcmDataRequest;
struct SendRtcmDataRequestDefaultTypeInternal;
extern SendRtcmDataRequestDefaultTypeInternal _SendRtcmDataRequest_default_instance_;
class SendRtcmDataResponse;
struct SendRtcmDataResponseDefaultTypeInternal;
extern SendRtcmDataResponseDefaultTypeInternal _SendRtcmDataResponse_default_instance_;
}  // namespace rtk
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::rtk::RtcmData* Arena::CreateMaybeMessage<::mavsdk::rpc::rtk::RtcmData>(Arena*);
template<> ::mavsdk::rpc::rtk::RtkResult* Arena::CreateMaybeMessage<::mavsdk::rpc::rtk::RtkResult>(Arena*);
template<> ::mavsdk::rpc::rtk::SendRtcmDataRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::rtk::SendRtcmDataRequest>(Arena*);
template<> ::mavsdk::rpc::rtk::SendRtcmDataResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::rtk::SendRtcmDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace rtk {

enum RtkResult_Result : int {
  RtkResult_Result_RESULT_UNKNOWN = 0,
  RtkResult_Result_RESULT_SUCCESS = 1,
  RtkResult_Result_RESULT_TOO_LONG = 2,
  RtkResult_Result_RESULT_NO_SYSTEM = 5,
  RtkResult_Result_RESULT_CONNECTION_ERROR = 6,
  RtkResult_Result_RtkResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RtkResult_Result_RtkResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RtkResult_Result_IsValid(int value);
constexpr RtkResult_Result RtkResult_Result_Result_MIN = RtkResult_Result_RESULT_UNKNOWN;
constexpr RtkResult_Result RtkResult_Result_Result_MAX = RtkResult_Result_RESULT_CONNECTION_ERROR;
constexpr int RtkResult_Result_Result_ARRAYSIZE = RtkResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RtkResult_Result_descriptor();
template<typename T>
inline const std::string& RtkResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RtkResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RtkResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RtkResult_Result_descriptor(), enum_t_value);
}
inline bool RtkResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RtkResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RtkResult_Result>(
    RtkResult_Result_descriptor(), name, value);
}
// ===================================================================

class RtcmData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.rtk.RtcmData) */ {
 public:
  inline RtcmData() : RtcmData(nullptr) {}
  ~RtcmData() override;
  explicit PROTOBUF_CONSTEXPR RtcmData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcmData(const RtcmData& from);
  RtcmData(RtcmData&& from) noexcept
    : RtcmData() {
    *this = ::std::move(from);
  }

  inline RtcmData& operator=(const RtcmData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcmData& operator=(RtcmData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcmData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcmData* internal_default_instance() {
    return reinterpret_cast<const RtcmData*>(
               &_RtcmData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RtcmData& a, RtcmData& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcmData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcmData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcmData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcmData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcmData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RtcmData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcmData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.rtk.RtcmData";
  }
  protected:
  explicit RtcmData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.rtk.RtcmData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtk_2frtk_2eproto;
};
// -------------------------------------------------------------------

class SendRtcmDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.rtk.SendRtcmDataRequest) */ {
 public:
  inline SendRtcmDataRequest() : SendRtcmDataRequest(nullptr) {}
  ~SendRtcmDataRequest() override;
  explicit PROTOBUF_CONSTEXPR SendRtcmDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendRtcmDataRequest(const SendRtcmDataRequest& from);
  SendRtcmDataRequest(SendRtcmDataRequest&& from) noexcept
    : SendRtcmDataRequest() {
    *this = ::std::move(from);
  }

  inline SendRtcmDataRequest& operator=(const SendRtcmDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRtcmDataRequest& operator=(SendRtcmDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendRtcmDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendRtcmDataRequest* internal_default_instance() {
    return reinterpret_cast<const SendRtcmDataRequest*>(
               &_SendRtcmDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendRtcmDataRequest& a, SendRtcmDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRtcmDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRtcmDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendRtcmDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendRtcmDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendRtcmDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendRtcmDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRtcmDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.rtk.SendRtcmDataRequest";
  }
  protected:
  explicit SendRtcmDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcmDataFieldNumber = 1,
  };
  // .mavsdk.rpc.rtk.RtcmData rtcm_data = 1;
  bool has_rtcm_data() const;
  private:
  bool _internal_has_rtcm_data() const;
  public:
  void clear_rtcm_data();
  const ::mavsdk::rpc::rtk::RtcmData& rtcm_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::rtk::RtcmData* release_rtcm_data();
  ::mavsdk::rpc::rtk::RtcmData* mutable_rtcm_data();
  void set_allocated_rtcm_data(::mavsdk::rpc::rtk::RtcmData* rtcm_data);
  private:
  const ::mavsdk::rpc::rtk::RtcmData& _internal_rtcm_data() const;
  ::mavsdk::rpc::rtk::RtcmData* _internal_mutable_rtcm_data();
  public:
  void unsafe_arena_set_allocated_rtcm_data(
      ::mavsdk::rpc::rtk::RtcmData* rtcm_data);
  ::mavsdk::rpc::rtk::RtcmData* unsafe_arena_release_rtcm_data();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.rtk.SendRtcmDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::rtk::RtcmData* rtcm_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtk_2frtk_2eproto;
};
// -------------------------------------------------------------------

class SendRtcmDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.rtk.SendRtcmDataResponse) */ {
 public:
  inline SendRtcmDataResponse() : SendRtcmDataResponse(nullptr) {}
  ~SendRtcmDataResponse() override;
  explicit PROTOBUF_CONSTEXPR SendRtcmDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendRtcmDataResponse(const SendRtcmDataResponse& from);
  SendRtcmDataResponse(SendRtcmDataResponse&& from) noexcept
    : SendRtcmDataResponse() {
    *this = ::std::move(from);
  }

  inline SendRtcmDataResponse& operator=(const SendRtcmDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRtcmDataResponse& operator=(SendRtcmDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendRtcmDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendRtcmDataResponse* internal_default_instance() {
    return reinterpret_cast<const SendRtcmDataResponse*>(
               &_SendRtcmDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendRtcmDataResponse& a, SendRtcmDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRtcmDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRtcmDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendRtcmDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendRtcmDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendRtcmDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendRtcmDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRtcmDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.rtk.SendRtcmDataResponse";
  }
  protected:
  explicit SendRtcmDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtkResultFieldNumber = 1,
  };
  // .mavsdk.rpc.rtk.RtkResult rtk_result = 1;
  bool has_rtk_result() const;
  private:
  bool _internal_has_rtk_result() const;
  public:
  void clear_rtk_result();
  const ::mavsdk::rpc::rtk::RtkResult& rtk_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::rtk::RtkResult* release_rtk_result();
  ::mavsdk::rpc::rtk::RtkResult* mutable_rtk_result();
  void set_allocated_rtk_result(::mavsdk::rpc::rtk::RtkResult* rtk_result);
  private:
  const ::mavsdk::rpc::rtk::RtkResult& _internal_rtk_result() const;
  ::mavsdk::rpc::rtk::RtkResult* _internal_mutable_rtk_result();
  public:
  void unsafe_arena_set_allocated_rtk_result(
      ::mavsdk::rpc::rtk::RtkResult* rtk_result);
  ::mavsdk::rpc::rtk::RtkResult* unsafe_arena_release_rtk_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.rtk.SendRtcmDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::rtk::RtkResult* rtk_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtk_2frtk_2eproto;
};
// -------------------------------------------------------------------

class RtkResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.rtk.RtkResult) */ {
 public:
  inline RtkResult() : RtkResult(nullptr) {}
  ~RtkResult() override;
  explicit PROTOBUF_CONSTEXPR RtkResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtkResult(const RtkResult& from);
  RtkResult(RtkResult&& from) noexcept
    : RtkResult() {
    *this = ::std::move(from);
  }

  inline RtkResult& operator=(const RtkResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtkResult& operator=(RtkResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtkResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtkResult* internal_default_instance() {
    return reinterpret_cast<const RtkResult*>(
               &_RtkResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RtkResult& a, RtkResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RtkResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtkResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtkResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtkResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtkResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RtkResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtkResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.rtk.RtkResult";
  }
  protected:
  explicit RtkResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RtkResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    RtkResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    RtkResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_TOO_LONG =
    RtkResult_Result_RESULT_TOO_LONG;
  static constexpr Result RESULT_NO_SYSTEM =
    RtkResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    RtkResult_Result_RESULT_CONNECTION_ERROR;
  static inline bool Result_IsValid(int value) {
    return RtkResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    RtkResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    RtkResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    RtkResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return RtkResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return RtkResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return RtkResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.rtk.RtkResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::rtk::RtkResult_Result result() const;
  void set_result(::mavsdk::rpc::rtk::RtkResult_Result value);
  private:
  ::mavsdk::rpc::rtk::RtkResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::rtk::RtkResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.rtk.RtkResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtk_2frtk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RtcmData

// string data = 1;
inline void RtcmData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RtcmData::data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.rtk.RtcmData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcmData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.rtk.RtcmData.data)
}
inline std::string* RtcmData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.rtk.RtcmData.data)
  return _s;
}
inline const std::string& RtcmData::_internal_data() const {
  return data_.Get();
}
inline void RtcmData::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcmData::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcmData::release_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.rtk.RtcmData.data)
  return data_.Release();
}
inline void RtcmData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.rtk.RtcmData.data)
}

// -------------------------------------------------------------------

// SendRtcmDataRequest

// .mavsdk.rpc.rtk.RtcmData rtcm_data = 1;
inline bool SendRtcmDataRequest::_internal_has_rtcm_data() const {
  return this != internal_default_instance() && rtcm_data_ != nullptr;
}
inline bool SendRtcmDataRequest::has_rtcm_data() const {
  return _internal_has_rtcm_data();
}
inline void SendRtcmDataRequest::clear_rtcm_data() {
  if (GetArenaForAllocation() == nullptr && rtcm_data_ != nullptr) {
    delete rtcm_data_;
  }
  rtcm_data_ = nullptr;
}
inline const ::mavsdk::rpc::rtk::RtcmData& SendRtcmDataRequest::_internal_rtcm_data() const {
  const ::mavsdk::rpc::rtk::RtcmData* p = rtcm_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::rtk::RtcmData&>(
      ::mavsdk::rpc::rtk::_RtcmData_default_instance_);
}
inline const ::mavsdk::rpc::rtk::RtcmData& SendRtcmDataRequest::rtcm_data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.rtk.SendRtcmDataRequest.rtcm_data)
  return _internal_rtcm_data();
}
inline void SendRtcmDataRequest::unsafe_arena_set_allocated_rtcm_data(
    ::mavsdk::rpc::rtk::RtcmData* rtcm_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rtcm_data_);
  }
  rtcm_data_ = rtcm_data;
  if (rtcm_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.rtk.SendRtcmDataRequest.rtcm_data)
}
inline ::mavsdk::rpc::rtk::RtcmData* SendRtcmDataRequest::release_rtcm_data() {
  
  ::mavsdk::rpc::rtk::RtcmData* temp = rtcm_data_;
  rtcm_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::rtk::RtcmData* SendRtcmDataRequest::unsafe_arena_release_rtcm_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.rtk.SendRtcmDataRequest.rtcm_data)
  
  ::mavsdk::rpc::rtk::RtcmData* temp = rtcm_data_;
  rtcm_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::rtk::RtcmData* SendRtcmDataRequest::_internal_mutable_rtcm_data() {
  
  if (rtcm_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::rtk::RtcmData>(GetArenaForAllocation());
    rtcm_data_ = p;
  }
  return rtcm_data_;
}
inline ::mavsdk::rpc::rtk::RtcmData* SendRtcmDataRequest::mutable_rtcm_data() {
  ::mavsdk::rpc::rtk::RtcmData* _msg = _internal_mutable_rtcm_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.rtk.SendRtcmDataRequest.rtcm_data)
  return _msg;
}
inline void SendRtcmDataRequest::set_allocated_rtcm_data(::mavsdk::rpc::rtk::RtcmData* rtcm_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rtcm_data_;
  }
  if (rtcm_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtcm_data);
    if (message_arena != submessage_arena) {
      rtcm_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtcm_data, submessage_arena);
    }
    
  } else {
    
  }
  rtcm_data_ = rtcm_data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.rtk.SendRtcmDataRequest.rtcm_data)
}

// -------------------------------------------------------------------

// SendRtcmDataResponse

// .mavsdk.rpc.rtk.RtkResult rtk_result = 1;
inline bool SendRtcmDataResponse::_internal_has_rtk_result() const {
  return this != internal_default_instance() && rtk_result_ != nullptr;
}
inline bool SendRtcmDataResponse::has_rtk_result() const {
  return _internal_has_rtk_result();
}
inline void SendRtcmDataResponse::clear_rtk_result() {
  if (GetArenaForAllocation() == nullptr && rtk_result_ != nullptr) {
    delete rtk_result_;
  }
  rtk_result_ = nullptr;
}
inline const ::mavsdk::rpc::rtk::RtkResult& SendRtcmDataResponse::_internal_rtk_result() const {
  const ::mavsdk::rpc::rtk::RtkResult* p = rtk_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::rtk::RtkResult&>(
      ::mavsdk::rpc::rtk::_RtkResult_default_instance_);
}
inline const ::mavsdk::rpc::rtk::RtkResult& SendRtcmDataResponse::rtk_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.rtk.SendRtcmDataResponse.rtk_result)
  return _internal_rtk_result();
}
inline void SendRtcmDataResponse::unsafe_arena_set_allocated_rtk_result(
    ::mavsdk::rpc::rtk::RtkResult* rtk_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rtk_result_);
  }
  rtk_result_ = rtk_result;
  if (rtk_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.rtk.SendRtcmDataResponse.rtk_result)
}
inline ::mavsdk::rpc::rtk::RtkResult* SendRtcmDataResponse::release_rtk_result() {
  
  ::mavsdk::rpc::rtk::RtkResult* temp = rtk_result_;
  rtk_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::rtk::RtkResult* SendRtcmDataResponse::unsafe_arena_release_rtk_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.rtk.SendRtcmDataResponse.rtk_result)
  
  ::mavsdk::rpc::rtk::RtkResult* temp = rtk_result_;
  rtk_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::rtk::RtkResult* SendRtcmDataResponse::_internal_mutable_rtk_result() {
  
  if (rtk_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::rtk::RtkResult>(GetArenaForAllocation());
    rtk_result_ = p;
  }
  return rtk_result_;
}
inline ::mavsdk::rpc::rtk::RtkResult* SendRtcmDataResponse::mutable_rtk_result() {
  ::mavsdk::rpc::rtk::RtkResult* _msg = _internal_mutable_rtk_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.rtk.SendRtcmDataResponse.rtk_result)
  return _msg;
}
inline void SendRtcmDataResponse::set_allocated_rtk_result(::mavsdk::rpc::rtk::RtkResult* rtk_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rtk_result_;
  }
  if (rtk_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtk_result);
    if (message_arena != submessage_arena) {
      rtk_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtk_result, submessage_arena);
    }
    
  } else {
    
  }
  rtk_result_ = rtk_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.rtk.SendRtcmDataResponse.rtk_result)
}

// -------------------------------------------------------------------

// RtkResult

// .mavsdk.rpc.rtk.RtkResult.Result result = 1;
inline void RtkResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::rtk::RtkResult_Result RtkResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::rtk::RtkResult_Result >(result_);
}
inline ::mavsdk::rpc::rtk::RtkResult_Result RtkResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.rtk.RtkResult.result)
  return _internal_result();
}
inline void RtkResult::_internal_set_result(::mavsdk::rpc::rtk::RtkResult_Result value) {
  
  result_ = value;
}
inline void RtkResult::set_result(::mavsdk::rpc::rtk::RtkResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.rtk.RtkResult.result)
}

// string result_str = 2;
inline void RtkResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& RtkResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.rtk.RtkResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtkResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.rtk.RtkResult.result_str)
}
inline std::string* RtkResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.rtk.RtkResult.result_str)
  return _s;
}
inline const std::string& RtkResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void RtkResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* RtkResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* RtkResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.rtk.RtkResult.result_str)
  return result_str_.Release();
}
inline void RtkResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.rtk.RtkResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtk
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::rtk::RtkResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::rtk::RtkResult_Result>() {
  return ::mavsdk::rpc::rtk::RtkResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rtk_2frtk_2eproto
