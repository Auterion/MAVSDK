// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_utility/server_utility.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5futility_2fserver_5futility_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5futility_2fserver_5futility_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5futility_2fserver_5futility_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5futility_2fserver_5futility_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5futility_2fserver_5futility_2eproto;
namespace mavsdk {
namespace rpc {
namespace server_utility {
class SendStatusTextRequest;
struct SendStatusTextRequestDefaultTypeInternal;
extern SendStatusTextRequestDefaultTypeInternal _SendStatusTextRequest_default_instance_;
class SendStatusTextResponse;
struct SendStatusTextResponseDefaultTypeInternal;
extern SendStatusTextResponseDefaultTypeInternal _SendStatusTextResponse_default_instance_;
class ServerUtilityResult;
struct ServerUtilityResultDefaultTypeInternal;
extern ServerUtilityResultDefaultTypeInternal _ServerUtilityResult_default_instance_;
}  // namespace server_utility
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::server_utility::SendStatusTextRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::server_utility::SendStatusTextRequest>(Arena*);
template<> ::mavsdk::rpc::server_utility::SendStatusTextResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::server_utility::SendStatusTextResponse>(Arena*);
template<> ::mavsdk::rpc::server_utility::ServerUtilityResult* Arena::CreateMaybeMessage<::mavsdk::rpc::server_utility::ServerUtilityResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace server_utility {

enum ServerUtilityResult_Result : int {
  ServerUtilityResult_Result_RESULT_UNKNOWN = 0,
  ServerUtilityResult_Result_RESULT_SUCCESS = 1,
  ServerUtilityResult_Result_RESULT_NO_SYSTEM = 2,
  ServerUtilityResult_Result_RESULT_CONNECTION_ERROR = 3,
  ServerUtilityResult_Result_RESULT_INVALID_ARGUMENT = 4,
  ServerUtilityResult_Result_ServerUtilityResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerUtilityResult_Result_ServerUtilityResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerUtilityResult_Result_IsValid(int value);
constexpr ServerUtilityResult_Result ServerUtilityResult_Result_Result_MIN = ServerUtilityResult_Result_RESULT_UNKNOWN;
constexpr ServerUtilityResult_Result ServerUtilityResult_Result_Result_MAX = ServerUtilityResult_Result_RESULT_INVALID_ARGUMENT;
constexpr int ServerUtilityResult_Result_Result_ARRAYSIZE = ServerUtilityResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerUtilityResult_Result_descriptor();
template<typename T>
inline const std::string& ServerUtilityResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerUtilityResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerUtilityResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerUtilityResult_Result_descriptor(), enum_t_value);
}
inline bool ServerUtilityResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerUtilityResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerUtilityResult_Result>(
    ServerUtilityResult_Result_descriptor(), name, value);
}
enum StatusTextType : int {
  STATUS_TEXT_TYPE_DEBUG = 0,
  STATUS_TEXT_TYPE_INFO = 1,
  STATUS_TEXT_TYPE_NOTICE = 2,
  STATUS_TEXT_TYPE_WARNING = 3,
  STATUS_TEXT_TYPE_ERROR = 4,
  STATUS_TEXT_TYPE_CRITICAL = 5,
  STATUS_TEXT_TYPE_ALERT = 6,
  STATUS_TEXT_TYPE_EMERGENCY = 7,
  StatusTextType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatusTextType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatusTextType_IsValid(int value);
constexpr StatusTextType StatusTextType_MIN = STATUS_TEXT_TYPE_DEBUG;
constexpr StatusTextType StatusTextType_MAX = STATUS_TEXT_TYPE_EMERGENCY;
constexpr int StatusTextType_ARRAYSIZE = StatusTextType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusTextType_descriptor();
template<typename T>
inline const std::string& StatusTextType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusTextType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusTextType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusTextType_descriptor(), enum_t_value);
}
inline bool StatusTextType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusTextType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusTextType>(
    StatusTextType_descriptor(), name, value);
}
// ===================================================================

class SendStatusTextRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.server_utility.SendStatusTextRequest) */ {
 public:
  inline SendStatusTextRequest() : SendStatusTextRequest(nullptr) {}
  ~SendStatusTextRequest() override;
  explicit PROTOBUF_CONSTEXPR SendStatusTextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendStatusTextRequest(const SendStatusTextRequest& from);
  SendStatusTextRequest(SendStatusTextRequest&& from) noexcept
    : SendStatusTextRequest() {
    *this = ::std::move(from);
  }

  inline SendStatusTextRequest& operator=(const SendStatusTextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendStatusTextRequest& operator=(SendStatusTextRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendStatusTextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendStatusTextRequest* internal_default_instance() {
    return reinterpret_cast<const SendStatusTextRequest*>(
               &_SendStatusTextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendStatusTextRequest& a, SendStatusTextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendStatusTextRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendStatusTextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendStatusTextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendStatusTextRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendStatusTextRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendStatusTextRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendStatusTextRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.server_utility.SendStatusTextRequest";
  }
  protected:
  explicit SendStatusTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .mavsdk.rpc.server_utility.StatusTextType type = 1;
  void clear_type();
  ::mavsdk::rpc::server_utility::StatusTextType type() const;
  void set_type(::mavsdk::rpc::server_utility::StatusTextType value);
  private:
  ::mavsdk::rpc::server_utility::StatusTextType _internal_type() const;
  void _internal_set_type(::mavsdk::rpc::server_utility::StatusTextType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.server_utility.SendStatusTextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5futility_2fserver_5futility_2eproto;
};
// -------------------------------------------------------------------

class SendStatusTextResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.server_utility.SendStatusTextResponse) */ {
 public:
  inline SendStatusTextResponse() : SendStatusTextResponse(nullptr) {}
  ~SendStatusTextResponse() override;
  explicit PROTOBUF_CONSTEXPR SendStatusTextResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendStatusTextResponse(const SendStatusTextResponse& from);
  SendStatusTextResponse(SendStatusTextResponse&& from) noexcept
    : SendStatusTextResponse() {
    *this = ::std::move(from);
  }

  inline SendStatusTextResponse& operator=(const SendStatusTextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendStatusTextResponse& operator=(SendStatusTextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendStatusTextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendStatusTextResponse* internal_default_instance() {
    return reinterpret_cast<const SendStatusTextResponse*>(
               &_SendStatusTextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendStatusTextResponse& a, SendStatusTextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendStatusTextResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendStatusTextResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendStatusTextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendStatusTextResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendStatusTextResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendStatusTextResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendStatusTextResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.server_utility.SendStatusTextResponse";
  }
  protected:
  explicit SendStatusTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerUtilityResultFieldNumber = 1,
  };
  // .mavsdk.rpc.server_utility.ServerUtilityResult server_utility_result = 1;
  bool has_server_utility_result() const;
  private:
  bool _internal_has_server_utility_result() const;
  public:
  void clear_server_utility_result();
  const ::mavsdk::rpc::server_utility::ServerUtilityResult& server_utility_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::server_utility::ServerUtilityResult* release_server_utility_result();
  ::mavsdk::rpc::server_utility::ServerUtilityResult* mutable_server_utility_result();
  void set_allocated_server_utility_result(::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result);
  private:
  const ::mavsdk::rpc::server_utility::ServerUtilityResult& _internal_server_utility_result() const;
  ::mavsdk::rpc::server_utility::ServerUtilityResult* _internal_mutable_server_utility_result();
  public:
  void unsafe_arena_set_allocated_server_utility_result(
      ::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result);
  ::mavsdk::rpc::server_utility::ServerUtilityResult* unsafe_arena_release_server_utility_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.server_utility.SendStatusTextResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5futility_2fserver_5futility_2eproto;
};
// -------------------------------------------------------------------

class ServerUtilityResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.server_utility.ServerUtilityResult) */ {
 public:
  inline ServerUtilityResult() : ServerUtilityResult(nullptr) {}
  ~ServerUtilityResult() override;
  explicit PROTOBUF_CONSTEXPR ServerUtilityResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerUtilityResult(const ServerUtilityResult& from);
  ServerUtilityResult(ServerUtilityResult&& from) noexcept
    : ServerUtilityResult() {
    *this = ::std::move(from);
  }

  inline ServerUtilityResult& operator=(const ServerUtilityResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUtilityResult& operator=(ServerUtilityResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerUtilityResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerUtilityResult* internal_default_instance() {
    return reinterpret_cast<const ServerUtilityResult*>(
               &_ServerUtilityResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerUtilityResult& a, ServerUtilityResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUtilityResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUtilityResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerUtilityResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerUtilityResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerUtilityResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerUtilityResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerUtilityResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.server_utility.ServerUtilityResult";
  }
  protected:
  explicit ServerUtilityResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerUtilityResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    ServerUtilityResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    ServerUtilityResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    ServerUtilityResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    ServerUtilityResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_INVALID_ARGUMENT =
    ServerUtilityResult_Result_RESULT_INVALID_ARGUMENT;
  static inline bool Result_IsValid(int value) {
    return ServerUtilityResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ServerUtilityResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ServerUtilityResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ServerUtilityResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ServerUtilityResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ServerUtilityResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return ServerUtilityResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.server_utility.ServerUtilityResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::server_utility::ServerUtilityResult_Result result() const;
  void set_result(::mavsdk::rpc::server_utility::ServerUtilityResult_Result value);
  private:
  ::mavsdk::rpc::server_utility::ServerUtilityResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::server_utility::ServerUtilityResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.server_utility.ServerUtilityResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5futility_2fserver_5futility_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendStatusTextRequest

// .mavsdk.rpc.server_utility.StatusTextType type = 1;
inline void SendStatusTextRequest::clear_type() {
  type_ = 0;
}
inline ::mavsdk::rpc::server_utility::StatusTextType SendStatusTextRequest::_internal_type() const {
  return static_cast< ::mavsdk::rpc::server_utility::StatusTextType >(type_);
}
inline ::mavsdk::rpc::server_utility::StatusTextType SendStatusTextRequest::type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.SendStatusTextRequest.type)
  return _internal_type();
}
inline void SendStatusTextRequest::_internal_set_type(::mavsdk::rpc::server_utility::StatusTextType value) {
  
  type_ = value;
}
inline void SendStatusTextRequest::set_type(::mavsdk::rpc::server_utility::StatusTextType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.server_utility.SendStatusTextRequest.type)
}

// string text = 2;
inline void SendStatusTextRequest::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& SendStatusTextRequest::text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendStatusTextRequest::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
}
inline std::string* SendStatusTextRequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
  return _s;
}
inline const std::string& SendStatusTextRequest::_internal_text() const {
  return text_.Get();
}
inline void SendStatusTextRequest::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* SendStatusTextRequest::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* SendStatusTextRequest::release_text() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
  return text_.Release();
}
inline void SendStatusTextRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
}

// -------------------------------------------------------------------

// SendStatusTextResponse

// .mavsdk.rpc.server_utility.ServerUtilityResult server_utility_result = 1;
inline bool SendStatusTextResponse::_internal_has_server_utility_result() const {
  return this != internal_default_instance() && server_utility_result_ != nullptr;
}
inline bool SendStatusTextResponse::has_server_utility_result() const {
  return _internal_has_server_utility_result();
}
inline void SendStatusTextResponse::clear_server_utility_result() {
  if (GetArenaForAllocation() == nullptr && server_utility_result_ != nullptr) {
    delete server_utility_result_;
  }
  server_utility_result_ = nullptr;
}
inline const ::mavsdk::rpc::server_utility::ServerUtilityResult& SendStatusTextResponse::_internal_server_utility_result() const {
  const ::mavsdk::rpc::server_utility::ServerUtilityResult* p = server_utility_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::server_utility::ServerUtilityResult&>(
      ::mavsdk::rpc::server_utility::_ServerUtilityResult_default_instance_);
}
inline const ::mavsdk::rpc::server_utility::ServerUtilityResult& SendStatusTextResponse::server_utility_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
  return _internal_server_utility_result();
}
inline void SendStatusTextResponse::unsafe_arena_set_allocated_server_utility_result(
    ::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_utility_result_);
  }
  server_utility_result_ = server_utility_result;
  if (server_utility_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult* SendStatusTextResponse::release_server_utility_result() {
  
  ::mavsdk::rpc::server_utility::ServerUtilityResult* temp = server_utility_result_;
  server_utility_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult* SendStatusTextResponse::unsafe_arena_release_server_utility_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
  
  ::mavsdk::rpc::server_utility::ServerUtilityResult* temp = server_utility_result_;
  server_utility_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult* SendStatusTextResponse::_internal_mutable_server_utility_result() {
  
  if (server_utility_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::server_utility::ServerUtilityResult>(GetArenaForAllocation());
    server_utility_result_ = p;
  }
  return server_utility_result_;
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult* SendStatusTextResponse::mutable_server_utility_result() {
  ::mavsdk::rpc::server_utility::ServerUtilityResult* _msg = _internal_mutable_server_utility_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
  return _msg;
}
inline void SendStatusTextResponse::set_allocated_server_utility_result(::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete server_utility_result_;
  }
  if (server_utility_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(server_utility_result);
    if (message_arena != submessage_arena) {
      server_utility_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_utility_result, submessage_arena);
    }
    
  } else {
    
  }
  server_utility_result_ = server_utility_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
}

// -------------------------------------------------------------------

// ServerUtilityResult

// .mavsdk.rpc.server_utility.ServerUtilityResult.Result result = 1;
inline void ServerUtilityResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult_Result ServerUtilityResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::server_utility::ServerUtilityResult_Result >(result_);
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult_Result ServerUtilityResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.ServerUtilityResult.result)
  return _internal_result();
}
inline void ServerUtilityResult::_internal_set_result(::mavsdk::rpc::server_utility::ServerUtilityResult_Result value) {
  
  result_ = value;
}
inline void ServerUtilityResult::set_result(::mavsdk::rpc::server_utility::ServerUtilityResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.server_utility.ServerUtilityResult.result)
}

// string result_str = 2;
inline void ServerUtilityResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& ServerUtilityResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerUtilityResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
}
inline std::string* ServerUtilityResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
  return _s;
}
inline const std::string& ServerUtilityResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void ServerUtilityResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerUtilityResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerUtilityResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
  return result_str_.Release();
}
inline void ServerUtilityResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_utility
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::server_utility::ServerUtilityResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::server_utility::ServerUtilityResult_Result>() {
  return ::mavsdk::rpc::server_utility::ServerUtilityResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::server_utility::StatusTextType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::server_utility::StatusTextType>() {
  return ::mavsdk::rpc::server_utility::StatusTextType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5futility_2fserver_5futility_2eproto
