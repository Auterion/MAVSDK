// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry/telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_telemetry_2ftelemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_telemetry_2ftelemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_telemetry_2ftelemetry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_2ftelemetry_2eproto;
namespace mavsdk {
namespace rpc {
namespace telemetry {
class AccelerationFrd;
struct AccelerationFrdDefaultTypeInternal;
extern AccelerationFrdDefaultTypeInternal _AccelerationFrd_default_instance_;
class ActuatorControlTarget;
struct ActuatorControlTargetDefaultTypeInternal;
extern ActuatorControlTargetDefaultTypeInternal _ActuatorControlTarget_default_instance_;
class ActuatorControlTargetResponse;
struct ActuatorControlTargetResponseDefaultTypeInternal;
extern ActuatorControlTargetResponseDefaultTypeInternal _ActuatorControlTargetResponse_default_instance_;
class ActuatorOutputStatus;
struct ActuatorOutputStatusDefaultTypeInternal;
extern ActuatorOutputStatusDefaultTypeInternal _ActuatorOutputStatus_default_instance_;
class ActuatorOutputStatusResponse;
struct ActuatorOutputStatusResponseDefaultTypeInternal;
extern ActuatorOutputStatusResponseDefaultTypeInternal _ActuatorOutputStatusResponse_default_instance_;
class AngularVelocityBody;
struct AngularVelocityBodyDefaultTypeInternal;
extern AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
class AngularVelocityFrd;
struct AngularVelocityFrdDefaultTypeInternal;
extern AngularVelocityFrdDefaultTypeInternal _AngularVelocityFrd_default_instance_;
class ArmedResponse;
struct ArmedResponseDefaultTypeInternal;
extern ArmedResponseDefaultTypeInternal _ArmedResponse_default_instance_;
class AttitudeAngularVelocityBodyResponse;
struct AttitudeAngularVelocityBodyResponseDefaultTypeInternal;
extern AttitudeAngularVelocityBodyResponseDefaultTypeInternal _AttitudeAngularVelocityBodyResponse_default_instance_;
class AttitudeEulerResponse;
struct AttitudeEulerResponseDefaultTypeInternal;
extern AttitudeEulerResponseDefaultTypeInternal _AttitudeEulerResponse_default_instance_;
class AttitudeQuaternionResponse;
struct AttitudeQuaternionResponseDefaultTypeInternal;
extern AttitudeQuaternionResponseDefaultTypeInternal _AttitudeQuaternionResponse_default_instance_;
class Battery;
struct BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
class BatteryResponse;
struct BatteryResponseDefaultTypeInternal;
extern BatteryResponseDefaultTypeInternal _BatteryResponse_default_instance_;
class CameraAttitudeEulerResponse;
struct CameraAttitudeEulerResponseDefaultTypeInternal;
extern CameraAttitudeEulerResponseDefaultTypeInternal _CameraAttitudeEulerResponse_default_instance_;
class CameraAttitudeQuaternionResponse;
struct CameraAttitudeQuaternionResponseDefaultTypeInternal;
extern CameraAttitudeQuaternionResponseDefaultTypeInternal _CameraAttitudeQuaternionResponse_default_instance_;
class Covariance;
struct CovarianceDefaultTypeInternal;
extern CovarianceDefaultTypeInternal _Covariance_default_instance_;
class DistanceSensor;
struct DistanceSensorDefaultTypeInternal;
extern DistanceSensorDefaultTypeInternal _DistanceSensor_default_instance_;
class DistanceSensorResponse;
struct DistanceSensorResponseDefaultTypeInternal;
extern DistanceSensorResponseDefaultTypeInternal _DistanceSensorResponse_default_instance_;
class EulerAngle;
struct EulerAngleDefaultTypeInternal;
extern EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
class FixedwingMetrics;
struct FixedwingMetricsDefaultTypeInternal;
extern FixedwingMetricsDefaultTypeInternal _FixedwingMetrics_default_instance_;
class FixedwingMetricsResponse;
struct FixedwingMetricsResponseDefaultTypeInternal;
extern FixedwingMetricsResponseDefaultTypeInternal _FixedwingMetricsResponse_default_instance_;
class FlightModeResponse;
struct FlightModeResponseDefaultTypeInternal;
extern FlightModeResponseDefaultTypeInternal _FlightModeResponse_default_instance_;
class GetGpsGlobalOriginRequest;
struct GetGpsGlobalOriginRequestDefaultTypeInternal;
extern GetGpsGlobalOriginRequestDefaultTypeInternal _GetGpsGlobalOriginRequest_default_instance_;
class GetGpsGlobalOriginResponse;
struct GetGpsGlobalOriginResponseDefaultTypeInternal;
extern GetGpsGlobalOriginResponseDefaultTypeInternal _GetGpsGlobalOriginResponse_default_instance_;
class GpsGlobalOrigin;
struct GpsGlobalOriginDefaultTypeInternal;
extern GpsGlobalOriginDefaultTypeInternal _GpsGlobalOrigin_default_instance_;
class GpsInfo;
struct GpsInfoDefaultTypeInternal;
extern GpsInfoDefaultTypeInternal _GpsInfo_default_instance_;
class GpsInfoResponse;
struct GpsInfoResponseDefaultTypeInternal;
extern GpsInfoResponseDefaultTypeInternal _GpsInfoResponse_default_instance_;
class GroundTruth;
struct GroundTruthDefaultTypeInternal;
extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
class GroundTruthResponse;
struct GroundTruthResponseDefaultTypeInternal;
extern GroundTruthResponseDefaultTypeInternal _GroundTruthResponse_default_instance_;
class Heading;
struct HeadingDefaultTypeInternal;
extern HeadingDefaultTypeInternal _Heading_default_instance_;
class HeadingResponse;
struct HeadingResponseDefaultTypeInternal;
extern HeadingResponseDefaultTypeInternal _HeadingResponse_default_instance_;
class Health;
struct HealthDefaultTypeInternal;
extern HealthDefaultTypeInternal _Health_default_instance_;
class HealthAllOkResponse;
struct HealthAllOkResponseDefaultTypeInternal;
extern HealthAllOkResponseDefaultTypeInternal _HealthAllOkResponse_default_instance_;
class HealthResponse;
struct HealthResponseDefaultTypeInternal;
extern HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
class HomeResponse;
struct HomeResponseDefaultTypeInternal;
extern HomeResponseDefaultTypeInternal _HomeResponse_default_instance_;
class Imu;
struct ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class ImuResponse;
struct ImuResponseDefaultTypeInternal;
extern ImuResponseDefaultTypeInternal _ImuResponse_default_instance_;
class InAirResponse;
struct InAirResponseDefaultTypeInternal;
extern InAirResponseDefaultTypeInternal _InAirResponse_default_instance_;
class LandedStateResponse;
struct LandedStateResponseDefaultTypeInternal;
extern LandedStateResponseDefaultTypeInternal _LandedStateResponse_default_instance_;
class MagneticFieldFrd;
struct MagneticFieldFrdDefaultTypeInternal;
extern MagneticFieldFrdDefaultTypeInternal _MagneticFieldFrd_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class OdometryResponse;
struct OdometryResponseDefaultTypeInternal;
extern OdometryResponseDefaultTypeInternal _OdometryResponse_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionBody;
struct PositionBodyDefaultTypeInternal;
extern PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
class PositionNed;
struct PositionNedDefaultTypeInternal;
extern PositionNedDefaultTypeInternal _PositionNed_default_instance_;
class PositionResponse;
struct PositionResponseDefaultTypeInternal;
extern PositionResponseDefaultTypeInternal _PositionResponse_default_instance_;
class PositionVelocityNed;
struct PositionVelocityNedDefaultTypeInternal;
extern PositionVelocityNedDefaultTypeInternal _PositionVelocityNed_default_instance_;
class PositionVelocityNedResponse;
struct PositionVelocityNedResponseDefaultTypeInternal;
extern PositionVelocityNedResponseDefaultTypeInternal _PositionVelocityNedResponse_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class RawGps;
struct RawGpsDefaultTypeInternal;
extern RawGpsDefaultTypeInternal _RawGps_default_instance_;
class RawGpsResponse;
struct RawGpsResponseDefaultTypeInternal;
extern RawGpsResponseDefaultTypeInternal _RawGpsResponse_default_instance_;
class RawImuResponse;
struct RawImuResponseDefaultTypeInternal;
extern RawImuResponseDefaultTypeInternal _RawImuResponse_default_instance_;
class RcStatus;
struct RcStatusDefaultTypeInternal;
extern RcStatusDefaultTypeInternal _RcStatus_default_instance_;
class RcStatusResponse;
struct RcStatusResponseDefaultTypeInternal;
extern RcStatusResponseDefaultTypeInternal _RcStatusResponse_default_instance_;
class ScaledImuResponse;
struct ScaledImuResponseDefaultTypeInternal;
extern ScaledImuResponseDefaultTypeInternal _ScaledImuResponse_default_instance_;
class ScaledPressure;
struct ScaledPressureDefaultTypeInternal;
extern ScaledPressureDefaultTypeInternal _ScaledPressure_default_instance_;
class ScaledPressureResponse;
struct ScaledPressureResponseDefaultTypeInternal;
extern ScaledPressureResponseDefaultTypeInternal _ScaledPressureResponse_default_instance_;
class SetRateActuatorControlTargetRequest;
struct SetRateActuatorControlTargetRequestDefaultTypeInternal;
extern SetRateActuatorControlTargetRequestDefaultTypeInternal _SetRateActuatorControlTargetRequest_default_instance_;
class SetRateActuatorControlTargetResponse;
struct SetRateActuatorControlTargetResponseDefaultTypeInternal;
extern SetRateActuatorControlTargetResponseDefaultTypeInternal _SetRateActuatorControlTargetResponse_default_instance_;
class SetRateActuatorOutputStatusRequest;
struct SetRateActuatorOutputStatusRequestDefaultTypeInternal;
extern SetRateActuatorOutputStatusRequestDefaultTypeInternal _SetRateActuatorOutputStatusRequest_default_instance_;
class SetRateActuatorOutputStatusResponse;
struct SetRateActuatorOutputStatusResponseDefaultTypeInternal;
extern SetRateActuatorOutputStatusResponseDefaultTypeInternal _SetRateActuatorOutputStatusResponse_default_instance_;
class SetRateAttitudeAngularVelocityBodyRequest;
struct SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal;
extern SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal _SetRateAttitudeAngularVelocityBodyRequest_default_instance_;
class SetRateAttitudeAngularVelocityBodyResponse;
struct SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal;
extern SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal _SetRateAttitudeAngularVelocityBodyResponse_default_instance_;
class SetRateAttitudeRequest;
struct SetRateAttitudeRequestDefaultTypeInternal;
extern SetRateAttitudeRequestDefaultTypeInternal _SetRateAttitudeRequest_default_instance_;
class SetRateAttitudeResponse;
struct SetRateAttitudeResponseDefaultTypeInternal;
extern SetRateAttitudeResponseDefaultTypeInternal _SetRateAttitudeResponse_default_instance_;
class SetRateBatteryRequest;
struct SetRateBatteryRequestDefaultTypeInternal;
extern SetRateBatteryRequestDefaultTypeInternal _SetRateBatteryRequest_default_instance_;
class SetRateBatteryResponse;
struct SetRateBatteryResponseDefaultTypeInternal;
extern SetRateBatteryResponseDefaultTypeInternal _SetRateBatteryResponse_default_instance_;
class SetRateCameraAttitudeQuaternionRequest;
struct SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal;
extern SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal _SetRateCameraAttitudeQuaternionRequest_default_instance_;
class SetRateCameraAttitudeQuaternionResponse;
struct SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal;
extern SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal _SetRateCameraAttitudeQuaternionResponse_default_instance_;
class SetRateCameraAttitudeRequest;
struct SetRateCameraAttitudeRequestDefaultTypeInternal;
extern SetRateCameraAttitudeRequestDefaultTypeInternal _SetRateCameraAttitudeRequest_default_instance_;
class SetRateCameraAttitudeResponse;
struct SetRateCameraAttitudeResponseDefaultTypeInternal;
extern SetRateCameraAttitudeResponseDefaultTypeInternal _SetRateCameraAttitudeResponse_default_instance_;
class SetRateDistanceSensorRequest;
struct SetRateDistanceSensorRequestDefaultTypeInternal;
extern SetRateDistanceSensorRequestDefaultTypeInternal _SetRateDistanceSensorRequest_default_instance_;
class SetRateDistanceSensorResponse;
struct SetRateDistanceSensorResponseDefaultTypeInternal;
extern SetRateDistanceSensorResponseDefaultTypeInternal _SetRateDistanceSensorResponse_default_instance_;
class SetRateFixedwingMetricsRequest;
struct SetRateFixedwingMetricsRequestDefaultTypeInternal;
extern SetRateFixedwingMetricsRequestDefaultTypeInternal _SetRateFixedwingMetricsRequest_default_instance_;
class SetRateFixedwingMetricsResponse;
struct SetRateFixedwingMetricsResponseDefaultTypeInternal;
extern SetRateFixedwingMetricsResponseDefaultTypeInternal _SetRateFixedwingMetricsResponse_default_instance_;
class SetRateGpsInfoRequest;
struct SetRateGpsInfoRequestDefaultTypeInternal;
extern SetRateGpsInfoRequestDefaultTypeInternal _SetRateGpsInfoRequest_default_instance_;
class SetRateGpsInfoResponse;
struct SetRateGpsInfoResponseDefaultTypeInternal;
extern SetRateGpsInfoResponseDefaultTypeInternal _SetRateGpsInfoResponse_default_instance_;
class SetRateGroundTruthRequest;
struct SetRateGroundTruthRequestDefaultTypeInternal;
extern SetRateGroundTruthRequestDefaultTypeInternal _SetRateGroundTruthRequest_default_instance_;
class SetRateGroundTruthResponse;
struct SetRateGroundTruthResponseDefaultTypeInternal;
extern SetRateGroundTruthResponseDefaultTypeInternal _SetRateGroundTruthResponse_default_instance_;
class SetRateHomeRequest;
struct SetRateHomeRequestDefaultTypeInternal;
extern SetRateHomeRequestDefaultTypeInternal _SetRateHomeRequest_default_instance_;
class SetRateHomeResponse;
struct SetRateHomeResponseDefaultTypeInternal;
extern SetRateHomeResponseDefaultTypeInternal _SetRateHomeResponse_default_instance_;
class SetRateImuRequest;
struct SetRateImuRequestDefaultTypeInternal;
extern SetRateImuRequestDefaultTypeInternal _SetRateImuRequest_default_instance_;
class SetRateImuResponse;
struct SetRateImuResponseDefaultTypeInternal;
extern SetRateImuResponseDefaultTypeInternal _SetRateImuResponse_default_instance_;
class SetRateInAirRequest;
struct SetRateInAirRequestDefaultTypeInternal;
extern SetRateInAirRequestDefaultTypeInternal _SetRateInAirRequest_default_instance_;
class SetRateInAirResponse;
struct SetRateInAirResponseDefaultTypeInternal;
extern SetRateInAirResponseDefaultTypeInternal _SetRateInAirResponse_default_instance_;
class SetRateLandedStateRequest;
struct SetRateLandedStateRequestDefaultTypeInternal;
extern SetRateLandedStateRequestDefaultTypeInternal _SetRateLandedStateRequest_default_instance_;
class SetRateLandedStateResponse;
struct SetRateLandedStateResponseDefaultTypeInternal;
extern SetRateLandedStateResponseDefaultTypeInternal _SetRateLandedStateResponse_default_instance_;
class SetRateOdometryRequest;
struct SetRateOdometryRequestDefaultTypeInternal;
extern SetRateOdometryRequestDefaultTypeInternal _SetRateOdometryRequest_default_instance_;
class SetRateOdometryResponse;
struct SetRateOdometryResponseDefaultTypeInternal;
extern SetRateOdometryResponseDefaultTypeInternal _SetRateOdometryResponse_default_instance_;
class SetRatePositionRequest;
struct SetRatePositionRequestDefaultTypeInternal;
extern SetRatePositionRequestDefaultTypeInternal _SetRatePositionRequest_default_instance_;
class SetRatePositionResponse;
struct SetRatePositionResponseDefaultTypeInternal;
extern SetRatePositionResponseDefaultTypeInternal _SetRatePositionResponse_default_instance_;
class SetRatePositionVelocityNedRequest;
struct SetRatePositionVelocityNedRequestDefaultTypeInternal;
extern SetRatePositionVelocityNedRequestDefaultTypeInternal _SetRatePositionVelocityNedRequest_default_instance_;
class SetRatePositionVelocityNedResponse;
struct SetRatePositionVelocityNedResponseDefaultTypeInternal;
extern SetRatePositionVelocityNedResponseDefaultTypeInternal _SetRatePositionVelocityNedResponse_default_instance_;
class SetRateRawGpsRequest;
struct SetRateRawGpsRequestDefaultTypeInternal;
extern SetRateRawGpsRequestDefaultTypeInternal _SetRateRawGpsRequest_default_instance_;
class SetRateRawImuRequest;
struct SetRateRawImuRequestDefaultTypeInternal;
extern SetRateRawImuRequestDefaultTypeInternal _SetRateRawImuRequest_default_instance_;
class SetRateRawImuResponse;
struct SetRateRawImuResponseDefaultTypeInternal;
extern SetRateRawImuResponseDefaultTypeInternal _SetRateRawImuResponse_default_instance_;
class SetRateRcStatusRequest;
struct SetRateRcStatusRequestDefaultTypeInternal;
extern SetRateRcStatusRequestDefaultTypeInternal _SetRateRcStatusRequest_default_instance_;
class SetRateRcStatusResponse;
struct SetRateRcStatusResponseDefaultTypeInternal;
extern SetRateRcStatusResponseDefaultTypeInternal _SetRateRcStatusResponse_default_instance_;
class SetRateScaledImuRequest;
struct SetRateScaledImuRequestDefaultTypeInternal;
extern SetRateScaledImuRequestDefaultTypeInternal _SetRateScaledImuRequest_default_instance_;
class SetRateScaledImuResponse;
struct SetRateScaledImuResponseDefaultTypeInternal;
extern SetRateScaledImuResponseDefaultTypeInternal _SetRateScaledImuResponse_default_instance_;
class SetRateUnixEpochTimeRequest;
struct SetRateUnixEpochTimeRequestDefaultTypeInternal;
extern SetRateUnixEpochTimeRequestDefaultTypeInternal _SetRateUnixEpochTimeRequest_default_instance_;
class SetRateUnixEpochTimeResponse;
struct SetRateUnixEpochTimeResponseDefaultTypeInternal;
extern SetRateUnixEpochTimeResponseDefaultTypeInternal _SetRateUnixEpochTimeResponse_default_instance_;
class SetRateVelocityNedRequest;
struct SetRateVelocityNedRequestDefaultTypeInternal;
extern SetRateVelocityNedRequestDefaultTypeInternal _SetRateVelocityNedRequest_default_instance_;
class SetRateVelocityNedResponse;
struct SetRateVelocityNedResponseDefaultTypeInternal;
extern SetRateVelocityNedResponseDefaultTypeInternal _SetRateVelocityNedResponse_default_instance_;
class SetRateVtolStateRequest;
struct SetRateVtolStateRequestDefaultTypeInternal;
extern SetRateVtolStateRequestDefaultTypeInternal _SetRateVtolStateRequest_default_instance_;
class SetRateVtolStateResponse;
struct SetRateVtolStateResponseDefaultTypeInternal;
extern SetRateVtolStateResponseDefaultTypeInternal _SetRateVtolStateResponse_default_instance_;
class StatusText;
struct StatusTextDefaultTypeInternal;
extern StatusTextDefaultTypeInternal _StatusText_default_instance_;
class StatusTextResponse;
struct StatusTextResponseDefaultTypeInternal;
extern StatusTextResponseDefaultTypeInternal _StatusTextResponse_default_instance_;
class SubscribeActuatorControlTargetRequest;
struct SubscribeActuatorControlTargetRequestDefaultTypeInternal;
extern SubscribeActuatorControlTargetRequestDefaultTypeInternal _SubscribeActuatorControlTargetRequest_default_instance_;
class SubscribeActuatorOutputStatusRequest;
struct SubscribeActuatorOutputStatusRequestDefaultTypeInternal;
extern SubscribeActuatorOutputStatusRequestDefaultTypeInternal _SubscribeActuatorOutputStatusRequest_default_instance_;
class SubscribeArmedRequest;
struct SubscribeArmedRequestDefaultTypeInternal;
extern SubscribeArmedRequestDefaultTypeInternal _SubscribeArmedRequest_default_instance_;
class SubscribeAttitudeAngularVelocityBodyRequest;
struct SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal;
extern SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal _SubscribeAttitudeAngularVelocityBodyRequest_default_instance_;
class SubscribeAttitudeEulerRequest;
struct SubscribeAttitudeEulerRequestDefaultTypeInternal;
extern SubscribeAttitudeEulerRequestDefaultTypeInternal _SubscribeAttitudeEulerRequest_default_instance_;
class SubscribeAttitudeQuaternionRequest;
struct SubscribeAttitudeQuaternionRequestDefaultTypeInternal;
extern SubscribeAttitudeQuaternionRequestDefaultTypeInternal _SubscribeAttitudeQuaternionRequest_default_instance_;
class SubscribeBatteryRequest;
struct SubscribeBatteryRequestDefaultTypeInternal;
extern SubscribeBatteryRequestDefaultTypeInternal _SubscribeBatteryRequest_default_instance_;
class SubscribeCameraAttitudeEulerRequest;
struct SubscribeCameraAttitudeEulerRequestDefaultTypeInternal;
extern SubscribeCameraAttitudeEulerRequestDefaultTypeInternal _SubscribeCameraAttitudeEulerRequest_default_instance_;
class SubscribeCameraAttitudeQuaternionRequest;
struct SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal;
extern SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal _SubscribeCameraAttitudeQuaternionRequest_default_instance_;
class SubscribeDistanceSensorRequest;
struct SubscribeDistanceSensorRequestDefaultTypeInternal;
extern SubscribeDistanceSensorRequestDefaultTypeInternal _SubscribeDistanceSensorRequest_default_instance_;
class SubscribeFixedwingMetricsRequest;
struct SubscribeFixedwingMetricsRequestDefaultTypeInternal;
extern SubscribeFixedwingMetricsRequestDefaultTypeInternal _SubscribeFixedwingMetricsRequest_default_instance_;
class SubscribeFlightModeRequest;
struct SubscribeFlightModeRequestDefaultTypeInternal;
extern SubscribeFlightModeRequestDefaultTypeInternal _SubscribeFlightModeRequest_default_instance_;
class SubscribeGpsInfoRequest;
struct SubscribeGpsInfoRequestDefaultTypeInternal;
extern SubscribeGpsInfoRequestDefaultTypeInternal _SubscribeGpsInfoRequest_default_instance_;
class SubscribeGroundTruthRequest;
struct SubscribeGroundTruthRequestDefaultTypeInternal;
extern SubscribeGroundTruthRequestDefaultTypeInternal _SubscribeGroundTruthRequest_default_instance_;
class SubscribeHeadingRequest;
struct SubscribeHeadingRequestDefaultTypeInternal;
extern SubscribeHeadingRequestDefaultTypeInternal _SubscribeHeadingRequest_default_instance_;
class SubscribeHealthAllOkRequest;
struct SubscribeHealthAllOkRequestDefaultTypeInternal;
extern SubscribeHealthAllOkRequestDefaultTypeInternal _SubscribeHealthAllOkRequest_default_instance_;
class SubscribeHealthRequest;
struct SubscribeHealthRequestDefaultTypeInternal;
extern SubscribeHealthRequestDefaultTypeInternal _SubscribeHealthRequest_default_instance_;
class SubscribeHomeRequest;
struct SubscribeHomeRequestDefaultTypeInternal;
extern SubscribeHomeRequestDefaultTypeInternal _SubscribeHomeRequest_default_instance_;
class SubscribeImuRequest;
struct SubscribeImuRequestDefaultTypeInternal;
extern SubscribeImuRequestDefaultTypeInternal _SubscribeImuRequest_default_instance_;
class SubscribeInAirRequest;
struct SubscribeInAirRequestDefaultTypeInternal;
extern SubscribeInAirRequestDefaultTypeInternal _SubscribeInAirRequest_default_instance_;
class SubscribeLandedStateRequest;
struct SubscribeLandedStateRequestDefaultTypeInternal;
extern SubscribeLandedStateRequestDefaultTypeInternal _SubscribeLandedStateRequest_default_instance_;
class SubscribeOdometryRequest;
struct SubscribeOdometryRequestDefaultTypeInternal;
extern SubscribeOdometryRequestDefaultTypeInternal _SubscribeOdometryRequest_default_instance_;
class SubscribePositionRequest;
struct SubscribePositionRequestDefaultTypeInternal;
extern SubscribePositionRequestDefaultTypeInternal _SubscribePositionRequest_default_instance_;
class SubscribePositionVelocityNedRequest;
struct SubscribePositionVelocityNedRequestDefaultTypeInternal;
extern SubscribePositionVelocityNedRequestDefaultTypeInternal _SubscribePositionVelocityNedRequest_default_instance_;
class SubscribeRawGpsRequest;
struct SubscribeRawGpsRequestDefaultTypeInternal;
extern SubscribeRawGpsRequestDefaultTypeInternal _SubscribeRawGpsRequest_default_instance_;
class SubscribeRawImuRequest;
struct SubscribeRawImuRequestDefaultTypeInternal;
extern SubscribeRawImuRequestDefaultTypeInternal _SubscribeRawImuRequest_default_instance_;
class SubscribeRcStatusRequest;
struct SubscribeRcStatusRequestDefaultTypeInternal;
extern SubscribeRcStatusRequestDefaultTypeInternal _SubscribeRcStatusRequest_default_instance_;
class SubscribeScaledImuRequest;
struct SubscribeScaledImuRequestDefaultTypeInternal;
extern SubscribeScaledImuRequestDefaultTypeInternal _SubscribeScaledImuRequest_default_instance_;
class SubscribeScaledPressureRequest;
struct SubscribeScaledPressureRequestDefaultTypeInternal;
extern SubscribeScaledPressureRequestDefaultTypeInternal _SubscribeScaledPressureRequest_default_instance_;
class SubscribeStatusTextRequest;
struct SubscribeStatusTextRequestDefaultTypeInternal;
extern SubscribeStatusTextRequestDefaultTypeInternal _SubscribeStatusTextRequest_default_instance_;
class SubscribeUnixEpochTimeRequest;
struct SubscribeUnixEpochTimeRequestDefaultTypeInternal;
extern SubscribeUnixEpochTimeRequestDefaultTypeInternal _SubscribeUnixEpochTimeRequest_default_instance_;
class SubscribeVelocityNedRequest;
struct SubscribeVelocityNedRequestDefaultTypeInternal;
extern SubscribeVelocityNedRequestDefaultTypeInternal _SubscribeVelocityNedRequest_default_instance_;
class SubscribeVtolStateRequest;
struct SubscribeVtolStateRequestDefaultTypeInternal;
extern SubscribeVtolStateRequestDefaultTypeInternal _SubscribeVtolStateRequest_default_instance_;
class TelemetryResult;
struct TelemetryResultDefaultTypeInternal;
extern TelemetryResultDefaultTypeInternal _TelemetryResult_default_instance_;
class UnixEpochTimeResponse;
struct UnixEpochTimeResponseDefaultTypeInternal;
extern UnixEpochTimeResponseDefaultTypeInternal _UnixEpochTimeResponse_default_instance_;
class VelocityBody;
struct VelocityBodyDefaultTypeInternal;
extern VelocityBodyDefaultTypeInternal _VelocityBody_default_instance_;
class VelocityNed;
struct VelocityNedDefaultTypeInternal;
extern VelocityNedDefaultTypeInternal _VelocityNed_default_instance_;
class VelocityNedResponse;
struct VelocityNedResponseDefaultTypeInternal;
extern VelocityNedResponseDefaultTypeInternal _VelocityNedResponse_default_instance_;
class VtolStateResponse;
struct VtolStateResponseDefaultTypeInternal;
extern VtolStateResponseDefaultTypeInternal _VtolStateResponse_default_instance_;
}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::telemetry::AccelerationFrd* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AccelerationFrd>(Arena*);
template<> ::mavsdk::rpc::telemetry::ActuatorControlTarget* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorControlTarget>(Arena*);
template<> ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorControlTargetResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::ActuatorOutputStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorOutputStatus>(Arena*);
template<> ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::AngularVelocityBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityBody>(Arena*);
template<> ::mavsdk::rpc::telemetry::AngularVelocityFrd* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityFrd>(Arena*);
template<> ::mavsdk::rpc::telemetry::ArmedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ArmedResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::AttitudeEulerResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AttitudeEulerResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AttitudeQuaternionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Battery* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Battery>(Arena*);
template<> ::mavsdk::rpc::telemetry::BatteryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::BatteryResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Covariance* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Covariance>(Arena*);
template<> ::mavsdk::rpc::telemetry::DistanceSensor* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::DistanceSensor>(Arena*);
template<> ::mavsdk::rpc::telemetry::DistanceSensorResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::DistanceSensorResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::EulerAngle* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(Arena*);
template<> ::mavsdk::rpc::telemetry::FixedwingMetrics* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::FixedwingMetrics>(Arena*);
template<> ::mavsdk::rpc::telemetry::FixedwingMetricsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::FixedwingMetricsResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::FlightModeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::FlightModeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::GpsGlobalOrigin* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsGlobalOrigin>(Arena*);
template<> ::mavsdk::rpc::telemetry::GpsInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsInfo>(Arena*);
template<> ::mavsdk::rpc::telemetry::GpsInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsInfoResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::GroundTruth* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GroundTruth>(Arena*);
template<> ::mavsdk::rpc::telemetry::GroundTruthResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GroundTruthResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Heading* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Heading>(Arena*);
template<> ::mavsdk::rpc::telemetry::HeadingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::HeadingResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Health* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Health>(Arena*);
template<> ::mavsdk::rpc::telemetry::HealthAllOkResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::HealthAllOkResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::HealthResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::HealthResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::HomeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::HomeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Imu* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Imu>(Arena*);
template<> ::mavsdk::rpc::telemetry::ImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::InAirResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::InAirResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::LandedStateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::LandedStateResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::MagneticFieldFrd* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::MagneticFieldFrd>(Arena*);
template<> ::mavsdk::rpc::telemetry::Odometry* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Odometry>(Arena*);
template<> ::mavsdk::rpc::telemetry::OdometryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::OdometryResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Position* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Position>(Arena*);
template<> ::mavsdk::rpc::telemetry::PositionBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionBody>(Arena*);
template<> ::mavsdk::rpc::telemetry::PositionNed* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionNed>(Arena*);
template<> ::mavsdk::rpc::telemetry::PositionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::PositionVelocityNed* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionVelocityNed>(Arena*);
template<> ::mavsdk::rpc::telemetry::PositionVelocityNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionVelocityNedResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Quaternion* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(Arena*);
template<> ::mavsdk::rpc::telemetry::RawGps* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::RawGps>(Arena*);
template<> ::mavsdk::rpc::telemetry::RawGpsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::RawGpsResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::RawImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::RawImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::RcStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::RcStatus>(Arena*);
template<> ::mavsdk::rpc::telemetry::RcStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::RcStatusResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::ScaledImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ScaledImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::ScaledPressure* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ScaledPressure>(Arena*);
template<> ::mavsdk::rpc::telemetry::ScaledPressureResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ScaledPressureResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateAttitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateAttitudeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateAttitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateAttitudeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateBatteryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateBatteryRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateBatteryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateBatteryResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateGpsInfoRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateGpsInfoResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateGroundTruthRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateGroundTruthResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateHomeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateHomeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateHomeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateHomeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateInAirRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateInAirRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateInAirResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateInAirResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateLandedStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateLandedStateRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateLandedStateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateLandedStateResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateOdometryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateOdometryRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateOdometryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateOdometryResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRatePositionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRatePositionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRatePositionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRatePositionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateRawGpsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateRawGpsRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateRawImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateRawImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateRawImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateRawImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateRcStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateRcStatusRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateRcStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateRcStatusResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateScaledImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateScaledImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateScaledImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateScaledImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateVelocityNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateVelocityNedRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateVelocityNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateVelocityNedResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateVtolStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateVtolStateRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SetRateVtolStateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SetRateVtolStateResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::StatusText* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::StatusText>(Arena*);
template<> ::mavsdk::rpc::telemetry::StatusTextResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::StatusTextResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeArmedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeArmedRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeBatteryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeBatteryRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeFlightModeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeHeadingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeHeadingRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeHealthRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeHealthRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeHomeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeHomeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeInAirRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeInAirRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeLandedStateRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeOdometryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeOdometryRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribePositionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribePositionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeRawGpsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeRawGpsRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeRawImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeRawImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeRcStatusRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeScaledImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeScaledImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeStatusTextRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeVtolStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeVtolStateRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::TelemetryResult* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(Arena*);
template<> ::mavsdk::rpc::telemetry::UnixEpochTimeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::UnixEpochTimeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::VelocityBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityBody>(Arena*);
template<> ::mavsdk::rpc::telemetry::VelocityNed* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityNed>(Arena*);
template<> ::mavsdk::rpc::telemetry::VelocityNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityNedResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::VtolStateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::VtolStateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace telemetry {

enum Odometry_MavFrame : int {
  Odometry_MavFrame_MAV_FRAME_UNDEF = 0,
  Odometry_MavFrame_MAV_FRAME_BODY_NED = 8,
  Odometry_MavFrame_MAV_FRAME_VISION_NED = 16,
  Odometry_MavFrame_MAV_FRAME_ESTIM_NED = 18,
  Odometry_MavFrame_Odometry_MavFrame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Odometry_MavFrame_Odometry_MavFrame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Odometry_MavFrame_IsValid(int value);
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MIN = Odometry_MavFrame_MAV_FRAME_UNDEF;
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MAX = Odometry_MavFrame_MAV_FRAME_ESTIM_NED;
constexpr int Odometry_MavFrame_MavFrame_ARRAYSIZE = Odometry_MavFrame_MavFrame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor();
template<typename T>
inline const std::string& Odometry_MavFrame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Odometry_MavFrame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Odometry_MavFrame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Odometry_MavFrame_descriptor(), enum_t_value);
}
inline bool Odometry_MavFrame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Odometry_MavFrame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Odometry_MavFrame>(
    Odometry_MavFrame_descriptor(), name, value);
}
enum TelemetryResult_Result : int {
  TelemetryResult_Result_RESULT_UNKNOWN = 0,
  TelemetryResult_Result_RESULT_SUCCESS = 1,
  TelemetryResult_Result_RESULT_NO_SYSTEM = 2,
  TelemetryResult_Result_RESULT_CONNECTION_ERROR = 3,
  TelemetryResult_Result_RESULT_BUSY = 4,
  TelemetryResult_Result_RESULT_COMMAND_DENIED = 5,
  TelemetryResult_Result_RESULT_TIMEOUT = 6,
  TelemetryResult_Result_RESULT_UNSUPPORTED = 7,
  TelemetryResult_Result_TelemetryResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TelemetryResult_Result_TelemetryResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TelemetryResult_Result_IsValid(int value);
constexpr TelemetryResult_Result TelemetryResult_Result_Result_MIN = TelemetryResult_Result_RESULT_UNKNOWN;
constexpr TelemetryResult_Result TelemetryResult_Result_Result_MAX = TelemetryResult_Result_RESULT_UNSUPPORTED;
constexpr int TelemetryResult_Result_Result_ARRAYSIZE = TelemetryResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryResult_Result_descriptor();
template<typename T>
inline const std::string& TelemetryResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TelemetryResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TelemetryResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TelemetryResult_Result_descriptor(), enum_t_value);
}
inline bool TelemetryResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TelemetryResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TelemetryResult_Result>(
    TelemetryResult_Result_descriptor(), name, value);
}
enum FixType : int {
  FIX_TYPE_NO_GPS = 0,
  FIX_TYPE_NO_FIX = 1,
  FIX_TYPE_FIX_2D = 2,
  FIX_TYPE_FIX_3D = 3,
  FIX_TYPE_FIX_DGPS = 4,
  FIX_TYPE_RTK_FLOAT = 5,
  FIX_TYPE_RTK_FIXED = 6,
  FixType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FixType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FixType_IsValid(int value);
constexpr FixType FixType_MIN = FIX_TYPE_NO_GPS;
constexpr FixType FixType_MAX = FIX_TYPE_RTK_FIXED;
constexpr int FixType_ARRAYSIZE = FixType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixType_descriptor();
template<typename T>
inline const std::string& FixType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FixType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FixType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FixType_descriptor(), enum_t_value);
}
inline bool FixType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FixType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FixType>(
    FixType_descriptor(), name, value);
}
enum FlightMode : int {
  FLIGHT_MODE_UNKNOWN = 0,
  FLIGHT_MODE_READY = 1,
  FLIGHT_MODE_TAKEOFF = 2,
  FLIGHT_MODE_HOLD = 3,
  FLIGHT_MODE_MISSION = 4,
  FLIGHT_MODE_RETURN_TO_LAUNCH = 5,
  FLIGHT_MODE_LAND = 6,
  FLIGHT_MODE_OFFBOARD = 7,
  FLIGHT_MODE_FOLLOW_ME = 8,
  FLIGHT_MODE_MANUAL = 9,
  FLIGHT_MODE_ALTCTL = 10,
  FLIGHT_MODE_POSCTL = 11,
  FLIGHT_MODE_ACRO = 12,
  FLIGHT_MODE_STABILIZED = 13,
  FLIGHT_MODE_RATTITUDE = 14,
  FlightMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FlightMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FlightMode_IsValid(int value);
constexpr FlightMode FlightMode_MIN = FLIGHT_MODE_UNKNOWN;
constexpr FlightMode FlightMode_MAX = FLIGHT_MODE_RATTITUDE;
constexpr int FlightMode_ARRAYSIZE = FlightMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightMode_descriptor();
template<typename T>
inline const std::string& FlightMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlightMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlightMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlightMode_descriptor(), enum_t_value);
}
inline bool FlightMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlightMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlightMode>(
    FlightMode_descriptor(), name, value);
}
enum StatusTextType : int {
  STATUS_TEXT_TYPE_DEBUG = 0,
  STATUS_TEXT_TYPE_INFO = 1,
  STATUS_TEXT_TYPE_NOTICE = 2,
  STATUS_TEXT_TYPE_WARNING = 3,
  STATUS_TEXT_TYPE_ERROR = 4,
  STATUS_TEXT_TYPE_CRITICAL = 5,
  STATUS_TEXT_TYPE_ALERT = 6,
  STATUS_TEXT_TYPE_EMERGENCY = 7,
  StatusTextType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatusTextType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatusTextType_IsValid(int value);
constexpr StatusTextType StatusTextType_MIN = STATUS_TEXT_TYPE_DEBUG;
constexpr StatusTextType StatusTextType_MAX = STATUS_TEXT_TYPE_EMERGENCY;
constexpr int StatusTextType_ARRAYSIZE = StatusTextType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusTextType_descriptor();
template<typename T>
inline const std::string& StatusTextType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusTextType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusTextType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusTextType_descriptor(), enum_t_value);
}
inline bool StatusTextType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusTextType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusTextType>(
    StatusTextType_descriptor(), name, value);
}
enum LandedState : int {
  LANDED_STATE_UNKNOWN = 0,
  LANDED_STATE_ON_GROUND = 1,
  LANDED_STATE_IN_AIR = 2,
  LANDED_STATE_TAKING_OFF = 3,
  LANDED_STATE_LANDING = 4,
  LandedState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LandedState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LandedState_IsValid(int value);
constexpr LandedState LandedState_MIN = LANDED_STATE_UNKNOWN;
constexpr LandedState LandedState_MAX = LANDED_STATE_LANDING;
constexpr int LandedState_ARRAYSIZE = LandedState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LandedState_descriptor();
template<typename T>
inline const std::string& LandedState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LandedState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LandedState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LandedState_descriptor(), enum_t_value);
}
inline bool LandedState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LandedState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LandedState>(
    LandedState_descriptor(), name, value);
}
enum VtolState : int {
  VTOL_STATE_UNDEFINED = 0,
  VTOL_STATE_TRANSITION_TO_FW = 1,
  VTOL_STATE_TRANSITION_TO_MC = 2,
  VTOL_STATE_MC = 3,
  VTOL_STATE_FW = 4,
  VtolState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VtolState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VtolState_IsValid(int value);
constexpr VtolState VtolState_MIN = VTOL_STATE_UNDEFINED;
constexpr VtolState VtolState_MAX = VTOL_STATE_FW;
constexpr int VtolState_ARRAYSIZE = VtolState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VtolState_descriptor();
template<typename T>
inline const std::string& VtolState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VtolState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VtolState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VtolState_descriptor(), enum_t_value);
}
inline bool VtolState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VtolState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VtolState>(
    VtolState_descriptor(), name, value);
}
// ===================================================================

class SubscribePositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribePositionRequest) */ {
 public:
  inline SubscribePositionRequest() : SubscribePositionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribePositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribePositionRequest(const SubscribePositionRequest& from);
  SubscribePositionRequest(SubscribePositionRequest&& from) noexcept
    : SubscribePositionRequest() {
    *this = ::std::move(from);
  }

  inline SubscribePositionRequest& operator=(const SubscribePositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribePositionRequest& operator=(SubscribePositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribePositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribePositionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribePositionRequest*>(
               &_SubscribePositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribePositionRequest& a, SubscribePositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribePositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribePositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribePositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribePositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribePositionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribePositionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribePositionRequest";
  }
  protected:
  explicit SubscribePositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribePositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class PositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.PositionResponse) */ {
 public:
  inline PositionResponse() : PositionResponse(nullptr) {}
  ~PositionResponse() override;
  explicit PROTOBUF_CONSTEXPR PositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionResponse(const PositionResponse& from);
  PositionResponse(PositionResponse&& from) noexcept
    : PositionResponse() {
    *this = ::std::move(from);
  }

  inline PositionResponse& operator=(const PositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionResponse& operator=(PositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionResponse* internal_default_instance() {
    return reinterpret_cast<const PositionResponse*>(
               &_PositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionResponse& a, PositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.PositionResponse";
  }
  protected:
  explicit PositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::telemetry::Position& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Position* release_position();
  ::mavsdk::rpc::telemetry::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::telemetry::Position* position);
  private:
  const ::mavsdk::rpc::telemetry::Position& _internal_position() const;
  ::mavsdk::rpc::telemetry::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::mavsdk::rpc::telemetry::Position* position);
  ::mavsdk::rpc::telemetry::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.PositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeHomeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeHomeRequest) */ {
 public:
  inline SubscribeHomeRequest() : SubscribeHomeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeHomeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeHomeRequest(const SubscribeHomeRequest& from);
  SubscribeHomeRequest(SubscribeHomeRequest&& from) noexcept
    : SubscribeHomeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeHomeRequest& operator=(const SubscribeHomeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeHomeRequest& operator=(SubscribeHomeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeHomeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeHomeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeHomeRequest*>(
               &_SubscribeHomeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeHomeRequest& a, SubscribeHomeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeHomeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeHomeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeHomeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeHomeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeHomeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeHomeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeHomeRequest";
  }
  protected:
  explicit SubscribeHomeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeHomeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class HomeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.HomeResponse) */ {
 public:
  inline HomeResponse() : HomeResponse(nullptr) {}
  ~HomeResponse() override;
  explicit PROTOBUF_CONSTEXPR HomeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HomeResponse(const HomeResponse& from);
  HomeResponse(HomeResponse&& from) noexcept
    : HomeResponse() {
    *this = ::std::move(from);
  }

  inline HomeResponse& operator=(const HomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HomeResponse& operator=(HomeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HomeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HomeResponse* internal_default_instance() {
    return reinterpret_cast<const HomeResponse*>(
               &_HomeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HomeResponse& a, HomeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HomeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HomeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HomeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HomeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HomeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HomeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.HomeResponse";
  }
  protected:
  explicit HomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Position home = 1;
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const ::mavsdk::rpc::telemetry::Position& home() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Position* release_home();
  ::mavsdk::rpc::telemetry::Position* mutable_home();
  void set_allocated_home(::mavsdk::rpc::telemetry::Position* home);
  private:
  const ::mavsdk::rpc::telemetry::Position& _internal_home() const;
  ::mavsdk::rpc::telemetry::Position* _internal_mutable_home();
  public:
  void unsafe_arena_set_allocated_home(
      ::mavsdk::rpc::telemetry::Position* home);
  ::mavsdk::rpc::telemetry::Position* unsafe_arena_release_home();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.HomeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Position* home_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeInAirRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeInAirRequest) */ {
 public:
  inline SubscribeInAirRequest() : SubscribeInAirRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeInAirRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeInAirRequest(const SubscribeInAirRequest& from);
  SubscribeInAirRequest(SubscribeInAirRequest&& from) noexcept
    : SubscribeInAirRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeInAirRequest& operator=(const SubscribeInAirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeInAirRequest& operator=(SubscribeInAirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeInAirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeInAirRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeInAirRequest*>(
               &_SubscribeInAirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeInAirRequest& a, SubscribeInAirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeInAirRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeInAirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeInAirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeInAirRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeInAirRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeInAirRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeInAirRequest";
  }
  protected:
  explicit SubscribeInAirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeInAirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class InAirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.InAirResponse) */ {
 public:
  inline InAirResponse() : InAirResponse(nullptr) {}
  ~InAirResponse() override;
  explicit PROTOBUF_CONSTEXPR InAirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InAirResponse(const InAirResponse& from);
  InAirResponse(InAirResponse&& from) noexcept
    : InAirResponse() {
    *this = ::std::move(from);
  }

  inline InAirResponse& operator=(const InAirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InAirResponse& operator=(InAirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InAirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InAirResponse* internal_default_instance() {
    return reinterpret_cast<const InAirResponse*>(
               &_InAirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InAirResponse& a, InAirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InAirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InAirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InAirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InAirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InAirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InAirResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InAirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.InAirResponse";
  }
  protected:
  explicit InAirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsInAirFieldNumber = 1,
  };
  // bool is_in_air = 1;
  void clear_is_in_air();
  bool is_in_air() const;
  void set_is_in_air(bool value);
  private:
  bool _internal_is_in_air() const;
  void _internal_set_is_in_air(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.InAirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_in_air_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeLandedStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeLandedStateRequest) */ {
 public:
  inline SubscribeLandedStateRequest() : SubscribeLandedStateRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeLandedStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeLandedStateRequest(const SubscribeLandedStateRequest& from);
  SubscribeLandedStateRequest(SubscribeLandedStateRequest&& from) noexcept
    : SubscribeLandedStateRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeLandedStateRequest& operator=(const SubscribeLandedStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeLandedStateRequest& operator=(SubscribeLandedStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeLandedStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeLandedStateRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeLandedStateRequest*>(
               &_SubscribeLandedStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeLandedStateRequest& a, SubscribeLandedStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeLandedStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeLandedStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeLandedStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeLandedStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeLandedStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeLandedStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeLandedStateRequest";
  }
  protected:
  explicit SubscribeLandedStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class LandedStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.LandedStateResponse) */ {
 public:
  inline LandedStateResponse() : LandedStateResponse(nullptr) {}
  ~LandedStateResponse() override;
  explicit PROTOBUF_CONSTEXPR LandedStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandedStateResponse(const LandedStateResponse& from);
  LandedStateResponse(LandedStateResponse&& from) noexcept
    : LandedStateResponse() {
    *this = ::std::move(from);
  }

  inline LandedStateResponse& operator=(const LandedStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandedStateResponse& operator=(LandedStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandedStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandedStateResponse* internal_default_instance() {
    return reinterpret_cast<const LandedStateResponse*>(
               &_LandedStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LandedStateResponse& a, LandedStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LandedStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandedStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandedStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandedStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LandedStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LandedStateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandedStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.LandedStateResponse";
  }
  protected:
  explicit LandedStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandedStateFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
  void clear_landed_state();
  ::mavsdk::rpc::telemetry::LandedState landed_state() const;
  void set_landed_state(::mavsdk::rpc::telemetry::LandedState value);
  private:
  ::mavsdk::rpc::telemetry::LandedState _internal_landed_state() const;
  void _internal_set_landed_state(::mavsdk::rpc::telemetry::LandedState value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.LandedStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int landed_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeArmedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeArmedRequest) */ {
 public:
  inline SubscribeArmedRequest() : SubscribeArmedRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeArmedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeArmedRequest(const SubscribeArmedRequest& from);
  SubscribeArmedRequest(SubscribeArmedRequest&& from) noexcept
    : SubscribeArmedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeArmedRequest& operator=(const SubscribeArmedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeArmedRequest& operator=(SubscribeArmedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeArmedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeArmedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeArmedRequest*>(
               &_SubscribeArmedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubscribeArmedRequest& a, SubscribeArmedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeArmedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeArmedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeArmedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeArmedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeArmedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeArmedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeArmedRequest";
  }
  protected:
  explicit SubscribeArmedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeArmedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ArmedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ArmedResponse) */ {
 public:
  inline ArmedResponse() : ArmedResponse(nullptr) {}
  ~ArmedResponse() override;
  explicit PROTOBUF_CONSTEXPR ArmedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmedResponse(const ArmedResponse& from);
  ArmedResponse(ArmedResponse&& from) noexcept
    : ArmedResponse() {
    *this = ::std::move(from);
  }

  inline ArmedResponse& operator=(const ArmedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmedResponse& operator=(ArmedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmedResponse* internal_default_instance() {
    return reinterpret_cast<const ArmedResponse*>(
               &_ArmedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ArmedResponse& a, ArmedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ArmedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ArmedResponse";
  }
  protected:
  explicit ArmedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsArmedFieldNumber = 1,
  };
  // bool is_armed = 1;
  void clear_is_armed();
  bool is_armed() const;
  void set_is_armed(bool value);
  private:
  bool _internal_is_armed() const;
  void _internal_set_is_armed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ArmedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_armed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeVtolStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeVtolStateRequest) */ {
 public:
  inline SubscribeVtolStateRequest() : SubscribeVtolStateRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeVtolStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeVtolStateRequest(const SubscribeVtolStateRequest& from);
  SubscribeVtolStateRequest(SubscribeVtolStateRequest&& from) noexcept
    : SubscribeVtolStateRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeVtolStateRequest& operator=(const SubscribeVtolStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeVtolStateRequest& operator=(SubscribeVtolStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeVtolStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeVtolStateRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeVtolStateRequest*>(
               &_SubscribeVtolStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubscribeVtolStateRequest& a, SubscribeVtolStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeVtolStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeVtolStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeVtolStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeVtolStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeVtolStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeVtolStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeVtolStateRequest";
  }
  protected:
  explicit SubscribeVtolStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeVtolStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class VtolStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.VtolStateResponse) */ {
 public:
  inline VtolStateResponse() : VtolStateResponse(nullptr) {}
  ~VtolStateResponse() override;
  explicit PROTOBUF_CONSTEXPR VtolStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VtolStateResponse(const VtolStateResponse& from);
  VtolStateResponse(VtolStateResponse&& from) noexcept
    : VtolStateResponse() {
    *this = ::std::move(from);
  }

  inline VtolStateResponse& operator=(const VtolStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VtolStateResponse& operator=(VtolStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VtolStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VtolStateResponse* internal_default_instance() {
    return reinterpret_cast<const VtolStateResponse*>(
               &_VtolStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VtolStateResponse& a, VtolStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VtolStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VtolStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VtolStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VtolStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VtolStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VtolStateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VtolStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.VtolStateResponse";
  }
  protected:
  explicit VtolStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVtolStateFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.VtolState vtol_state = 1;
  void clear_vtol_state();
  ::mavsdk::rpc::telemetry::VtolState vtol_state() const;
  void set_vtol_state(::mavsdk::rpc::telemetry::VtolState value);
  private:
  ::mavsdk::rpc::telemetry::VtolState _internal_vtol_state() const;
  void _internal_set_vtol_state(::mavsdk::rpc::telemetry::VtolState value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.VtolStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int vtol_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAttitudeQuaternionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest) */ {
 public:
  inline SubscribeAttitudeQuaternionRequest() : SubscribeAttitudeQuaternionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeAttitudeQuaternionRequest(const SubscribeAttitudeQuaternionRequest& from);
  SubscribeAttitudeQuaternionRequest(SubscribeAttitudeQuaternionRequest&& from) noexcept
    : SubscribeAttitudeQuaternionRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeAttitudeQuaternionRequest& operator=(const SubscribeAttitudeQuaternionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAttitudeQuaternionRequest& operator=(SubscribeAttitudeQuaternionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeAttitudeQuaternionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeAttitudeQuaternionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeAttitudeQuaternionRequest*>(
               &_SubscribeAttitudeQuaternionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SubscribeAttitudeQuaternionRequest& a, SubscribeAttitudeQuaternionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeAttitudeQuaternionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeAttitudeQuaternionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeAttitudeQuaternionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeAttitudeQuaternionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeAttitudeQuaternionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeAttitudeQuaternionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest";
  }
  protected:
  explicit SubscribeAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AttitudeQuaternionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AttitudeQuaternionResponse) */ {
 public:
  inline AttitudeQuaternionResponse() : AttitudeQuaternionResponse(nullptr) {}
  ~AttitudeQuaternionResponse() override;
  explicit PROTOBUF_CONSTEXPR AttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttitudeQuaternionResponse(const AttitudeQuaternionResponse& from);
  AttitudeQuaternionResponse(AttitudeQuaternionResponse&& from) noexcept
    : AttitudeQuaternionResponse() {
    *this = ::std::move(from);
  }

  inline AttitudeQuaternionResponse& operator=(const AttitudeQuaternionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeQuaternionResponse& operator=(AttitudeQuaternionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttitudeQuaternionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttitudeQuaternionResponse* internal_default_instance() {
    return reinterpret_cast<const AttitudeQuaternionResponse*>(
               &_AttitudeQuaternionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AttitudeQuaternionResponse& a, AttitudeQuaternionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeQuaternionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttitudeQuaternionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttitudeQuaternionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttitudeQuaternionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttitudeQuaternionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttitudeQuaternionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeQuaternionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AttitudeQuaternionResponse";
  }
  protected:
  explicit AttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeQuaternionFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  bool has_attitude_quaternion() const;
  private:
  bool _internal_has_attitude_quaternion() const;
  public:
  void clear_attitude_quaternion();
  const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::telemetry::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion);
  private:
  const ::mavsdk::rpc::telemetry::Quaternion& _internal_attitude_quaternion() const;
  ::mavsdk::rpc::telemetry::Quaternion* _internal_mutable_attitude_quaternion();
  public:
  void unsafe_arena_set_allocated_attitude_quaternion(
      ::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion);
  ::mavsdk::rpc::telemetry::Quaternion* unsafe_arena_release_attitude_quaternion();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAttitudeEulerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest) */ {
 public:
  inline SubscribeAttitudeEulerRequest() : SubscribeAttitudeEulerRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeAttitudeEulerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeAttitudeEulerRequest(const SubscribeAttitudeEulerRequest& from);
  SubscribeAttitudeEulerRequest(SubscribeAttitudeEulerRequest&& from) noexcept
    : SubscribeAttitudeEulerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeAttitudeEulerRequest& operator=(const SubscribeAttitudeEulerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAttitudeEulerRequest& operator=(SubscribeAttitudeEulerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeAttitudeEulerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeAttitudeEulerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeAttitudeEulerRequest*>(
               &_SubscribeAttitudeEulerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubscribeAttitudeEulerRequest& a, SubscribeAttitudeEulerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeAttitudeEulerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeAttitudeEulerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeAttitudeEulerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeAttitudeEulerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeAttitudeEulerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeAttitudeEulerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest";
  }
  protected:
  explicit SubscribeAttitudeEulerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AttitudeEulerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AttitudeEulerResponse) */ {
 public:
  inline AttitudeEulerResponse() : AttitudeEulerResponse(nullptr) {}
  ~AttitudeEulerResponse() override;
  explicit PROTOBUF_CONSTEXPR AttitudeEulerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttitudeEulerResponse(const AttitudeEulerResponse& from);
  AttitudeEulerResponse(AttitudeEulerResponse&& from) noexcept
    : AttitudeEulerResponse() {
    *this = ::std::move(from);
  }

  inline AttitudeEulerResponse& operator=(const AttitudeEulerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeEulerResponse& operator=(AttitudeEulerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttitudeEulerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttitudeEulerResponse* internal_default_instance() {
    return reinterpret_cast<const AttitudeEulerResponse*>(
               &_AttitudeEulerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AttitudeEulerResponse& a, AttitudeEulerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeEulerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttitudeEulerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttitudeEulerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttitudeEulerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttitudeEulerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttitudeEulerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeEulerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AttitudeEulerResponse";
  }
  protected:
  explicit AttitudeEulerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeEulerFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  bool has_attitude_euler() const;
  private:
  bool _internal_has_attitude_euler() const;
  public:
  void clear_attitude_euler();
  const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::EulerAngle* release_attitude_euler();
  ::mavsdk::rpc::telemetry::EulerAngle* mutable_attitude_euler();
  void set_allocated_attitude_euler(::mavsdk::rpc::telemetry::EulerAngle* attitude_euler);
  private:
  const ::mavsdk::rpc::telemetry::EulerAngle& _internal_attitude_euler() const;
  ::mavsdk::rpc::telemetry::EulerAngle* _internal_mutable_attitude_euler();
  public:
  void unsafe_arena_set_allocated_attitude_euler(
      ::mavsdk::rpc::telemetry::EulerAngle* attitude_euler);
  ::mavsdk::rpc::telemetry::EulerAngle* unsafe_arena_release_attitude_euler();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AttitudeEulerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::EulerAngle* attitude_euler_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAttitudeAngularVelocityBodyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest) */ {
 public:
  inline SubscribeAttitudeAngularVelocityBodyRequest() : SubscribeAttitudeAngularVelocityBodyRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeAttitudeAngularVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeAttitudeAngularVelocityBodyRequest(const SubscribeAttitudeAngularVelocityBodyRequest& from);
  SubscribeAttitudeAngularVelocityBodyRequest(SubscribeAttitudeAngularVelocityBodyRequest&& from) noexcept
    : SubscribeAttitudeAngularVelocityBodyRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeAttitudeAngularVelocityBodyRequest& operator=(const SubscribeAttitudeAngularVelocityBodyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAttitudeAngularVelocityBodyRequest& operator=(SubscribeAttitudeAngularVelocityBodyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeAttitudeAngularVelocityBodyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeAttitudeAngularVelocityBodyRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeAttitudeAngularVelocityBodyRequest*>(
               &_SubscribeAttitudeAngularVelocityBodyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SubscribeAttitudeAngularVelocityBodyRequest& a, SubscribeAttitudeAngularVelocityBodyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeAttitudeAngularVelocityBodyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeAttitudeAngularVelocityBodyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeAttitudeAngularVelocityBodyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeAttitudeAngularVelocityBodyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeAttitudeAngularVelocityBodyRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeAttitudeAngularVelocityBodyRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest";
  }
  protected:
  explicit SubscribeAttitudeAngularVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AttitudeAngularVelocityBodyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse) */ {
 public:
  inline AttitudeAngularVelocityBodyResponse() : AttitudeAngularVelocityBodyResponse(nullptr) {}
  ~AttitudeAngularVelocityBodyResponse() override;
  explicit PROTOBUF_CONSTEXPR AttitudeAngularVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttitudeAngularVelocityBodyResponse(const AttitudeAngularVelocityBodyResponse& from);
  AttitudeAngularVelocityBodyResponse(AttitudeAngularVelocityBodyResponse&& from) noexcept
    : AttitudeAngularVelocityBodyResponse() {
    *this = ::std::move(from);
  }

  inline AttitudeAngularVelocityBodyResponse& operator=(const AttitudeAngularVelocityBodyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeAngularVelocityBodyResponse& operator=(AttitudeAngularVelocityBodyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttitudeAngularVelocityBodyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttitudeAngularVelocityBodyResponse* internal_default_instance() {
    return reinterpret_cast<const AttitudeAngularVelocityBodyResponse*>(
               &_AttitudeAngularVelocityBodyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AttitudeAngularVelocityBodyResponse& a, AttitudeAngularVelocityBodyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeAngularVelocityBodyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttitudeAngularVelocityBodyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttitudeAngularVelocityBodyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttitudeAngularVelocityBodyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttitudeAngularVelocityBodyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttitudeAngularVelocityBodyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeAngularVelocityBodyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse";
  }
  protected:
  explicit AttitudeAngularVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeAngularVelocityBodyFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
  bool has_attitude_angular_velocity_body() const;
  private:
  bool _internal_has_attitude_angular_velocity_body() const;
  public:
  void clear_attitude_angular_velocity_body();
  const ::mavsdk::rpc::telemetry::AngularVelocityBody& attitude_angular_velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::AngularVelocityBody* release_attitude_angular_velocity_body();
  ::mavsdk::rpc::telemetry::AngularVelocityBody* mutable_attitude_angular_velocity_body();
  void set_allocated_attitude_angular_velocity_body(::mavsdk::rpc::telemetry::AngularVelocityBody* attitude_angular_velocity_body);
  private:
  const ::mavsdk::rpc::telemetry::AngularVelocityBody& _internal_attitude_angular_velocity_body() const;
  ::mavsdk::rpc::telemetry::AngularVelocityBody* _internal_mutable_attitude_angular_velocity_body();
  public:
  void unsafe_arena_set_allocated_attitude_angular_velocity_body(
      ::mavsdk::rpc::telemetry::AngularVelocityBody* attitude_angular_velocity_body);
  ::mavsdk::rpc::telemetry::AngularVelocityBody* unsafe_arena_release_attitude_angular_velocity_body();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::AngularVelocityBody* attitude_angular_velocity_body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCameraAttitudeQuaternionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest) */ {
 public:
  inline SubscribeCameraAttitudeQuaternionRequest() : SubscribeCameraAttitudeQuaternionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCameraAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCameraAttitudeQuaternionRequest(const SubscribeCameraAttitudeQuaternionRequest& from);
  SubscribeCameraAttitudeQuaternionRequest(SubscribeCameraAttitudeQuaternionRequest&& from) noexcept
    : SubscribeCameraAttitudeQuaternionRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCameraAttitudeQuaternionRequest& operator=(const SubscribeCameraAttitudeQuaternionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCameraAttitudeQuaternionRequest& operator=(SubscribeCameraAttitudeQuaternionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCameraAttitudeQuaternionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCameraAttitudeQuaternionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCameraAttitudeQuaternionRequest*>(
               &_SubscribeCameraAttitudeQuaternionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SubscribeCameraAttitudeQuaternionRequest& a, SubscribeCameraAttitudeQuaternionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCameraAttitudeQuaternionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCameraAttitudeQuaternionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCameraAttitudeQuaternionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCameraAttitudeQuaternionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCameraAttitudeQuaternionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCameraAttitudeQuaternionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest";
  }
  protected:
  explicit SubscribeCameraAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class CameraAttitudeQuaternionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse) */ {
 public:
  inline CameraAttitudeQuaternionResponse() : CameraAttitudeQuaternionResponse(nullptr) {}
  ~CameraAttitudeQuaternionResponse() override;
  explicit PROTOBUF_CONSTEXPR CameraAttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraAttitudeQuaternionResponse(const CameraAttitudeQuaternionResponse& from);
  CameraAttitudeQuaternionResponse(CameraAttitudeQuaternionResponse&& from) noexcept
    : CameraAttitudeQuaternionResponse() {
    *this = ::std::move(from);
  }

  inline CameraAttitudeQuaternionResponse& operator=(const CameraAttitudeQuaternionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraAttitudeQuaternionResponse& operator=(CameraAttitudeQuaternionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraAttitudeQuaternionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraAttitudeQuaternionResponse* internal_default_instance() {
    return reinterpret_cast<const CameraAttitudeQuaternionResponse*>(
               &_CameraAttitudeQuaternionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CameraAttitudeQuaternionResponse& a, CameraAttitudeQuaternionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraAttitudeQuaternionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraAttitudeQuaternionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraAttitudeQuaternionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraAttitudeQuaternionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraAttitudeQuaternionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraAttitudeQuaternionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraAttitudeQuaternionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse";
  }
  protected:
  explicit CameraAttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeQuaternionFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  bool has_attitude_quaternion() const;
  private:
  bool _internal_has_attitude_quaternion() const;
  public:
  void clear_attitude_quaternion();
  const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::telemetry::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion);
  private:
  const ::mavsdk::rpc::telemetry::Quaternion& _internal_attitude_quaternion() const;
  ::mavsdk::rpc::telemetry::Quaternion* _internal_mutable_attitude_quaternion();
  public:
  void unsafe_arena_set_allocated_attitude_quaternion(
      ::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion);
  ::mavsdk::rpc::telemetry::Quaternion* unsafe_arena_release_attitude_quaternion();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCameraAttitudeEulerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest) */ {
 public:
  inline SubscribeCameraAttitudeEulerRequest() : SubscribeCameraAttitudeEulerRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeCameraAttitudeEulerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeCameraAttitudeEulerRequest(const SubscribeCameraAttitudeEulerRequest& from);
  SubscribeCameraAttitudeEulerRequest(SubscribeCameraAttitudeEulerRequest&& from) noexcept
    : SubscribeCameraAttitudeEulerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCameraAttitudeEulerRequest& operator=(const SubscribeCameraAttitudeEulerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCameraAttitudeEulerRequest& operator=(SubscribeCameraAttitudeEulerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCameraAttitudeEulerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCameraAttitudeEulerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCameraAttitudeEulerRequest*>(
               &_SubscribeCameraAttitudeEulerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SubscribeCameraAttitudeEulerRequest& a, SubscribeCameraAttitudeEulerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCameraAttitudeEulerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCameraAttitudeEulerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCameraAttitudeEulerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeCameraAttitudeEulerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCameraAttitudeEulerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCameraAttitudeEulerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest";
  }
  protected:
  explicit SubscribeCameraAttitudeEulerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class CameraAttitudeEulerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse) */ {
 public:
  inline CameraAttitudeEulerResponse() : CameraAttitudeEulerResponse(nullptr) {}
  ~CameraAttitudeEulerResponse() override;
  explicit PROTOBUF_CONSTEXPR CameraAttitudeEulerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraAttitudeEulerResponse(const CameraAttitudeEulerResponse& from);
  CameraAttitudeEulerResponse(CameraAttitudeEulerResponse&& from) noexcept
    : CameraAttitudeEulerResponse() {
    *this = ::std::move(from);
  }

  inline CameraAttitudeEulerResponse& operator=(const CameraAttitudeEulerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraAttitudeEulerResponse& operator=(CameraAttitudeEulerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraAttitudeEulerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraAttitudeEulerResponse* internal_default_instance() {
    return reinterpret_cast<const CameraAttitudeEulerResponse*>(
               &_CameraAttitudeEulerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CameraAttitudeEulerResponse& a, CameraAttitudeEulerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraAttitudeEulerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraAttitudeEulerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraAttitudeEulerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraAttitudeEulerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraAttitudeEulerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraAttitudeEulerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraAttitudeEulerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.CameraAttitudeEulerResponse";
  }
  protected:
  explicit CameraAttitudeEulerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeEulerFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  bool has_attitude_euler() const;
  private:
  bool _internal_has_attitude_euler() const;
  public:
  void clear_attitude_euler();
  const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::EulerAngle* release_attitude_euler();
  ::mavsdk::rpc::telemetry::EulerAngle* mutable_attitude_euler();
  void set_allocated_attitude_euler(::mavsdk::rpc::telemetry::EulerAngle* attitude_euler);
  private:
  const ::mavsdk::rpc::telemetry::EulerAngle& _internal_attitude_euler() const;
  ::mavsdk::rpc::telemetry::EulerAngle* _internal_mutable_attitude_euler();
  public:
  void unsafe_arena_set_allocated_attitude_euler(
      ::mavsdk::rpc::telemetry::EulerAngle* attitude_euler);
  ::mavsdk::rpc::telemetry::EulerAngle* unsafe_arena_release_attitude_euler();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::EulerAngle* attitude_euler_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeVelocityNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest) */ {
 public:
  inline SubscribeVelocityNedRequest() : SubscribeVelocityNedRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeVelocityNedRequest(const SubscribeVelocityNedRequest& from);
  SubscribeVelocityNedRequest(SubscribeVelocityNedRequest&& from) noexcept
    : SubscribeVelocityNedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeVelocityNedRequest& operator=(const SubscribeVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeVelocityNedRequest& operator=(SubscribeVelocityNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeVelocityNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeVelocityNedRequest*>(
               &_SubscribeVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SubscribeVelocityNedRequest& a, SubscribeVelocityNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeVelocityNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeVelocityNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeVelocityNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeVelocityNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeVelocityNedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeVelocityNedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeVelocityNedRequest";
  }
  protected:
  explicit SubscribeVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class VelocityNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.VelocityNedResponse) */ {
 public:
  inline VelocityNedResponse() : VelocityNedResponse(nullptr) {}
  ~VelocityNedResponse() override;
  explicit PROTOBUF_CONSTEXPR VelocityNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelocityNedResponse(const VelocityNedResponse& from);
  VelocityNedResponse(VelocityNedResponse&& from) noexcept
    : VelocityNedResponse() {
    *this = ::std::move(from);
  }

  inline VelocityNedResponse& operator=(const VelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityNedResponse& operator=(VelocityNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const VelocityNedResponse*>(
               &_VelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VelocityNedResponse& a, VelocityNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelocityNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelocityNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelocityNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.VelocityNedResponse";
  }
  protected:
  explicit VelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityNedFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
  bool has_velocity_ned() const;
  private:
  bool _internal_has_velocity_ned() const;
  public:
  void clear_velocity_ned();
  const ::mavsdk::rpc::telemetry::VelocityNed& velocity_ned() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::VelocityNed* release_velocity_ned();
  ::mavsdk::rpc::telemetry::VelocityNed* mutable_velocity_ned();
  void set_allocated_velocity_ned(::mavsdk::rpc::telemetry::VelocityNed* velocity_ned);
  private:
  const ::mavsdk::rpc::telemetry::VelocityNed& _internal_velocity_ned() const;
  ::mavsdk::rpc::telemetry::VelocityNed* _internal_mutable_velocity_ned();
  public:
  void unsafe_arena_set_allocated_velocity_ned(
      ::mavsdk::rpc::telemetry::VelocityNed* velocity_ned);
  ::mavsdk::rpc::telemetry::VelocityNed* unsafe_arena_release_velocity_ned();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.VelocityNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::VelocityNed* velocity_ned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeGpsInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest) */ {
 public:
  inline SubscribeGpsInfoRequest() : SubscribeGpsInfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeGpsInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeGpsInfoRequest(const SubscribeGpsInfoRequest& from);
  SubscribeGpsInfoRequest(SubscribeGpsInfoRequest&& from) noexcept
    : SubscribeGpsInfoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeGpsInfoRequest& operator=(const SubscribeGpsInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeGpsInfoRequest& operator=(SubscribeGpsInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeGpsInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeGpsInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeGpsInfoRequest*>(
               &_SubscribeGpsInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SubscribeGpsInfoRequest& a, SubscribeGpsInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeGpsInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeGpsInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeGpsInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeGpsInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeGpsInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeGpsInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeGpsInfoRequest";
  }
  protected:
  explicit SubscribeGpsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GpsInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GpsInfoResponse) */ {
 public:
  inline GpsInfoResponse() : GpsInfoResponse(nullptr) {}
  ~GpsInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GpsInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpsInfoResponse(const GpsInfoResponse& from);
  GpsInfoResponse(GpsInfoResponse&& from) noexcept
    : GpsInfoResponse() {
    *this = ::std::move(from);
  }

  inline GpsInfoResponse& operator=(const GpsInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsInfoResponse& operator=(GpsInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpsInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpsInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GpsInfoResponse*>(
               &_GpsInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GpsInfoResponse& a, GpsInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpsInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpsInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpsInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpsInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GpsInfoResponse";
  }
  protected:
  explicit GpsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpsInfoFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
  bool has_gps_info() const;
  private:
  bool _internal_has_gps_info() const;
  public:
  void clear_gps_info();
  const ::mavsdk::rpc::telemetry::GpsInfo& gps_info() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::GpsInfo* release_gps_info();
  ::mavsdk::rpc::telemetry::GpsInfo* mutable_gps_info();
  void set_allocated_gps_info(::mavsdk::rpc::telemetry::GpsInfo* gps_info);
  private:
  const ::mavsdk::rpc::telemetry::GpsInfo& _internal_gps_info() const;
  ::mavsdk::rpc::telemetry::GpsInfo* _internal_mutable_gps_info();
  public:
  void unsafe_arena_set_allocated_gps_info(
      ::mavsdk::rpc::telemetry::GpsInfo* gps_info);
  ::mavsdk::rpc::telemetry::GpsInfo* unsafe_arena_release_gps_info();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GpsInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::GpsInfo* gps_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRawGpsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeRawGpsRequest) */ {
 public:
  inline SubscribeRawGpsRequest() : SubscribeRawGpsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeRawGpsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeRawGpsRequest(const SubscribeRawGpsRequest& from);
  SubscribeRawGpsRequest(SubscribeRawGpsRequest&& from) noexcept
    : SubscribeRawGpsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRawGpsRequest& operator=(const SubscribeRawGpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRawGpsRequest& operator=(SubscribeRawGpsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeRawGpsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeRawGpsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRawGpsRequest*>(
               &_SubscribeRawGpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SubscribeRawGpsRequest& a, SubscribeRawGpsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRawGpsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRawGpsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeRawGpsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeRawGpsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeRawGpsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeRawGpsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeRawGpsRequest";
  }
  protected:
  explicit SubscribeRawGpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class RawGpsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.RawGpsResponse) */ {
 public:
  inline RawGpsResponse() : RawGpsResponse(nullptr) {}
  ~RawGpsResponse() override;
  explicit PROTOBUF_CONSTEXPR RawGpsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawGpsResponse(const RawGpsResponse& from);
  RawGpsResponse(RawGpsResponse&& from) noexcept
    : RawGpsResponse() {
    *this = ::std::move(from);
  }

  inline RawGpsResponse& operator=(const RawGpsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawGpsResponse& operator=(RawGpsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawGpsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawGpsResponse* internal_default_instance() {
    return reinterpret_cast<const RawGpsResponse*>(
               &_RawGpsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RawGpsResponse& a, RawGpsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RawGpsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawGpsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawGpsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RawGpsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawGpsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RawGpsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawGpsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.RawGpsResponse";
  }
  protected:
  explicit RawGpsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawGpsFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
  bool has_raw_gps() const;
  private:
  bool _internal_has_raw_gps() const;
  public:
  void clear_raw_gps();
  const ::mavsdk::rpc::telemetry::RawGps& raw_gps() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::RawGps* release_raw_gps();
  ::mavsdk::rpc::telemetry::RawGps* mutable_raw_gps();
  void set_allocated_raw_gps(::mavsdk::rpc::telemetry::RawGps* raw_gps);
  private:
  const ::mavsdk::rpc::telemetry::RawGps& _internal_raw_gps() const;
  ::mavsdk::rpc::telemetry::RawGps* _internal_mutable_raw_gps();
  public:
  void unsafe_arena_set_allocated_raw_gps(
      ::mavsdk::rpc::telemetry::RawGps* raw_gps);
  ::mavsdk::rpc::telemetry::RawGps* unsafe_arena_release_raw_gps();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.RawGpsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::RawGps* raw_gps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeBatteryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeBatteryRequest) */ {
 public:
  inline SubscribeBatteryRequest() : SubscribeBatteryRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeBatteryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeBatteryRequest(const SubscribeBatteryRequest& from);
  SubscribeBatteryRequest(SubscribeBatteryRequest&& from) noexcept
    : SubscribeBatteryRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeBatteryRequest& operator=(const SubscribeBatteryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeBatteryRequest& operator=(SubscribeBatteryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeBatteryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeBatteryRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeBatteryRequest*>(
               &_SubscribeBatteryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SubscribeBatteryRequest& a, SubscribeBatteryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeBatteryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeBatteryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeBatteryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeBatteryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeBatteryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeBatteryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeBatteryRequest";
  }
  protected:
  explicit SubscribeBatteryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class BatteryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.BatteryResponse) */ {
 public:
  inline BatteryResponse() : BatteryResponse(nullptr) {}
  ~BatteryResponse() override;
  explicit PROTOBUF_CONSTEXPR BatteryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryResponse(const BatteryResponse& from);
  BatteryResponse(BatteryResponse&& from) noexcept
    : BatteryResponse() {
    *this = ::std::move(from);
  }

  inline BatteryResponse& operator=(const BatteryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryResponse& operator=(BatteryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatteryResponse* internal_default_instance() {
    return reinterpret_cast<const BatteryResponse*>(
               &_BatteryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BatteryResponse& a, BatteryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatteryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.BatteryResponse";
  }
  protected:
  explicit BatteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Battery battery = 1;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;
  public:
  void clear_battery();
  const ::mavsdk::rpc::telemetry::Battery& battery() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Battery* release_battery();
  ::mavsdk::rpc::telemetry::Battery* mutable_battery();
  void set_allocated_battery(::mavsdk::rpc::telemetry::Battery* battery);
  private:
  const ::mavsdk::rpc::telemetry::Battery& _internal_battery() const;
  ::mavsdk::rpc::telemetry::Battery* _internal_mutable_battery();
  public:
  void unsafe_arena_set_allocated_battery(
      ::mavsdk::rpc::telemetry::Battery* battery);
  ::mavsdk::rpc::telemetry::Battery* unsafe_arena_release_battery();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.BatteryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Battery* battery_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeFlightModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeFlightModeRequest) */ {
 public:
  inline SubscribeFlightModeRequest() : SubscribeFlightModeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeFlightModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeFlightModeRequest(const SubscribeFlightModeRequest& from);
  SubscribeFlightModeRequest(SubscribeFlightModeRequest&& from) noexcept
    : SubscribeFlightModeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeFlightModeRequest& operator=(const SubscribeFlightModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeFlightModeRequest& operator=(SubscribeFlightModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeFlightModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeFlightModeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeFlightModeRequest*>(
               &_SubscribeFlightModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SubscribeFlightModeRequest& a, SubscribeFlightModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeFlightModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeFlightModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeFlightModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeFlightModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeFlightModeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeFlightModeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeFlightModeRequest";
  }
  protected:
  explicit SubscribeFlightModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class FlightModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.FlightModeResponse) */ {
 public:
  inline FlightModeResponse() : FlightModeResponse(nullptr) {}
  ~FlightModeResponse() override;
  explicit PROTOBUF_CONSTEXPR FlightModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlightModeResponse(const FlightModeResponse& from);
  FlightModeResponse(FlightModeResponse&& from) noexcept
    : FlightModeResponse() {
    *this = ::std::move(from);
  }

  inline FlightModeResponse& operator=(const FlightModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlightModeResponse& operator=(FlightModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlightModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlightModeResponse* internal_default_instance() {
    return reinterpret_cast<const FlightModeResponse*>(
               &_FlightModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FlightModeResponse& a, FlightModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlightModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlightModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlightModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlightModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlightModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlightModeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlightModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.FlightModeResponse";
  }
  protected:
  explicit FlightModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlightModeFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
  void clear_flight_mode();
  ::mavsdk::rpc::telemetry::FlightMode flight_mode() const;
  void set_flight_mode(::mavsdk::rpc::telemetry::FlightMode value);
  private:
  ::mavsdk::rpc::telemetry::FlightMode _internal_flight_mode() const;
  void _internal_set_flight_mode(::mavsdk::rpc::telemetry::FlightMode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.FlightModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int flight_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeHealthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeHealthRequest) */ {
 public:
  inline SubscribeHealthRequest() : SubscribeHealthRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeHealthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeHealthRequest(const SubscribeHealthRequest& from);
  SubscribeHealthRequest(SubscribeHealthRequest&& from) noexcept
    : SubscribeHealthRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeHealthRequest& operator=(const SubscribeHealthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeHealthRequest& operator=(SubscribeHealthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeHealthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeHealthRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeHealthRequest*>(
               &_SubscribeHealthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SubscribeHealthRequest& a, SubscribeHealthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeHealthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeHealthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeHealthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeHealthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeHealthRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeHealthRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeHealthRequest";
  }
  protected:
  explicit SubscribeHealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeHealthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class HealthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.HealthResponse) */ {
 public:
  inline HealthResponse() : HealthResponse(nullptr) {}
  ~HealthResponse() override;
  explicit PROTOBUF_CONSTEXPR HealthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthResponse(const HealthResponse& from);
  HealthResponse(HealthResponse&& from) noexcept
    : HealthResponse() {
    *this = ::std::move(from);
  }

  inline HealthResponse& operator=(const HealthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthResponse& operator=(HealthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthResponse* internal_default_instance() {
    return reinterpret_cast<const HealthResponse*>(
               &_HealthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(HealthResponse& a, HealthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HealthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HealthResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.HealthResponse";
  }
  protected:
  explicit HealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Health health = 1;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  const ::mavsdk::rpc::telemetry::Health& health() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Health* release_health();
  ::mavsdk::rpc::telemetry::Health* mutable_health();
  void set_allocated_health(::mavsdk::rpc::telemetry::Health* health);
  private:
  const ::mavsdk::rpc::telemetry::Health& _internal_health() const;
  ::mavsdk::rpc::telemetry::Health* _internal_mutable_health();
  public:
  void unsafe_arena_set_allocated_health(
      ::mavsdk::rpc::telemetry::Health* health);
  ::mavsdk::rpc::telemetry::Health* unsafe_arena_release_health();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.HealthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Health* health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRcStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeRcStatusRequest) */ {
 public:
  inline SubscribeRcStatusRequest() : SubscribeRcStatusRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeRcStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeRcStatusRequest(const SubscribeRcStatusRequest& from);
  SubscribeRcStatusRequest(SubscribeRcStatusRequest&& from) noexcept
    : SubscribeRcStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRcStatusRequest& operator=(const SubscribeRcStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRcStatusRequest& operator=(SubscribeRcStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeRcStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeRcStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRcStatusRequest*>(
               &_SubscribeRcStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SubscribeRcStatusRequest& a, SubscribeRcStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRcStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRcStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeRcStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeRcStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeRcStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeRcStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeRcStatusRequest";
  }
  protected:
  explicit SubscribeRcStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class RcStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.RcStatusResponse) */ {
 public:
  inline RcStatusResponse() : RcStatusResponse(nullptr) {}
  ~RcStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR RcStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcStatusResponse(const RcStatusResponse& from);
  RcStatusResponse(RcStatusResponse&& from) noexcept
    : RcStatusResponse() {
    *this = ::std::move(from);
  }

  inline RcStatusResponse& operator=(const RcStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcStatusResponse& operator=(RcStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcStatusResponse* internal_default_instance() {
    return reinterpret_cast<const RcStatusResponse*>(
               &_RcStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RcStatusResponse& a, RcStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RcStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RcStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.RcStatusResponse";
  }
  protected:
  explicit RcStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
  bool has_rc_status() const;
  private:
  bool _internal_has_rc_status() const;
  public:
  void clear_rc_status();
  const ::mavsdk::rpc::telemetry::RcStatus& rc_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::RcStatus* release_rc_status();
  ::mavsdk::rpc::telemetry::RcStatus* mutable_rc_status();
  void set_allocated_rc_status(::mavsdk::rpc::telemetry::RcStatus* rc_status);
  private:
  const ::mavsdk::rpc::telemetry::RcStatus& _internal_rc_status() const;
  ::mavsdk::rpc::telemetry::RcStatus* _internal_mutable_rc_status();
  public:
  void unsafe_arena_set_allocated_rc_status(
      ::mavsdk::rpc::telemetry::RcStatus* rc_status);
  ::mavsdk::rpc::telemetry::RcStatus* unsafe_arena_release_rc_status();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.RcStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::RcStatus* rc_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStatusTextRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeStatusTextRequest) */ {
 public:
  inline SubscribeStatusTextRequest() : SubscribeStatusTextRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeStatusTextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeStatusTextRequest(const SubscribeStatusTextRequest& from);
  SubscribeStatusTextRequest(SubscribeStatusTextRequest&& from) noexcept
    : SubscribeStatusTextRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStatusTextRequest& operator=(const SubscribeStatusTextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStatusTextRequest& operator=(SubscribeStatusTextRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeStatusTextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeStatusTextRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStatusTextRequest*>(
               &_SubscribeStatusTextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SubscribeStatusTextRequest& a, SubscribeStatusTextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStatusTextRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeStatusTextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeStatusTextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeStatusTextRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeStatusTextRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeStatusTextRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeStatusTextRequest";
  }
  protected:
  explicit SubscribeStatusTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class StatusTextResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.StatusTextResponse) */ {
 public:
  inline StatusTextResponse() : StatusTextResponse(nullptr) {}
  ~StatusTextResponse() override;
  explicit PROTOBUF_CONSTEXPR StatusTextResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusTextResponse(const StatusTextResponse& from);
  StatusTextResponse(StatusTextResponse&& from) noexcept
    : StatusTextResponse() {
    *this = ::std::move(from);
  }

  inline StatusTextResponse& operator=(const StatusTextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusTextResponse& operator=(StatusTextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusTextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusTextResponse* internal_default_instance() {
    return reinterpret_cast<const StatusTextResponse*>(
               &_StatusTextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(StatusTextResponse& a, StatusTextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusTextResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusTextResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusTextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusTextResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusTextResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusTextResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusTextResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.StatusTextResponse";
  }
  protected:
  explicit StatusTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusTextFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.StatusText status_text = 1;
  bool has_status_text() const;
  private:
  bool _internal_has_status_text() const;
  public:
  void clear_status_text();
  const ::mavsdk::rpc::telemetry::StatusText& status_text() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::StatusText* release_status_text();
  ::mavsdk::rpc::telemetry::StatusText* mutable_status_text();
  void set_allocated_status_text(::mavsdk::rpc::telemetry::StatusText* status_text);
  private:
  const ::mavsdk::rpc::telemetry::StatusText& _internal_status_text() const;
  ::mavsdk::rpc::telemetry::StatusText* _internal_mutable_status_text();
  public:
  void unsafe_arena_set_allocated_status_text(
      ::mavsdk::rpc::telemetry::StatusText* status_text);
  ::mavsdk::rpc::telemetry::StatusText* unsafe_arena_release_status_text();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.StatusTextResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::StatusText* status_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeActuatorControlTargetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest) */ {
 public:
  inline SubscribeActuatorControlTargetRequest() : SubscribeActuatorControlTargetRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeActuatorControlTargetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeActuatorControlTargetRequest(const SubscribeActuatorControlTargetRequest& from);
  SubscribeActuatorControlTargetRequest(SubscribeActuatorControlTargetRequest&& from) noexcept
    : SubscribeActuatorControlTargetRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeActuatorControlTargetRequest& operator=(const SubscribeActuatorControlTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeActuatorControlTargetRequest& operator=(SubscribeActuatorControlTargetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeActuatorControlTargetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeActuatorControlTargetRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeActuatorControlTargetRequest*>(
               &_SubscribeActuatorControlTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SubscribeActuatorControlTargetRequest& a, SubscribeActuatorControlTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeActuatorControlTargetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeActuatorControlTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeActuatorControlTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeActuatorControlTargetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeActuatorControlTargetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeActuatorControlTargetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest";
  }
  protected:
  explicit SubscribeActuatorControlTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControlTargetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ActuatorControlTargetResponse) */ {
 public:
  inline ActuatorControlTargetResponse() : ActuatorControlTargetResponse(nullptr) {}
  ~ActuatorControlTargetResponse() override;
  explicit PROTOBUF_CONSTEXPR ActuatorControlTargetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorControlTargetResponse(const ActuatorControlTargetResponse& from);
  ActuatorControlTargetResponse(ActuatorControlTargetResponse&& from) noexcept
    : ActuatorControlTargetResponse() {
    *this = ::std::move(from);
  }

  inline ActuatorControlTargetResponse& operator=(const ActuatorControlTargetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControlTargetResponse& operator=(ActuatorControlTargetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorControlTargetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorControlTargetResponse* internal_default_instance() {
    return reinterpret_cast<const ActuatorControlTargetResponse*>(
               &_ActuatorControlTargetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ActuatorControlTargetResponse& a, ActuatorControlTargetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControlTargetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorControlTargetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorControlTargetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorControlTargetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorControlTargetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorControlTargetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControlTargetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ActuatorControlTargetResponse";
  }
  protected:
  explicit ActuatorControlTargetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorControlTargetFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
  bool has_actuator_control_target() const;
  private:
  bool _internal_has_actuator_control_target() const;
  public:
  void clear_actuator_control_target();
  const ::mavsdk::rpc::telemetry::ActuatorControlTarget& actuator_control_target() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::ActuatorControlTarget* release_actuator_control_target();
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* mutable_actuator_control_target();
  void set_allocated_actuator_control_target(::mavsdk::rpc::telemetry::ActuatorControlTarget* actuator_control_target);
  private:
  const ::mavsdk::rpc::telemetry::ActuatorControlTarget& _internal_actuator_control_target() const;
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* _internal_mutable_actuator_control_target();
  public:
  void unsafe_arena_set_allocated_actuator_control_target(
      ::mavsdk::rpc::telemetry::ActuatorControlTarget* actuator_control_target);
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* unsafe_arena_release_actuator_control_target();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* actuator_control_target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeActuatorOutputStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest) */ {
 public:
  inline SubscribeActuatorOutputStatusRequest() : SubscribeActuatorOutputStatusRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeActuatorOutputStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeActuatorOutputStatusRequest(const SubscribeActuatorOutputStatusRequest& from);
  SubscribeActuatorOutputStatusRequest(SubscribeActuatorOutputStatusRequest&& from) noexcept
    : SubscribeActuatorOutputStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeActuatorOutputStatusRequest& operator=(const SubscribeActuatorOutputStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeActuatorOutputStatusRequest& operator=(SubscribeActuatorOutputStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeActuatorOutputStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeActuatorOutputStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeActuatorOutputStatusRequest*>(
               &_SubscribeActuatorOutputStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SubscribeActuatorOutputStatusRequest& a, SubscribeActuatorOutputStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeActuatorOutputStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeActuatorOutputStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeActuatorOutputStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeActuatorOutputStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeActuatorOutputStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeActuatorOutputStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest";
  }
  protected:
  explicit SubscribeActuatorOutputStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ActuatorOutputStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse) */ {
 public:
  inline ActuatorOutputStatusResponse() : ActuatorOutputStatusResponse(nullptr) {}
  ~ActuatorOutputStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR ActuatorOutputStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorOutputStatusResponse(const ActuatorOutputStatusResponse& from);
  ActuatorOutputStatusResponse(ActuatorOutputStatusResponse&& from) noexcept
    : ActuatorOutputStatusResponse() {
    *this = ::std::move(from);
  }

  inline ActuatorOutputStatusResponse& operator=(const ActuatorOutputStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorOutputStatusResponse& operator=(ActuatorOutputStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorOutputStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorOutputStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ActuatorOutputStatusResponse*>(
               &_ActuatorOutputStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ActuatorOutputStatusResponse& a, ActuatorOutputStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorOutputStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorOutputStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorOutputStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorOutputStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorOutputStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorOutputStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorOutputStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ActuatorOutputStatusResponse";
  }
  protected:
  explicit ActuatorOutputStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorOutputStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
  bool has_actuator_output_status() const;
  private:
  bool _internal_has_actuator_output_status() const;
  public:
  void clear_actuator_output_status();
  const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& actuator_output_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::ActuatorOutputStatus* release_actuator_output_status();
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* mutable_actuator_output_status();
  void set_allocated_actuator_output_status(::mavsdk::rpc::telemetry::ActuatorOutputStatus* actuator_output_status);
  private:
  const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& _internal_actuator_output_status() const;
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* _internal_mutable_actuator_output_status();
  public:
  void unsafe_arena_set_allocated_actuator_output_status(
      ::mavsdk::rpc::telemetry::ActuatorOutputStatus* actuator_output_status);
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* unsafe_arena_release_actuator_output_status();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* actuator_output_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeOdometryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeOdometryRequest) */ {
 public:
  inline SubscribeOdometryRequest() : SubscribeOdometryRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeOdometryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeOdometryRequest(const SubscribeOdometryRequest& from);
  SubscribeOdometryRequest(SubscribeOdometryRequest&& from) noexcept
    : SubscribeOdometryRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeOdometryRequest& operator=(const SubscribeOdometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeOdometryRequest& operator=(SubscribeOdometryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeOdometryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeOdometryRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeOdometryRequest*>(
               &_SubscribeOdometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SubscribeOdometryRequest& a, SubscribeOdometryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeOdometryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeOdometryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeOdometryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeOdometryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeOdometryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeOdometryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeOdometryRequest";
  }
  protected:
  explicit SubscribeOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class OdometryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.OdometryResponse) */ {
 public:
  inline OdometryResponse() : OdometryResponse(nullptr) {}
  ~OdometryResponse() override;
  explicit PROTOBUF_CONSTEXPR OdometryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OdometryResponse(const OdometryResponse& from);
  OdometryResponse(OdometryResponse&& from) noexcept
    : OdometryResponse() {
    *this = ::std::move(from);
  }

  inline OdometryResponse& operator=(const OdometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdometryResponse& operator=(OdometryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OdometryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OdometryResponse* internal_default_instance() {
    return reinterpret_cast<const OdometryResponse*>(
               &_OdometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(OdometryResponse& a, OdometryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OdometryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdometryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OdometryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OdometryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OdometryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OdometryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdometryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.OdometryResponse";
  }
  protected:
  explicit OdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOdometryFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Odometry odometry = 1;
  bool has_odometry() const;
  private:
  bool _internal_has_odometry() const;
  public:
  void clear_odometry();
  const ::mavsdk::rpc::telemetry::Odometry& odometry() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Odometry* release_odometry();
  ::mavsdk::rpc::telemetry::Odometry* mutable_odometry();
  void set_allocated_odometry(::mavsdk::rpc::telemetry::Odometry* odometry);
  private:
  const ::mavsdk::rpc::telemetry::Odometry& _internal_odometry() const;
  ::mavsdk::rpc::telemetry::Odometry* _internal_mutable_odometry();
  public:
  void unsafe_arena_set_allocated_odometry(
      ::mavsdk::rpc::telemetry::Odometry* odometry);
  ::mavsdk::rpc::telemetry::Odometry* unsafe_arena_release_odometry();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.OdometryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Odometry* odometry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribePositionVelocityNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest) */ {
 public:
  inline SubscribePositionVelocityNedRequest() : SubscribePositionVelocityNedRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribePositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribePositionVelocityNedRequest(const SubscribePositionVelocityNedRequest& from);
  SubscribePositionVelocityNedRequest(SubscribePositionVelocityNedRequest&& from) noexcept
    : SubscribePositionVelocityNedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribePositionVelocityNedRequest& operator=(const SubscribePositionVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribePositionVelocityNedRequest& operator=(SubscribePositionVelocityNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribePositionVelocityNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribePositionVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribePositionVelocityNedRequest*>(
               &_SubscribePositionVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SubscribePositionVelocityNedRequest& a, SubscribePositionVelocityNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribePositionVelocityNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribePositionVelocityNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribePositionVelocityNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribePositionVelocityNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribePositionVelocityNedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribePositionVelocityNedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest";
  }
  protected:
  explicit SubscribePositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class PositionVelocityNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.PositionVelocityNedResponse) */ {
 public:
  inline PositionVelocityNedResponse() : PositionVelocityNedResponse(nullptr) {}
  ~PositionVelocityNedResponse() override;
  explicit PROTOBUF_CONSTEXPR PositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionVelocityNedResponse(const PositionVelocityNedResponse& from);
  PositionVelocityNedResponse(PositionVelocityNedResponse&& from) noexcept
    : PositionVelocityNedResponse() {
    *this = ::std::move(from);
  }

  inline PositionVelocityNedResponse& operator=(const PositionVelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionVelocityNedResponse& operator=(PositionVelocityNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionVelocityNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionVelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const PositionVelocityNedResponse*>(
               &_PositionVelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PositionVelocityNedResponse& a, PositionVelocityNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionVelocityNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionVelocityNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionVelocityNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionVelocityNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionVelocityNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionVelocityNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionVelocityNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.PositionVelocityNedResponse";
  }
  protected:
  explicit PositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionVelocityNedFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
  bool has_position_velocity_ned() const;
  private:
  bool _internal_has_position_velocity_ned() const;
  public:
  void clear_position_velocity_ned();
  const ::mavsdk::rpc::telemetry::PositionVelocityNed& position_velocity_ned() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::PositionVelocityNed* release_position_velocity_ned();
  ::mavsdk::rpc::telemetry::PositionVelocityNed* mutable_position_velocity_ned();
  void set_allocated_position_velocity_ned(::mavsdk::rpc::telemetry::PositionVelocityNed* position_velocity_ned);
  private:
  const ::mavsdk::rpc::telemetry::PositionVelocityNed& _internal_position_velocity_ned() const;
  ::mavsdk::rpc::telemetry::PositionVelocityNed* _internal_mutable_position_velocity_ned();
  public:
  void unsafe_arena_set_allocated_position_velocity_ned(
      ::mavsdk::rpc::telemetry::PositionVelocityNed* position_velocity_ned);
  ::mavsdk::rpc::telemetry::PositionVelocityNed* unsafe_arena_release_position_velocity_ned();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::PositionVelocityNed* position_velocity_ned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeGroundTruthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest) */ {
 public:
  inline SubscribeGroundTruthRequest() : SubscribeGroundTruthRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeGroundTruthRequest(const SubscribeGroundTruthRequest& from);
  SubscribeGroundTruthRequest(SubscribeGroundTruthRequest&& from) noexcept
    : SubscribeGroundTruthRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeGroundTruthRequest& operator=(const SubscribeGroundTruthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeGroundTruthRequest& operator=(SubscribeGroundTruthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeGroundTruthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeGroundTruthRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeGroundTruthRequest*>(
               &_SubscribeGroundTruthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SubscribeGroundTruthRequest& a, SubscribeGroundTruthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeGroundTruthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeGroundTruthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeGroundTruthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeGroundTruthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeGroundTruthRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeGroundTruthRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeGroundTruthRequest";
  }
  protected:
  explicit SubscribeGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GroundTruthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GroundTruthResponse) */ {
 public:
  inline GroundTruthResponse() : GroundTruthResponse(nullptr) {}
  ~GroundTruthResponse() override;
  explicit PROTOBUF_CONSTEXPR GroundTruthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroundTruthResponse(const GroundTruthResponse& from);
  GroundTruthResponse(GroundTruthResponse&& from) noexcept
    : GroundTruthResponse() {
    *this = ::std::move(from);
  }

  inline GroundTruthResponse& operator=(const GroundTruthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruthResponse& operator=(GroundTruthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroundTruthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundTruthResponse* internal_default_instance() {
    return reinterpret_cast<const GroundTruthResponse*>(
               &_GroundTruthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GroundTruthResponse& a, GroundTruthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundTruthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundTruthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroundTruthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroundTruthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroundTruthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroundTruthResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruthResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GroundTruthResponse";
  }
  protected:
  explicit GroundTruthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroundTruthFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
  bool has_ground_truth() const;
  private:
  bool _internal_has_ground_truth() const;
  public:
  void clear_ground_truth();
  const ::mavsdk::rpc::telemetry::GroundTruth& ground_truth() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::GroundTruth* release_ground_truth();
  ::mavsdk::rpc::telemetry::GroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::mavsdk::rpc::telemetry::GroundTruth* ground_truth);
  private:
  const ::mavsdk::rpc::telemetry::GroundTruth& _internal_ground_truth() const;
  ::mavsdk::rpc::telemetry::GroundTruth* _internal_mutable_ground_truth();
  public:
  void unsafe_arena_set_allocated_ground_truth(
      ::mavsdk::rpc::telemetry::GroundTruth* ground_truth);
  ::mavsdk::rpc::telemetry::GroundTruth* unsafe_arena_release_ground_truth();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GroundTruthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::GroundTruth* ground_truth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeFixedwingMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest) */ {
 public:
  inline SubscribeFixedwingMetricsRequest() : SubscribeFixedwingMetricsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeFixedwingMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeFixedwingMetricsRequest(const SubscribeFixedwingMetricsRequest& from);
  SubscribeFixedwingMetricsRequest(SubscribeFixedwingMetricsRequest&& from) noexcept
    : SubscribeFixedwingMetricsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeFixedwingMetricsRequest& operator=(const SubscribeFixedwingMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeFixedwingMetricsRequest& operator=(SubscribeFixedwingMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeFixedwingMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeFixedwingMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeFixedwingMetricsRequest*>(
               &_SubscribeFixedwingMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SubscribeFixedwingMetricsRequest& a, SubscribeFixedwingMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeFixedwingMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeFixedwingMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeFixedwingMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeFixedwingMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeFixedwingMetricsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeFixedwingMetricsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest";
  }
  protected:
  explicit SubscribeFixedwingMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class FixedwingMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.FixedwingMetricsResponse) */ {
 public:
  inline FixedwingMetricsResponse() : FixedwingMetricsResponse(nullptr) {}
  ~FixedwingMetricsResponse() override;
  explicit PROTOBUF_CONSTEXPR FixedwingMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedwingMetricsResponse(const FixedwingMetricsResponse& from);
  FixedwingMetricsResponse(FixedwingMetricsResponse&& from) noexcept
    : FixedwingMetricsResponse() {
    *this = ::std::move(from);
  }

  inline FixedwingMetricsResponse& operator=(const FixedwingMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedwingMetricsResponse& operator=(FixedwingMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixedwingMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedwingMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const FixedwingMetricsResponse*>(
               &_FixedwingMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(FixedwingMetricsResponse& a, FixedwingMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedwingMetricsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedwingMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixedwingMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FixedwingMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FixedwingMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FixedwingMetricsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedwingMetricsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.FixedwingMetricsResponse";
  }
  protected:
  explicit FixedwingMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixedwingMetricsFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
  bool has_fixedwing_metrics() const;
  private:
  bool _internal_has_fixedwing_metrics() const;
  public:
  void clear_fixedwing_metrics();
  const ::mavsdk::rpc::telemetry::FixedwingMetrics& fixedwing_metrics() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::FixedwingMetrics* release_fixedwing_metrics();
  ::mavsdk::rpc::telemetry::FixedwingMetrics* mutable_fixedwing_metrics();
  void set_allocated_fixedwing_metrics(::mavsdk::rpc::telemetry::FixedwingMetrics* fixedwing_metrics);
  private:
  const ::mavsdk::rpc::telemetry::FixedwingMetrics& _internal_fixedwing_metrics() const;
  ::mavsdk::rpc::telemetry::FixedwingMetrics* _internal_mutable_fixedwing_metrics();
  public:
  void unsafe_arena_set_allocated_fixedwing_metrics(
      ::mavsdk::rpc::telemetry::FixedwingMetrics* fixedwing_metrics);
  ::mavsdk::rpc::telemetry::FixedwingMetrics* unsafe_arena_release_fixedwing_metrics();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::FixedwingMetrics* fixedwing_metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeImuRequest) */ {
 public:
  inline SubscribeImuRequest() : SubscribeImuRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeImuRequest(const SubscribeImuRequest& from);
  SubscribeImuRequest(SubscribeImuRequest&& from) noexcept
    : SubscribeImuRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeImuRequest& operator=(const SubscribeImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeImuRequest& operator=(SubscribeImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeImuRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeImuRequest*>(
               &_SubscribeImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SubscribeImuRequest& a, SubscribeImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeImuRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeImuRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeImuRequest";
  }
  protected:
  explicit SubscribeImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ImuResponse) */ {
 public:
  inline ImuResponse() : ImuResponse(nullptr) {}
  ~ImuResponse() override;
  explicit PROTOBUF_CONSTEXPR ImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImuResponse(const ImuResponse& from);
  ImuResponse(ImuResponse&& from) noexcept
    : ImuResponse() {
    *this = ::std::move(from);
  }

  inline ImuResponse& operator=(const ImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuResponse& operator=(ImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuResponse* internal_default_instance() {
    return reinterpret_cast<const ImuResponse*>(
               &_ImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ImuResponse& a, ImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ImuResponse";
  }
  protected:
  explicit ImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Imu imu = 1;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::mavsdk::rpc::telemetry::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Imu* release_imu();
  ::mavsdk::rpc::telemetry::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry::Imu* imu);
  private:
  const ::mavsdk::rpc::telemetry::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::mavsdk::rpc::telemetry::Imu* imu);
  ::mavsdk::rpc::telemetry::Imu* unsafe_arena_release_imu();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Imu* imu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeScaledImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeScaledImuRequest) */ {
 public:
  inline SubscribeScaledImuRequest() : SubscribeScaledImuRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeScaledImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeScaledImuRequest(const SubscribeScaledImuRequest& from);
  SubscribeScaledImuRequest(SubscribeScaledImuRequest&& from) noexcept
    : SubscribeScaledImuRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeScaledImuRequest& operator=(const SubscribeScaledImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeScaledImuRequest& operator=(SubscribeScaledImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeScaledImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeScaledImuRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeScaledImuRequest*>(
               &_SubscribeScaledImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SubscribeScaledImuRequest& a, SubscribeScaledImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeScaledImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeScaledImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeScaledImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeScaledImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeScaledImuRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeScaledImuRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeScaledImuRequest";
  }
  protected:
  explicit SubscribeScaledImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ScaledImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ScaledImuResponse) */ {
 public:
  inline ScaledImuResponse() : ScaledImuResponse(nullptr) {}
  ~ScaledImuResponse() override;
  explicit PROTOBUF_CONSTEXPR ScaledImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScaledImuResponse(const ScaledImuResponse& from);
  ScaledImuResponse(ScaledImuResponse&& from) noexcept
    : ScaledImuResponse() {
    *this = ::std::move(from);
  }

  inline ScaledImuResponse& operator=(const ScaledImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaledImuResponse& operator=(ScaledImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScaledImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScaledImuResponse* internal_default_instance() {
    return reinterpret_cast<const ScaledImuResponse*>(
               &_ScaledImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ScaledImuResponse& a, ScaledImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaledImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaledImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScaledImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScaledImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScaledImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScaledImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaledImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ScaledImuResponse";
  }
  protected:
  explicit ScaledImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Imu imu = 1;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::mavsdk::rpc::telemetry::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Imu* release_imu();
  ::mavsdk::rpc::telemetry::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry::Imu* imu);
  private:
  const ::mavsdk::rpc::telemetry::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::mavsdk::rpc::telemetry::Imu* imu);
  ::mavsdk::rpc::telemetry::Imu* unsafe_arena_release_imu();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ScaledImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Imu* imu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRawImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeRawImuRequest) */ {
 public:
  inline SubscribeRawImuRequest() : SubscribeRawImuRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeRawImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeRawImuRequest(const SubscribeRawImuRequest& from);
  SubscribeRawImuRequest(SubscribeRawImuRequest&& from) noexcept
    : SubscribeRawImuRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRawImuRequest& operator=(const SubscribeRawImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRawImuRequest& operator=(SubscribeRawImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeRawImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeRawImuRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRawImuRequest*>(
               &_SubscribeRawImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SubscribeRawImuRequest& a, SubscribeRawImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRawImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRawImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeRawImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeRawImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeRawImuRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeRawImuRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeRawImuRequest";
  }
  protected:
  explicit SubscribeRawImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class RawImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.RawImuResponse) */ {
 public:
  inline RawImuResponse() : RawImuResponse(nullptr) {}
  ~RawImuResponse() override;
  explicit PROTOBUF_CONSTEXPR RawImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawImuResponse(const RawImuResponse& from);
  RawImuResponse(RawImuResponse&& from) noexcept
    : RawImuResponse() {
    *this = ::std::move(from);
  }

  inline RawImuResponse& operator=(const RawImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawImuResponse& operator=(RawImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawImuResponse* internal_default_instance() {
    return reinterpret_cast<const RawImuResponse*>(
               &_RawImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(RawImuResponse& a, RawImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RawImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RawImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RawImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.RawImuResponse";
  }
  protected:
  explicit RawImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Imu imu = 1;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::mavsdk::rpc::telemetry::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Imu* release_imu();
  ::mavsdk::rpc::telemetry::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry::Imu* imu);
  private:
  const ::mavsdk::rpc::telemetry::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::mavsdk::rpc::telemetry::Imu* imu);
  ::mavsdk::rpc::telemetry::Imu* unsafe_arena_release_imu();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.RawImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Imu* imu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeHealthAllOkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest) */ {
 public:
  inline SubscribeHealthAllOkRequest() : SubscribeHealthAllOkRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeHealthAllOkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeHealthAllOkRequest(const SubscribeHealthAllOkRequest& from);
  SubscribeHealthAllOkRequest(SubscribeHealthAllOkRequest&& from) noexcept
    : SubscribeHealthAllOkRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeHealthAllOkRequest& operator=(const SubscribeHealthAllOkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeHealthAllOkRequest& operator=(SubscribeHealthAllOkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeHealthAllOkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeHealthAllOkRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeHealthAllOkRequest*>(
               &_SubscribeHealthAllOkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SubscribeHealthAllOkRequest& a, SubscribeHealthAllOkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeHealthAllOkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeHealthAllOkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeHealthAllOkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeHealthAllOkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeHealthAllOkRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeHealthAllOkRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest";
  }
  protected:
  explicit SubscribeHealthAllOkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class HealthAllOkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.HealthAllOkResponse) */ {
 public:
  inline HealthAllOkResponse() : HealthAllOkResponse(nullptr) {}
  ~HealthAllOkResponse() override;
  explicit PROTOBUF_CONSTEXPR HealthAllOkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthAllOkResponse(const HealthAllOkResponse& from);
  HealthAllOkResponse(HealthAllOkResponse&& from) noexcept
    : HealthAllOkResponse() {
    *this = ::std::move(from);
  }

  inline HealthAllOkResponse& operator=(const HealthAllOkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthAllOkResponse& operator=(HealthAllOkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthAllOkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthAllOkResponse* internal_default_instance() {
    return reinterpret_cast<const HealthAllOkResponse*>(
               &_HealthAllOkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(HealthAllOkResponse& a, HealthAllOkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthAllOkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthAllOkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthAllOkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthAllOkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HealthAllOkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HealthAllOkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthAllOkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.HealthAllOkResponse";
  }
  protected:
  explicit HealthAllOkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsHealthAllOkFieldNumber = 1,
  };
  // bool is_health_all_ok = 1;
  void clear_is_health_all_ok();
  bool is_health_all_ok() const;
  void set_is_health_all_ok(bool value);
  private:
  bool _internal_is_health_all_ok() const;
  void _internal_set_is_health_all_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.HealthAllOkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_health_all_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeUnixEpochTimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest) */ {
 public:
  inline SubscribeUnixEpochTimeRequest() : SubscribeUnixEpochTimeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeUnixEpochTimeRequest(const SubscribeUnixEpochTimeRequest& from);
  SubscribeUnixEpochTimeRequest(SubscribeUnixEpochTimeRequest&& from) noexcept
    : SubscribeUnixEpochTimeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeUnixEpochTimeRequest& operator=(const SubscribeUnixEpochTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeUnixEpochTimeRequest& operator=(SubscribeUnixEpochTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeUnixEpochTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeUnixEpochTimeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeUnixEpochTimeRequest*>(
               &_SubscribeUnixEpochTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SubscribeUnixEpochTimeRequest& a, SubscribeUnixEpochTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeUnixEpochTimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeUnixEpochTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeUnixEpochTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeUnixEpochTimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeUnixEpochTimeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeUnixEpochTimeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest";
  }
  protected:
  explicit SubscribeUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class UnixEpochTimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.UnixEpochTimeResponse) */ {
 public:
  inline UnixEpochTimeResponse() : UnixEpochTimeResponse(nullptr) {}
  ~UnixEpochTimeResponse() override;
  explicit PROTOBUF_CONSTEXPR UnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnixEpochTimeResponse(const UnixEpochTimeResponse& from);
  UnixEpochTimeResponse(UnixEpochTimeResponse&& from) noexcept
    : UnixEpochTimeResponse() {
    *this = ::std::move(from);
  }

  inline UnixEpochTimeResponse& operator=(const UnixEpochTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnixEpochTimeResponse& operator=(UnixEpochTimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnixEpochTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnixEpochTimeResponse* internal_default_instance() {
    return reinterpret_cast<const UnixEpochTimeResponse*>(
               &_UnixEpochTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(UnixEpochTimeResponse& a, UnixEpochTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnixEpochTimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnixEpochTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnixEpochTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnixEpochTimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnixEpochTimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnixEpochTimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnixEpochTimeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.UnixEpochTimeResponse";
  }
  protected:
  explicit UnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUsFieldNumber = 1,
  };
  // uint64 time_us = 1;
  void clear_time_us();
  uint64_t time_us() const;
  void set_time_us(uint64_t value);
  private:
  uint64_t _internal_time_us() const;
  void _internal_set_time_us(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t time_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeDistanceSensorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest) */ {
 public:
  inline SubscribeDistanceSensorRequest() : SubscribeDistanceSensorRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeDistanceSensorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeDistanceSensorRequest(const SubscribeDistanceSensorRequest& from);
  SubscribeDistanceSensorRequest(SubscribeDistanceSensorRequest&& from) noexcept
    : SubscribeDistanceSensorRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeDistanceSensorRequest& operator=(const SubscribeDistanceSensorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeDistanceSensorRequest& operator=(SubscribeDistanceSensorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeDistanceSensorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeDistanceSensorRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeDistanceSensorRequest*>(
               &_SubscribeDistanceSensorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SubscribeDistanceSensorRequest& a, SubscribeDistanceSensorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeDistanceSensorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeDistanceSensorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeDistanceSensorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeDistanceSensorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeDistanceSensorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeDistanceSensorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest";
  }
  protected:
  explicit SubscribeDistanceSensorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class DistanceSensorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.DistanceSensorResponse) */ {
 public:
  inline DistanceSensorResponse() : DistanceSensorResponse(nullptr) {}
  ~DistanceSensorResponse() override;
  explicit PROTOBUF_CONSTEXPR DistanceSensorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceSensorResponse(const DistanceSensorResponse& from);
  DistanceSensorResponse(DistanceSensorResponse&& from) noexcept
    : DistanceSensorResponse() {
    *this = ::std::move(from);
  }

  inline DistanceSensorResponse& operator=(const DistanceSensorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceSensorResponse& operator=(DistanceSensorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceSensorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceSensorResponse* internal_default_instance() {
    return reinterpret_cast<const DistanceSensorResponse*>(
               &_DistanceSensorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(DistanceSensorResponse& a, DistanceSensorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceSensorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceSensorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceSensorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistanceSensorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceSensorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DistanceSensorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceSensorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.DistanceSensorResponse";
  }
  protected:
  explicit DistanceSensorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceSensorFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
  bool has_distance_sensor() const;
  private:
  bool _internal_has_distance_sensor() const;
  public:
  void clear_distance_sensor();
  const ::mavsdk::rpc::telemetry::DistanceSensor& distance_sensor() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::DistanceSensor* release_distance_sensor();
  ::mavsdk::rpc::telemetry::DistanceSensor* mutable_distance_sensor();
  void set_allocated_distance_sensor(::mavsdk::rpc::telemetry::DistanceSensor* distance_sensor);
  private:
  const ::mavsdk::rpc::telemetry::DistanceSensor& _internal_distance_sensor() const;
  ::mavsdk::rpc::telemetry::DistanceSensor* _internal_mutable_distance_sensor();
  public:
  void unsafe_arena_set_allocated_distance_sensor(
      ::mavsdk::rpc::telemetry::DistanceSensor* distance_sensor);
  ::mavsdk::rpc::telemetry::DistanceSensor* unsafe_arena_release_distance_sensor();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.DistanceSensorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::DistanceSensor* distance_sensor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeScaledPressureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest) */ {
 public:
  inline SubscribeScaledPressureRequest() : SubscribeScaledPressureRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeScaledPressureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeScaledPressureRequest(const SubscribeScaledPressureRequest& from);
  SubscribeScaledPressureRequest(SubscribeScaledPressureRequest&& from) noexcept
    : SubscribeScaledPressureRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeScaledPressureRequest& operator=(const SubscribeScaledPressureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeScaledPressureRequest& operator=(SubscribeScaledPressureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeScaledPressureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeScaledPressureRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeScaledPressureRequest*>(
               &_SubscribeScaledPressureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SubscribeScaledPressureRequest& a, SubscribeScaledPressureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeScaledPressureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeScaledPressureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeScaledPressureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeScaledPressureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeScaledPressureRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeScaledPressureRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeScaledPressureRequest";
  }
  protected:
  explicit SubscribeScaledPressureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ScaledPressureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ScaledPressureResponse) */ {
 public:
  inline ScaledPressureResponse() : ScaledPressureResponse(nullptr) {}
  ~ScaledPressureResponse() override;
  explicit PROTOBUF_CONSTEXPR ScaledPressureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScaledPressureResponse(const ScaledPressureResponse& from);
  ScaledPressureResponse(ScaledPressureResponse&& from) noexcept
    : ScaledPressureResponse() {
    *this = ::std::move(from);
  }

  inline ScaledPressureResponse& operator=(const ScaledPressureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaledPressureResponse& operator=(ScaledPressureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScaledPressureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScaledPressureResponse* internal_default_instance() {
    return reinterpret_cast<const ScaledPressureResponse*>(
               &_ScaledPressureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ScaledPressureResponse& a, ScaledPressureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaledPressureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaledPressureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScaledPressureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScaledPressureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScaledPressureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScaledPressureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaledPressureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ScaledPressureResponse";
  }
  protected:
  explicit ScaledPressureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaledPressureFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
  bool has_scaled_pressure() const;
  private:
  bool _internal_has_scaled_pressure() const;
  public:
  void clear_scaled_pressure();
  const ::mavsdk::rpc::telemetry::ScaledPressure& scaled_pressure() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::ScaledPressure* release_scaled_pressure();
  ::mavsdk::rpc::telemetry::ScaledPressure* mutable_scaled_pressure();
  void set_allocated_scaled_pressure(::mavsdk::rpc::telemetry::ScaledPressure* scaled_pressure);
  private:
  const ::mavsdk::rpc::telemetry::ScaledPressure& _internal_scaled_pressure() const;
  ::mavsdk::rpc::telemetry::ScaledPressure* _internal_mutable_scaled_pressure();
  public:
  void unsafe_arena_set_allocated_scaled_pressure(
      ::mavsdk::rpc::telemetry::ScaledPressure* scaled_pressure);
  ::mavsdk::rpc::telemetry::ScaledPressure* unsafe_arena_release_scaled_pressure();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ScaledPressureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::ScaledPressure* scaled_pressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeHeadingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeHeadingRequest) */ {
 public:
  inline SubscribeHeadingRequest() : SubscribeHeadingRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeHeadingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeHeadingRequest(const SubscribeHeadingRequest& from);
  SubscribeHeadingRequest(SubscribeHeadingRequest&& from) noexcept
    : SubscribeHeadingRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeHeadingRequest& operator=(const SubscribeHeadingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeHeadingRequest& operator=(SubscribeHeadingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeHeadingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeHeadingRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeHeadingRequest*>(
               &_SubscribeHeadingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SubscribeHeadingRequest& a, SubscribeHeadingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeHeadingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeHeadingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeHeadingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeHeadingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeHeadingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeHeadingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeHeadingRequest";
  }
  protected:
  explicit SubscribeHeadingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeHeadingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class HeadingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.HeadingResponse) */ {
 public:
  inline HeadingResponse() : HeadingResponse(nullptr) {}
  ~HeadingResponse() override;
  explicit PROTOBUF_CONSTEXPR HeadingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeadingResponse(const HeadingResponse& from);
  HeadingResponse(HeadingResponse&& from) noexcept
    : HeadingResponse() {
    *this = ::std::move(from);
  }

  inline HeadingResponse& operator=(const HeadingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeadingResponse& operator=(HeadingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeadingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeadingResponse* internal_default_instance() {
    return reinterpret_cast<const HeadingResponse*>(
               &_HeadingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(HeadingResponse& a, HeadingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeadingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeadingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeadingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeadingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeadingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeadingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeadingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.HeadingResponse";
  }
  protected:
  explicit HeadingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingDegFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Heading heading_deg = 1;
  bool has_heading_deg() const;
  private:
  bool _internal_has_heading_deg() const;
  public:
  void clear_heading_deg();
  const ::mavsdk::rpc::telemetry::Heading& heading_deg() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Heading* release_heading_deg();
  ::mavsdk::rpc::telemetry::Heading* mutable_heading_deg();
  void set_allocated_heading_deg(::mavsdk::rpc::telemetry::Heading* heading_deg);
  private:
  const ::mavsdk::rpc::telemetry::Heading& _internal_heading_deg() const;
  ::mavsdk::rpc::telemetry::Heading* _internal_mutable_heading_deg();
  public:
  void unsafe_arena_set_allocated_heading_deg(
      ::mavsdk::rpc::telemetry::Heading* heading_deg);
  ::mavsdk::rpc::telemetry::Heading* unsafe_arena_release_heading_deg();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.HeadingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::Heading* heading_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRatePositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRatePositionRequest) */ {
 public:
  inline SetRatePositionRequest() : SetRatePositionRequest(nullptr) {}
  ~SetRatePositionRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRatePositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRatePositionRequest(const SetRatePositionRequest& from);
  SetRatePositionRequest(SetRatePositionRequest&& from) noexcept
    : SetRatePositionRequest() {
    *this = ::std::move(from);
  }

  inline SetRatePositionRequest& operator=(const SetRatePositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRatePositionRequest& operator=(SetRatePositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRatePositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRatePositionRequest* internal_default_instance() {
    return reinterpret_cast<const SetRatePositionRequest*>(
               &_SetRatePositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SetRatePositionRequest& a, SetRatePositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRatePositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRatePositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRatePositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRatePositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRatePositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRatePositionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRatePositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRatePositionRequest";
  }
  protected:
  explicit SetRatePositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRatePositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRatePositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRatePositionResponse) */ {
 public:
  inline SetRatePositionResponse() : SetRatePositionResponse(nullptr) {}
  ~SetRatePositionResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRatePositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRatePositionResponse(const SetRatePositionResponse& from);
  SetRatePositionResponse(SetRatePositionResponse&& from) noexcept
    : SetRatePositionResponse() {
    *this = ::std::move(from);
  }

  inline SetRatePositionResponse& operator=(const SetRatePositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRatePositionResponse& operator=(SetRatePositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRatePositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRatePositionResponse* internal_default_instance() {
    return reinterpret_cast<const SetRatePositionResponse*>(
               &_SetRatePositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SetRatePositionResponse& a, SetRatePositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRatePositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRatePositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRatePositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRatePositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRatePositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRatePositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRatePositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRatePositionResponse";
  }
  protected:
  explicit SetRatePositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRatePositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateHomeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateHomeRequest) */ {
 public:
  inline SetRateHomeRequest() : SetRateHomeRequest(nullptr) {}
  ~SetRateHomeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateHomeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateHomeRequest(const SetRateHomeRequest& from);
  SetRateHomeRequest(SetRateHomeRequest&& from) noexcept
    : SetRateHomeRequest() {
    *this = ::std::move(from);
  }

  inline SetRateHomeRequest& operator=(const SetRateHomeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateHomeRequest& operator=(SetRateHomeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateHomeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateHomeRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateHomeRequest*>(
               &_SetRateHomeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SetRateHomeRequest& a, SetRateHomeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateHomeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateHomeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateHomeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateHomeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateHomeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateHomeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateHomeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateHomeRequest";
  }
  protected:
  explicit SetRateHomeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateHomeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateHomeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateHomeResponse) */ {
 public:
  inline SetRateHomeResponse() : SetRateHomeResponse(nullptr) {}
  ~SetRateHomeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateHomeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateHomeResponse(const SetRateHomeResponse& from);
  SetRateHomeResponse(SetRateHomeResponse&& from) noexcept
    : SetRateHomeResponse() {
    *this = ::std::move(from);
  }

  inline SetRateHomeResponse& operator=(const SetRateHomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateHomeResponse& operator=(SetRateHomeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateHomeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateHomeResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateHomeResponse*>(
               &_SetRateHomeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SetRateHomeResponse& a, SetRateHomeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateHomeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateHomeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateHomeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateHomeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateHomeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateHomeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateHomeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateHomeResponse";
  }
  protected:
  explicit SetRateHomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateHomeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateInAirRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateInAirRequest) */ {
 public:
  inline SetRateInAirRequest() : SetRateInAirRequest(nullptr) {}
  ~SetRateInAirRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateInAirRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateInAirRequest(const SetRateInAirRequest& from);
  SetRateInAirRequest(SetRateInAirRequest&& from) noexcept
    : SetRateInAirRequest() {
    *this = ::std::move(from);
  }

  inline SetRateInAirRequest& operator=(const SetRateInAirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateInAirRequest& operator=(SetRateInAirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateInAirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateInAirRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateInAirRequest*>(
               &_SetRateInAirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(SetRateInAirRequest& a, SetRateInAirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateInAirRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateInAirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateInAirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateInAirRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateInAirRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateInAirRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateInAirRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateInAirRequest";
  }
  protected:
  explicit SetRateInAirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateInAirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateInAirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateInAirResponse) */ {
 public:
  inline SetRateInAirResponse() : SetRateInAirResponse(nullptr) {}
  ~SetRateInAirResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateInAirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateInAirResponse(const SetRateInAirResponse& from);
  SetRateInAirResponse(SetRateInAirResponse&& from) noexcept
    : SetRateInAirResponse() {
    *this = ::std::move(from);
  }

  inline SetRateInAirResponse& operator=(const SetRateInAirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateInAirResponse& operator=(SetRateInAirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateInAirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateInAirResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateInAirResponse*>(
               &_SetRateInAirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(SetRateInAirResponse& a, SetRateInAirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateInAirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateInAirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateInAirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateInAirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateInAirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateInAirResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateInAirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateInAirResponse";
  }
  protected:
  explicit SetRateInAirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateInAirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateLandedStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateLandedStateRequest) */ {
 public:
  inline SetRateLandedStateRequest() : SetRateLandedStateRequest(nullptr) {}
  ~SetRateLandedStateRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateLandedStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateLandedStateRequest(const SetRateLandedStateRequest& from);
  SetRateLandedStateRequest(SetRateLandedStateRequest&& from) noexcept
    : SetRateLandedStateRequest() {
    *this = ::std::move(from);
  }

  inline SetRateLandedStateRequest& operator=(const SetRateLandedStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateLandedStateRequest& operator=(SetRateLandedStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateLandedStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateLandedStateRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateLandedStateRequest*>(
               &_SetRateLandedStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(SetRateLandedStateRequest& a, SetRateLandedStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateLandedStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateLandedStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateLandedStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateLandedStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateLandedStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateLandedStateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateLandedStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateLandedStateRequest";
  }
  protected:
  explicit SetRateLandedStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateLandedStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateLandedStateResponse) */ {
 public:
  inline SetRateLandedStateResponse() : SetRateLandedStateResponse(nullptr) {}
  ~SetRateLandedStateResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateLandedStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateLandedStateResponse(const SetRateLandedStateResponse& from);
  SetRateLandedStateResponse(SetRateLandedStateResponse&& from) noexcept
    : SetRateLandedStateResponse() {
    *this = ::std::move(from);
  }

  inline SetRateLandedStateResponse& operator=(const SetRateLandedStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateLandedStateResponse& operator=(SetRateLandedStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateLandedStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateLandedStateResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateLandedStateResponse*>(
               &_SetRateLandedStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SetRateLandedStateResponse& a, SetRateLandedStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateLandedStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateLandedStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateLandedStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateLandedStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateLandedStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateLandedStateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateLandedStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateLandedStateResponse";
  }
  protected:
  explicit SetRateLandedStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateVtolStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateVtolStateRequest) */ {
 public:
  inline SetRateVtolStateRequest() : SetRateVtolStateRequest(nullptr) {}
  ~SetRateVtolStateRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateVtolStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateVtolStateRequest(const SetRateVtolStateRequest& from);
  SetRateVtolStateRequest(SetRateVtolStateRequest&& from) noexcept
    : SetRateVtolStateRequest() {
    *this = ::std::move(from);
  }

  inline SetRateVtolStateRequest& operator=(const SetRateVtolStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateVtolStateRequest& operator=(SetRateVtolStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateVtolStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateVtolStateRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateVtolStateRequest*>(
               &_SetRateVtolStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SetRateVtolStateRequest& a, SetRateVtolStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateVtolStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateVtolStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateVtolStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateVtolStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateVtolStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateVtolStateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateVtolStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateVtolStateRequest";
  }
  protected:
  explicit SetRateVtolStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateVtolStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateVtolStateResponse) */ {
 public:
  inline SetRateVtolStateResponse() : SetRateVtolStateResponse(nullptr) {}
  ~SetRateVtolStateResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateVtolStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateVtolStateResponse(const SetRateVtolStateResponse& from);
  SetRateVtolStateResponse(SetRateVtolStateResponse&& from) noexcept
    : SetRateVtolStateResponse() {
    *this = ::std::move(from);
  }

  inline SetRateVtolStateResponse& operator=(const SetRateVtolStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateVtolStateResponse& operator=(SetRateVtolStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateVtolStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateVtolStateResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateVtolStateResponse*>(
               &_SetRateVtolStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SetRateVtolStateResponse& a, SetRateVtolStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateVtolStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateVtolStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateVtolStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateVtolStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateVtolStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateVtolStateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateVtolStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateVtolStateResponse";
  }
  protected:
  explicit SetRateVtolStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateAttitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateAttitudeRequest) */ {
 public:
  inline SetRateAttitudeRequest() : SetRateAttitudeRequest(nullptr) {}
  ~SetRateAttitudeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateAttitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateAttitudeRequest(const SetRateAttitudeRequest& from);
  SetRateAttitudeRequest(SetRateAttitudeRequest&& from) noexcept
    : SetRateAttitudeRequest() {
    *this = ::std::move(from);
  }

  inline SetRateAttitudeRequest& operator=(const SetRateAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateAttitudeRequest& operator=(SetRateAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateAttitudeRequest*>(
               &_SetRateAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SetRateAttitudeRequest& a, SetRateAttitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateAttitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateAttitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateAttitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateAttitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateAttitudeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateAttitudeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateAttitudeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateAttitudeRequest";
  }
  protected:
  explicit SetRateAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateAttitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateAttitudeResponse) */ {
 public:
  inline SetRateAttitudeResponse() : SetRateAttitudeResponse(nullptr) {}
  ~SetRateAttitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateAttitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateAttitudeResponse(const SetRateAttitudeResponse& from);
  SetRateAttitudeResponse(SetRateAttitudeResponse&& from) noexcept
    : SetRateAttitudeResponse() {
    *this = ::std::move(from);
  }

  inline SetRateAttitudeResponse& operator=(const SetRateAttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateAttitudeResponse& operator=(SetRateAttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateAttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateAttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateAttitudeResponse*>(
               &_SetRateAttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SetRateAttitudeResponse& a, SetRateAttitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateAttitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateAttitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateAttitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateAttitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateAttitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateAttitudeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateAttitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateAttitudeResponse";
  }
  protected:
  explicit SetRateAttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateAttitudeAngularVelocityBodyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest) */ {
 public:
  inline SetRateAttitudeAngularVelocityBodyRequest() : SetRateAttitudeAngularVelocityBodyRequest(nullptr) {}
  ~SetRateAttitudeAngularVelocityBodyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateAttitudeAngularVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateAttitudeAngularVelocityBodyRequest(const SetRateAttitudeAngularVelocityBodyRequest& from);
  SetRateAttitudeAngularVelocityBodyRequest(SetRateAttitudeAngularVelocityBodyRequest&& from) noexcept
    : SetRateAttitudeAngularVelocityBodyRequest() {
    *this = ::std::move(from);
  }

  inline SetRateAttitudeAngularVelocityBodyRequest& operator=(const SetRateAttitudeAngularVelocityBodyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateAttitudeAngularVelocityBodyRequest& operator=(SetRateAttitudeAngularVelocityBodyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateAttitudeAngularVelocityBodyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateAttitudeAngularVelocityBodyRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateAttitudeAngularVelocityBodyRequest*>(
               &_SetRateAttitudeAngularVelocityBodyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SetRateAttitudeAngularVelocityBodyRequest& a, SetRateAttitudeAngularVelocityBodyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateAttitudeAngularVelocityBodyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateAttitudeAngularVelocityBodyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateAttitudeAngularVelocityBodyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateAttitudeAngularVelocityBodyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateAttitudeAngularVelocityBodyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateAttitudeAngularVelocityBodyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateAttitudeAngularVelocityBodyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest";
  }
  protected:
  explicit SetRateAttitudeAngularVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateAttitudeAngularVelocityBodyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse) */ {
 public:
  inline SetRateAttitudeAngularVelocityBodyResponse() : SetRateAttitudeAngularVelocityBodyResponse(nullptr) {}
  ~SetRateAttitudeAngularVelocityBodyResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateAttitudeAngularVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateAttitudeAngularVelocityBodyResponse(const SetRateAttitudeAngularVelocityBodyResponse& from);
  SetRateAttitudeAngularVelocityBodyResponse(SetRateAttitudeAngularVelocityBodyResponse&& from) noexcept
    : SetRateAttitudeAngularVelocityBodyResponse() {
    *this = ::std::move(from);
  }

  inline SetRateAttitudeAngularVelocityBodyResponse& operator=(const SetRateAttitudeAngularVelocityBodyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateAttitudeAngularVelocityBodyResponse& operator=(SetRateAttitudeAngularVelocityBodyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateAttitudeAngularVelocityBodyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateAttitudeAngularVelocityBodyResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateAttitudeAngularVelocityBodyResponse*>(
               &_SetRateAttitudeAngularVelocityBodyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(SetRateAttitudeAngularVelocityBodyResponse& a, SetRateAttitudeAngularVelocityBodyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateAttitudeAngularVelocityBodyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateAttitudeAngularVelocityBodyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateAttitudeAngularVelocityBodyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateAttitudeAngularVelocityBodyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateAttitudeAngularVelocityBodyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateAttitudeAngularVelocityBodyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateAttitudeAngularVelocityBodyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse";
  }
  protected:
  explicit SetRateAttitudeAngularVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateCameraAttitudeQuaternionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest) */ {
 public:
  inline SetRateCameraAttitudeQuaternionRequest() : SetRateCameraAttitudeQuaternionRequest(nullptr) {}
  ~SetRateCameraAttitudeQuaternionRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateCameraAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateCameraAttitudeQuaternionRequest(const SetRateCameraAttitudeQuaternionRequest& from);
  SetRateCameraAttitudeQuaternionRequest(SetRateCameraAttitudeQuaternionRequest&& from) noexcept
    : SetRateCameraAttitudeQuaternionRequest() {
    *this = ::std::move(from);
  }

  inline SetRateCameraAttitudeQuaternionRequest& operator=(const SetRateCameraAttitudeQuaternionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateCameraAttitudeQuaternionRequest& operator=(SetRateCameraAttitudeQuaternionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateCameraAttitudeQuaternionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateCameraAttitudeQuaternionRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateCameraAttitudeQuaternionRequest*>(
               &_SetRateCameraAttitudeQuaternionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SetRateCameraAttitudeQuaternionRequest& a, SetRateCameraAttitudeQuaternionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateCameraAttitudeQuaternionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateCameraAttitudeQuaternionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateCameraAttitudeQuaternionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateCameraAttitudeQuaternionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateCameraAttitudeQuaternionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateCameraAttitudeQuaternionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateCameraAttitudeQuaternionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest";
  }
  protected:
  explicit SetRateCameraAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateCameraAttitudeQuaternionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse) */ {
 public:
  inline SetRateCameraAttitudeQuaternionResponse() : SetRateCameraAttitudeQuaternionResponse(nullptr) {}
  ~SetRateCameraAttitudeQuaternionResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateCameraAttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateCameraAttitudeQuaternionResponse(const SetRateCameraAttitudeQuaternionResponse& from);
  SetRateCameraAttitudeQuaternionResponse(SetRateCameraAttitudeQuaternionResponse&& from) noexcept
    : SetRateCameraAttitudeQuaternionResponse() {
    *this = ::std::move(from);
  }

  inline SetRateCameraAttitudeQuaternionResponse& operator=(const SetRateCameraAttitudeQuaternionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateCameraAttitudeQuaternionResponse& operator=(SetRateCameraAttitudeQuaternionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateCameraAttitudeQuaternionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateCameraAttitudeQuaternionResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateCameraAttitudeQuaternionResponse*>(
               &_SetRateCameraAttitudeQuaternionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SetRateCameraAttitudeQuaternionResponse& a, SetRateCameraAttitudeQuaternionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateCameraAttitudeQuaternionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateCameraAttitudeQuaternionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateCameraAttitudeQuaternionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateCameraAttitudeQuaternionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateCameraAttitudeQuaternionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateCameraAttitudeQuaternionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateCameraAttitudeQuaternionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse";
  }
  protected:
  explicit SetRateCameraAttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateCameraAttitudeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest) */ {
 public:
  inline SetRateCameraAttitudeRequest() : SetRateCameraAttitudeRequest(nullptr) {}
  ~SetRateCameraAttitudeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateCameraAttitudeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateCameraAttitudeRequest(const SetRateCameraAttitudeRequest& from);
  SetRateCameraAttitudeRequest(SetRateCameraAttitudeRequest&& from) noexcept
    : SetRateCameraAttitudeRequest() {
    *this = ::std::move(from);
  }

  inline SetRateCameraAttitudeRequest& operator=(const SetRateCameraAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateCameraAttitudeRequest& operator=(SetRateCameraAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateCameraAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateCameraAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateCameraAttitudeRequest*>(
               &_SetRateCameraAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(SetRateCameraAttitudeRequest& a, SetRateCameraAttitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateCameraAttitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateCameraAttitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateCameraAttitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateCameraAttitudeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateCameraAttitudeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateCameraAttitudeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateCameraAttitudeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest";
  }
  protected:
  explicit SetRateCameraAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateCameraAttitudeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse) */ {
 public:
  inline SetRateCameraAttitudeResponse() : SetRateCameraAttitudeResponse(nullptr) {}
  ~SetRateCameraAttitudeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateCameraAttitudeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateCameraAttitudeResponse(const SetRateCameraAttitudeResponse& from);
  SetRateCameraAttitudeResponse(SetRateCameraAttitudeResponse&& from) noexcept
    : SetRateCameraAttitudeResponse() {
    *this = ::std::move(from);
  }

  inline SetRateCameraAttitudeResponse& operator=(const SetRateCameraAttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateCameraAttitudeResponse& operator=(SetRateCameraAttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateCameraAttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateCameraAttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateCameraAttitudeResponse*>(
               &_SetRateCameraAttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(SetRateCameraAttitudeResponse& a, SetRateCameraAttitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateCameraAttitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateCameraAttitudeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateCameraAttitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateCameraAttitudeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateCameraAttitudeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateCameraAttitudeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateCameraAttitudeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse";
  }
  protected:
  explicit SetRateCameraAttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateVelocityNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateVelocityNedRequest) */ {
 public:
  inline SetRateVelocityNedRequest() : SetRateVelocityNedRequest(nullptr) {}
  ~SetRateVelocityNedRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateVelocityNedRequest(const SetRateVelocityNedRequest& from);
  SetRateVelocityNedRequest(SetRateVelocityNedRequest&& from) noexcept
    : SetRateVelocityNedRequest() {
    *this = ::std::move(from);
  }

  inline SetRateVelocityNedRequest& operator=(const SetRateVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateVelocityNedRequest& operator=(SetRateVelocityNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateVelocityNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateVelocityNedRequest*>(
               &_SetRateVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SetRateVelocityNedRequest& a, SetRateVelocityNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateVelocityNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateVelocityNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateVelocityNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateVelocityNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateVelocityNedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateVelocityNedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateVelocityNedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateVelocityNedRequest";
  }
  protected:
  explicit SetRateVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateVelocityNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateVelocityNedResponse) */ {
 public:
  inline SetRateVelocityNedResponse() : SetRateVelocityNedResponse(nullptr) {}
  ~SetRateVelocityNedResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateVelocityNedResponse(const SetRateVelocityNedResponse& from);
  SetRateVelocityNedResponse(SetRateVelocityNedResponse&& from) noexcept
    : SetRateVelocityNedResponse() {
    *this = ::std::move(from);
  }

  inline SetRateVelocityNedResponse& operator=(const SetRateVelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateVelocityNedResponse& operator=(SetRateVelocityNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateVelocityNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateVelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateVelocityNedResponse*>(
               &_SetRateVelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SetRateVelocityNedResponse& a, SetRateVelocityNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateVelocityNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateVelocityNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateVelocityNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateVelocityNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateVelocityNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateVelocityNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateVelocityNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateVelocityNedResponse";
  }
  protected:
  explicit SetRateVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateGpsInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateGpsInfoRequest) */ {
 public:
  inline SetRateGpsInfoRequest() : SetRateGpsInfoRequest(nullptr) {}
  ~SetRateGpsInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateGpsInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateGpsInfoRequest(const SetRateGpsInfoRequest& from);
  SetRateGpsInfoRequest(SetRateGpsInfoRequest&& from) noexcept
    : SetRateGpsInfoRequest() {
    *this = ::std::move(from);
  }

  inline SetRateGpsInfoRequest& operator=(const SetRateGpsInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateGpsInfoRequest& operator=(SetRateGpsInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateGpsInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateGpsInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateGpsInfoRequest*>(
               &_SetRateGpsInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SetRateGpsInfoRequest& a, SetRateGpsInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateGpsInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateGpsInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateGpsInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateGpsInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateGpsInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateGpsInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateGpsInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateGpsInfoRequest";
  }
  protected:
  explicit SetRateGpsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateGpsInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateGpsInfoResponse) */ {
 public:
  inline SetRateGpsInfoResponse() : SetRateGpsInfoResponse(nullptr) {}
  ~SetRateGpsInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateGpsInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateGpsInfoResponse(const SetRateGpsInfoResponse& from);
  SetRateGpsInfoResponse(SetRateGpsInfoResponse&& from) noexcept
    : SetRateGpsInfoResponse() {
    *this = ::std::move(from);
  }

  inline SetRateGpsInfoResponse& operator=(const SetRateGpsInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateGpsInfoResponse& operator=(SetRateGpsInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateGpsInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateGpsInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateGpsInfoResponse*>(
               &_SetRateGpsInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SetRateGpsInfoResponse& a, SetRateGpsInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateGpsInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateGpsInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateGpsInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateGpsInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateGpsInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateGpsInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateGpsInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateGpsInfoResponse";
  }
  protected:
  explicit SetRateGpsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateRawGpsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateRawGpsRequest) */ {
 public:
  inline SetRateRawGpsRequest() : SetRateRawGpsRequest(nullptr) {}
  ~SetRateRawGpsRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateRawGpsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateRawGpsRequest(const SetRateRawGpsRequest& from);
  SetRateRawGpsRequest(SetRateRawGpsRequest&& from) noexcept
    : SetRateRawGpsRequest() {
    *this = ::std::move(from);
  }

  inline SetRateRawGpsRequest& operator=(const SetRateRawGpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateRawGpsRequest& operator=(SetRateRawGpsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateRawGpsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateRawGpsRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateRawGpsRequest*>(
               &_SetRateRawGpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SetRateRawGpsRequest& a, SetRateRawGpsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateRawGpsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateRawGpsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateRawGpsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateRawGpsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateRawGpsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateRawGpsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateRawGpsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateRawGpsRequest";
  }
  protected:
  explicit SetRateRawGpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateBatteryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateBatteryRequest) */ {
 public:
  inline SetRateBatteryRequest() : SetRateBatteryRequest(nullptr) {}
  ~SetRateBatteryRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateBatteryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateBatteryRequest(const SetRateBatteryRequest& from);
  SetRateBatteryRequest(SetRateBatteryRequest&& from) noexcept
    : SetRateBatteryRequest() {
    *this = ::std::move(from);
  }

  inline SetRateBatteryRequest& operator=(const SetRateBatteryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateBatteryRequest& operator=(SetRateBatteryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateBatteryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateBatteryRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateBatteryRequest*>(
               &_SetRateBatteryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SetRateBatteryRequest& a, SetRateBatteryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateBatteryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateBatteryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateBatteryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateBatteryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateBatteryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateBatteryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateBatteryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateBatteryRequest";
  }
  protected:
  explicit SetRateBatteryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateBatteryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateBatteryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateBatteryResponse) */ {
 public:
  inline SetRateBatteryResponse() : SetRateBatteryResponse(nullptr) {}
  ~SetRateBatteryResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateBatteryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateBatteryResponse(const SetRateBatteryResponse& from);
  SetRateBatteryResponse(SetRateBatteryResponse&& from) noexcept
    : SetRateBatteryResponse() {
    *this = ::std::move(from);
  }

  inline SetRateBatteryResponse& operator=(const SetRateBatteryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateBatteryResponse& operator=(SetRateBatteryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateBatteryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateBatteryResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateBatteryResponse*>(
               &_SetRateBatteryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(SetRateBatteryResponse& a, SetRateBatteryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateBatteryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateBatteryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateBatteryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateBatteryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateBatteryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateBatteryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateBatteryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateBatteryResponse";
  }
  protected:
  explicit SetRateBatteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateBatteryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateRcStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateRcStatusRequest) */ {
 public:
  inline SetRateRcStatusRequest() : SetRateRcStatusRequest(nullptr) {}
  ~SetRateRcStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateRcStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateRcStatusRequest(const SetRateRcStatusRequest& from);
  SetRateRcStatusRequest(SetRateRcStatusRequest&& from) noexcept
    : SetRateRcStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetRateRcStatusRequest& operator=(const SetRateRcStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateRcStatusRequest& operator=(SetRateRcStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateRcStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateRcStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateRcStatusRequest*>(
               &_SetRateRcStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(SetRateRcStatusRequest& a, SetRateRcStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateRcStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateRcStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateRcStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateRcStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateRcStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateRcStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateRcStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateRcStatusRequest";
  }
  protected:
  explicit SetRateRcStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateRcStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateRcStatusResponse) */ {
 public:
  inline SetRateRcStatusResponse() : SetRateRcStatusResponse(nullptr) {}
  ~SetRateRcStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateRcStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateRcStatusResponse(const SetRateRcStatusResponse& from);
  SetRateRcStatusResponse(SetRateRcStatusResponse&& from) noexcept
    : SetRateRcStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetRateRcStatusResponse& operator=(const SetRateRcStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateRcStatusResponse& operator=(SetRateRcStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateRcStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateRcStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateRcStatusResponse*>(
               &_SetRateRcStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SetRateRcStatusResponse& a, SetRateRcStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateRcStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateRcStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateRcStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateRcStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateRcStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateRcStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateRcStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateRcStatusResponse";
  }
  protected:
  explicit SetRateRcStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateActuatorControlTargetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest) */ {
 public:
  inline SetRateActuatorControlTargetRequest() : SetRateActuatorControlTargetRequest(nullptr) {}
  ~SetRateActuatorControlTargetRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateActuatorControlTargetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateActuatorControlTargetRequest(const SetRateActuatorControlTargetRequest& from);
  SetRateActuatorControlTargetRequest(SetRateActuatorControlTargetRequest&& from) noexcept
    : SetRateActuatorControlTargetRequest() {
    *this = ::std::move(from);
  }

  inline SetRateActuatorControlTargetRequest& operator=(const SetRateActuatorControlTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateActuatorControlTargetRequest& operator=(SetRateActuatorControlTargetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateActuatorControlTargetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateActuatorControlTargetRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateActuatorControlTargetRequest*>(
               &_SetRateActuatorControlTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(SetRateActuatorControlTargetRequest& a, SetRateActuatorControlTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateActuatorControlTargetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateActuatorControlTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateActuatorControlTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateActuatorControlTargetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateActuatorControlTargetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateActuatorControlTargetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateActuatorControlTargetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest";
  }
  protected:
  explicit SetRateActuatorControlTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateActuatorControlTargetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse) */ {
 public:
  inline SetRateActuatorControlTargetResponse() : SetRateActuatorControlTargetResponse(nullptr) {}
  ~SetRateActuatorControlTargetResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateActuatorControlTargetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateActuatorControlTargetResponse(const SetRateActuatorControlTargetResponse& from);
  SetRateActuatorControlTargetResponse(SetRateActuatorControlTargetResponse&& from) noexcept
    : SetRateActuatorControlTargetResponse() {
    *this = ::std::move(from);
  }

  inline SetRateActuatorControlTargetResponse& operator=(const SetRateActuatorControlTargetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateActuatorControlTargetResponse& operator=(SetRateActuatorControlTargetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateActuatorControlTargetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateActuatorControlTargetResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateActuatorControlTargetResponse*>(
               &_SetRateActuatorControlTargetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(SetRateActuatorControlTargetResponse& a, SetRateActuatorControlTargetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateActuatorControlTargetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateActuatorControlTargetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateActuatorControlTargetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateActuatorControlTargetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateActuatorControlTargetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateActuatorControlTargetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateActuatorControlTargetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse";
  }
  protected:
  explicit SetRateActuatorControlTargetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateActuatorOutputStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest) */ {
 public:
  inline SetRateActuatorOutputStatusRequest() : SetRateActuatorOutputStatusRequest(nullptr) {}
  ~SetRateActuatorOutputStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateActuatorOutputStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateActuatorOutputStatusRequest(const SetRateActuatorOutputStatusRequest& from);
  SetRateActuatorOutputStatusRequest(SetRateActuatorOutputStatusRequest&& from) noexcept
    : SetRateActuatorOutputStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetRateActuatorOutputStatusRequest& operator=(const SetRateActuatorOutputStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateActuatorOutputStatusRequest& operator=(SetRateActuatorOutputStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateActuatorOutputStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateActuatorOutputStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateActuatorOutputStatusRequest*>(
               &_SetRateActuatorOutputStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(SetRateActuatorOutputStatusRequest& a, SetRateActuatorOutputStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateActuatorOutputStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateActuatorOutputStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateActuatorOutputStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateActuatorOutputStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateActuatorOutputStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateActuatorOutputStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateActuatorOutputStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest";
  }
  protected:
  explicit SetRateActuatorOutputStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateActuatorOutputStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse) */ {
 public:
  inline SetRateActuatorOutputStatusResponse() : SetRateActuatorOutputStatusResponse(nullptr) {}
  ~SetRateActuatorOutputStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateActuatorOutputStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateActuatorOutputStatusResponse(const SetRateActuatorOutputStatusResponse& from);
  SetRateActuatorOutputStatusResponse(SetRateActuatorOutputStatusResponse&& from) noexcept
    : SetRateActuatorOutputStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetRateActuatorOutputStatusResponse& operator=(const SetRateActuatorOutputStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateActuatorOutputStatusResponse& operator=(SetRateActuatorOutputStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateActuatorOutputStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateActuatorOutputStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateActuatorOutputStatusResponse*>(
               &_SetRateActuatorOutputStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(SetRateActuatorOutputStatusResponse& a, SetRateActuatorOutputStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateActuatorOutputStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateActuatorOutputStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateActuatorOutputStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateActuatorOutputStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateActuatorOutputStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateActuatorOutputStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateActuatorOutputStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse";
  }
  protected:
  explicit SetRateActuatorOutputStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateOdometryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateOdometryRequest) */ {
 public:
  inline SetRateOdometryRequest() : SetRateOdometryRequest(nullptr) {}
  ~SetRateOdometryRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateOdometryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateOdometryRequest(const SetRateOdometryRequest& from);
  SetRateOdometryRequest(SetRateOdometryRequest&& from) noexcept
    : SetRateOdometryRequest() {
    *this = ::std::move(from);
  }

  inline SetRateOdometryRequest& operator=(const SetRateOdometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateOdometryRequest& operator=(SetRateOdometryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateOdometryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateOdometryRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateOdometryRequest*>(
               &_SetRateOdometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SetRateOdometryRequest& a, SetRateOdometryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateOdometryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateOdometryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateOdometryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateOdometryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateOdometryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateOdometryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateOdometryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateOdometryRequest";
  }
  protected:
  explicit SetRateOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateOdometryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateOdometryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateOdometryResponse) */ {
 public:
  inline SetRateOdometryResponse() : SetRateOdometryResponse(nullptr) {}
  ~SetRateOdometryResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateOdometryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateOdometryResponse(const SetRateOdometryResponse& from);
  SetRateOdometryResponse(SetRateOdometryResponse&& from) noexcept
    : SetRateOdometryResponse() {
    *this = ::std::move(from);
  }

  inline SetRateOdometryResponse& operator=(const SetRateOdometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateOdometryResponse& operator=(SetRateOdometryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateOdometryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateOdometryResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateOdometryResponse*>(
               &_SetRateOdometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(SetRateOdometryResponse& a, SetRateOdometryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateOdometryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateOdometryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateOdometryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateOdometryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateOdometryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateOdometryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateOdometryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateOdometryResponse";
  }
  protected:
  explicit SetRateOdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateOdometryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRatePositionVelocityNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest) */ {
 public:
  inline SetRatePositionVelocityNedRequest() : SetRatePositionVelocityNedRequest(nullptr) {}
  ~SetRatePositionVelocityNedRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRatePositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRatePositionVelocityNedRequest(const SetRatePositionVelocityNedRequest& from);
  SetRatePositionVelocityNedRequest(SetRatePositionVelocityNedRequest&& from) noexcept
    : SetRatePositionVelocityNedRequest() {
    *this = ::std::move(from);
  }

  inline SetRatePositionVelocityNedRequest& operator=(const SetRatePositionVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRatePositionVelocityNedRequest& operator=(SetRatePositionVelocityNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRatePositionVelocityNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRatePositionVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const SetRatePositionVelocityNedRequest*>(
               &_SetRatePositionVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SetRatePositionVelocityNedRequest& a, SetRatePositionVelocityNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRatePositionVelocityNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRatePositionVelocityNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRatePositionVelocityNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRatePositionVelocityNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRatePositionVelocityNedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRatePositionVelocityNedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRatePositionVelocityNedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest";
  }
  protected:
  explicit SetRatePositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRatePositionVelocityNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse) */ {
 public:
  inline SetRatePositionVelocityNedResponse() : SetRatePositionVelocityNedResponse(nullptr) {}
  ~SetRatePositionVelocityNedResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRatePositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRatePositionVelocityNedResponse(const SetRatePositionVelocityNedResponse& from);
  SetRatePositionVelocityNedResponse(SetRatePositionVelocityNedResponse&& from) noexcept
    : SetRatePositionVelocityNedResponse() {
    *this = ::std::move(from);
  }

  inline SetRatePositionVelocityNedResponse& operator=(const SetRatePositionVelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRatePositionVelocityNedResponse& operator=(SetRatePositionVelocityNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRatePositionVelocityNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRatePositionVelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const SetRatePositionVelocityNedResponse*>(
               &_SetRatePositionVelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SetRatePositionVelocityNedResponse& a, SetRatePositionVelocityNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRatePositionVelocityNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRatePositionVelocityNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRatePositionVelocityNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRatePositionVelocityNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRatePositionVelocityNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRatePositionVelocityNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRatePositionVelocityNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse";
  }
  protected:
  explicit SetRatePositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateGroundTruthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateGroundTruthRequest) */ {
 public:
  inline SetRateGroundTruthRequest() : SetRateGroundTruthRequest(nullptr) {}
  ~SetRateGroundTruthRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateGroundTruthRequest(const SetRateGroundTruthRequest& from);
  SetRateGroundTruthRequest(SetRateGroundTruthRequest&& from) noexcept
    : SetRateGroundTruthRequest() {
    *this = ::std::move(from);
  }

  inline SetRateGroundTruthRequest& operator=(const SetRateGroundTruthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateGroundTruthRequest& operator=(SetRateGroundTruthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateGroundTruthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateGroundTruthRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateGroundTruthRequest*>(
               &_SetRateGroundTruthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(SetRateGroundTruthRequest& a, SetRateGroundTruthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateGroundTruthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateGroundTruthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateGroundTruthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateGroundTruthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateGroundTruthRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateGroundTruthRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateGroundTruthRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateGroundTruthRequest";
  }
  protected:
  explicit SetRateGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateGroundTruthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateGroundTruthResponse) */ {
 public:
  inline SetRateGroundTruthResponse() : SetRateGroundTruthResponse(nullptr) {}
  ~SetRateGroundTruthResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateGroundTruthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateGroundTruthResponse(const SetRateGroundTruthResponse& from);
  SetRateGroundTruthResponse(SetRateGroundTruthResponse&& from) noexcept
    : SetRateGroundTruthResponse() {
    *this = ::std::move(from);
  }

  inline SetRateGroundTruthResponse& operator=(const SetRateGroundTruthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateGroundTruthResponse& operator=(SetRateGroundTruthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateGroundTruthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateGroundTruthResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateGroundTruthResponse*>(
               &_SetRateGroundTruthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(SetRateGroundTruthResponse& a, SetRateGroundTruthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateGroundTruthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateGroundTruthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateGroundTruthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateGroundTruthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateGroundTruthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateGroundTruthResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateGroundTruthResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateGroundTruthResponse";
  }
  protected:
  explicit SetRateGroundTruthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateFixedwingMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest) */ {
 public:
  inline SetRateFixedwingMetricsRequest() : SetRateFixedwingMetricsRequest(nullptr) {}
  ~SetRateFixedwingMetricsRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateFixedwingMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateFixedwingMetricsRequest(const SetRateFixedwingMetricsRequest& from);
  SetRateFixedwingMetricsRequest(SetRateFixedwingMetricsRequest&& from) noexcept
    : SetRateFixedwingMetricsRequest() {
    *this = ::std::move(from);
  }

  inline SetRateFixedwingMetricsRequest& operator=(const SetRateFixedwingMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateFixedwingMetricsRequest& operator=(SetRateFixedwingMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateFixedwingMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateFixedwingMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateFixedwingMetricsRequest*>(
               &_SetRateFixedwingMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(SetRateFixedwingMetricsRequest& a, SetRateFixedwingMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateFixedwingMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateFixedwingMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateFixedwingMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateFixedwingMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateFixedwingMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateFixedwingMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateFixedwingMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest";
  }
  protected:
  explicit SetRateFixedwingMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateFixedwingMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse) */ {
 public:
  inline SetRateFixedwingMetricsResponse() : SetRateFixedwingMetricsResponse(nullptr) {}
  ~SetRateFixedwingMetricsResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateFixedwingMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateFixedwingMetricsResponse(const SetRateFixedwingMetricsResponse& from);
  SetRateFixedwingMetricsResponse(SetRateFixedwingMetricsResponse&& from) noexcept
    : SetRateFixedwingMetricsResponse() {
    *this = ::std::move(from);
  }

  inline SetRateFixedwingMetricsResponse& operator=(const SetRateFixedwingMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateFixedwingMetricsResponse& operator=(SetRateFixedwingMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateFixedwingMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateFixedwingMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateFixedwingMetricsResponse*>(
               &_SetRateFixedwingMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SetRateFixedwingMetricsResponse& a, SetRateFixedwingMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateFixedwingMetricsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateFixedwingMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateFixedwingMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateFixedwingMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateFixedwingMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateFixedwingMetricsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateFixedwingMetricsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse";
  }
  protected:
  explicit SetRateFixedwingMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateImuRequest) */ {
 public:
  inline SetRateImuRequest() : SetRateImuRequest(nullptr) {}
  ~SetRateImuRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateImuRequest(const SetRateImuRequest& from);
  SetRateImuRequest(SetRateImuRequest&& from) noexcept
    : SetRateImuRequest() {
    *this = ::std::move(from);
  }

  inline SetRateImuRequest& operator=(const SetRateImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateImuRequest& operator=(SetRateImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateImuRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateImuRequest*>(
               &_SetRateImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(SetRateImuRequest& a, SetRateImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateImuRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateImuRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateImuRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateImuRequest";
  }
  protected:
  explicit SetRateImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateImuResponse) */ {
 public:
  inline SetRateImuResponse() : SetRateImuResponse(nullptr) {}
  ~SetRateImuResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateImuResponse(const SetRateImuResponse& from);
  SetRateImuResponse(SetRateImuResponse&& from) noexcept
    : SetRateImuResponse() {
    *this = ::std::move(from);
  }

  inline SetRateImuResponse& operator=(const SetRateImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateImuResponse& operator=(SetRateImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateImuResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateImuResponse*>(
               &_SetRateImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(SetRateImuResponse& a, SetRateImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateImuResponse";
  }
  protected:
  explicit SetRateImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateScaledImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateScaledImuRequest) */ {
 public:
  inline SetRateScaledImuRequest() : SetRateScaledImuRequest(nullptr) {}
  ~SetRateScaledImuRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateScaledImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateScaledImuRequest(const SetRateScaledImuRequest& from);
  SetRateScaledImuRequest(SetRateScaledImuRequest&& from) noexcept
    : SetRateScaledImuRequest() {
    *this = ::std::move(from);
  }

  inline SetRateScaledImuRequest& operator=(const SetRateScaledImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateScaledImuRequest& operator=(SetRateScaledImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateScaledImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateScaledImuRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateScaledImuRequest*>(
               &_SetRateScaledImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(SetRateScaledImuRequest& a, SetRateScaledImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateScaledImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateScaledImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateScaledImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateScaledImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateScaledImuRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateScaledImuRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateScaledImuRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateScaledImuRequest";
  }
  protected:
  explicit SetRateScaledImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateScaledImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateScaledImuResponse) */ {
 public:
  inline SetRateScaledImuResponse() : SetRateScaledImuResponse(nullptr) {}
  ~SetRateScaledImuResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateScaledImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateScaledImuResponse(const SetRateScaledImuResponse& from);
  SetRateScaledImuResponse(SetRateScaledImuResponse&& from) noexcept
    : SetRateScaledImuResponse() {
    *this = ::std::move(from);
  }

  inline SetRateScaledImuResponse& operator=(const SetRateScaledImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateScaledImuResponse& operator=(SetRateScaledImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateScaledImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateScaledImuResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateScaledImuResponse*>(
               &_SetRateScaledImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(SetRateScaledImuResponse& a, SetRateScaledImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateScaledImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateScaledImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateScaledImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateScaledImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateScaledImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateScaledImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateScaledImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateScaledImuResponse";
  }
  protected:
  explicit SetRateScaledImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateRawImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateRawImuRequest) */ {
 public:
  inline SetRateRawImuRequest() : SetRateRawImuRequest(nullptr) {}
  ~SetRateRawImuRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateRawImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateRawImuRequest(const SetRateRawImuRequest& from);
  SetRateRawImuRequest(SetRateRawImuRequest&& from) noexcept
    : SetRateRawImuRequest() {
    *this = ::std::move(from);
  }

  inline SetRateRawImuRequest& operator=(const SetRateRawImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateRawImuRequest& operator=(SetRateRawImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateRawImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateRawImuRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateRawImuRequest*>(
               &_SetRateRawImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(SetRateRawImuRequest& a, SetRateRawImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateRawImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateRawImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateRawImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateRawImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateRawImuRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateRawImuRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateRawImuRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateRawImuRequest";
  }
  protected:
  explicit SetRateRawImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateRawImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateRawImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateRawImuResponse) */ {
 public:
  inline SetRateRawImuResponse() : SetRateRawImuResponse(nullptr) {}
  ~SetRateRawImuResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateRawImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateRawImuResponse(const SetRateRawImuResponse& from);
  SetRateRawImuResponse(SetRateRawImuResponse&& from) noexcept
    : SetRateRawImuResponse() {
    *this = ::std::move(from);
  }

  inline SetRateRawImuResponse& operator=(const SetRateRawImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateRawImuResponse& operator=(SetRateRawImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateRawImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateRawImuResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateRawImuResponse*>(
               &_SetRateRawImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(SetRateRawImuResponse& a, SetRateRawImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateRawImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateRawImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateRawImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateRawImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateRawImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateRawImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateRawImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateRawImuResponse";
  }
  protected:
  explicit SetRateRawImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateRawImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateUnixEpochTimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest) */ {
 public:
  inline SetRateUnixEpochTimeRequest() : SetRateUnixEpochTimeRequest(nullptr) {}
  ~SetRateUnixEpochTimeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateUnixEpochTimeRequest(const SetRateUnixEpochTimeRequest& from);
  SetRateUnixEpochTimeRequest(SetRateUnixEpochTimeRequest&& from) noexcept
    : SetRateUnixEpochTimeRequest() {
    *this = ::std::move(from);
  }

  inline SetRateUnixEpochTimeRequest& operator=(const SetRateUnixEpochTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateUnixEpochTimeRequest& operator=(SetRateUnixEpochTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateUnixEpochTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateUnixEpochTimeRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateUnixEpochTimeRequest*>(
               &_SetRateUnixEpochTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(SetRateUnixEpochTimeRequest& a, SetRateUnixEpochTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateUnixEpochTimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateUnixEpochTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateUnixEpochTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateUnixEpochTimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateUnixEpochTimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateUnixEpochTimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateUnixEpochTimeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest";
  }
  protected:
  explicit SetRateUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateUnixEpochTimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse) */ {
 public:
  inline SetRateUnixEpochTimeResponse() : SetRateUnixEpochTimeResponse(nullptr) {}
  ~SetRateUnixEpochTimeResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateUnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateUnixEpochTimeResponse(const SetRateUnixEpochTimeResponse& from);
  SetRateUnixEpochTimeResponse(SetRateUnixEpochTimeResponse&& from) noexcept
    : SetRateUnixEpochTimeResponse() {
    *this = ::std::move(from);
  }

  inline SetRateUnixEpochTimeResponse& operator=(const SetRateUnixEpochTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateUnixEpochTimeResponse& operator=(SetRateUnixEpochTimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateUnixEpochTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateUnixEpochTimeResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateUnixEpochTimeResponse*>(
               &_SetRateUnixEpochTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(SetRateUnixEpochTimeResponse& a, SetRateUnixEpochTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateUnixEpochTimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateUnixEpochTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateUnixEpochTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateUnixEpochTimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateUnixEpochTimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateUnixEpochTimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateUnixEpochTimeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse";
  }
  protected:
  explicit SetRateUnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateDistanceSensorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest) */ {
 public:
  inline SetRateDistanceSensorRequest() : SetRateDistanceSensorRequest(nullptr) {}
  ~SetRateDistanceSensorRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateDistanceSensorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateDistanceSensorRequest(const SetRateDistanceSensorRequest& from);
  SetRateDistanceSensorRequest(SetRateDistanceSensorRequest&& from) noexcept
    : SetRateDistanceSensorRequest() {
    *this = ::std::move(from);
  }

  inline SetRateDistanceSensorRequest& operator=(const SetRateDistanceSensorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateDistanceSensorRequest& operator=(SetRateDistanceSensorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateDistanceSensorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateDistanceSensorRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateDistanceSensorRequest*>(
               &_SetRateDistanceSensorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SetRateDistanceSensorRequest& a, SetRateDistanceSensorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateDistanceSensorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateDistanceSensorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateDistanceSensorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateDistanceSensorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateDistanceSensorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateDistanceSensorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateDistanceSensorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateDistanceSensorRequest";
  }
  protected:
  explicit SetRateDistanceSensorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SetRateDistanceSensorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse) */ {
 public:
  inline SetRateDistanceSensorResponse() : SetRateDistanceSensorResponse(nullptr) {}
  ~SetRateDistanceSensorResponse() override;
  explicit PROTOBUF_CONSTEXPR SetRateDistanceSensorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateDistanceSensorResponse(const SetRateDistanceSensorResponse& from);
  SetRateDistanceSensorResponse(SetRateDistanceSensorResponse&& from) noexcept
    : SetRateDistanceSensorResponse() {
    *this = ::std::move(from);
  }

  inline SetRateDistanceSensorResponse& operator=(const SetRateDistanceSensorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateDistanceSensorResponse& operator=(SetRateDistanceSensorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateDistanceSensorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateDistanceSensorResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateDistanceSensorResponse*>(
               &_SetRateDistanceSensorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(SetRateDistanceSensorResponse& a, SetRateDistanceSensorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateDistanceSensorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateDistanceSensorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateDistanceSensorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateDistanceSensorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateDistanceSensorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateDistanceSensorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateDistanceSensorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SetRateDistanceSensorResponse";
  }
  protected:
  explicit SetRateDistanceSensorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GetGpsGlobalOriginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest) */ {
 public:
  inline GetGpsGlobalOriginRequest() : GetGpsGlobalOriginRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetGpsGlobalOriginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGpsGlobalOriginRequest(const GetGpsGlobalOriginRequest& from);
  GetGpsGlobalOriginRequest(GetGpsGlobalOriginRequest&& from) noexcept
    : GetGpsGlobalOriginRequest() {
    *this = ::std::move(from);
  }

  inline GetGpsGlobalOriginRequest& operator=(const GetGpsGlobalOriginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGpsGlobalOriginRequest& operator=(GetGpsGlobalOriginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGpsGlobalOriginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGpsGlobalOriginRequest* internal_default_instance() {
    return reinterpret_cast<const GetGpsGlobalOriginRequest*>(
               &_GetGpsGlobalOriginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(GetGpsGlobalOriginRequest& a, GetGpsGlobalOriginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGpsGlobalOriginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGpsGlobalOriginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGpsGlobalOriginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGpsGlobalOriginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetGpsGlobalOriginRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetGpsGlobalOriginRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest";
  }
  protected:
  explicit GetGpsGlobalOriginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GetGpsGlobalOriginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse) */ {
 public:
  inline GetGpsGlobalOriginResponse() : GetGpsGlobalOriginResponse(nullptr) {}
  ~GetGpsGlobalOriginResponse() override;
  explicit PROTOBUF_CONSTEXPR GetGpsGlobalOriginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGpsGlobalOriginResponse(const GetGpsGlobalOriginResponse& from);
  GetGpsGlobalOriginResponse(GetGpsGlobalOriginResponse&& from) noexcept
    : GetGpsGlobalOriginResponse() {
    *this = ::std::move(from);
  }

  inline GetGpsGlobalOriginResponse& operator=(const GetGpsGlobalOriginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGpsGlobalOriginResponse& operator=(GetGpsGlobalOriginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGpsGlobalOriginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGpsGlobalOriginResponse* internal_default_instance() {
    return reinterpret_cast<const GetGpsGlobalOriginResponse*>(
               &_GetGpsGlobalOriginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(GetGpsGlobalOriginResponse& a, GetGpsGlobalOriginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGpsGlobalOriginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGpsGlobalOriginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGpsGlobalOriginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGpsGlobalOriginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGpsGlobalOriginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetGpsGlobalOriginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGpsGlobalOriginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse";
  }
  protected:
  explicit GetGpsGlobalOriginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryResultFieldNumber = 1,
    kGpsGlobalOriginFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  bool has_telemetry_result() const;
  private:
  bool _internal_has_telemetry_result() const;
  public:
  void clear_telemetry_result();
  const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::TelemetryResult* release_telemetry_result();
  ::mavsdk::rpc::telemetry::TelemetryResult* mutable_telemetry_result();
  void set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  private:
  const ::mavsdk::rpc::telemetry::TelemetryResult& _internal_telemetry_result() const;
  ::mavsdk::rpc::telemetry::TelemetryResult* _internal_mutable_telemetry_result();
  public:
  void unsafe_arena_set_allocated_telemetry_result(
      ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result);
  ::mavsdk::rpc::telemetry::TelemetryResult* unsafe_arena_release_telemetry_result();

  // .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
  bool has_gps_global_origin() const;
  private:
  bool _internal_has_gps_global_origin() const;
  public:
  void clear_gps_global_origin();
  const ::mavsdk::rpc::telemetry::GpsGlobalOrigin& gps_global_origin() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::GpsGlobalOrigin* release_gps_global_origin();
  ::mavsdk::rpc::telemetry::GpsGlobalOrigin* mutable_gps_global_origin();
  void set_allocated_gps_global_origin(::mavsdk::rpc::telemetry::GpsGlobalOrigin* gps_global_origin);
  private:
  const ::mavsdk::rpc::telemetry::GpsGlobalOrigin& _internal_gps_global_origin() const;
  ::mavsdk::rpc::telemetry::GpsGlobalOrigin* _internal_mutable_gps_global_origin();
  public:
  void unsafe_arena_set_allocated_gps_global_origin(
      ::mavsdk::rpc::telemetry::GpsGlobalOrigin* gps_global_origin);
  ::mavsdk::rpc::telemetry::GpsGlobalOrigin* unsafe_arena_release_gps_global_origin();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result_;
  ::mavsdk::rpc::telemetry::GpsGlobalOrigin* gps_global_origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float relative_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Heading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Heading) */ {
 public:
  inline Heading() : Heading(nullptr) {}
  ~Heading() override;
  explicit PROTOBUF_CONSTEXPR Heading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heading(const Heading& from);
  Heading(Heading&& from) noexcept
    : Heading() {
    *this = ::std::move(from);
  }

  inline Heading& operator=(const Heading& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heading& operator=(Heading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heading& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heading* internal_default_instance() {
    return reinterpret_cast<const Heading*>(
               &_Heading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(Heading& a, Heading& b) {
    a.Swap(&b);
  }
  inline void Swap(Heading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Heading& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Heading";
  }
  protected:
  explicit Heading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingDegFieldNumber = 1,
  };
  // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_heading_deg();
  double heading_deg() const;
  void set_heading_deg(double value);
  private:
  double _internal_heading_deg() const;
  void _internal_set_heading_deg(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Heading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double heading_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Quaternion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kTimestampUsFieldNumber = 5,
  };
  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // uint64 timestamp_us = 5;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float w_;
  float x_;
  float y_;
  float z_;
  uint64_t timestamp_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class EulerAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.EulerAngle) */ {
 public:
  inline EulerAngle() : EulerAngle(nullptr) {}
  ~EulerAngle() override;
  explicit PROTOBUF_CONSTEXPR EulerAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EulerAngle(const EulerAngle& from);
  EulerAngle(EulerAngle&& from) noexcept
    : EulerAngle() {
    *this = ::std::move(from);
  }

  inline EulerAngle& operator=(const EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerAngle& operator=(EulerAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EulerAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const EulerAngle* internal_default_instance() {
    return reinterpret_cast<const EulerAngle*>(
               &_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(EulerAngle& a, EulerAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerAngle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EulerAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EulerAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EulerAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EulerAngle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerAngle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.EulerAngle";
  }
  protected:
  explicit EulerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kTimestampUsFieldNumber = 4,
    kYawDegFieldNumber = 3,
  };
  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // uint64 timestamp_us = 4;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.EulerAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_deg_;
  float pitch_deg_;
  uint64_t timestamp_us_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AngularVelocityBody) */ {
 public:
  inline AngularVelocityBody() : AngularVelocityBody(nullptr) {}
  ~AngularVelocityBody() override;
  explicit PROTOBUF_CONSTEXPR AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AngularVelocityBody(const AngularVelocityBody& from);
  AngularVelocityBody(AngularVelocityBody&& from) noexcept
    : AngularVelocityBody() {
    *this = ::std::move(from);
  }

  inline AngularVelocityBody& operator=(const AngularVelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityBody& operator=(AngularVelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityBody* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityBody*>(
               &_AngularVelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(AngularVelocityBody& a, AngularVelocityBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocityBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngularVelocityBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AngularVelocityBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AngularVelocityBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularVelocityBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AngularVelocityBody";
  }
  protected:
  explicit AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRadSFieldNumber = 1,
    kPitchRadSFieldNumber = 2,
    kYawRadSFieldNumber = 3,
  };
  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_rad_s();
  float roll_rad_s() const;
  void set_roll_rad_s(float value);
  private:
  float _internal_roll_rad_s() const;
  void _internal_set_roll_rad_s(float value);
  public:

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_rad_s();
  float pitch_rad_s() const;
  void set_pitch_rad_s(float value);
  private:
  float _internal_pitch_rad_s() const;
  void _internal_set_pitch_rad_s(float value);
  public:

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_rad_s();
  float yaw_rad_s() const;
  void set_yaw_rad_s(float value);
  private:
  float _internal_yaw_rad_s() const;
  void _internal_set_yaw_rad_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AngularVelocityBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_rad_s_;
  float pitch_rad_s_;
  float yaw_rad_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GpsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GpsInfo) */ {
 public:
  inline GpsInfo() : GpsInfo(nullptr) {}
  ~GpsInfo() override;
  explicit PROTOBUF_CONSTEXPR GpsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpsInfo(const GpsInfo& from);
  GpsInfo(GpsInfo&& from) noexcept
    : GpsInfo() {
    *this = ::std::move(from);
  }

  inline GpsInfo& operator=(const GpsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsInfo& operator=(GpsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpsInfo* internal_default_instance() {
    return reinterpret_cast<const GpsInfo*>(
               &_GpsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(GpsInfo& a, GpsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GpsInfo";
  }
  protected:
  explicit GpsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumSatellitesFieldNumber = 1,
    kFixTypeFieldNumber = 2,
  };
  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_num_satellites();
  int32_t num_satellites() const;
  void set_num_satellites(int32_t value);
  private:
  int32_t _internal_num_satellites() const;
  void _internal_set_num_satellites(int32_t value);
  public:

  // .mavsdk.rpc.telemetry.FixType fix_type = 2;
  void clear_fix_type();
  ::mavsdk::rpc::telemetry::FixType fix_type() const;
  void set_fix_type(::mavsdk::rpc::telemetry::FixType value);
  private:
  ::mavsdk::rpc::telemetry::FixType _internal_fix_type() const;
  void _internal_set_fix_type(::mavsdk::rpc::telemetry::FixType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GpsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t num_satellites_;
  int fix_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class RawGps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.RawGps) */ {
 public:
  inline RawGps() : RawGps(nullptr) {}
  ~RawGps() override;
  explicit PROTOBUF_CONSTEXPR RawGps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawGps(const RawGps& from);
  RawGps(RawGps&& from) noexcept
    : RawGps() {
    *this = ::std::move(from);
  }

  inline RawGps& operator=(const RawGps& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawGps& operator=(RawGps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawGps& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawGps* internal_default_instance() {
    return reinterpret_cast<const RawGps*>(
               &_RawGps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(RawGps& a, RawGps& b) {
    a.Swap(&b);
  }
  inline void Swap(RawGps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawGps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawGps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RawGps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawGps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RawGps& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawGps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.RawGps";
  }
  protected:
  explicit RawGps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampUsFieldNumber = 1,
    kLatitudeDegFieldNumber = 2,
    kLongitudeDegFieldNumber = 3,
    kAbsoluteAltitudeMFieldNumber = 4,
    kHdopFieldNumber = 5,
    kVdopFieldNumber = 6,
    kVelocityMSFieldNumber = 7,
    kCogDegFieldNumber = 8,
    kAltitudeEllipsoidMFieldNumber = 9,
    kHorizontalUncertaintyMFieldNumber = 10,
    kVerticalUncertaintyMFieldNumber = 11,
    kVelocityUncertaintyMSFieldNumber = 12,
    kHeadingUncertaintyDegFieldNumber = 13,
    kYawDegFieldNumber = 14,
  };
  // uint64 timestamp_us = 1;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // double latitude_deg = 2;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 3;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 4;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float hdop = 5;
  void clear_hdop();
  float hdop() const;
  void set_hdop(float value);
  private:
  float _internal_hdop() const;
  void _internal_set_hdop(float value);
  public:

  // float vdop = 6;
  void clear_vdop();
  float vdop() const;
  void set_vdop(float value);
  private:
  float _internal_vdop() const;
  void _internal_set_vdop(float value);
  public:

  // float velocity_m_s = 7;
  void clear_velocity_m_s();
  float velocity_m_s() const;
  void set_velocity_m_s(float value);
  private:
  float _internal_velocity_m_s() const;
  void _internal_set_velocity_m_s(float value);
  public:

  // float cog_deg = 8;
  void clear_cog_deg();
  float cog_deg() const;
  void set_cog_deg(float value);
  private:
  float _internal_cog_deg() const;
  void _internal_set_cog_deg(float value);
  public:

  // float altitude_ellipsoid_m = 9;
  void clear_altitude_ellipsoid_m();
  float altitude_ellipsoid_m() const;
  void set_altitude_ellipsoid_m(float value);
  private:
  float _internal_altitude_ellipsoid_m() const;
  void _internal_set_altitude_ellipsoid_m(float value);
  public:

  // float horizontal_uncertainty_m = 10;
  void clear_horizontal_uncertainty_m();
  float horizontal_uncertainty_m() const;
  void set_horizontal_uncertainty_m(float value);
  private:
  float _internal_horizontal_uncertainty_m() const;
  void _internal_set_horizontal_uncertainty_m(float value);
  public:

  // float vertical_uncertainty_m = 11;
  void clear_vertical_uncertainty_m();
  float vertical_uncertainty_m() const;
  void set_vertical_uncertainty_m(float value);
  private:
  float _internal_vertical_uncertainty_m() const;
  void _internal_set_vertical_uncertainty_m(float value);
  public:

  // float velocity_uncertainty_m_s = 12;
  void clear_velocity_uncertainty_m_s();
  float velocity_uncertainty_m_s() const;
  void set_velocity_uncertainty_m_s(float value);
  private:
  float _internal_velocity_uncertainty_m_s() const;
  void _internal_set_velocity_uncertainty_m_s(float value);
  public:

  // float heading_uncertainty_deg = 13;
  void clear_heading_uncertainty_deg();
  float heading_uncertainty_deg() const;
  void set_heading_uncertainty_deg(float value);
  private:
  float _internal_heading_uncertainty_deg() const;
  void _internal_set_heading_uncertainty_deg(float value);
  public:

  // float yaw_deg = 14;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.RawGps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t timestamp_us_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float hdop_;
  float vdop_;
  float velocity_m_s_;
  float cog_deg_;
  float altitude_ellipsoid_m_;
  float horizontal_uncertainty_m_;
  float vertical_uncertainty_m_;
  float velocity_uncertainty_m_s_;
  float heading_uncertainty_deg_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Battery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Battery) */ {
 public:
  inline Battery() : Battery(nullptr) {}
  ~Battery() override;
  explicit PROTOBUF_CONSTEXPR Battery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Battery(const Battery& from);
  Battery(Battery&& from) noexcept
    : Battery() {
    *this = ::std::move(from);
  }

  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Battery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
               &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(Battery& a, Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(Battery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Battery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Battery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Battery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Battery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Battery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Battery";
  }
  protected:
  explicit Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoltageVFieldNumber = 1,
    kRemainingPercentFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_voltage_v();
  float voltage_v() const;
  void set_voltage_v(float value);
  private:
  float _internal_voltage_v() const;
  void _internal_set_voltage_v(float value);
  public:

  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_remaining_percent();
  float remaining_percent() const;
  void set_remaining_percent(float value);
  private:
  float _internal_remaining_percent() const;
  void _internal_set_remaining_percent(float value);
  public:

  // uint32 id = 3 [(.mavsdk.options.default_value) = "0"];
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Battery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float voltage_v_;
  float remaining_percent_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Health final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Health) */ {
 public:
  inline Health() : Health(nullptr) {}
  ~Health() override;
  explicit PROTOBUF_CONSTEXPR Health(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Health(const Health& from);
  Health(Health&& from) noexcept
    : Health() {
    *this = ::std::move(from);
  }

  inline Health& operator=(const Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline Health& operator=(Health&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Health& default_instance() {
    return *internal_default_instance();
  }
  static inline const Health* internal_default_instance() {
    return reinterpret_cast<const Health*>(
               &_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(Health& a, Health& b) {
    a.Swap(&b);
  }
  inline void Swap(Health* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Health* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Health>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Health& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Health& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Health* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Health";
  }
  protected:
  explicit Health(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsGyrometerCalibrationOkFieldNumber = 1,
    kIsAccelerometerCalibrationOkFieldNumber = 2,
    kIsMagnetometerCalibrationOkFieldNumber = 3,
    kIsLocalPositionOkFieldNumber = 5,
    kIsGlobalPositionOkFieldNumber = 6,
    kIsHomePositionOkFieldNumber = 7,
    kIsArmableFieldNumber = 8,
  };
  // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
  void clear_is_gyrometer_calibration_ok();
  bool is_gyrometer_calibration_ok() const;
  void set_is_gyrometer_calibration_ok(bool value);
  private:
  bool _internal_is_gyrometer_calibration_ok() const;
  void _internal_set_is_gyrometer_calibration_ok(bool value);
  public:

  // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
  void clear_is_accelerometer_calibration_ok();
  bool is_accelerometer_calibration_ok() const;
  void set_is_accelerometer_calibration_ok(bool value);
  private:
  bool _internal_is_accelerometer_calibration_ok() const;
  void _internal_set_is_accelerometer_calibration_ok(bool value);
  public:

  // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
  void clear_is_magnetometer_calibration_ok();
  bool is_magnetometer_calibration_ok() const;
  void set_is_magnetometer_calibration_ok(bool value);
  private:
  bool _internal_is_magnetometer_calibration_ok() const;
  void _internal_set_is_magnetometer_calibration_ok(bool value);
  public:

  // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
  void clear_is_local_position_ok();
  bool is_local_position_ok() const;
  void set_is_local_position_ok(bool value);
  private:
  bool _internal_is_local_position_ok() const;
  void _internal_set_is_local_position_ok(bool value);
  public:

  // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
  void clear_is_global_position_ok();
  bool is_global_position_ok() const;
  void set_is_global_position_ok(bool value);
  private:
  bool _internal_is_global_position_ok() const;
  void _internal_set_is_global_position_ok(bool value);
  public:

  // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
  void clear_is_home_position_ok();
  bool is_home_position_ok() const;
  void set_is_home_position_ok(bool value);
  private:
  bool _internal_is_home_position_ok() const;
  void _internal_set_is_home_position_ok(bool value);
  public:

  // bool is_armable = 8 [(.mavsdk.options.default_value) = "false"];
  void clear_is_armable();
  bool is_armable() const;
  void set_is_armable(bool value);
  private:
  bool _internal_is_armable() const;
  void _internal_set_is_armable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Health)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_gyrometer_calibration_ok_;
  bool is_accelerometer_calibration_ok_;
  bool is_magnetometer_calibration_ok_;
  bool is_local_position_ok_;
  bool is_global_position_ok_;
  bool is_home_position_ok_;
  bool is_armable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class RcStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.RcStatus) */ {
 public:
  inline RcStatus() : RcStatus(nullptr) {}
  ~RcStatus() override;
  explicit PROTOBUF_CONSTEXPR RcStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcStatus(const RcStatus& from);
  RcStatus(RcStatus&& from) noexcept
    : RcStatus() {
    *this = ::std::move(from);
  }

  inline RcStatus& operator=(const RcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcStatus& operator=(RcStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcStatus* internal_default_instance() {
    return reinterpret_cast<const RcStatus*>(
               &_RcStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(RcStatus& a, RcStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RcStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RcStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.RcStatus";
  }
  protected:
  explicit RcStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWasAvailableOnceFieldNumber = 1,
    kIsAvailableFieldNumber = 2,
    kSignalStrengthPercentFieldNumber = 3,
  };
  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  void clear_was_available_once();
  bool was_available_once() const;
  void set_was_available_once(bool value);
  private:
  bool _internal_was_available_once() const;
  void _internal_set_was_available_once(bool value);
  public:

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  void clear_is_available();
  bool is_available() const;
  void set_is_available(bool value);
  private:
  bool _internal_is_available() const;
  void _internal_set_is_available(bool value);
  public:

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_signal_strength_percent();
  float signal_strength_percent() const;
  void set_signal_strength_percent(float value);
  private:
  float _internal_signal_strength_percent() const;
  void _internal_set_signal_strength_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.RcStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool was_available_once_;
  bool is_available_;
  float signal_strength_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class StatusText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.StatusText) */ {
 public:
  inline StatusText() : StatusText(nullptr) {}
  ~StatusText() override;
  explicit PROTOBUF_CONSTEXPR StatusText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusText(const StatusText& from);
  StatusText(StatusText&& from) noexcept
    : StatusText() {
    *this = ::std::move(from);
  }

  inline StatusText& operator=(const StatusText& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusText& operator=(StatusText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusText& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusText* internal_default_instance() {
    return reinterpret_cast<const StatusText*>(
               &_StatusText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(StatusText& a, StatusText& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusText& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.StatusText";
  }
  protected:
  explicit StatusText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .mavsdk.rpc.telemetry.StatusTextType type = 1;
  void clear_type();
  ::mavsdk::rpc::telemetry::StatusTextType type() const;
  void set_type(::mavsdk::rpc::telemetry::StatusTextType value);
  private:
  ::mavsdk::rpc::telemetry::StatusTextType _internal_type() const;
  void _internal_set_type(::mavsdk::rpc::telemetry::StatusTextType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.StatusText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControlTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ActuatorControlTarget) */ {
 public:
  inline ActuatorControlTarget() : ActuatorControlTarget(nullptr) {}
  ~ActuatorControlTarget() override;
  explicit PROTOBUF_CONSTEXPR ActuatorControlTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorControlTarget(const ActuatorControlTarget& from);
  ActuatorControlTarget(ActuatorControlTarget&& from) noexcept
    : ActuatorControlTarget() {
    *this = ::std::move(from);
  }

  inline ActuatorControlTarget& operator=(const ActuatorControlTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControlTarget& operator=(ActuatorControlTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorControlTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorControlTarget* internal_default_instance() {
    return reinterpret_cast<const ActuatorControlTarget*>(
               &_ActuatorControlTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(ActuatorControlTarget& a, ActuatorControlTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControlTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorControlTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorControlTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorControlTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorControlTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorControlTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControlTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ActuatorControlTarget";
  }
  protected:
  explicit ActuatorControlTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlsFieldNumber = 2,
    kGroupFieldNumber = 1,
  };
  // repeated float controls = 2;
  int controls_size() const;
  private:
  int _internal_controls_size() const;
  public:
  void clear_controls();
  private:
  float _internal_controls(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_controls() const;
  void _internal_add_controls(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_controls();
  public:
  float controls(int index) const;
  void set_controls(int index, float value);
  void add_controls(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      controls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_controls();

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_group();
  int32_t group() const;
  void set_group(int32_t value);
  private:
  int32_t _internal_group() const;
  void _internal_set_group(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ActuatorControlTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > controls_;
  int32_t group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ActuatorOutputStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ActuatorOutputStatus) */ {
 public:
  inline ActuatorOutputStatus() : ActuatorOutputStatus(nullptr) {}
  ~ActuatorOutputStatus() override;
  explicit PROTOBUF_CONSTEXPR ActuatorOutputStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorOutputStatus(const ActuatorOutputStatus& from);
  ActuatorOutputStatus(ActuatorOutputStatus&& from) noexcept
    : ActuatorOutputStatus() {
    *this = ::std::move(from);
  }

  inline ActuatorOutputStatus& operator=(const ActuatorOutputStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorOutputStatus& operator=(ActuatorOutputStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorOutputStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorOutputStatus* internal_default_instance() {
    return reinterpret_cast<const ActuatorOutputStatus*>(
               &_ActuatorOutputStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(ActuatorOutputStatus& a, ActuatorOutputStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorOutputStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorOutputStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorOutputStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorOutputStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorOutputStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorOutputStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorOutputStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ActuatorOutputStatus";
  }
  protected:
  explicit ActuatorOutputStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorFieldNumber = 2,
    kActiveFieldNumber = 1,
  };
  // repeated float actuator = 2;
  int actuator_size() const;
  private:
  int _internal_actuator_size() const;
  public:
  void clear_actuator();
  private:
  float _internal_actuator(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_actuator() const;
  void _internal_add_actuator(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_actuator();
  public:
  float actuator(int index) const;
  void set_actuator(int index, float value);
  void add_actuator(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      actuator() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_actuator();

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_active();
  uint32_t active() const;
  void set_active(uint32_t value);
  private:
  uint32_t _internal_active() const;
  void _internal_set_active(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ActuatorOutputStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > actuator_;
  uint32_t active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Covariance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Covariance) */ {
 public:
  inline Covariance() : Covariance(nullptr) {}
  ~Covariance() override;
  explicit PROTOBUF_CONSTEXPR Covariance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Covariance(const Covariance& from);
  Covariance(Covariance&& from) noexcept
    : Covariance() {
    *this = ::std::move(from);
  }

  inline Covariance& operator=(const Covariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Covariance& operator=(Covariance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Covariance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Covariance* internal_default_instance() {
    return reinterpret_cast<const Covariance*>(
               &_Covariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(Covariance& a, Covariance& b) {
    a.Swap(&b);
  }
  inline void Swap(Covariance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Covariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Covariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Covariance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Covariance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Covariance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Covariance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Covariance";
  }
  protected:
  explicit Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceMatrixFieldNumber = 1,
  };
  // repeated float covariance_matrix = 1;
  int covariance_matrix_size() const;
  private:
  int _internal_covariance_matrix_size() const;
  public:
  void clear_covariance_matrix();
  private:
  float _internal_covariance_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_covariance_matrix() const;
  void _internal_add_covariance_matrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_covariance_matrix();
  public:
  float covariance_matrix(int index) const;
  void set_covariance_matrix(int index, float value);
  void add_covariance_matrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      covariance_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_covariance_matrix();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Covariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > covariance_matrix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class VelocityBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.VelocityBody) */ {
 public:
  inline VelocityBody() : VelocityBody(nullptr) {}
  ~VelocityBody() override;
  explicit PROTOBUF_CONSTEXPR VelocityBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelocityBody(const VelocityBody& from);
  VelocityBody(VelocityBody&& from) noexcept
    : VelocityBody() {
    *this = ::std::move(from);
  }

  inline VelocityBody& operator=(const VelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityBody& operator=(VelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityBody* internal_default_instance() {
    return reinterpret_cast<const VelocityBody*>(
               &_VelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(VelocityBody& a, VelocityBody& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelocityBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelocityBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelocityBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.VelocityBody";
  }
  protected:
  explicit VelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMSFieldNumber = 1,
    kYMSFieldNumber = 2,
    kZMSFieldNumber = 3,
  };
  // float x_m_s = 1;
  void clear_x_m_s();
  float x_m_s() const;
  void set_x_m_s(float value);
  private:
  float _internal_x_m_s() const;
  void _internal_set_x_m_s(float value);
  public:

  // float y_m_s = 2;
  void clear_y_m_s();
  float y_m_s() const;
  void set_y_m_s(float value);
  private:
  float _internal_y_m_s() const;
  void _internal_set_y_m_s(float value);
  public:

  // float z_m_s = 3;
  void clear_z_m_s();
  float z_m_s() const;
  void set_z_m_s(float value);
  private:
  float _internal_z_m_s() const;
  void _internal_set_z_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.VelocityBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_m_s_;
  float y_m_s_;
  float z_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class PositionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.PositionBody) */ {
 public:
  inline PositionBody() : PositionBody(nullptr) {}
  ~PositionBody() override;
  explicit PROTOBUF_CONSTEXPR PositionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionBody(const PositionBody& from);
  PositionBody(PositionBody&& from) noexcept
    : PositionBody() {
    *this = ::std::move(from);
  }

  inline PositionBody& operator=(const PositionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionBody& operator=(PositionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionBody* internal_default_instance() {
    return reinterpret_cast<const PositionBody*>(
               &_PositionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(PositionBody& a, PositionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.PositionBody";
  }
  protected:
  explicit PositionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMFieldNumber = 1,
    kYMFieldNumber = 2,
    kZMFieldNumber = 3,
  };
  // float x_m = 1;
  void clear_x_m();
  float x_m() const;
  void set_x_m(float value);
  private:
  float _internal_x_m() const;
  void _internal_set_x_m(float value);
  public:

  // float y_m = 2;
  void clear_y_m();
  float y_m() const;
  void set_y_m(float value);
  private:
  float _internal_y_m() const;
  void _internal_set_y_m(float value);
  public:

  // float z_m = 3;
  void clear_z_m();
  float z_m() const;
  void set_z_m(float value);
  private:
  float _internal_z_m() const;
  void _internal_set_z_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.PositionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_m_;
  float y_m_;
  float z_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Odometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() override;
  explicit PROTOBUF_CONSTEXPR Odometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Odometry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Odometry_MavFrame MavFrame;
  static constexpr MavFrame MAV_FRAME_UNDEF =
    Odometry_MavFrame_MAV_FRAME_UNDEF;
  static constexpr MavFrame MAV_FRAME_BODY_NED =
    Odometry_MavFrame_MAV_FRAME_BODY_NED;
  static constexpr MavFrame MAV_FRAME_VISION_NED =
    Odometry_MavFrame_MAV_FRAME_VISION_NED;
  static constexpr MavFrame MAV_FRAME_ESTIM_NED =
    Odometry_MavFrame_MAV_FRAME_ESTIM_NED;
  static inline bool MavFrame_IsValid(int value) {
    return Odometry_MavFrame_IsValid(value);
  }
  static constexpr MavFrame MavFrame_MIN =
    Odometry_MavFrame_MavFrame_MIN;
  static constexpr MavFrame MavFrame_MAX =
    Odometry_MavFrame_MavFrame_MAX;
  static constexpr int MavFrame_ARRAYSIZE =
    Odometry_MavFrame_MavFrame_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MavFrame_descriptor() {
    return Odometry_MavFrame_descriptor();
  }
  template<typename T>
  static inline const std::string& MavFrame_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MavFrame>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MavFrame_Name.");
    return Odometry_MavFrame_Name(enum_t_value);
  }
  static inline bool MavFrame_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MavFrame* value) {
    return Odometry_MavFrame_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionBodyFieldNumber = 4,
    kQFieldNumber = 5,
    kVelocityBodyFieldNumber = 6,
    kAngularVelocityBodyFieldNumber = 7,
    kPoseCovarianceFieldNumber = 8,
    kVelocityCovarianceFieldNumber = 9,
    kTimeUsecFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kChildFrameIdFieldNumber = 3,
  };
  // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
  bool has_position_body() const;
  private:
  bool _internal_has_position_body() const;
  public:
  void clear_position_body();
  const ::mavsdk::rpc::telemetry::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::PositionBody* release_position_body();
  ::mavsdk::rpc::telemetry::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::telemetry::PositionBody* position_body);
  private:
  const ::mavsdk::rpc::telemetry::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::telemetry::PositionBody* _internal_mutable_position_body();
  public:
  void unsafe_arena_set_allocated_position_body(
      ::mavsdk::rpc::telemetry::PositionBody* position_body);
  ::mavsdk::rpc::telemetry::PositionBody* unsafe_arena_release_position_body();

  // .mavsdk.rpc.telemetry.Quaternion q = 5;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::mavsdk::rpc::telemetry::Quaternion& q() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Quaternion* release_q();
  ::mavsdk::rpc::telemetry::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::telemetry::Quaternion* q);
  private:
  const ::mavsdk::rpc::telemetry::Quaternion& _internal_q() const;
  ::mavsdk::rpc::telemetry::Quaternion* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::mavsdk::rpc::telemetry::Quaternion* q);
  ::mavsdk::rpc::telemetry::Quaternion* unsafe_arena_release_q();

  // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
  bool has_velocity_body() const;
  private:
  bool _internal_has_velocity_body() const;
  public:
  void clear_velocity_body();
  const ::mavsdk::rpc::telemetry::VelocityBody& velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::VelocityBody* release_velocity_body();
  ::mavsdk::rpc::telemetry::VelocityBody* mutable_velocity_body();
  void set_allocated_velocity_body(::mavsdk::rpc::telemetry::VelocityBody* velocity_body);
  private:
  const ::mavsdk::rpc::telemetry::VelocityBody& _internal_velocity_body() const;
  ::mavsdk::rpc::telemetry::VelocityBody* _internal_mutable_velocity_body();
  public:
  void unsafe_arena_set_allocated_velocity_body(
      ::mavsdk::rpc::telemetry::VelocityBody* velocity_body);
  ::mavsdk::rpc::telemetry::VelocityBody* unsafe_arena_release_velocity_body();

  // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
  bool has_angular_velocity_body() const;
  private:
  bool _internal_has_angular_velocity_body() const;
  public:
  void clear_angular_velocity_body();
  const ::mavsdk::rpc::telemetry::AngularVelocityBody& angular_velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::AngularVelocityBody* release_angular_velocity_body();
  ::mavsdk::rpc::telemetry::AngularVelocityBody* mutable_angular_velocity_body();
  void set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry::AngularVelocityBody* angular_velocity_body);
  private:
  const ::mavsdk::rpc::telemetry::AngularVelocityBody& _internal_angular_velocity_body() const;
  ::mavsdk::rpc::telemetry::AngularVelocityBody* _internal_mutable_angular_velocity_body();
  public:
  void unsafe_arena_set_allocated_angular_velocity_body(
      ::mavsdk::rpc::telemetry::AngularVelocityBody* angular_velocity_body);
  ::mavsdk::rpc::telemetry::AngularVelocityBody* unsafe_arena_release_angular_velocity_body();

  // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
  bool has_pose_covariance() const;
  private:
  bool _internal_has_pose_covariance() const;
  public:
  void clear_pose_covariance();
  const ::mavsdk::rpc::telemetry::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Covariance* release_pose_covariance();
  ::mavsdk::rpc::telemetry::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::telemetry::Covariance* pose_covariance);
  private:
  const ::mavsdk::rpc::telemetry::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::telemetry::Covariance* _internal_mutable_pose_covariance();
  public:
  void unsafe_arena_set_allocated_pose_covariance(
      ::mavsdk::rpc::telemetry::Covariance* pose_covariance);
  ::mavsdk::rpc::telemetry::Covariance* unsafe_arena_release_pose_covariance();

  // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
  bool has_velocity_covariance() const;
  private:
  bool _internal_has_velocity_covariance() const;
  public:
  void clear_velocity_covariance();
  const ::mavsdk::rpc::telemetry::Covariance& velocity_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::Covariance* release_velocity_covariance();
  ::mavsdk::rpc::telemetry::Covariance* mutable_velocity_covariance();
  void set_allocated_velocity_covariance(::mavsdk::rpc::telemetry::Covariance* velocity_covariance);
  private:
  const ::mavsdk::rpc::telemetry::Covariance& _internal_velocity_covariance() const;
  ::mavsdk::rpc::telemetry::Covariance* _internal_mutable_velocity_covariance();
  public:
  void unsafe_arena_set_allocated_velocity_covariance(
      ::mavsdk::rpc::telemetry::Covariance* velocity_covariance);
  ::mavsdk::rpc::telemetry::Covariance* unsafe_arena_release_velocity_covariance();

  // uint64 time_usec = 1;
  void clear_time_usec();
  uint64_t time_usec() const;
  void set_time_usec(uint64_t value);
  private:
  uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(uint64_t value);
  public:

  // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
  void clear_frame_id();
  ::mavsdk::rpc::telemetry::Odometry_MavFrame frame_id() const;
  void set_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value);
  private:
  ::mavsdk::rpc::telemetry::Odometry_MavFrame _internal_frame_id() const;
  void _internal_set_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value);
  public:

  // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
  void clear_child_frame_id();
  ::mavsdk::rpc::telemetry::Odometry_MavFrame child_frame_id() const;
  void set_child_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value);
  private:
  ::mavsdk::rpc::telemetry::Odometry_MavFrame _internal_child_frame_id() const;
  void _internal_set_child_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Odometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::PositionBody* position_body_;
  ::mavsdk::rpc::telemetry::Quaternion* q_;
  ::mavsdk::rpc::telemetry::VelocityBody* velocity_body_;
  ::mavsdk::rpc::telemetry::AngularVelocityBody* angular_velocity_body_;
  ::mavsdk::rpc::telemetry::Covariance* pose_covariance_;
  ::mavsdk::rpc::telemetry::Covariance* velocity_covariance_;
  uint64_t time_usec_;
  int frame_id_;
  int child_frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class DistanceSensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.DistanceSensor) */ {
 public:
  inline DistanceSensor() : DistanceSensor(nullptr) {}
  ~DistanceSensor() override;
  explicit PROTOBUF_CONSTEXPR DistanceSensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceSensor(const DistanceSensor& from);
  DistanceSensor(DistanceSensor&& from) noexcept
    : DistanceSensor() {
    *this = ::std::move(from);
  }

  inline DistanceSensor& operator=(const DistanceSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceSensor& operator=(DistanceSensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceSensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceSensor* internal_default_instance() {
    return reinterpret_cast<const DistanceSensor*>(
               &_DistanceSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(DistanceSensor& a, DistanceSensor& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceSensor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceSensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistanceSensor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceSensor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DistanceSensor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceSensor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.DistanceSensor";
  }
  protected:
  explicit DistanceSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinimumDistanceMFieldNumber = 1,
    kMaximumDistanceMFieldNumber = 2,
    kCurrentDistanceMFieldNumber = 3,
  };
  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_minimum_distance_m();
  float minimum_distance_m() const;
  void set_minimum_distance_m(float value);
  private:
  float _internal_minimum_distance_m() const;
  void _internal_set_minimum_distance_m(float value);
  public:

  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_maximum_distance_m();
  float maximum_distance_m() const;
  void set_maximum_distance_m(float value);
  private:
  float _internal_maximum_distance_m() const;
  void _internal_set_maximum_distance_m(float value);
  public:

  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_current_distance_m();
  float current_distance_m() const;
  void set_current_distance_m(float value);
  private:
  float _internal_current_distance_m() const;
  void _internal_set_current_distance_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.DistanceSensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float minimum_distance_m_;
  float maximum_distance_m_;
  float current_distance_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ScaledPressure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ScaledPressure) */ {
 public:
  inline ScaledPressure() : ScaledPressure(nullptr) {}
  ~ScaledPressure() override;
  explicit PROTOBUF_CONSTEXPR ScaledPressure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScaledPressure(const ScaledPressure& from);
  ScaledPressure(ScaledPressure&& from) noexcept
    : ScaledPressure() {
    *this = ::std::move(from);
  }

  inline ScaledPressure& operator=(const ScaledPressure& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaledPressure& operator=(ScaledPressure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScaledPressure& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScaledPressure* internal_default_instance() {
    return reinterpret_cast<const ScaledPressure*>(
               &_ScaledPressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(ScaledPressure& a, ScaledPressure& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaledPressure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaledPressure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScaledPressure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScaledPressure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScaledPressure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScaledPressure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaledPressure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ScaledPressure";
  }
  protected:
  explicit ScaledPressure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampUsFieldNumber = 1,
    kAbsolutePressureHpaFieldNumber = 2,
    kDifferentialPressureHpaFieldNumber = 3,
    kTemperatureDegFieldNumber = 4,
    kDifferentialPressureTemperatureDegFieldNumber = 5,
  };
  // uint64 timestamp_us = 1;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // float absolute_pressure_hpa = 2;
  void clear_absolute_pressure_hpa();
  float absolute_pressure_hpa() const;
  void set_absolute_pressure_hpa(float value);
  private:
  float _internal_absolute_pressure_hpa() const;
  void _internal_set_absolute_pressure_hpa(float value);
  public:

  // float differential_pressure_hpa = 3;
  void clear_differential_pressure_hpa();
  float differential_pressure_hpa() const;
  void set_differential_pressure_hpa(float value);
  private:
  float _internal_differential_pressure_hpa() const;
  void _internal_set_differential_pressure_hpa(float value);
  public:

  // float temperature_deg = 4;
  void clear_temperature_deg();
  float temperature_deg() const;
  void set_temperature_deg(float value);
  private:
  float _internal_temperature_deg() const;
  void _internal_set_temperature_deg(float value);
  public:

  // float differential_pressure_temperature_deg = 5;
  void clear_differential_pressure_temperature_deg();
  float differential_pressure_temperature_deg() const;
  void set_differential_pressure_temperature_deg(float value);
  private:
  float _internal_differential_pressure_temperature_deg() const;
  void _internal_set_differential_pressure_temperature_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ScaledPressure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t timestamp_us_;
  float absolute_pressure_hpa_;
  float differential_pressure_hpa_;
  float temperature_deg_;
  float differential_pressure_temperature_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class PositionNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.PositionNed) */ {
 public:
  inline PositionNed() : PositionNed(nullptr) {}
  ~PositionNed() override;
  explicit PROTOBUF_CONSTEXPR PositionNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionNed(const PositionNed& from);
  PositionNed(PositionNed&& from) noexcept
    : PositionNed() {
    *this = ::std::move(from);
  }

  inline PositionNed& operator=(const PositionNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionNed& operator=(PositionNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionNed* internal_default_instance() {
    return reinterpret_cast<const PositionNed*>(
               &_PositionNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(PositionNed& a, PositionNed& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.PositionNed";
  }
  protected:
  explicit PositionNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMFieldNumber = 1,
    kEastMFieldNumber = 2,
    kDownMFieldNumber = 3,
  };
  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_north_m();
  float north_m() const;
  void set_north_m(float value);
  private:
  float _internal_north_m() const;
  void _internal_set_north_m(float value);
  public:

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_east_m();
  float east_m() const;
  void set_east_m(float value);
  private:
  float _internal_east_m() const;
  void _internal_set_east_m(float value);
  public:

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_m();
  float down_m() const;
  void set_down_m(float value);
  private:
  float _internal_down_m() const;
  void _internal_set_down_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.PositionNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_;
  float east_m_;
  float down_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class VelocityNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.VelocityNed) */ {
 public:
  inline VelocityNed() : VelocityNed(nullptr) {}
  ~VelocityNed() override;
  explicit PROTOBUF_CONSTEXPR VelocityNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelocityNed(const VelocityNed& from);
  VelocityNed(VelocityNed&& from) noexcept
    : VelocityNed() {
    *this = ::std::move(from);
  }

  inline VelocityNed& operator=(const VelocityNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityNed& operator=(VelocityNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityNed* internal_default_instance() {
    return reinterpret_cast<const VelocityNed*>(
               &_VelocityNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(VelocityNed& a, VelocityNed& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelocityNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelocityNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelocityNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.VelocityNed";
  }
  protected:
  explicit VelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMSFieldNumber = 1,
    kEastMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
  };
  // float north_m_s = 1;
  void clear_north_m_s();
  float north_m_s() const;
  void set_north_m_s(float value);
  private:
  float _internal_north_m_s() const;
  void _internal_set_north_m_s(float value);
  public:

  // float east_m_s = 2;
  void clear_east_m_s();
  float east_m_s() const;
  void set_east_m_s(float value);
  private:
  float _internal_east_m_s() const;
  void _internal_set_east_m_s(float value);
  public:

  // float down_m_s = 3;
  void clear_down_m_s();
  float down_m_s() const;
  void set_down_m_s(float value);
  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.VelocityNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_s_;
  float east_m_s_;
  float down_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class PositionVelocityNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.PositionVelocityNed) */ {
 public:
  inline PositionVelocityNed() : PositionVelocityNed(nullptr) {}
  ~PositionVelocityNed() override;
  explicit PROTOBUF_CONSTEXPR PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionVelocityNed(const PositionVelocityNed& from);
  PositionVelocityNed(PositionVelocityNed&& from) noexcept
    : PositionVelocityNed() {
    *this = ::std::move(from);
  }

  inline PositionVelocityNed& operator=(const PositionVelocityNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionVelocityNed& operator=(PositionVelocityNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionVelocityNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionVelocityNed* internal_default_instance() {
    return reinterpret_cast<const PositionVelocityNed*>(
               &_PositionVelocityNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(PositionVelocityNed& a, PositionVelocityNed& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionVelocityNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionVelocityNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionVelocityNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionVelocityNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionVelocityNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionVelocityNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionVelocityNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.PositionVelocityNed";
  }
  protected:
  explicit PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kVelocityFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry.PositionNed position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::telemetry::PositionNed& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::PositionNed* release_position();
  ::mavsdk::rpc::telemetry::PositionNed* mutable_position();
  void set_allocated_position(::mavsdk::rpc::telemetry::PositionNed* position);
  private:
  const ::mavsdk::rpc::telemetry::PositionNed& _internal_position() const;
  ::mavsdk::rpc::telemetry::PositionNed* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::mavsdk::rpc::telemetry::PositionNed* position);
  ::mavsdk::rpc::telemetry::PositionNed* unsafe_arena_release_position();

  // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::mavsdk::rpc::telemetry::VelocityNed& velocity() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::VelocityNed* release_velocity();
  ::mavsdk::rpc::telemetry::VelocityNed* mutable_velocity();
  void set_allocated_velocity(::mavsdk::rpc::telemetry::VelocityNed* velocity);
  private:
  const ::mavsdk::rpc::telemetry::VelocityNed& _internal_velocity() const;
  ::mavsdk::rpc::telemetry::VelocityNed* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::mavsdk::rpc::telemetry::VelocityNed* velocity);
  ::mavsdk::rpc::telemetry::VelocityNed* unsafe_arena_release_velocity();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.PositionVelocityNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::PositionNed* position_;
  ::mavsdk::rpc::telemetry::VelocityNed* velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GroundTruth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GroundTruth) */ {
 public:
  inline GroundTruth() : GroundTruth(nullptr) {}
  ~GroundTruth() override;
  explicit PROTOBUF_CONSTEXPR GroundTruth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroundTruth(const GroundTruth& from);
  GroundTruth(GroundTruth&& from) noexcept
    : GroundTruth() {
    *this = ::std::move(from);
  }

  inline GroundTruth& operator=(const GroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruth& operator=(GroundTruth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroundTruth& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundTruth* internal_default_instance() {
    return reinterpret_cast<const GroundTruth*>(
               &_GroundTruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(GroundTruth& a, GroundTruth& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundTruth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundTruth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroundTruth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroundTruth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroundTruth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroundTruth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GroundTruth";
  }
  protected:
  explicit GroundTruth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GroundTruth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class FixedwingMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.FixedwingMetrics) */ {
 public:
  inline FixedwingMetrics() : FixedwingMetrics(nullptr) {}
  ~FixedwingMetrics() override;
  explicit PROTOBUF_CONSTEXPR FixedwingMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedwingMetrics(const FixedwingMetrics& from);
  FixedwingMetrics(FixedwingMetrics&& from) noexcept
    : FixedwingMetrics() {
    *this = ::std::move(from);
  }

  inline FixedwingMetrics& operator=(const FixedwingMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedwingMetrics& operator=(FixedwingMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixedwingMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedwingMetrics* internal_default_instance() {
    return reinterpret_cast<const FixedwingMetrics*>(
               &_FixedwingMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(FixedwingMetrics& a, FixedwingMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedwingMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedwingMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixedwingMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FixedwingMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FixedwingMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FixedwingMetrics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedwingMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.FixedwingMetrics";
  }
  protected:
  explicit FixedwingMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAirspeedMSFieldNumber = 1,
    kThrottlePercentageFieldNumber = 2,
    kClimbRateMSFieldNumber = 3,
  };
  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_airspeed_m_s();
  float airspeed_m_s() const;
  void set_airspeed_m_s(float value);
  private:
  float _internal_airspeed_m_s() const;
  void _internal_set_airspeed_m_s(float value);
  public:

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_throttle_percentage();
  float throttle_percentage() const;
  void set_throttle_percentage(float value);
  private:
  float _internal_throttle_percentage() const;
  void _internal_set_throttle_percentage(float value);
  public:

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_climb_rate_m_s();
  float climb_rate_m_s() const;
  void set_climb_rate_m_s(float value);
  private:
  float _internal_climb_rate_m_s() const;
  void _internal_set_climb_rate_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.FixedwingMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float airspeed_m_s_;
  float throttle_percentage_;
  float climb_rate_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AccelerationFrd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AccelerationFrd) */ {
 public:
  inline AccelerationFrd() : AccelerationFrd(nullptr) {}
  ~AccelerationFrd() override;
  explicit PROTOBUF_CONSTEXPR AccelerationFrd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccelerationFrd(const AccelerationFrd& from);
  AccelerationFrd(AccelerationFrd&& from) noexcept
    : AccelerationFrd() {
    *this = ::std::move(from);
  }

  inline AccelerationFrd& operator=(const AccelerationFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelerationFrd& operator=(AccelerationFrd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccelerationFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccelerationFrd* internal_default_instance() {
    return reinterpret_cast<const AccelerationFrd*>(
               &_AccelerationFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(AccelerationFrd& a, AccelerationFrd& b) {
    a.Swap(&b);
  }
  inline void Swap(AccelerationFrd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccelerationFrd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccelerationFrd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccelerationFrd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccelerationFrd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccelerationFrd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelerationFrd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AccelerationFrd";
  }
  protected:
  explicit AccelerationFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardMS2FieldNumber = 1,
    kRightMS2FieldNumber = 2,
    kDownMS2FieldNumber = 3,
  };
  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_m_s2();
  float forward_m_s2() const;
  void set_forward_m_s2(float value);
  private:
  float _internal_forward_m_s2() const;
  void _internal_set_forward_m_s2(float value);
  public:

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_m_s2();
  float right_m_s2() const;
  void set_right_m_s2(float value);
  private:
  float _internal_right_m_s2() const;
  void _internal_set_right_m_s2(float value);
  public:

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_m_s2();
  float down_m_s2() const;
  void set_down_m_s2(float value);
  private:
  float _internal_down_m_s2() const;
  void _internal_set_down_m_s2(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AccelerationFrd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float forward_m_s2_;
  float right_m_s2_;
  float down_m_s2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityFrd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AngularVelocityFrd) */ {
 public:
  inline AngularVelocityFrd() : AngularVelocityFrd(nullptr) {}
  ~AngularVelocityFrd() override;
  explicit PROTOBUF_CONSTEXPR AngularVelocityFrd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AngularVelocityFrd(const AngularVelocityFrd& from);
  AngularVelocityFrd(AngularVelocityFrd&& from) noexcept
    : AngularVelocityFrd() {
    *this = ::std::move(from);
  }

  inline AngularVelocityFrd& operator=(const AngularVelocityFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityFrd& operator=(AngularVelocityFrd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityFrd* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityFrd*>(
               &_AngularVelocityFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(AngularVelocityFrd& a, AngularVelocityFrd& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocityFrd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityFrd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityFrd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngularVelocityFrd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AngularVelocityFrd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AngularVelocityFrd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularVelocityFrd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AngularVelocityFrd";
  }
  protected:
  explicit AngularVelocityFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardRadSFieldNumber = 1,
    kRightRadSFieldNumber = 2,
    kDownRadSFieldNumber = 3,
  };
  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_rad_s();
  float forward_rad_s() const;
  void set_forward_rad_s(float value);
  private:
  float _internal_forward_rad_s() const;
  void _internal_set_forward_rad_s(float value);
  public:

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_rad_s();
  float right_rad_s() const;
  void set_right_rad_s(float value);
  private:
  float _internal_right_rad_s() const;
  void _internal_set_right_rad_s(float value);
  public:

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_rad_s();
  float down_rad_s() const;
  void set_down_rad_s(float value);
  private:
  float _internal_down_rad_s() const;
  void _internal_set_down_rad_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AngularVelocityFrd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float forward_rad_s_;
  float right_rad_s_;
  float down_rad_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class MagneticFieldFrd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.MagneticFieldFrd) */ {
 public:
  inline MagneticFieldFrd() : MagneticFieldFrd(nullptr) {}
  ~MagneticFieldFrd() override;
  explicit PROTOBUF_CONSTEXPR MagneticFieldFrd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MagneticFieldFrd(const MagneticFieldFrd& from);
  MagneticFieldFrd(MagneticFieldFrd&& from) noexcept
    : MagneticFieldFrd() {
    *this = ::std::move(from);
  }

  inline MagneticFieldFrd& operator=(const MagneticFieldFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagneticFieldFrd& operator=(MagneticFieldFrd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MagneticFieldFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const MagneticFieldFrd* internal_default_instance() {
    return reinterpret_cast<const MagneticFieldFrd*>(
               &_MagneticFieldFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(MagneticFieldFrd& a, MagneticFieldFrd& b) {
    a.Swap(&b);
  }
  inline void Swap(MagneticFieldFrd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagneticFieldFrd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MagneticFieldFrd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MagneticFieldFrd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MagneticFieldFrd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MagneticFieldFrd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MagneticFieldFrd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.MagneticFieldFrd";
  }
  protected:
  explicit MagneticFieldFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardGaussFieldNumber = 1,
    kRightGaussFieldNumber = 2,
    kDownGaussFieldNumber = 3,
  };
  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_gauss();
  float forward_gauss() const;
  void set_forward_gauss(float value);
  private:
  float _internal_forward_gauss() const;
  void _internal_set_forward_gauss(float value);
  public:

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_gauss();
  float right_gauss() const;
  void set_right_gauss(float value);
  private:
  float _internal_right_gauss() const;
  void _internal_set_right_gauss(float value);
  public:

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_gauss();
  float down_gauss() const;
  void set_down_gauss(float value);
  private:
  float _internal_down_gauss() const;
  void _internal_set_down_gauss(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.MagneticFieldFrd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float forward_gauss_;
  float right_gauss_;
  float down_gauss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Imu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Imu) */ {
 public:
  inline Imu() : Imu(nullptr) {}
  ~Imu() override;
  explicit PROTOBUF_CONSTEXPR Imu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Imu(const Imu& from);
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Imu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }
  inline void Swap(Imu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Imu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Imu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Imu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Imu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Imu& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Imu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Imu";
  }
  protected:
  explicit Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFrdFieldNumber = 1,
    kAngularVelocityFrdFieldNumber = 2,
    kMagneticFieldFrdFieldNumber = 3,
    kTimestampUsFieldNumber = 5,
    kTemperatureDegcFieldNumber = 4,
  };
  // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
  bool has_acceleration_frd() const;
  private:
  bool _internal_has_acceleration_frd() const;
  public:
  void clear_acceleration_frd();
  const ::mavsdk::rpc::telemetry::AccelerationFrd& acceleration_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::AccelerationFrd* release_acceleration_frd();
  ::mavsdk::rpc::telemetry::AccelerationFrd* mutable_acceleration_frd();
  void set_allocated_acceleration_frd(::mavsdk::rpc::telemetry::AccelerationFrd* acceleration_frd);
  private:
  const ::mavsdk::rpc::telemetry::AccelerationFrd& _internal_acceleration_frd() const;
  ::mavsdk::rpc::telemetry::AccelerationFrd* _internal_mutable_acceleration_frd();
  public:
  void unsafe_arena_set_allocated_acceleration_frd(
      ::mavsdk::rpc::telemetry::AccelerationFrd* acceleration_frd);
  ::mavsdk::rpc::telemetry::AccelerationFrd* unsafe_arena_release_acceleration_frd();

  // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
  bool has_angular_velocity_frd() const;
  private:
  bool _internal_has_angular_velocity_frd() const;
  public:
  void clear_angular_velocity_frd();
  const ::mavsdk::rpc::telemetry::AngularVelocityFrd& angular_velocity_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::AngularVelocityFrd* release_angular_velocity_frd();
  ::mavsdk::rpc::telemetry::AngularVelocityFrd* mutable_angular_velocity_frd();
  void set_allocated_angular_velocity_frd(::mavsdk::rpc::telemetry::AngularVelocityFrd* angular_velocity_frd);
  private:
  const ::mavsdk::rpc::telemetry::AngularVelocityFrd& _internal_angular_velocity_frd() const;
  ::mavsdk::rpc::telemetry::AngularVelocityFrd* _internal_mutable_angular_velocity_frd();
  public:
  void unsafe_arena_set_allocated_angular_velocity_frd(
      ::mavsdk::rpc::telemetry::AngularVelocityFrd* angular_velocity_frd);
  ::mavsdk::rpc::telemetry::AngularVelocityFrd* unsafe_arena_release_angular_velocity_frd();

  // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
  bool has_magnetic_field_frd() const;
  private:
  bool _internal_has_magnetic_field_frd() const;
  public:
  void clear_magnetic_field_frd();
  const ::mavsdk::rpc::telemetry::MagneticFieldFrd& magnetic_field_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry::MagneticFieldFrd* release_magnetic_field_frd();
  ::mavsdk::rpc::telemetry::MagneticFieldFrd* mutable_magnetic_field_frd();
  void set_allocated_magnetic_field_frd(::mavsdk::rpc::telemetry::MagneticFieldFrd* magnetic_field_frd);
  private:
  const ::mavsdk::rpc::telemetry::MagneticFieldFrd& _internal_magnetic_field_frd() const;
  ::mavsdk::rpc::telemetry::MagneticFieldFrd* _internal_mutable_magnetic_field_frd();
  public:
  void unsafe_arena_set_allocated_magnetic_field_frd(
      ::mavsdk::rpc::telemetry::MagneticFieldFrd* magnetic_field_frd);
  ::mavsdk::rpc::telemetry::MagneticFieldFrd* unsafe_arena_release_magnetic_field_frd();

  // uint64 timestamp_us = 5;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_temperature_degc();
  float temperature_degc() const;
  void set_temperature_degc(float value);
  private:
  float _internal_temperature_degc() const;
  void _internal_set_temperature_degc(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Imu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry::AccelerationFrd* acceleration_frd_;
  ::mavsdk::rpc::telemetry::AngularVelocityFrd* angular_velocity_frd_;
  ::mavsdk::rpc::telemetry::MagneticFieldFrd* magnetic_field_frd_;
  uint64_t timestamp_us_;
  float temperature_degc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GpsGlobalOrigin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GpsGlobalOrigin) */ {
 public:
  inline GpsGlobalOrigin() : GpsGlobalOrigin(nullptr) {}
  ~GpsGlobalOrigin() override;
  explicit PROTOBUF_CONSTEXPR GpsGlobalOrigin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpsGlobalOrigin(const GpsGlobalOrigin& from);
  GpsGlobalOrigin(GpsGlobalOrigin&& from) noexcept
    : GpsGlobalOrigin() {
    *this = ::std::move(from);
  }

  inline GpsGlobalOrigin& operator=(const GpsGlobalOrigin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsGlobalOrigin& operator=(GpsGlobalOrigin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpsGlobalOrigin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpsGlobalOrigin* internal_default_instance() {
    return reinterpret_cast<const GpsGlobalOrigin*>(
               &_GpsGlobalOrigin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(GpsGlobalOrigin& a, GpsGlobalOrigin& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsGlobalOrigin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsGlobalOrigin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpsGlobalOrigin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpsGlobalOrigin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpsGlobalOrigin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpsGlobalOrigin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsGlobalOrigin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GpsGlobalOrigin";
  }
  protected:
  explicit GpsGlobalOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAltitudeMFieldNumber = 3,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_altitude_m();
  float altitude_m() const;
  void set_altitude_m(float value);
  private:
  float _internal_altitude_m() const;
  void _internal_set_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GpsGlobalOrigin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.TelemetryResult) */ {
 public:
  inline TelemetryResult() : TelemetryResult(nullptr) {}
  ~TelemetryResult() override;
  explicit PROTOBUF_CONSTEXPR TelemetryResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryResult(const TelemetryResult& from);
  TelemetryResult(TelemetryResult&& from) noexcept
    : TelemetryResult() {
    *this = ::std::move(from);
  }

  inline TelemetryResult& operator=(const TelemetryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryResult& operator=(TelemetryResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryResult* internal_default_instance() {
    return reinterpret_cast<const TelemetryResult*>(
               &_TelemetryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(TelemetryResult& a, TelemetryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.TelemetryResult";
  }
  protected:
  explicit TelemetryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TelemetryResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    TelemetryResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    TelemetryResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    TelemetryResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    TelemetryResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    TelemetryResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    TelemetryResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT =
    TelemetryResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_UNSUPPORTED =
    TelemetryResult_Result_RESULT_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return TelemetryResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    TelemetryResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    TelemetryResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    TelemetryResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return TelemetryResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return TelemetryResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return TelemetryResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::telemetry::TelemetryResult_Result result() const;
  void set_result(::mavsdk::rpc::telemetry::TelemetryResult_Result value);
  private:
  ::mavsdk::rpc::telemetry::TelemetryResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::telemetry::TelemetryResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.TelemetryResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribePositionRequest

// -------------------------------------------------------------------

// PositionResponse

// .mavsdk.rpc.telemetry.Position position = 1;
inline bool PositionResponse::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PositionResponse::has_position() const {
  return _internal_has_position();
}
inline void PositionResponse::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Position& PositionResponse::_internal_position() const {
  const ::mavsdk::rpc::telemetry::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Position&>(
      ::mavsdk::rpc::telemetry::_Position_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Position& PositionResponse::position() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionResponse.position)
  return _internal_position();
}
inline void PositionResponse::unsafe_arena_set_allocated_position(
    ::mavsdk::rpc::telemetry::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.PositionResponse.position)
}
inline ::mavsdk::rpc::telemetry::Position* PositionResponse::release_position() {
  
  ::mavsdk::rpc::telemetry::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Position* PositionResponse::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.PositionResponse.position)
  
  ::mavsdk::rpc::telemetry::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Position* PositionResponse::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::mavsdk::rpc::telemetry::Position* PositionResponse::mutable_position() {
  ::mavsdk::rpc::telemetry::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.PositionResponse.position)
  return _msg;
}
inline void PositionResponse::set_allocated_position(::mavsdk::rpc::telemetry::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.PositionResponse.position)
}

// -------------------------------------------------------------------

// SubscribeHomeRequest

// -------------------------------------------------------------------

// HomeResponse

// .mavsdk.rpc.telemetry.Position home = 1;
inline bool HomeResponse::_internal_has_home() const {
  return this != internal_default_instance() && home_ != nullptr;
}
inline bool HomeResponse::has_home() const {
  return _internal_has_home();
}
inline void HomeResponse::clear_home() {
  if (GetArenaForAllocation() == nullptr && home_ != nullptr) {
    delete home_;
  }
  home_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Position& HomeResponse::_internal_home() const {
  const ::mavsdk::rpc::telemetry::Position* p = home_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Position&>(
      ::mavsdk::rpc::telemetry::_Position_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Position& HomeResponse::home() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.HomeResponse.home)
  return _internal_home();
}
inline void HomeResponse::unsafe_arena_set_allocated_home(
    ::mavsdk::rpc::telemetry::Position* home) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_);
  }
  home_ = home;
  if (home) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.HomeResponse.home)
}
inline ::mavsdk::rpc::telemetry::Position* HomeResponse::release_home() {
  
  ::mavsdk::rpc::telemetry::Position* temp = home_;
  home_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Position* HomeResponse::unsafe_arena_release_home() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.HomeResponse.home)
  
  ::mavsdk::rpc::telemetry::Position* temp = home_;
  home_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Position* HomeResponse::_internal_mutable_home() {
  
  if (home_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Position>(GetArenaForAllocation());
    home_ = p;
  }
  return home_;
}
inline ::mavsdk::rpc::telemetry::Position* HomeResponse::mutable_home() {
  ::mavsdk::rpc::telemetry::Position* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.HomeResponse.home)
  return _msg;
}
inline void HomeResponse::set_allocated_home(::mavsdk::rpc::telemetry::Position* home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete home_;
  }
  if (home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(home);
    if (message_arena != submessage_arena) {
      home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home, submessage_arena);
    }
    
  } else {
    
  }
  home_ = home;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.HomeResponse.home)
}

// -------------------------------------------------------------------

// SubscribeInAirRequest

// -------------------------------------------------------------------

// InAirResponse

// bool is_in_air = 1;
inline void InAirResponse::clear_is_in_air() {
  is_in_air_ = false;
}
inline bool InAirResponse::_internal_is_in_air() const {
  return is_in_air_;
}
inline bool InAirResponse::is_in_air() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.InAirResponse.is_in_air)
  return _internal_is_in_air();
}
inline void InAirResponse::_internal_set_is_in_air(bool value) {
  
  is_in_air_ = value;
}
inline void InAirResponse::set_is_in_air(bool value) {
  _internal_set_is_in_air(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.InAirResponse.is_in_air)
}

// -------------------------------------------------------------------

// SubscribeLandedStateRequest

// -------------------------------------------------------------------

// LandedStateResponse

// .mavsdk.rpc.telemetry.LandedState landed_state = 1;
inline void LandedStateResponse::clear_landed_state() {
  landed_state_ = 0;
}
inline ::mavsdk::rpc::telemetry::LandedState LandedStateResponse::_internal_landed_state() const {
  return static_cast< ::mavsdk::rpc::telemetry::LandedState >(landed_state_);
}
inline ::mavsdk::rpc::telemetry::LandedState LandedStateResponse::landed_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.LandedStateResponse.landed_state)
  return _internal_landed_state();
}
inline void LandedStateResponse::_internal_set_landed_state(::mavsdk::rpc::telemetry::LandedState value) {
  
  landed_state_ = value;
}
inline void LandedStateResponse::set_landed_state(::mavsdk::rpc::telemetry::LandedState value) {
  _internal_set_landed_state(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.LandedStateResponse.landed_state)
}

// -------------------------------------------------------------------

// SubscribeArmedRequest

// -------------------------------------------------------------------

// ArmedResponse

// bool is_armed = 1;
inline void ArmedResponse::clear_is_armed() {
  is_armed_ = false;
}
inline bool ArmedResponse::_internal_is_armed() const {
  return is_armed_;
}
inline bool ArmedResponse::is_armed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ArmedResponse.is_armed)
  return _internal_is_armed();
}
inline void ArmedResponse::_internal_set_is_armed(bool value) {
  
  is_armed_ = value;
}
inline void ArmedResponse::set_is_armed(bool value) {
  _internal_set_is_armed(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ArmedResponse.is_armed)
}

// -------------------------------------------------------------------

// SubscribeVtolStateRequest

// -------------------------------------------------------------------

// VtolStateResponse

// .mavsdk.rpc.telemetry.VtolState vtol_state = 1;
inline void VtolStateResponse::clear_vtol_state() {
  vtol_state_ = 0;
}
inline ::mavsdk::rpc::telemetry::VtolState VtolStateResponse::_internal_vtol_state() const {
  return static_cast< ::mavsdk::rpc::telemetry::VtolState >(vtol_state_);
}
inline ::mavsdk::rpc::telemetry::VtolState VtolStateResponse::vtol_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.VtolStateResponse.vtol_state)
  return _internal_vtol_state();
}
inline void VtolStateResponse::_internal_set_vtol_state(::mavsdk::rpc::telemetry::VtolState value) {
  
  vtol_state_ = value;
}
inline void VtolStateResponse::set_vtol_state(::mavsdk::rpc::telemetry::VtolState value) {
  _internal_set_vtol_state(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.VtolStateResponse.vtol_state)
}

// -------------------------------------------------------------------

// SubscribeAttitudeQuaternionRequest

// -------------------------------------------------------------------

// AttitudeQuaternionResponse

// .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
inline bool AttitudeQuaternionResponse::_internal_has_attitude_quaternion() const {
  return this != internal_default_instance() && attitude_quaternion_ != nullptr;
}
inline bool AttitudeQuaternionResponse::has_attitude_quaternion() const {
  return _internal_has_attitude_quaternion();
}
inline void AttitudeQuaternionResponse::clear_attitude_quaternion() {
  if (GetArenaForAllocation() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Quaternion& AttitudeQuaternionResponse::_internal_attitude_quaternion() const {
  const ::mavsdk::rpc::telemetry::Quaternion* p = attitude_quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Quaternion&>(
      ::mavsdk::rpc::telemetry::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Quaternion& AttitudeQuaternionResponse::attitude_quaternion() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
  return _internal_attitude_quaternion();
}
inline void AttitudeQuaternionResponse::unsafe_arena_set_allocated_attitude_quaternion(
    ::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_quaternion_);
  }
  attitude_quaternion_ = attitude_quaternion;
  if (attitude_quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
}
inline ::mavsdk::rpc::telemetry::Quaternion* AttitudeQuaternionResponse::release_attitude_quaternion() {
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* AttitudeQuaternionResponse::unsafe_arena_release_attitude_quaternion() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* AttitudeQuaternionResponse::_internal_mutable_attitude_quaternion() {
  
  if (attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(GetArenaForAllocation());
    attitude_quaternion_ = p;
  }
  return attitude_quaternion_;
}
inline ::mavsdk::rpc::telemetry::Quaternion* AttitudeQuaternionResponse::mutable_attitude_quaternion() {
  ::mavsdk::rpc::telemetry::Quaternion* _msg = _internal_mutable_attitude_quaternion();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
  return _msg;
}
inline void AttitudeQuaternionResponse::set_allocated_attitude_quaternion(::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_quaternion_;
  }
  if (attitude_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_quaternion);
    if (message_arena != submessage_arena) {
      attitude_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_quaternion, submessage_arena);
    }
    
  } else {
    
  }
  attitude_quaternion_ = attitude_quaternion;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
}

// -------------------------------------------------------------------

// SubscribeAttitudeEulerRequest

// -------------------------------------------------------------------

// AttitudeEulerResponse

// .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
inline bool AttitudeEulerResponse::_internal_has_attitude_euler() const {
  return this != internal_default_instance() && attitude_euler_ != nullptr;
}
inline bool AttitudeEulerResponse::has_attitude_euler() const {
  return _internal_has_attitude_euler();
}
inline void AttitudeEulerResponse::clear_attitude_euler() {
  if (GetArenaForAllocation() == nullptr && attitude_euler_ != nullptr) {
    delete attitude_euler_;
  }
  attitude_euler_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::EulerAngle& AttitudeEulerResponse::_internal_attitude_euler() const {
  const ::mavsdk::rpc::telemetry::EulerAngle* p = attitude_euler_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::EulerAngle&>(
      ::mavsdk::rpc::telemetry::_EulerAngle_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::EulerAngle& AttitudeEulerResponse::attitude_euler() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
  return _internal_attitude_euler();
}
inline void AttitudeEulerResponse::unsafe_arena_set_allocated_attitude_euler(
    ::mavsdk::rpc::telemetry::EulerAngle* attitude_euler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_euler_);
  }
  attitude_euler_ = attitude_euler;
  if (attitude_euler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
}
inline ::mavsdk::rpc::telemetry::EulerAngle* AttitudeEulerResponse::release_attitude_euler() {
  
  ::mavsdk::rpc::telemetry::EulerAngle* temp = attitude_euler_;
  attitude_euler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::EulerAngle* AttitudeEulerResponse::unsafe_arena_release_attitude_euler() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
  
  ::mavsdk::rpc::telemetry::EulerAngle* temp = attitude_euler_;
  attitude_euler_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::EulerAngle* AttitudeEulerResponse::_internal_mutable_attitude_euler() {
  
  if (attitude_euler_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(GetArenaForAllocation());
    attitude_euler_ = p;
  }
  return attitude_euler_;
}
inline ::mavsdk::rpc::telemetry::EulerAngle* AttitudeEulerResponse::mutable_attitude_euler() {
  ::mavsdk::rpc::telemetry::EulerAngle* _msg = _internal_mutable_attitude_euler();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
  return _msg;
}
inline void AttitudeEulerResponse::set_allocated_attitude_euler(::mavsdk::rpc::telemetry::EulerAngle* attitude_euler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_euler_;
  }
  if (attitude_euler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_euler);
    if (message_arena != submessage_arena) {
      attitude_euler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_euler, submessage_arena);
    }
    
  } else {
    
  }
  attitude_euler_ = attitude_euler;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
}

// -------------------------------------------------------------------

// SubscribeAttitudeAngularVelocityBodyRequest

// -------------------------------------------------------------------

// AttitudeAngularVelocityBodyResponse

// .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
inline bool AttitudeAngularVelocityBodyResponse::_internal_has_attitude_angular_velocity_body() const {
  return this != internal_default_instance() && attitude_angular_velocity_body_ != nullptr;
}
inline bool AttitudeAngularVelocityBodyResponse::has_attitude_angular_velocity_body() const {
  return _internal_has_attitude_angular_velocity_body();
}
inline void AttitudeAngularVelocityBodyResponse::clear_attitude_angular_velocity_body() {
  if (GetArenaForAllocation() == nullptr && attitude_angular_velocity_body_ != nullptr) {
    delete attitude_angular_velocity_body_;
  }
  attitude_angular_velocity_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::AngularVelocityBody& AttitudeAngularVelocityBodyResponse::_internal_attitude_angular_velocity_body() const {
  const ::mavsdk::rpc::telemetry::AngularVelocityBody* p = attitude_angular_velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::AngularVelocityBody&>(
      ::mavsdk::rpc::telemetry::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::AngularVelocityBody& AttitudeAngularVelocityBodyResponse::attitude_angular_velocity_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
  return _internal_attitude_angular_velocity_body();
}
inline void AttitudeAngularVelocityBodyResponse::unsafe_arena_set_allocated_attitude_angular_velocity_body(
    ::mavsdk::rpc::telemetry::AngularVelocityBody* attitude_angular_velocity_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_angular_velocity_body_);
  }
  attitude_angular_velocity_body_ = attitude_angular_velocity_body;
  if (attitude_angular_velocity_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* AttitudeAngularVelocityBodyResponse::release_attitude_angular_velocity_body() {
  
  ::mavsdk::rpc::telemetry::AngularVelocityBody* temp = attitude_angular_velocity_body_;
  attitude_angular_velocity_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* AttitudeAngularVelocityBodyResponse::unsafe_arena_release_attitude_angular_velocity_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
  
  ::mavsdk::rpc::telemetry::AngularVelocityBody* temp = attitude_angular_velocity_body_;
  attitude_angular_velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* AttitudeAngularVelocityBodyResponse::_internal_mutable_attitude_angular_velocity_body() {
  
  if (attitude_angular_velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityBody>(GetArenaForAllocation());
    attitude_angular_velocity_body_ = p;
  }
  return attitude_angular_velocity_body_;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* AttitudeAngularVelocityBodyResponse::mutable_attitude_angular_velocity_body() {
  ::mavsdk::rpc::telemetry::AngularVelocityBody* _msg = _internal_mutable_attitude_angular_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
  return _msg;
}
inline void AttitudeAngularVelocityBodyResponse::set_allocated_attitude_angular_velocity_body(::mavsdk::rpc::telemetry::AngularVelocityBody* attitude_angular_velocity_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_angular_velocity_body_;
  }
  if (attitude_angular_velocity_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_angular_velocity_body);
    if (message_arena != submessage_arena) {
      attitude_angular_velocity_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_angular_velocity_body, submessage_arena);
    }
    
  } else {
    
  }
  attitude_angular_velocity_body_ = attitude_angular_velocity_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
}

// -------------------------------------------------------------------

// SubscribeCameraAttitudeQuaternionRequest

// -------------------------------------------------------------------

// CameraAttitudeQuaternionResponse

// .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
inline bool CameraAttitudeQuaternionResponse::_internal_has_attitude_quaternion() const {
  return this != internal_default_instance() && attitude_quaternion_ != nullptr;
}
inline bool CameraAttitudeQuaternionResponse::has_attitude_quaternion() const {
  return _internal_has_attitude_quaternion();
}
inline void CameraAttitudeQuaternionResponse::clear_attitude_quaternion() {
  if (GetArenaForAllocation() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Quaternion& CameraAttitudeQuaternionResponse::_internal_attitude_quaternion() const {
  const ::mavsdk::rpc::telemetry::Quaternion* p = attitude_quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Quaternion&>(
      ::mavsdk::rpc::telemetry::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Quaternion& CameraAttitudeQuaternionResponse::attitude_quaternion() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
  return _internal_attitude_quaternion();
}
inline void CameraAttitudeQuaternionResponse::unsafe_arena_set_allocated_attitude_quaternion(
    ::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_quaternion_);
  }
  attitude_quaternion_ = attitude_quaternion;
  if (attitude_quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
}
inline ::mavsdk::rpc::telemetry::Quaternion* CameraAttitudeQuaternionResponse::release_attitude_quaternion() {
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* CameraAttitudeQuaternionResponse::unsafe_arena_release_attitude_quaternion() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* CameraAttitudeQuaternionResponse::_internal_mutable_attitude_quaternion() {
  
  if (attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(GetArenaForAllocation());
    attitude_quaternion_ = p;
  }
  return attitude_quaternion_;
}
inline ::mavsdk::rpc::telemetry::Quaternion* CameraAttitudeQuaternionResponse::mutable_attitude_quaternion() {
  ::mavsdk::rpc::telemetry::Quaternion* _msg = _internal_mutable_attitude_quaternion();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
  return _msg;
}
inline void CameraAttitudeQuaternionResponse::set_allocated_attitude_quaternion(::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_quaternion_;
  }
  if (attitude_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_quaternion);
    if (message_arena != submessage_arena) {
      attitude_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_quaternion, submessage_arena);
    }
    
  } else {
    
  }
  attitude_quaternion_ = attitude_quaternion;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
}

// -------------------------------------------------------------------

// SubscribeCameraAttitudeEulerRequest

// -------------------------------------------------------------------

// CameraAttitudeEulerResponse

// .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
inline bool CameraAttitudeEulerResponse::_internal_has_attitude_euler() const {
  return this != internal_default_instance() && attitude_euler_ != nullptr;
}
inline bool CameraAttitudeEulerResponse::has_attitude_euler() const {
  return _internal_has_attitude_euler();
}
inline void CameraAttitudeEulerResponse::clear_attitude_euler() {
  if (GetArenaForAllocation() == nullptr && attitude_euler_ != nullptr) {
    delete attitude_euler_;
  }
  attitude_euler_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::EulerAngle& CameraAttitudeEulerResponse::_internal_attitude_euler() const {
  const ::mavsdk::rpc::telemetry::EulerAngle* p = attitude_euler_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::EulerAngle&>(
      ::mavsdk::rpc::telemetry::_EulerAngle_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::EulerAngle& CameraAttitudeEulerResponse::attitude_euler() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
  return _internal_attitude_euler();
}
inline void CameraAttitudeEulerResponse::unsafe_arena_set_allocated_attitude_euler(
    ::mavsdk::rpc::telemetry::EulerAngle* attitude_euler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_euler_);
  }
  attitude_euler_ = attitude_euler;
  if (attitude_euler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
}
inline ::mavsdk::rpc::telemetry::EulerAngle* CameraAttitudeEulerResponse::release_attitude_euler() {
  
  ::mavsdk::rpc::telemetry::EulerAngle* temp = attitude_euler_;
  attitude_euler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::EulerAngle* CameraAttitudeEulerResponse::unsafe_arena_release_attitude_euler() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
  
  ::mavsdk::rpc::telemetry::EulerAngle* temp = attitude_euler_;
  attitude_euler_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::EulerAngle* CameraAttitudeEulerResponse::_internal_mutable_attitude_euler() {
  
  if (attitude_euler_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(GetArenaForAllocation());
    attitude_euler_ = p;
  }
  return attitude_euler_;
}
inline ::mavsdk::rpc::telemetry::EulerAngle* CameraAttitudeEulerResponse::mutable_attitude_euler() {
  ::mavsdk::rpc::telemetry::EulerAngle* _msg = _internal_mutable_attitude_euler();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
  return _msg;
}
inline void CameraAttitudeEulerResponse::set_allocated_attitude_euler(::mavsdk::rpc::telemetry::EulerAngle* attitude_euler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attitude_euler_;
  }
  if (attitude_euler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attitude_euler);
    if (message_arena != submessage_arena) {
      attitude_euler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_euler, submessage_arena);
    }
    
  } else {
    
  }
  attitude_euler_ = attitude_euler;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
}

// -------------------------------------------------------------------

// SubscribeVelocityNedRequest

// -------------------------------------------------------------------

// VelocityNedResponse

// .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
inline bool VelocityNedResponse::_internal_has_velocity_ned() const {
  return this != internal_default_instance() && velocity_ned_ != nullptr;
}
inline bool VelocityNedResponse::has_velocity_ned() const {
  return _internal_has_velocity_ned();
}
inline void VelocityNedResponse::clear_velocity_ned() {
  if (GetArenaForAllocation() == nullptr && velocity_ned_ != nullptr) {
    delete velocity_ned_;
  }
  velocity_ned_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::VelocityNed& VelocityNedResponse::_internal_velocity_ned() const {
  const ::mavsdk::rpc::telemetry::VelocityNed* p = velocity_ned_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::VelocityNed&>(
      ::mavsdk::rpc::telemetry::_VelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::VelocityNed& VelocityNedResponse::velocity_ned() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.VelocityNedResponse.velocity_ned)
  return _internal_velocity_ned();
}
inline void VelocityNedResponse::unsafe_arena_set_allocated_velocity_ned(
    ::mavsdk::rpc::telemetry::VelocityNed* velocity_ned) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_ned_);
  }
  velocity_ned_ = velocity_ned;
  if (velocity_ned) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.VelocityNedResponse.velocity_ned)
}
inline ::mavsdk::rpc::telemetry::VelocityNed* VelocityNedResponse::release_velocity_ned() {
  
  ::mavsdk::rpc::telemetry::VelocityNed* temp = velocity_ned_;
  velocity_ned_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::VelocityNed* VelocityNedResponse::unsafe_arena_release_velocity_ned() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.VelocityNedResponse.velocity_ned)
  
  ::mavsdk::rpc::telemetry::VelocityNed* temp = velocity_ned_;
  velocity_ned_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::VelocityNed* VelocityNedResponse::_internal_mutable_velocity_ned() {
  
  if (velocity_ned_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityNed>(GetArenaForAllocation());
    velocity_ned_ = p;
  }
  return velocity_ned_;
}
inline ::mavsdk::rpc::telemetry::VelocityNed* VelocityNedResponse::mutable_velocity_ned() {
  ::mavsdk::rpc::telemetry::VelocityNed* _msg = _internal_mutable_velocity_ned();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.VelocityNedResponse.velocity_ned)
  return _msg;
}
inline void VelocityNedResponse::set_allocated_velocity_ned(::mavsdk::rpc::telemetry::VelocityNed* velocity_ned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_ned_;
  }
  if (velocity_ned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_ned);
    if (message_arena != submessage_arena) {
      velocity_ned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_ned, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ned_ = velocity_ned;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.VelocityNedResponse.velocity_ned)
}

// -------------------------------------------------------------------

// SubscribeGpsInfoRequest

// -------------------------------------------------------------------

// GpsInfoResponse

// .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
inline bool GpsInfoResponse::_internal_has_gps_info() const {
  return this != internal_default_instance() && gps_info_ != nullptr;
}
inline bool GpsInfoResponse::has_gps_info() const {
  return _internal_has_gps_info();
}
inline void GpsInfoResponse::clear_gps_info() {
  if (GetArenaForAllocation() == nullptr && gps_info_ != nullptr) {
    delete gps_info_;
  }
  gps_info_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::GpsInfo& GpsInfoResponse::_internal_gps_info() const {
  const ::mavsdk::rpc::telemetry::GpsInfo* p = gps_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::GpsInfo&>(
      ::mavsdk::rpc::telemetry::_GpsInfo_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::GpsInfo& GpsInfoResponse::gps_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
  return _internal_gps_info();
}
inline void GpsInfoResponse::unsafe_arena_set_allocated_gps_info(
    ::mavsdk::rpc::telemetry::GpsInfo* gps_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_info_);
  }
  gps_info_ = gps_info;
  if (gps_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
}
inline ::mavsdk::rpc::telemetry::GpsInfo* GpsInfoResponse::release_gps_info() {
  
  ::mavsdk::rpc::telemetry::GpsInfo* temp = gps_info_;
  gps_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::GpsInfo* GpsInfoResponse::unsafe_arena_release_gps_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
  
  ::mavsdk::rpc::telemetry::GpsInfo* temp = gps_info_;
  gps_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::GpsInfo* GpsInfoResponse::_internal_mutable_gps_info() {
  
  if (gps_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsInfo>(GetArenaForAllocation());
    gps_info_ = p;
  }
  return gps_info_;
}
inline ::mavsdk::rpc::telemetry::GpsInfo* GpsInfoResponse::mutable_gps_info() {
  ::mavsdk::rpc::telemetry::GpsInfo* _msg = _internal_mutable_gps_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
  return _msg;
}
inline void GpsInfoResponse::set_allocated_gps_info(::mavsdk::rpc::telemetry::GpsInfo* gps_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gps_info_;
  }
  if (gps_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gps_info);
    if (message_arena != submessage_arena) {
      gps_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_info, submessage_arena);
    }
    
  } else {
    
  }
  gps_info_ = gps_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
}

// -------------------------------------------------------------------

// SubscribeRawGpsRequest

// -------------------------------------------------------------------

// RawGpsResponse

// .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
inline bool RawGpsResponse::_internal_has_raw_gps() const {
  return this != internal_default_instance() && raw_gps_ != nullptr;
}
inline bool RawGpsResponse::has_raw_gps() const {
  return _internal_has_raw_gps();
}
inline void RawGpsResponse::clear_raw_gps() {
  if (GetArenaForAllocation() == nullptr && raw_gps_ != nullptr) {
    delete raw_gps_;
  }
  raw_gps_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::RawGps& RawGpsResponse::_internal_raw_gps() const {
  const ::mavsdk::rpc::telemetry::RawGps* p = raw_gps_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::RawGps&>(
      ::mavsdk::rpc::telemetry::_RawGps_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::RawGps& RawGpsResponse::raw_gps() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGpsResponse.raw_gps)
  return _internal_raw_gps();
}
inline void RawGpsResponse::unsafe_arena_set_allocated_raw_gps(
    ::mavsdk::rpc::telemetry::RawGps* raw_gps) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_gps_);
  }
  raw_gps_ = raw_gps;
  if (raw_gps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.RawGpsResponse.raw_gps)
}
inline ::mavsdk::rpc::telemetry::RawGps* RawGpsResponse::release_raw_gps() {
  
  ::mavsdk::rpc::telemetry::RawGps* temp = raw_gps_;
  raw_gps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::RawGps* RawGpsResponse::unsafe_arena_release_raw_gps() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.RawGpsResponse.raw_gps)
  
  ::mavsdk::rpc::telemetry::RawGps* temp = raw_gps_;
  raw_gps_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::RawGps* RawGpsResponse::_internal_mutable_raw_gps() {
  
  if (raw_gps_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::RawGps>(GetArenaForAllocation());
    raw_gps_ = p;
  }
  return raw_gps_;
}
inline ::mavsdk::rpc::telemetry::RawGps* RawGpsResponse::mutable_raw_gps() {
  ::mavsdk::rpc::telemetry::RawGps* _msg = _internal_mutable_raw_gps();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.RawGpsResponse.raw_gps)
  return _msg;
}
inline void RawGpsResponse::set_allocated_raw_gps(::mavsdk::rpc::telemetry::RawGps* raw_gps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete raw_gps_;
  }
  if (raw_gps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_gps);
    if (message_arena != submessage_arena) {
      raw_gps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_gps, submessage_arena);
    }
    
  } else {
    
  }
  raw_gps_ = raw_gps;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.RawGpsResponse.raw_gps)
}

// -------------------------------------------------------------------

// SubscribeBatteryRequest

// -------------------------------------------------------------------

// BatteryResponse

// .mavsdk.rpc.telemetry.Battery battery = 1;
inline bool BatteryResponse::_internal_has_battery() const {
  return this != internal_default_instance() && battery_ != nullptr;
}
inline bool BatteryResponse::has_battery() const {
  return _internal_has_battery();
}
inline void BatteryResponse::clear_battery() {
  if (GetArenaForAllocation() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Battery& BatteryResponse::_internal_battery() const {
  const ::mavsdk::rpc::telemetry::Battery* p = battery_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Battery&>(
      ::mavsdk::rpc::telemetry::_Battery_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Battery& BatteryResponse::battery() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.BatteryResponse.battery)
  return _internal_battery();
}
inline void BatteryResponse::unsafe_arena_set_allocated_battery(
    ::mavsdk::rpc::telemetry::Battery* battery) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battery_);
  }
  battery_ = battery;
  if (battery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.BatteryResponse.battery)
}
inline ::mavsdk::rpc::telemetry::Battery* BatteryResponse::release_battery() {
  
  ::mavsdk::rpc::telemetry::Battery* temp = battery_;
  battery_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Battery* BatteryResponse::unsafe_arena_release_battery() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.BatteryResponse.battery)
  
  ::mavsdk::rpc::telemetry::Battery* temp = battery_;
  battery_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Battery* BatteryResponse::_internal_mutable_battery() {
  
  if (battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Battery>(GetArenaForAllocation());
    battery_ = p;
  }
  return battery_;
}
inline ::mavsdk::rpc::telemetry::Battery* BatteryResponse::mutable_battery() {
  ::mavsdk::rpc::telemetry::Battery* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.BatteryResponse.battery)
  return _msg;
}
inline void BatteryResponse::set_allocated_battery(::mavsdk::rpc::telemetry::Battery* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete battery_;
  }
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(battery);
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    
  } else {
    
  }
  battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.BatteryResponse.battery)
}

// -------------------------------------------------------------------

// SubscribeFlightModeRequest

// -------------------------------------------------------------------

// FlightModeResponse

// .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
inline void FlightModeResponse::clear_flight_mode() {
  flight_mode_ = 0;
}
inline ::mavsdk::rpc::telemetry::FlightMode FlightModeResponse::_internal_flight_mode() const {
  return static_cast< ::mavsdk::rpc::telemetry::FlightMode >(flight_mode_);
}
inline ::mavsdk::rpc::telemetry::FlightMode FlightModeResponse::flight_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.FlightModeResponse.flight_mode)
  return _internal_flight_mode();
}
inline void FlightModeResponse::_internal_set_flight_mode(::mavsdk::rpc::telemetry::FlightMode value) {
  
  flight_mode_ = value;
}
inline void FlightModeResponse::set_flight_mode(::mavsdk::rpc::telemetry::FlightMode value) {
  _internal_set_flight_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.FlightModeResponse.flight_mode)
}

// -------------------------------------------------------------------

// SubscribeHealthRequest

// -------------------------------------------------------------------

// HealthResponse

// .mavsdk.rpc.telemetry.Health health = 1;
inline bool HealthResponse::_internal_has_health() const {
  return this != internal_default_instance() && health_ != nullptr;
}
inline bool HealthResponse::has_health() const {
  return _internal_has_health();
}
inline void HealthResponse::clear_health() {
  if (GetArenaForAllocation() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Health& HealthResponse::_internal_health() const {
  const ::mavsdk::rpc::telemetry::Health* p = health_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Health&>(
      ::mavsdk::rpc::telemetry::_Health_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Health& HealthResponse::health() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.HealthResponse.health)
  return _internal_health();
}
inline void HealthResponse::unsafe_arena_set_allocated_health(
    ::mavsdk::rpc::telemetry::Health* health) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(health_);
  }
  health_ = health;
  if (health) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.HealthResponse.health)
}
inline ::mavsdk::rpc::telemetry::Health* HealthResponse::release_health() {
  
  ::mavsdk::rpc::telemetry::Health* temp = health_;
  health_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Health* HealthResponse::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.HealthResponse.health)
  
  ::mavsdk::rpc::telemetry::Health* temp = health_;
  health_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Health* HealthResponse::_internal_mutable_health() {
  
  if (health_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Health>(GetArenaForAllocation());
    health_ = p;
  }
  return health_;
}
inline ::mavsdk::rpc::telemetry::Health* HealthResponse::mutable_health() {
  ::mavsdk::rpc::telemetry::Health* _msg = _internal_mutable_health();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.HealthResponse.health)
  return _msg;
}
inline void HealthResponse::set_allocated_health(::mavsdk::rpc::telemetry::Health* health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete health_;
  }
  if (health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(health);
    if (message_arena != submessage_arena) {
      health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health, submessage_arena);
    }
    
  } else {
    
  }
  health_ = health;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.HealthResponse.health)
}

// -------------------------------------------------------------------

// SubscribeRcStatusRequest

// -------------------------------------------------------------------

// RcStatusResponse

// .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
inline bool RcStatusResponse::_internal_has_rc_status() const {
  return this != internal_default_instance() && rc_status_ != nullptr;
}
inline bool RcStatusResponse::has_rc_status() const {
  return _internal_has_rc_status();
}
inline void RcStatusResponse::clear_rc_status() {
  if (GetArenaForAllocation() == nullptr && rc_status_ != nullptr) {
    delete rc_status_;
  }
  rc_status_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::RcStatus& RcStatusResponse::_internal_rc_status() const {
  const ::mavsdk::rpc::telemetry::RcStatus* p = rc_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::RcStatus&>(
      ::mavsdk::rpc::telemetry::_RcStatus_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::RcStatus& RcStatusResponse::rc_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
  return _internal_rc_status();
}
inline void RcStatusResponse::unsafe_arena_set_allocated_rc_status(
    ::mavsdk::rpc::telemetry::RcStatus* rc_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rc_status_);
  }
  rc_status_ = rc_status;
  if (rc_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
}
inline ::mavsdk::rpc::telemetry::RcStatus* RcStatusResponse::release_rc_status() {
  
  ::mavsdk::rpc::telemetry::RcStatus* temp = rc_status_;
  rc_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::RcStatus* RcStatusResponse::unsafe_arena_release_rc_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
  
  ::mavsdk::rpc::telemetry::RcStatus* temp = rc_status_;
  rc_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::RcStatus* RcStatusResponse::_internal_mutable_rc_status() {
  
  if (rc_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::RcStatus>(GetArenaForAllocation());
    rc_status_ = p;
  }
  return rc_status_;
}
inline ::mavsdk::rpc::telemetry::RcStatus* RcStatusResponse::mutable_rc_status() {
  ::mavsdk::rpc::telemetry::RcStatus* _msg = _internal_mutable_rc_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
  return _msg;
}
inline void RcStatusResponse::set_allocated_rc_status(::mavsdk::rpc::telemetry::RcStatus* rc_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rc_status_;
  }
  if (rc_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rc_status);
    if (message_arena != submessage_arena) {
      rc_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rc_status, submessage_arena);
    }
    
  } else {
    
  }
  rc_status_ = rc_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
}

// -------------------------------------------------------------------

// SubscribeStatusTextRequest

// -------------------------------------------------------------------

// StatusTextResponse

// .mavsdk.rpc.telemetry.StatusText status_text = 1;
inline bool StatusTextResponse::_internal_has_status_text() const {
  return this != internal_default_instance() && status_text_ != nullptr;
}
inline bool StatusTextResponse::has_status_text() const {
  return _internal_has_status_text();
}
inline void StatusTextResponse::clear_status_text() {
  if (GetArenaForAllocation() == nullptr && status_text_ != nullptr) {
    delete status_text_;
  }
  status_text_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::StatusText& StatusTextResponse::_internal_status_text() const {
  const ::mavsdk::rpc::telemetry::StatusText* p = status_text_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::StatusText&>(
      ::mavsdk::rpc::telemetry::_StatusText_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::StatusText& StatusTextResponse::status_text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
  return _internal_status_text();
}
inline void StatusTextResponse::unsafe_arena_set_allocated_status_text(
    ::mavsdk::rpc::telemetry::StatusText* status_text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_text_);
  }
  status_text_ = status_text;
  if (status_text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
}
inline ::mavsdk::rpc::telemetry::StatusText* StatusTextResponse::release_status_text() {
  
  ::mavsdk::rpc::telemetry::StatusText* temp = status_text_;
  status_text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::StatusText* StatusTextResponse::unsafe_arena_release_status_text() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
  
  ::mavsdk::rpc::telemetry::StatusText* temp = status_text_;
  status_text_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::StatusText* StatusTextResponse::_internal_mutable_status_text() {
  
  if (status_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::StatusText>(GetArenaForAllocation());
    status_text_ = p;
  }
  return status_text_;
}
inline ::mavsdk::rpc::telemetry::StatusText* StatusTextResponse::mutable_status_text() {
  ::mavsdk::rpc::telemetry::StatusText* _msg = _internal_mutable_status_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
  return _msg;
}
inline void StatusTextResponse::set_allocated_status_text(::mavsdk::rpc::telemetry::StatusText* status_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_text_;
  }
  if (status_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status_text);
    if (message_arena != submessage_arena) {
      status_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_text, submessage_arena);
    }
    
  } else {
    
  }
  status_text_ = status_text;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
}

// -------------------------------------------------------------------

// SubscribeActuatorControlTargetRequest

// -------------------------------------------------------------------

// ActuatorControlTargetResponse

// .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
inline bool ActuatorControlTargetResponse::_internal_has_actuator_control_target() const {
  return this != internal_default_instance() && actuator_control_target_ != nullptr;
}
inline bool ActuatorControlTargetResponse::has_actuator_control_target() const {
  return _internal_has_actuator_control_target();
}
inline void ActuatorControlTargetResponse::clear_actuator_control_target() {
  if (GetArenaForAllocation() == nullptr && actuator_control_target_ != nullptr) {
    delete actuator_control_target_;
  }
  actuator_control_target_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::ActuatorControlTarget& ActuatorControlTargetResponse::_internal_actuator_control_target() const {
  const ::mavsdk::rpc::telemetry::ActuatorControlTarget* p = actuator_control_target_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::ActuatorControlTarget&>(
      ::mavsdk::rpc::telemetry::_ActuatorControlTarget_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::ActuatorControlTarget& ActuatorControlTargetResponse::actuator_control_target() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
  return _internal_actuator_control_target();
}
inline void ActuatorControlTargetResponse::unsafe_arena_set_allocated_actuator_control_target(
    ::mavsdk::rpc::telemetry::ActuatorControlTarget* actuator_control_target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actuator_control_target_);
  }
  actuator_control_target_ = actuator_control_target;
  if (actuator_control_target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
}
inline ::mavsdk::rpc::telemetry::ActuatorControlTarget* ActuatorControlTargetResponse::release_actuator_control_target() {
  
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* temp = actuator_control_target_;
  actuator_control_target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::ActuatorControlTarget* ActuatorControlTargetResponse::unsafe_arena_release_actuator_control_target() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
  
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* temp = actuator_control_target_;
  actuator_control_target_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::ActuatorControlTarget* ActuatorControlTargetResponse::_internal_mutable_actuator_control_target() {
  
  if (actuator_control_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorControlTarget>(GetArenaForAllocation());
    actuator_control_target_ = p;
  }
  return actuator_control_target_;
}
inline ::mavsdk::rpc::telemetry::ActuatorControlTarget* ActuatorControlTargetResponse::mutable_actuator_control_target() {
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* _msg = _internal_mutable_actuator_control_target();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
  return _msg;
}
inline void ActuatorControlTargetResponse::set_allocated_actuator_control_target(::mavsdk::rpc::telemetry::ActuatorControlTarget* actuator_control_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete actuator_control_target_;
  }
  if (actuator_control_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actuator_control_target);
    if (message_arena != submessage_arena) {
      actuator_control_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actuator_control_target, submessage_arena);
    }
    
  } else {
    
  }
  actuator_control_target_ = actuator_control_target;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
}

// -------------------------------------------------------------------

// SubscribeActuatorOutputStatusRequest

// -------------------------------------------------------------------

// ActuatorOutputStatusResponse

// .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
inline bool ActuatorOutputStatusResponse::_internal_has_actuator_output_status() const {
  return this != internal_default_instance() && actuator_output_status_ != nullptr;
}
inline bool ActuatorOutputStatusResponse::has_actuator_output_status() const {
  return _internal_has_actuator_output_status();
}
inline void ActuatorOutputStatusResponse::clear_actuator_output_status() {
  if (GetArenaForAllocation() == nullptr && actuator_output_status_ != nullptr) {
    delete actuator_output_status_;
  }
  actuator_output_status_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& ActuatorOutputStatusResponse::_internal_actuator_output_status() const {
  const ::mavsdk::rpc::telemetry::ActuatorOutputStatus* p = actuator_output_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::ActuatorOutputStatus&>(
      ::mavsdk::rpc::telemetry::_ActuatorOutputStatus_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& ActuatorOutputStatusResponse::actuator_output_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
  return _internal_actuator_output_status();
}
inline void ActuatorOutputStatusResponse::unsafe_arena_set_allocated_actuator_output_status(
    ::mavsdk::rpc::telemetry::ActuatorOutputStatus* actuator_output_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actuator_output_status_);
  }
  actuator_output_status_ = actuator_output_status;
  if (actuator_output_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
}
inline ::mavsdk::rpc::telemetry::ActuatorOutputStatus* ActuatorOutputStatusResponse::release_actuator_output_status() {
  
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* temp = actuator_output_status_;
  actuator_output_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::ActuatorOutputStatus* ActuatorOutputStatusResponse::unsafe_arena_release_actuator_output_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
  
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* temp = actuator_output_status_;
  actuator_output_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::ActuatorOutputStatus* ActuatorOutputStatusResponse::_internal_mutable_actuator_output_status() {
  
  if (actuator_output_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorOutputStatus>(GetArenaForAllocation());
    actuator_output_status_ = p;
  }
  return actuator_output_status_;
}
inline ::mavsdk::rpc::telemetry::ActuatorOutputStatus* ActuatorOutputStatusResponse::mutable_actuator_output_status() {
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* _msg = _internal_mutable_actuator_output_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
  return _msg;
}
inline void ActuatorOutputStatusResponse::set_allocated_actuator_output_status(::mavsdk::rpc::telemetry::ActuatorOutputStatus* actuator_output_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete actuator_output_status_;
  }
  if (actuator_output_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actuator_output_status);
    if (message_arena != submessage_arena) {
      actuator_output_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actuator_output_status, submessage_arena);
    }
    
  } else {
    
  }
  actuator_output_status_ = actuator_output_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
}

// -------------------------------------------------------------------

// SubscribeOdometryRequest

// -------------------------------------------------------------------

// OdometryResponse

// .mavsdk.rpc.telemetry.Odometry odometry = 1;
inline bool OdometryResponse::_internal_has_odometry() const {
  return this != internal_default_instance() && odometry_ != nullptr;
}
inline bool OdometryResponse::has_odometry() const {
  return _internal_has_odometry();
}
inline void OdometryResponse::clear_odometry() {
  if (GetArenaForAllocation() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Odometry& OdometryResponse::_internal_odometry() const {
  const ::mavsdk::rpc::telemetry::Odometry* p = odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Odometry&>(
      ::mavsdk::rpc::telemetry::_Odometry_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Odometry& OdometryResponse::odometry() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.OdometryResponse.odometry)
  return _internal_odometry();
}
inline void OdometryResponse::unsafe_arena_set_allocated_odometry(
    ::mavsdk::rpc::telemetry::Odometry* odometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry_);
  }
  odometry_ = odometry;
  if (odometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.OdometryResponse.odometry)
}
inline ::mavsdk::rpc::telemetry::Odometry* OdometryResponse::release_odometry() {
  
  ::mavsdk::rpc::telemetry::Odometry* temp = odometry_;
  odometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Odometry* OdometryResponse::unsafe_arena_release_odometry() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.OdometryResponse.odometry)
  
  ::mavsdk::rpc::telemetry::Odometry* temp = odometry_;
  odometry_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Odometry* OdometryResponse::_internal_mutable_odometry() {
  
  if (odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Odometry>(GetArenaForAllocation());
    odometry_ = p;
  }
  return odometry_;
}
inline ::mavsdk::rpc::telemetry::Odometry* OdometryResponse::mutable_odometry() {
  ::mavsdk::rpc::telemetry::Odometry* _msg = _internal_mutable_odometry();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.OdometryResponse.odometry)
  return _msg;
}
inline void OdometryResponse::set_allocated_odometry(::mavsdk::rpc::telemetry::Odometry* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete odometry_;
  }
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(odometry);
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    
  } else {
    
  }
  odometry_ = odometry;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.OdometryResponse.odometry)
}

// -------------------------------------------------------------------

// SubscribePositionVelocityNedRequest

// -------------------------------------------------------------------

// PositionVelocityNedResponse

// .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
inline bool PositionVelocityNedResponse::_internal_has_position_velocity_ned() const {
  return this != internal_default_instance() && position_velocity_ned_ != nullptr;
}
inline bool PositionVelocityNedResponse::has_position_velocity_ned() const {
  return _internal_has_position_velocity_ned();
}
inline void PositionVelocityNedResponse::clear_position_velocity_ned() {
  if (GetArenaForAllocation() == nullptr && position_velocity_ned_ != nullptr) {
    delete position_velocity_ned_;
  }
  position_velocity_ned_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::PositionVelocityNed& PositionVelocityNedResponse::_internal_position_velocity_ned() const {
  const ::mavsdk::rpc::telemetry::PositionVelocityNed* p = position_velocity_ned_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::PositionVelocityNed&>(
      ::mavsdk::rpc::telemetry::_PositionVelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::PositionVelocityNed& PositionVelocityNedResponse::position_velocity_ned() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionVelocityNedResponse.position_velocity_ned)
  return _internal_position_velocity_ned();
}
inline void PositionVelocityNedResponse::unsafe_arena_set_allocated_position_velocity_ned(
    ::mavsdk::rpc::telemetry::PositionVelocityNed* position_velocity_ned) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_velocity_ned_);
  }
  position_velocity_ned_ = position_velocity_ned;
  if (position_velocity_ned) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.PositionVelocityNedResponse.position_velocity_ned)
}
inline ::mavsdk::rpc::telemetry::PositionVelocityNed* PositionVelocityNedResponse::release_position_velocity_ned() {
  
  ::mavsdk::rpc::telemetry::PositionVelocityNed* temp = position_velocity_ned_;
  position_velocity_ned_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::PositionVelocityNed* PositionVelocityNedResponse::unsafe_arena_release_position_velocity_ned() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.PositionVelocityNedResponse.position_velocity_ned)
  
  ::mavsdk::rpc::telemetry::PositionVelocityNed* temp = position_velocity_ned_;
  position_velocity_ned_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::PositionVelocityNed* PositionVelocityNedResponse::_internal_mutable_position_velocity_ned() {
  
  if (position_velocity_ned_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionVelocityNed>(GetArenaForAllocation());
    position_velocity_ned_ = p;
  }
  return position_velocity_ned_;
}
inline ::mavsdk::rpc::telemetry::PositionVelocityNed* PositionVelocityNedResponse::mutable_position_velocity_ned() {
  ::mavsdk::rpc::telemetry::PositionVelocityNed* _msg = _internal_mutable_position_velocity_ned();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.PositionVelocityNedResponse.position_velocity_ned)
  return _msg;
}
inline void PositionVelocityNedResponse::set_allocated_position_velocity_ned(::mavsdk::rpc::telemetry::PositionVelocityNed* position_velocity_ned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_velocity_ned_;
  }
  if (position_velocity_ned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_velocity_ned);
    if (message_arena != submessage_arena) {
      position_velocity_ned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_velocity_ned, submessage_arena);
    }
    
  } else {
    
  }
  position_velocity_ned_ = position_velocity_ned;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.PositionVelocityNedResponse.position_velocity_ned)
}

// -------------------------------------------------------------------

// SubscribeGroundTruthRequest

// -------------------------------------------------------------------

// GroundTruthResponse

// .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
inline bool GroundTruthResponse::_internal_has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != nullptr;
}
inline bool GroundTruthResponse::has_ground_truth() const {
  return _internal_has_ground_truth();
}
inline void GroundTruthResponse::clear_ground_truth() {
  if (GetArenaForAllocation() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::GroundTruth& GroundTruthResponse::_internal_ground_truth() const {
  const ::mavsdk::rpc::telemetry::GroundTruth* p = ground_truth_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::GroundTruth&>(
      ::mavsdk::rpc::telemetry::_GroundTruth_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::GroundTruth& GroundTruthResponse::ground_truth() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GroundTruthResponse.ground_truth)
  return _internal_ground_truth();
}
inline void GroundTruthResponse::unsafe_arena_set_allocated_ground_truth(
    ::mavsdk::rpc::telemetry::GroundTruth* ground_truth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_truth_);
  }
  ground_truth_ = ground_truth;
  if (ground_truth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.GroundTruthResponse.ground_truth)
}
inline ::mavsdk::rpc::telemetry::GroundTruth* GroundTruthResponse::release_ground_truth() {
  
  ::mavsdk::rpc::telemetry::GroundTruth* temp = ground_truth_;
  ground_truth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::GroundTruth* GroundTruthResponse::unsafe_arena_release_ground_truth() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.GroundTruthResponse.ground_truth)
  
  ::mavsdk::rpc::telemetry::GroundTruth* temp = ground_truth_;
  ground_truth_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::GroundTruth* GroundTruthResponse::_internal_mutable_ground_truth() {
  
  if (ground_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::GroundTruth>(GetArenaForAllocation());
    ground_truth_ = p;
  }
  return ground_truth_;
}
inline ::mavsdk::rpc::telemetry::GroundTruth* GroundTruthResponse::mutable_ground_truth() {
  ::mavsdk::rpc::telemetry::GroundTruth* _msg = _internal_mutable_ground_truth();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.GroundTruthResponse.ground_truth)
  return _msg;
}
inline void GroundTruthResponse::set_allocated_ground_truth(::mavsdk::rpc::telemetry::GroundTruth* ground_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ground_truth_;
  }
  if (ground_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ground_truth);
    if (message_arena != submessage_arena) {
      ground_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.GroundTruthResponse.ground_truth)
}

// -------------------------------------------------------------------

// SubscribeFixedwingMetricsRequest

// -------------------------------------------------------------------

// FixedwingMetricsResponse

// .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
inline bool FixedwingMetricsResponse::_internal_has_fixedwing_metrics() const {
  return this != internal_default_instance() && fixedwing_metrics_ != nullptr;
}
inline bool FixedwingMetricsResponse::has_fixedwing_metrics() const {
  return _internal_has_fixedwing_metrics();
}
inline void FixedwingMetricsResponse::clear_fixedwing_metrics() {
  if (GetArenaForAllocation() == nullptr && fixedwing_metrics_ != nullptr) {
    delete fixedwing_metrics_;
  }
  fixedwing_metrics_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::FixedwingMetrics& FixedwingMetricsResponse::_internal_fixedwing_metrics() const {
  const ::mavsdk::rpc::telemetry::FixedwingMetrics* p = fixedwing_metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::FixedwingMetrics&>(
      ::mavsdk::rpc::telemetry::_FixedwingMetrics_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::FixedwingMetrics& FixedwingMetricsResponse::fixedwing_metrics() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.FixedwingMetricsResponse.fixedwing_metrics)
  return _internal_fixedwing_metrics();
}
inline void FixedwingMetricsResponse::unsafe_arena_set_allocated_fixedwing_metrics(
    ::mavsdk::rpc::telemetry::FixedwingMetrics* fixedwing_metrics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixedwing_metrics_);
  }
  fixedwing_metrics_ = fixedwing_metrics;
  if (fixedwing_metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.FixedwingMetricsResponse.fixedwing_metrics)
}
inline ::mavsdk::rpc::telemetry::FixedwingMetrics* FixedwingMetricsResponse::release_fixedwing_metrics() {
  
  ::mavsdk::rpc::telemetry::FixedwingMetrics* temp = fixedwing_metrics_;
  fixedwing_metrics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::FixedwingMetrics* FixedwingMetricsResponse::unsafe_arena_release_fixedwing_metrics() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.FixedwingMetricsResponse.fixedwing_metrics)
  
  ::mavsdk::rpc::telemetry::FixedwingMetrics* temp = fixedwing_metrics_;
  fixedwing_metrics_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::FixedwingMetrics* FixedwingMetricsResponse::_internal_mutable_fixedwing_metrics() {
  
  if (fixedwing_metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::FixedwingMetrics>(GetArenaForAllocation());
    fixedwing_metrics_ = p;
  }
  return fixedwing_metrics_;
}
inline ::mavsdk::rpc::telemetry::FixedwingMetrics* FixedwingMetricsResponse::mutable_fixedwing_metrics() {
  ::mavsdk::rpc::telemetry::FixedwingMetrics* _msg = _internal_mutable_fixedwing_metrics();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.FixedwingMetricsResponse.fixedwing_metrics)
  return _msg;
}
inline void FixedwingMetricsResponse::set_allocated_fixedwing_metrics(::mavsdk::rpc::telemetry::FixedwingMetrics* fixedwing_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fixedwing_metrics_;
  }
  if (fixedwing_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fixedwing_metrics);
    if (message_arena != submessage_arena) {
      fixedwing_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixedwing_metrics, submessage_arena);
    }
    
  } else {
    
  }
  fixedwing_metrics_ = fixedwing_metrics;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.FixedwingMetricsResponse.fixedwing_metrics)
}

// -------------------------------------------------------------------

// SubscribeImuRequest

// -------------------------------------------------------------------

// ImuResponse

// .mavsdk.rpc.telemetry.Imu imu = 1;
inline bool ImuResponse::_internal_has_imu() const {
  return this != internal_default_instance() && imu_ != nullptr;
}
inline bool ImuResponse::has_imu() const {
  return _internal_has_imu();
}
inline void ImuResponse::clear_imu() {
  if (GetArenaForAllocation() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Imu& ImuResponse::_internal_imu() const {
  const ::mavsdk::rpc::telemetry::Imu* p = imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Imu&>(
      ::mavsdk::rpc::telemetry::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Imu& ImuResponse::imu() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ImuResponse.imu)
  return _internal_imu();
}
inline void ImuResponse::unsafe_arena_set_allocated_imu(
    ::mavsdk::rpc::telemetry::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.ImuResponse.imu)
}
inline ::mavsdk::rpc::telemetry::Imu* ImuResponse::release_imu() {
  
  ::mavsdk::rpc::telemetry::Imu* temp = imu_;
  imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Imu* ImuResponse::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.ImuResponse.imu)
  
  ::mavsdk::rpc::telemetry::Imu* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Imu* ImuResponse::_internal_mutable_imu() {
  
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Imu>(GetArenaForAllocation());
    imu_ = p;
  }
  return imu_;
}
inline ::mavsdk::rpc::telemetry::Imu* ImuResponse::mutable_imu() {
  ::mavsdk::rpc::telemetry::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.ImuResponse.imu)
  return _msg;
}
inline void ImuResponse::set_allocated_imu(::mavsdk::rpc::telemetry::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete imu_;
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu);
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.ImuResponse.imu)
}

// -------------------------------------------------------------------

// SubscribeScaledImuRequest

// -------------------------------------------------------------------

// ScaledImuResponse

// .mavsdk.rpc.telemetry.Imu imu = 1;
inline bool ScaledImuResponse::_internal_has_imu() const {
  return this != internal_default_instance() && imu_ != nullptr;
}
inline bool ScaledImuResponse::has_imu() const {
  return _internal_has_imu();
}
inline void ScaledImuResponse::clear_imu() {
  if (GetArenaForAllocation() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Imu& ScaledImuResponse::_internal_imu() const {
  const ::mavsdk::rpc::telemetry::Imu* p = imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Imu&>(
      ::mavsdk::rpc::telemetry::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Imu& ScaledImuResponse::imu() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ScaledImuResponse.imu)
  return _internal_imu();
}
inline void ScaledImuResponse::unsafe_arena_set_allocated_imu(
    ::mavsdk::rpc::telemetry::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.ScaledImuResponse.imu)
}
inline ::mavsdk::rpc::telemetry::Imu* ScaledImuResponse::release_imu() {
  
  ::mavsdk::rpc::telemetry::Imu* temp = imu_;
  imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Imu* ScaledImuResponse::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.ScaledImuResponse.imu)
  
  ::mavsdk::rpc::telemetry::Imu* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Imu* ScaledImuResponse::_internal_mutable_imu() {
  
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Imu>(GetArenaForAllocation());
    imu_ = p;
  }
  return imu_;
}
inline ::mavsdk::rpc::telemetry::Imu* ScaledImuResponse::mutable_imu() {
  ::mavsdk::rpc::telemetry::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.ScaledImuResponse.imu)
  return _msg;
}
inline void ScaledImuResponse::set_allocated_imu(::mavsdk::rpc::telemetry::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete imu_;
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu);
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.ScaledImuResponse.imu)
}

// -------------------------------------------------------------------

// SubscribeRawImuRequest

// -------------------------------------------------------------------

// RawImuResponse

// .mavsdk.rpc.telemetry.Imu imu = 1;
inline bool RawImuResponse::_internal_has_imu() const {
  return this != internal_default_instance() && imu_ != nullptr;
}
inline bool RawImuResponse::has_imu() const {
  return _internal_has_imu();
}
inline void RawImuResponse::clear_imu() {
  if (GetArenaForAllocation() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Imu& RawImuResponse::_internal_imu() const {
  const ::mavsdk::rpc::telemetry::Imu* p = imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Imu&>(
      ::mavsdk::rpc::telemetry::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Imu& RawImuResponse::imu() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawImuResponse.imu)
  return _internal_imu();
}
inline void RawImuResponse::unsafe_arena_set_allocated_imu(
    ::mavsdk::rpc::telemetry::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.RawImuResponse.imu)
}
inline ::mavsdk::rpc::telemetry::Imu* RawImuResponse::release_imu() {
  
  ::mavsdk::rpc::telemetry::Imu* temp = imu_;
  imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Imu* RawImuResponse::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.RawImuResponse.imu)
  
  ::mavsdk::rpc::telemetry::Imu* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Imu* RawImuResponse::_internal_mutable_imu() {
  
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Imu>(GetArenaForAllocation());
    imu_ = p;
  }
  return imu_;
}
inline ::mavsdk::rpc::telemetry::Imu* RawImuResponse::mutable_imu() {
  ::mavsdk::rpc::telemetry::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.RawImuResponse.imu)
  return _msg;
}
inline void RawImuResponse::set_allocated_imu(::mavsdk::rpc::telemetry::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete imu_;
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu);
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.RawImuResponse.imu)
}

// -------------------------------------------------------------------

// SubscribeHealthAllOkRequest

// -------------------------------------------------------------------

// HealthAllOkResponse

// bool is_health_all_ok = 1;
inline void HealthAllOkResponse::clear_is_health_all_ok() {
  is_health_all_ok_ = false;
}
inline bool HealthAllOkResponse::_internal_is_health_all_ok() const {
  return is_health_all_ok_;
}
inline bool HealthAllOkResponse::is_health_all_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.HealthAllOkResponse.is_health_all_ok)
  return _internal_is_health_all_ok();
}
inline void HealthAllOkResponse::_internal_set_is_health_all_ok(bool value) {
  
  is_health_all_ok_ = value;
}
inline void HealthAllOkResponse::set_is_health_all_ok(bool value) {
  _internal_set_is_health_all_ok(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.HealthAllOkResponse.is_health_all_ok)
}

// -------------------------------------------------------------------

// SubscribeUnixEpochTimeRequest

// -------------------------------------------------------------------

// UnixEpochTimeResponse

// uint64 time_us = 1;
inline void UnixEpochTimeResponse::clear_time_us() {
  time_us_ = uint64_t{0u};
}
inline uint64_t UnixEpochTimeResponse::_internal_time_us() const {
  return time_us_;
}
inline uint64_t UnixEpochTimeResponse::time_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.UnixEpochTimeResponse.time_us)
  return _internal_time_us();
}
inline void UnixEpochTimeResponse::_internal_set_time_us(uint64_t value) {
  
  time_us_ = value;
}
inline void UnixEpochTimeResponse::set_time_us(uint64_t value) {
  _internal_set_time_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.UnixEpochTimeResponse.time_us)
}

// -------------------------------------------------------------------

// SubscribeDistanceSensorRequest

// -------------------------------------------------------------------

// DistanceSensorResponse

// .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
inline bool DistanceSensorResponse::_internal_has_distance_sensor() const {
  return this != internal_default_instance() && distance_sensor_ != nullptr;
}
inline bool DistanceSensorResponse::has_distance_sensor() const {
  return _internal_has_distance_sensor();
}
inline void DistanceSensorResponse::clear_distance_sensor() {
  if (GetArenaForAllocation() == nullptr && distance_sensor_ != nullptr) {
    delete distance_sensor_;
  }
  distance_sensor_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::DistanceSensor& DistanceSensorResponse::_internal_distance_sensor() const {
  const ::mavsdk::rpc::telemetry::DistanceSensor* p = distance_sensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::DistanceSensor&>(
      ::mavsdk::rpc::telemetry::_DistanceSensor_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::DistanceSensor& DistanceSensorResponse::distance_sensor() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.DistanceSensorResponse.distance_sensor)
  return _internal_distance_sensor();
}
inline void DistanceSensorResponse::unsafe_arena_set_allocated_distance_sensor(
    ::mavsdk::rpc::telemetry::DistanceSensor* distance_sensor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distance_sensor_);
  }
  distance_sensor_ = distance_sensor;
  if (distance_sensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.DistanceSensorResponse.distance_sensor)
}
inline ::mavsdk::rpc::telemetry::DistanceSensor* DistanceSensorResponse::release_distance_sensor() {
  
  ::mavsdk::rpc::telemetry::DistanceSensor* temp = distance_sensor_;
  distance_sensor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::DistanceSensor* DistanceSensorResponse::unsafe_arena_release_distance_sensor() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.DistanceSensorResponse.distance_sensor)
  
  ::mavsdk::rpc::telemetry::DistanceSensor* temp = distance_sensor_;
  distance_sensor_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::DistanceSensor* DistanceSensorResponse::_internal_mutable_distance_sensor() {
  
  if (distance_sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::DistanceSensor>(GetArenaForAllocation());
    distance_sensor_ = p;
  }
  return distance_sensor_;
}
inline ::mavsdk::rpc::telemetry::DistanceSensor* DistanceSensorResponse::mutable_distance_sensor() {
  ::mavsdk::rpc::telemetry::DistanceSensor* _msg = _internal_mutable_distance_sensor();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.DistanceSensorResponse.distance_sensor)
  return _msg;
}
inline void DistanceSensorResponse::set_allocated_distance_sensor(::mavsdk::rpc::telemetry::DistanceSensor* distance_sensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete distance_sensor_;
  }
  if (distance_sensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(distance_sensor);
    if (message_arena != submessage_arena) {
      distance_sensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distance_sensor, submessage_arena);
    }
    
  } else {
    
  }
  distance_sensor_ = distance_sensor;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.DistanceSensorResponse.distance_sensor)
}

// -------------------------------------------------------------------

// SubscribeScaledPressureRequest

// -------------------------------------------------------------------

// ScaledPressureResponse

// .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
inline bool ScaledPressureResponse::_internal_has_scaled_pressure() const {
  return this != internal_default_instance() && scaled_pressure_ != nullptr;
}
inline bool ScaledPressureResponse::has_scaled_pressure() const {
  return _internal_has_scaled_pressure();
}
inline void ScaledPressureResponse::clear_scaled_pressure() {
  if (GetArenaForAllocation() == nullptr && scaled_pressure_ != nullptr) {
    delete scaled_pressure_;
  }
  scaled_pressure_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::ScaledPressure& ScaledPressureResponse::_internal_scaled_pressure() const {
  const ::mavsdk::rpc::telemetry::ScaledPressure* p = scaled_pressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::ScaledPressure&>(
      ::mavsdk::rpc::telemetry::_ScaledPressure_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::ScaledPressure& ScaledPressureResponse::scaled_pressure() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ScaledPressureResponse.scaled_pressure)
  return _internal_scaled_pressure();
}
inline void ScaledPressureResponse::unsafe_arena_set_allocated_scaled_pressure(
    ::mavsdk::rpc::telemetry::ScaledPressure* scaled_pressure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scaled_pressure_);
  }
  scaled_pressure_ = scaled_pressure;
  if (scaled_pressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.ScaledPressureResponse.scaled_pressure)
}
inline ::mavsdk::rpc::telemetry::ScaledPressure* ScaledPressureResponse::release_scaled_pressure() {
  
  ::mavsdk::rpc::telemetry::ScaledPressure* temp = scaled_pressure_;
  scaled_pressure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::ScaledPressure* ScaledPressureResponse::unsafe_arena_release_scaled_pressure() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.ScaledPressureResponse.scaled_pressure)
  
  ::mavsdk::rpc::telemetry::ScaledPressure* temp = scaled_pressure_;
  scaled_pressure_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::ScaledPressure* ScaledPressureResponse::_internal_mutable_scaled_pressure() {
  
  if (scaled_pressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::ScaledPressure>(GetArenaForAllocation());
    scaled_pressure_ = p;
  }
  return scaled_pressure_;
}
inline ::mavsdk::rpc::telemetry::ScaledPressure* ScaledPressureResponse::mutable_scaled_pressure() {
  ::mavsdk::rpc::telemetry::ScaledPressure* _msg = _internal_mutable_scaled_pressure();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.ScaledPressureResponse.scaled_pressure)
  return _msg;
}
inline void ScaledPressureResponse::set_allocated_scaled_pressure(::mavsdk::rpc::telemetry::ScaledPressure* scaled_pressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scaled_pressure_;
  }
  if (scaled_pressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scaled_pressure);
    if (message_arena != submessage_arena) {
      scaled_pressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scaled_pressure, submessage_arena);
    }
    
  } else {
    
  }
  scaled_pressure_ = scaled_pressure;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.ScaledPressureResponse.scaled_pressure)
}

// -------------------------------------------------------------------

// SubscribeHeadingRequest

// -------------------------------------------------------------------

// HeadingResponse

// .mavsdk.rpc.telemetry.Heading heading_deg = 1;
inline bool HeadingResponse::_internal_has_heading_deg() const {
  return this != internal_default_instance() && heading_deg_ != nullptr;
}
inline bool HeadingResponse::has_heading_deg() const {
  return _internal_has_heading_deg();
}
inline void HeadingResponse::clear_heading_deg() {
  if (GetArenaForAllocation() == nullptr && heading_deg_ != nullptr) {
    delete heading_deg_;
  }
  heading_deg_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Heading& HeadingResponse::_internal_heading_deg() const {
  const ::mavsdk::rpc::telemetry::Heading* p = heading_deg_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Heading&>(
      ::mavsdk::rpc::telemetry::_Heading_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Heading& HeadingResponse::heading_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.HeadingResponse.heading_deg)
  return _internal_heading_deg();
}
inline void HeadingResponse::unsafe_arena_set_allocated_heading_deg(
    ::mavsdk::rpc::telemetry::Heading* heading_deg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_deg_);
  }
  heading_deg_ = heading_deg;
  if (heading_deg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.HeadingResponse.heading_deg)
}
inline ::mavsdk::rpc::telemetry::Heading* HeadingResponse::release_heading_deg() {
  
  ::mavsdk::rpc::telemetry::Heading* temp = heading_deg_;
  heading_deg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Heading* HeadingResponse::unsafe_arena_release_heading_deg() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.HeadingResponse.heading_deg)
  
  ::mavsdk::rpc::telemetry::Heading* temp = heading_deg_;
  heading_deg_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Heading* HeadingResponse::_internal_mutable_heading_deg() {
  
  if (heading_deg_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Heading>(GetArenaForAllocation());
    heading_deg_ = p;
  }
  return heading_deg_;
}
inline ::mavsdk::rpc::telemetry::Heading* HeadingResponse::mutable_heading_deg() {
  ::mavsdk::rpc::telemetry::Heading* _msg = _internal_mutable_heading_deg();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.HeadingResponse.heading_deg)
  return _msg;
}
inline void HeadingResponse::set_allocated_heading_deg(::mavsdk::rpc::telemetry::Heading* heading_deg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete heading_deg_;
  }
  if (heading_deg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heading_deg);
    if (message_arena != submessage_arena) {
      heading_deg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heading_deg, submessage_arena);
    }
    
  } else {
    
  }
  heading_deg_ = heading_deg;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.HeadingResponse.heading_deg)
}

// -------------------------------------------------------------------

// SetRatePositionRequest

// double rate_hz = 1;
inline void SetRatePositionRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRatePositionRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRatePositionRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRatePositionRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRatePositionRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRatePositionRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRatePositionRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRatePositionResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRatePositionResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRatePositionResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRatePositionResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRatePositionResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRatePositionResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRatePositionResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRatePositionResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRatePositionResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRatePositionResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRatePositionResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRatePositionResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRatePositionResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRatePositionResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRatePositionResponse.telemetry_result)
  return _msg;
}
inline void SetRatePositionResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRatePositionResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateHomeRequest

// double rate_hz = 1;
inline void SetRateHomeRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateHomeRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateHomeRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateHomeRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateHomeRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateHomeRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateHomeRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateHomeResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateHomeResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateHomeResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateHomeResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateHomeResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateHomeResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateHomeResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateHomeResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateHomeResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateHomeResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateHomeResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateHomeResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateHomeResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateHomeResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateHomeResponse.telemetry_result)
  return _msg;
}
inline void SetRateHomeResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateHomeResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateInAirRequest

// double rate_hz = 1;
inline void SetRateInAirRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateInAirRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateInAirRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateInAirRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateInAirRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateInAirRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateInAirRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateInAirResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateInAirResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateInAirResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateInAirResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateInAirResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateInAirResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateInAirResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateInAirResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateInAirResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateInAirResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateInAirResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateInAirResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateInAirResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateInAirResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateInAirResponse.telemetry_result)
  return _msg;
}
inline void SetRateInAirResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateInAirResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateLandedStateRequest

// double rate_hz = 1;
inline void SetRateLandedStateRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateLandedStateRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateLandedStateRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateLandedStateRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateLandedStateRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateLandedStateRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateLandedStateRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateLandedStateResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateLandedStateResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateLandedStateResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateLandedStateResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateLandedStateResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateLandedStateResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateLandedStateResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateLandedStateResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateLandedStateResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateLandedStateResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateLandedStateResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateLandedStateResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateLandedStateResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateLandedStateResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateLandedStateResponse.telemetry_result)
  return _msg;
}
inline void SetRateLandedStateResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateLandedStateResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateVtolStateRequest

// double rate_hz = 1;
inline void SetRateVtolStateRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateVtolStateRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateVtolStateRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateVtolStateRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateVtolStateRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateVtolStateRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateVtolStateRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateVtolStateResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateVtolStateResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateVtolStateResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateVtolStateResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateVtolStateResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateVtolStateResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateVtolStateResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateVtolStateResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateVtolStateResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateVtolStateResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateVtolStateResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateVtolStateResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateVtolStateResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateVtolStateResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateVtolStateResponse.telemetry_result)
  return _msg;
}
inline void SetRateVtolStateResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateVtolStateResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateAttitudeRequest

// double rate_hz = 1;
inline void SetRateAttitudeRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateAttitudeRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateAttitudeRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateAttitudeRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateAttitudeRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateAttitudeRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateAttitudeRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateAttitudeResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateAttitudeResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateAttitudeResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateAttitudeResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateAttitudeResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateAttitudeResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateAttitudeResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateAttitudeResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateAttitudeResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateAttitudeResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateAttitudeResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateAttitudeResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateAttitudeResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateAttitudeResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateAttitudeResponse.telemetry_result)
  return _msg;
}
inline void SetRateAttitudeResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateAttitudeResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateAttitudeAngularVelocityBodyRequest

// double rate_hz = 1;
inline void SetRateAttitudeAngularVelocityBodyRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateAttitudeAngularVelocityBodyRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateAttitudeAngularVelocityBodyRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateAttitudeAngularVelocityBodyRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateAttitudeAngularVelocityBodyRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateAttitudeAngularVelocityBodyResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateAttitudeAngularVelocityBodyResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateAttitudeAngularVelocityBodyResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateAttitudeAngularVelocityBodyResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateAttitudeAngularVelocityBodyResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateAttitudeAngularVelocityBodyResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateAttitudeAngularVelocityBodyResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateAttitudeAngularVelocityBodyResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateAttitudeAngularVelocityBodyResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateAttitudeAngularVelocityBodyResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateAttitudeAngularVelocityBodyResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse.telemetry_result)
  return _msg;
}
inline void SetRateAttitudeAngularVelocityBodyResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateCameraAttitudeQuaternionRequest

// double rate_hz = 1;
inline void SetRateCameraAttitudeQuaternionRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateCameraAttitudeQuaternionRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateCameraAttitudeQuaternionRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateCameraAttitudeQuaternionRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateCameraAttitudeQuaternionRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateCameraAttitudeQuaternionResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateCameraAttitudeQuaternionResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateCameraAttitudeQuaternionResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateCameraAttitudeQuaternionResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateCameraAttitudeQuaternionResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateCameraAttitudeQuaternionResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateCameraAttitudeQuaternionResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateCameraAttitudeQuaternionResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateCameraAttitudeQuaternionResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateCameraAttitudeQuaternionResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateCameraAttitudeQuaternionResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse.telemetry_result)
  return _msg;
}
inline void SetRateCameraAttitudeQuaternionResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateCameraAttitudeRequest

// double rate_hz = 1;
inline void SetRateCameraAttitudeRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateCameraAttitudeRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateCameraAttitudeRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateCameraAttitudeRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateCameraAttitudeRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateCameraAttitudeResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateCameraAttitudeResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateCameraAttitudeResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateCameraAttitudeResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateCameraAttitudeResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateCameraAttitudeResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateCameraAttitudeResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateCameraAttitudeResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateCameraAttitudeResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateCameraAttitudeResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateCameraAttitudeResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse.telemetry_result)
  return _msg;
}
inline void SetRateCameraAttitudeResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateVelocityNedRequest

// double rate_hz = 1;
inline void SetRateVelocityNedRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateVelocityNedRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateVelocityNedRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateVelocityNedRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateVelocityNedRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateVelocityNedRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateVelocityNedRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateVelocityNedResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateVelocityNedResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateVelocityNedResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateVelocityNedResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateVelocityNedResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateVelocityNedResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateVelocityNedResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateVelocityNedResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateVelocityNedResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateVelocityNedResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateVelocityNedResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateVelocityNedResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateVelocityNedResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateVelocityNedResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateVelocityNedResponse.telemetry_result)
  return _msg;
}
inline void SetRateVelocityNedResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateVelocityNedResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateGpsInfoRequest

// double rate_hz = 1;
inline void SetRateGpsInfoRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateGpsInfoRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateGpsInfoRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateGpsInfoRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateGpsInfoRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateGpsInfoRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateGpsInfoRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateGpsInfoResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateGpsInfoResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateGpsInfoResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateGpsInfoResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateGpsInfoResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateGpsInfoResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateGpsInfoResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateGpsInfoResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateGpsInfoResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateGpsInfoResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateGpsInfoResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateGpsInfoResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateGpsInfoResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateGpsInfoResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateGpsInfoResponse.telemetry_result)
  return _msg;
}
inline void SetRateGpsInfoResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateGpsInfoResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateRawGpsRequest

// double rate_hz = 1;
inline void SetRateRawGpsRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateRawGpsRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateRawGpsRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateRawGpsRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateRawGpsRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateRawGpsRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateRawGpsRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateBatteryRequest

// double rate_hz = 1;
inline void SetRateBatteryRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateBatteryRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateBatteryRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateBatteryRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateBatteryRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateBatteryRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateBatteryRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateBatteryResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateBatteryResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateBatteryResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateBatteryResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateBatteryResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateBatteryResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateBatteryResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateBatteryResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateBatteryResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateBatteryResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateBatteryResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateBatteryResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateBatteryResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateBatteryResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateBatteryResponse.telemetry_result)
  return _msg;
}
inline void SetRateBatteryResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateBatteryResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateRcStatusRequest

// double rate_hz = 1;
inline void SetRateRcStatusRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateRcStatusRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateRcStatusRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateRcStatusRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateRcStatusRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateRcStatusRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateRcStatusRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateRcStatusResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateRcStatusResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateRcStatusResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateRcStatusResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateRcStatusResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateRcStatusResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateRcStatusResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateRcStatusResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateRcStatusResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateRcStatusResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateRcStatusResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateRcStatusResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateRcStatusResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateRcStatusResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateRcStatusResponse.telemetry_result)
  return _msg;
}
inline void SetRateRcStatusResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateRcStatusResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateActuatorControlTargetRequest

// double rate_hz = 1;
inline void SetRateActuatorControlTargetRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateActuatorControlTargetRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateActuatorControlTargetRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateActuatorControlTargetRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateActuatorControlTargetRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateActuatorControlTargetResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateActuatorControlTargetResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateActuatorControlTargetResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateActuatorControlTargetResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateActuatorControlTargetResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateActuatorControlTargetResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateActuatorControlTargetResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateActuatorControlTargetResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateActuatorControlTargetResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateActuatorControlTargetResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateActuatorControlTargetResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse.telemetry_result)
  return _msg;
}
inline void SetRateActuatorControlTargetResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateActuatorOutputStatusRequest

// double rate_hz = 1;
inline void SetRateActuatorOutputStatusRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateActuatorOutputStatusRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateActuatorOutputStatusRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateActuatorOutputStatusRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateActuatorOutputStatusRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateActuatorOutputStatusResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateActuatorOutputStatusResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateActuatorOutputStatusResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateActuatorOutputStatusResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateActuatorOutputStatusResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateActuatorOutputStatusResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateActuatorOutputStatusResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateActuatorOutputStatusResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateActuatorOutputStatusResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateActuatorOutputStatusResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateActuatorOutputStatusResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse.telemetry_result)
  return _msg;
}
inline void SetRateActuatorOutputStatusResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateOdometryRequest

// double rate_hz = 1;
inline void SetRateOdometryRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateOdometryRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateOdometryRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateOdometryRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateOdometryRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateOdometryRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateOdometryRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateOdometryResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateOdometryResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateOdometryResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateOdometryResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateOdometryResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateOdometryResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateOdometryResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateOdometryResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateOdometryResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateOdometryResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateOdometryResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateOdometryResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateOdometryResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateOdometryResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateOdometryResponse.telemetry_result)
  return _msg;
}
inline void SetRateOdometryResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateOdometryResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRatePositionVelocityNedRequest

// double rate_hz = 1;
inline void SetRatePositionVelocityNedRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRatePositionVelocityNedRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRatePositionVelocityNedRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRatePositionVelocityNedRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRatePositionVelocityNedRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRatePositionVelocityNedResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRatePositionVelocityNedResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRatePositionVelocityNedResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRatePositionVelocityNedResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRatePositionVelocityNedResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRatePositionVelocityNedResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRatePositionVelocityNedResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRatePositionVelocityNedResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRatePositionVelocityNedResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRatePositionVelocityNedResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRatePositionVelocityNedResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse.telemetry_result)
  return _msg;
}
inline void SetRatePositionVelocityNedResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateGroundTruthRequest

// double rate_hz = 1;
inline void SetRateGroundTruthRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateGroundTruthRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateGroundTruthRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateGroundTruthRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateGroundTruthRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateGroundTruthRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateGroundTruthRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateGroundTruthResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateGroundTruthResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateGroundTruthResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateGroundTruthResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateGroundTruthResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateGroundTruthResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateGroundTruthResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateGroundTruthResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateGroundTruthResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateGroundTruthResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateGroundTruthResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateGroundTruthResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateGroundTruthResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateGroundTruthResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateGroundTruthResponse.telemetry_result)
  return _msg;
}
inline void SetRateGroundTruthResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateGroundTruthResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateFixedwingMetricsRequest

// double rate_hz = 1;
inline void SetRateFixedwingMetricsRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateFixedwingMetricsRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateFixedwingMetricsRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateFixedwingMetricsRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateFixedwingMetricsRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateFixedwingMetricsResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateFixedwingMetricsResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateFixedwingMetricsResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateFixedwingMetricsResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateFixedwingMetricsResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateFixedwingMetricsResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateFixedwingMetricsResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateFixedwingMetricsResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateFixedwingMetricsResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateFixedwingMetricsResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateFixedwingMetricsResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse.telemetry_result)
  return _msg;
}
inline void SetRateFixedwingMetricsResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateImuRequest

// double rate_hz = 1;
inline void SetRateImuRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateImuRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateImuRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateImuRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateImuRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateImuRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateImuRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateImuResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateImuResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateImuResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateImuResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateImuResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateImuResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateImuResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateImuResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateImuResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateImuResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateImuResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateImuResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateImuResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateImuResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateImuResponse.telemetry_result)
  return _msg;
}
inline void SetRateImuResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateImuResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateScaledImuRequest

// double rate_hz = 1;
inline void SetRateScaledImuRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateScaledImuRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateScaledImuRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateScaledImuRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateScaledImuRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateScaledImuRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateScaledImuRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateScaledImuResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateScaledImuResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateScaledImuResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateScaledImuResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateScaledImuResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateScaledImuResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateScaledImuResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateScaledImuResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateScaledImuResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateScaledImuResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateScaledImuResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateScaledImuResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateScaledImuResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateScaledImuResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateScaledImuResponse.telemetry_result)
  return _msg;
}
inline void SetRateScaledImuResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateScaledImuResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateRawImuRequest

// double rate_hz = 1;
inline void SetRateRawImuRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateRawImuRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateRawImuRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateRawImuRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateRawImuRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateRawImuRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateRawImuRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateRawImuResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateRawImuResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateRawImuResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateRawImuResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateRawImuResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateRawImuResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateRawImuResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateRawImuResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateRawImuResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateRawImuResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateRawImuResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateRawImuResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateRawImuResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateRawImuResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateRawImuResponse.telemetry_result)
  return _msg;
}
inline void SetRateRawImuResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateRawImuResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateUnixEpochTimeRequest

// double rate_hz = 1;
inline void SetRateUnixEpochTimeRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateUnixEpochTimeRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateUnixEpochTimeRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateUnixEpochTimeRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateUnixEpochTimeRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateUnixEpochTimeResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateUnixEpochTimeResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateUnixEpochTimeResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateUnixEpochTimeResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateUnixEpochTimeResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateUnixEpochTimeResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateUnixEpochTimeResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateUnixEpochTimeResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateUnixEpochTimeResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateUnixEpochTimeResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateUnixEpochTimeResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse.telemetry_result)
  return _msg;
}
inline void SetRateUnixEpochTimeResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse.telemetry_result)
}

// -------------------------------------------------------------------

// SetRateDistanceSensorRequest

// double rate_hz = 1;
inline void SetRateDistanceSensorRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateDistanceSensorRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateDistanceSensorRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateDistanceSensorRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateDistanceSensorRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateDistanceSensorResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool SetRateDistanceSensorResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool SetRateDistanceSensorResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void SetRateDistanceSensorResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateDistanceSensorResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateDistanceSensorResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void SetRateDistanceSensorResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateDistanceSensorResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateDistanceSensorResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateDistanceSensorResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* SetRateDistanceSensorResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse.telemetry_result)
  return _msg;
}
inline void SetRateDistanceSensorResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse.telemetry_result)
}

// -------------------------------------------------------------------

// GetGpsGlobalOriginRequest

// -------------------------------------------------------------------

// GetGpsGlobalOriginResponse

// .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
inline bool GetGpsGlobalOriginResponse::_internal_has_telemetry_result() const {
  return this != internal_default_instance() && telemetry_result_ != nullptr;
}
inline bool GetGpsGlobalOriginResponse::has_telemetry_result() const {
  return _internal_has_telemetry_result();
}
inline void GetGpsGlobalOriginResponse::clear_telemetry_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& GetGpsGlobalOriginResponse::_internal_telemetry_result() const {
  const ::mavsdk::rpc::telemetry::TelemetryResult* p = telemetry_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::TelemetryResult&>(
      ::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::TelemetryResult& GetGpsGlobalOriginResponse::telemetry_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.telemetry_result)
  return _internal_telemetry_result();
}
inline void GetGpsGlobalOriginResponse::unsafe_arena_set_allocated_telemetry_result(
    ::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_result_);
  }
  telemetry_result_ = telemetry_result;
  if (telemetry_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.telemetry_result)
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* GetGpsGlobalOriginResponse::release_telemetry_result() {
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* GetGpsGlobalOriginResponse::unsafe_arena_release_telemetry_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.telemetry_result)
  
  ::mavsdk::rpc::telemetry::TelemetryResult* temp = telemetry_result_;
  telemetry_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* GetGpsGlobalOriginResponse::_internal_mutable_telemetry_result() {
  
  if (telemetry_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(GetArenaForAllocation());
    telemetry_result_ = p;
  }
  return telemetry_result_;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult* GetGpsGlobalOriginResponse::mutable_telemetry_result() {
  ::mavsdk::rpc::telemetry::TelemetryResult* _msg = _internal_mutable_telemetry_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.telemetry_result)
  return _msg;
}
inline void GetGpsGlobalOriginResponse::set_allocated_telemetry_result(::mavsdk::rpc::telemetry::TelemetryResult* telemetry_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_result_;
  }
  if (telemetry_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_result);
    if (message_arena != submessage_arena) {
      telemetry_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_result_ = telemetry_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.telemetry_result)
}

// .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
inline bool GetGpsGlobalOriginResponse::_internal_has_gps_global_origin() const {
  return this != internal_default_instance() && gps_global_origin_ != nullptr;
}
inline bool GetGpsGlobalOriginResponse::has_gps_global_origin() const {
  return _internal_has_gps_global_origin();
}
inline void GetGpsGlobalOriginResponse::clear_gps_global_origin() {
  if (GetArenaForAllocation() == nullptr && gps_global_origin_ != nullptr) {
    delete gps_global_origin_;
  }
  gps_global_origin_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::GpsGlobalOrigin& GetGpsGlobalOriginResponse::_internal_gps_global_origin() const {
  const ::mavsdk::rpc::telemetry::GpsGlobalOrigin* p = gps_global_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::GpsGlobalOrigin&>(
      ::mavsdk::rpc::telemetry::_GpsGlobalOrigin_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::GpsGlobalOrigin& GetGpsGlobalOriginResponse::gps_global_origin() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.gps_global_origin)
  return _internal_gps_global_origin();
}
inline void GetGpsGlobalOriginResponse::unsafe_arena_set_allocated_gps_global_origin(
    ::mavsdk::rpc::telemetry::GpsGlobalOrigin* gps_global_origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_global_origin_);
  }
  gps_global_origin_ = gps_global_origin;
  if (gps_global_origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.gps_global_origin)
}
inline ::mavsdk::rpc::telemetry::GpsGlobalOrigin* GetGpsGlobalOriginResponse::release_gps_global_origin() {
  
  ::mavsdk::rpc::telemetry::GpsGlobalOrigin* temp = gps_global_origin_;
  gps_global_origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::GpsGlobalOrigin* GetGpsGlobalOriginResponse::unsafe_arena_release_gps_global_origin() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.gps_global_origin)
  
  ::mavsdk::rpc::telemetry::GpsGlobalOrigin* temp = gps_global_origin_;
  gps_global_origin_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::GpsGlobalOrigin* GetGpsGlobalOriginResponse::_internal_mutable_gps_global_origin() {
  
  if (gps_global_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsGlobalOrigin>(GetArenaForAllocation());
    gps_global_origin_ = p;
  }
  return gps_global_origin_;
}
inline ::mavsdk::rpc::telemetry::GpsGlobalOrigin* GetGpsGlobalOriginResponse::mutable_gps_global_origin() {
  ::mavsdk::rpc::telemetry::GpsGlobalOrigin* _msg = _internal_mutable_gps_global_origin();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.gps_global_origin)
  return _msg;
}
inline void GetGpsGlobalOriginResponse::set_allocated_gps_global_origin(::mavsdk::rpc::telemetry::GpsGlobalOrigin* gps_global_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gps_global_origin_;
  }
  if (gps_global_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gps_global_origin);
    if (message_arena != submessage_arena) {
      gps_global_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_global_origin, submessage_arena);
    }
    
  } else {
    
  }
  gps_global_origin_ = gps_global_origin;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.gps_global_origin)
}

// -------------------------------------------------------------------

// Position

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double Position::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double Position::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Position.latitude_deg)
  return _internal_latitude_deg();
}
inline void Position::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void Position::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Position.latitude_deg)
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double Position::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double Position::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Position.longitude_deg)
  return _internal_longitude_deg();
}
inline void Position::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void Position::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Position.longitude_deg)
}

// float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float Position::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float Position::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Position.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void Position::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void Position::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Position.absolute_altitude_m)
}

// float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float Position::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float Position::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Position.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void Position::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void Position::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Position.relative_altitude_m)
}

// -------------------------------------------------------------------

// Heading

// double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Heading::clear_heading_deg() {
  heading_deg_ = 0;
}
inline double Heading::_internal_heading_deg() const {
  return heading_deg_;
}
inline double Heading::heading_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Heading.heading_deg)
  return _internal_heading_deg();
}
inline void Heading::_internal_set_heading_deg(double value) {
  
  heading_deg_ = value;
}
inline void Heading::set_heading_deg(double value) {
  _internal_set_heading_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Heading.heading_deg)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.w)
}

// float x = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.x)
}

// float y = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.y)
}

// float z = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.z)
}

// uint64 timestamp_us = 5;
inline void Quaternion::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t Quaternion::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t Quaternion::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.timestamp_us)
  return _internal_timestamp_us();
}
inline void Quaternion::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void Quaternion::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.timestamp_us)
}

// -------------------------------------------------------------------

// EulerAngle

// float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_roll_deg() {
  roll_deg_ = 0;
}
inline float EulerAngle::_internal_roll_deg() const {
  return roll_deg_;
}
inline float EulerAngle::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.EulerAngle.roll_deg)
  return _internal_roll_deg();
}
inline void EulerAngle::_internal_set_roll_deg(float value) {
  
  roll_deg_ = value;
}
inline void EulerAngle::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.EulerAngle.roll_deg)
}

// float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline float EulerAngle::_internal_pitch_deg() const {
  return pitch_deg_;
}
inline float EulerAngle::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.EulerAngle.pitch_deg)
  return _internal_pitch_deg();
}
inline void EulerAngle::_internal_set_pitch_deg(float value) {
  
  pitch_deg_ = value;
}
inline void EulerAngle::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.EulerAngle.pitch_deg)
}

// float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float EulerAngle::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float EulerAngle::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.EulerAngle.yaw_deg)
  return _internal_yaw_deg();
}
inline void EulerAngle::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void EulerAngle::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.EulerAngle.yaw_deg)
}

// uint64 timestamp_us = 4;
inline void EulerAngle::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t EulerAngle::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t EulerAngle::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.EulerAngle.timestamp_us)
  return _internal_timestamp_us();
}
inline void EulerAngle::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void EulerAngle::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.EulerAngle.timestamp_us)
}

// -------------------------------------------------------------------

// AngularVelocityBody

// float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_roll_rad_s() {
  roll_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_roll_rad_s() const {
  return roll_rad_s_;
}
inline float AngularVelocityBody::roll_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityBody.roll_rad_s)
  return _internal_roll_rad_s();
}
inline void AngularVelocityBody::_internal_set_roll_rad_s(float value) {
  
  roll_rad_s_ = value;
}
inline void AngularVelocityBody::set_roll_rad_s(float value) {
  _internal_set_roll_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityBody.roll_rad_s)
}

// float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_pitch_rad_s() {
  pitch_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_pitch_rad_s() const {
  return pitch_rad_s_;
}
inline float AngularVelocityBody::pitch_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityBody.pitch_rad_s)
  return _internal_pitch_rad_s();
}
inline void AngularVelocityBody::_internal_set_pitch_rad_s(float value) {
  
  pitch_rad_s_ = value;
}
inline void AngularVelocityBody::set_pitch_rad_s(float value) {
  _internal_set_pitch_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityBody.pitch_rad_s)
}

// float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_yaw_rad_s() {
  yaw_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_yaw_rad_s() const {
  return yaw_rad_s_;
}
inline float AngularVelocityBody::yaw_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityBody.yaw_rad_s)
  return _internal_yaw_rad_s();
}
inline void AngularVelocityBody::_internal_set_yaw_rad_s(float value) {
  
  yaw_rad_s_ = value;
}
inline void AngularVelocityBody::set_yaw_rad_s(float value) {
  _internal_set_yaw_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityBody.yaw_rad_s)
}

// -------------------------------------------------------------------

// GpsInfo

// int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
inline void GpsInfo::clear_num_satellites() {
  num_satellites_ = 0;
}
inline int32_t GpsInfo::_internal_num_satellites() const {
  return num_satellites_;
}
inline int32_t GpsInfo::num_satellites() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsInfo.num_satellites)
  return _internal_num_satellites();
}
inline void GpsInfo::_internal_set_num_satellites(int32_t value) {
  
  num_satellites_ = value;
}
inline void GpsInfo::set_num_satellites(int32_t value) {
  _internal_set_num_satellites(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GpsInfo.num_satellites)
}

// .mavsdk.rpc.telemetry.FixType fix_type = 2;
inline void GpsInfo::clear_fix_type() {
  fix_type_ = 0;
}
inline ::mavsdk::rpc::telemetry::FixType GpsInfo::_internal_fix_type() const {
  return static_cast< ::mavsdk::rpc::telemetry::FixType >(fix_type_);
}
inline ::mavsdk::rpc::telemetry::FixType GpsInfo::fix_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsInfo.fix_type)
  return _internal_fix_type();
}
inline void GpsInfo::_internal_set_fix_type(::mavsdk::rpc::telemetry::FixType value) {
  
  fix_type_ = value;
}
inline void GpsInfo::set_fix_type(::mavsdk::rpc::telemetry::FixType value) {
  _internal_set_fix_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GpsInfo.fix_type)
}

// -------------------------------------------------------------------

// RawGps

// uint64 timestamp_us = 1;
inline void RawGps::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t RawGps::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t RawGps::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.timestamp_us)
  return _internal_timestamp_us();
}
inline void RawGps::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void RawGps::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.timestamp_us)
}

// double latitude_deg = 2;
inline void RawGps::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double RawGps::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double RawGps::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.latitude_deg)
  return _internal_latitude_deg();
}
inline void RawGps::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void RawGps::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.latitude_deg)
}

// double longitude_deg = 3;
inline void RawGps::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double RawGps::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double RawGps::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.longitude_deg)
  return _internal_longitude_deg();
}
inline void RawGps::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void RawGps::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.longitude_deg)
}

// float absolute_altitude_m = 4;
inline void RawGps::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float RawGps::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float RawGps::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void RawGps::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void RawGps::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.absolute_altitude_m)
}

// float hdop = 5;
inline void RawGps::clear_hdop() {
  hdop_ = 0;
}
inline float RawGps::_internal_hdop() const {
  return hdop_;
}
inline float RawGps::hdop() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.hdop)
  return _internal_hdop();
}
inline void RawGps::_internal_set_hdop(float value) {
  
  hdop_ = value;
}
inline void RawGps::set_hdop(float value) {
  _internal_set_hdop(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.hdop)
}

// float vdop = 6;
inline void RawGps::clear_vdop() {
  vdop_ = 0;
}
inline float RawGps::_internal_vdop() const {
  return vdop_;
}
inline float RawGps::vdop() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.vdop)
  return _internal_vdop();
}
inline void RawGps::_internal_set_vdop(float value) {
  
  vdop_ = value;
}
inline void RawGps::set_vdop(float value) {
  _internal_set_vdop(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.vdop)
}

// float velocity_m_s = 7;
inline void RawGps::clear_velocity_m_s() {
  velocity_m_s_ = 0;
}
inline float RawGps::_internal_velocity_m_s() const {
  return velocity_m_s_;
}
inline float RawGps::velocity_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.velocity_m_s)
  return _internal_velocity_m_s();
}
inline void RawGps::_internal_set_velocity_m_s(float value) {
  
  velocity_m_s_ = value;
}
inline void RawGps::set_velocity_m_s(float value) {
  _internal_set_velocity_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.velocity_m_s)
}

// float cog_deg = 8;
inline void RawGps::clear_cog_deg() {
  cog_deg_ = 0;
}
inline float RawGps::_internal_cog_deg() const {
  return cog_deg_;
}
inline float RawGps::cog_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.cog_deg)
  return _internal_cog_deg();
}
inline void RawGps::_internal_set_cog_deg(float value) {
  
  cog_deg_ = value;
}
inline void RawGps::set_cog_deg(float value) {
  _internal_set_cog_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.cog_deg)
}

// float altitude_ellipsoid_m = 9;
inline void RawGps::clear_altitude_ellipsoid_m() {
  altitude_ellipsoid_m_ = 0;
}
inline float RawGps::_internal_altitude_ellipsoid_m() const {
  return altitude_ellipsoid_m_;
}
inline float RawGps::altitude_ellipsoid_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.altitude_ellipsoid_m)
  return _internal_altitude_ellipsoid_m();
}
inline void RawGps::_internal_set_altitude_ellipsoid_m(float value) {
  
  altitude_ellipsoid_m_ = value;
}
inline void RawGps::set_altitude_ellipsoid_m(float value) {
  _internal_set_altitude_ellipsoid_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.altitude_ellipsoid_m)
}

// float horizontal_uncertainty_m = 10;
inline void RawGps::clear_horizontal_uncertainty_m() {
  horizontal_uncertainty_m_ = 0;
}
inline float RawGps::_internal_horizontal_uncertainty_m() const {
  return horizontal_uncertainty_m_;
}
inline float RawGps::horizontal_uncertainty_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.horizontal_uncertainty_m)
  return _internal_horizontal_uncertainty_m();
}
inline void RawGps::_internal_set_horizontal_uncertainty_m(float value) {
  
  horizontal_uncertainty_m_ = value;
}
inline void RawGps::set_horizontal_uncertainty_m(float value) {
  _internal_set_horizontal_uncertainty_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.horizontal_uncertainty_m)
}

// float vertical_uncertainty_m = 11;
inline void RawGps::clear_vertical_uncertainty_m() {
  vertical_uncertainty_m_ = 0;
}
inline float RawGps::_internal_vertical_uncertainty_m() const {
  return vertical_uncertainty_m_;
}
inline float RawGps::vertical_uncertainty_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.vertical_uncertainty_m)
  return _internal_vertical_uncertainty_m();
}
inline void RawGps::_internal_set_vertical_uncertainty_m(float value) {
  
  vertical_uncertainty_m_ = value;
}
inline void RawGps::set_vertical_uncertainty_m(float value) {
  _internal_set_vertical_uncertainty_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.vertical_uncertainty_m)
}

// float velocity_uncertainty_m_s = 12;
inline void RawGps::clear_velocity_uncertainty_m_s() {
  velocity_uncertainty_m_s_ = 0;
}
inline float RawGps::_internal_velocity_uncertainty_m_s() const {
  return velocity_uncertainty_m_s_;
}
inline float RawGps::velocity_uncertainty_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.velocity_uncertainty_m_s)
  return _internal_velocity_uncertainty_m_s();
}
inline void RawGps::_internal_set_velocity_uncertainty_m_s(float value) {
  
  velocity_uncertainty_m_s_ = value;
}
inline void RawGps::set_velocity_uncertainty_m_s(float value) {
  _internal_set_velocity_uncertainty_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.velocity_uncertainty_m_s)
}

// float heading_uncertainty_deg = 13;
inline void RawGps::clear_heading_uncertainty_deg() {
  heading_uncertainty_deg_ = 0;
}
inline float RawGps::_internal_heading_uncertainty_deg() const {
  return heading_uncertainty_deg_;
}
inline float RawGps::heading_uncertainty_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.heading_uncertainty_deg)
  return _internal_heading_uncertainty_deg();
}
inline void RawGps::_internal_set_heading_uncertainty_deg(float value) {
  
  heading_uncertainty_deg_ = value;
}
inline void RawGps::set_heading_uncertainty_deg(float value) {
  _internal_set_heading_uncertainty_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.heading_uncertainty_deg)
}

// float yaw_deg = 14;
inline void RawGps::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float RawGps::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float RawGps::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RawGps.yaw_deg)
  return _internal_yaw_deg();
}
inline void RawGps::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void RawGps::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RawGps.yaw_deg)
}

// -------------------------------------------------------------------

// Battery

// uint32 id = 3 [(.mavsdk.options.default_value) = "0"];
inline void Battery::clear_id() {
  id_ = 0u;
}
inline uint32_t Battery::_internal_id() const {
  return id_;
}
inline uint32_t Battery::id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Battery.id)
  return _internal_id();
}
inline void Battery::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Battery::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Battery.id)
}

// float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Battery::clear_voltage_v() {
  voltage_v_ = 0;
}
inline float Battery::_internal_voltage_v() const {
  return voltage_v_;
}
inline float Battery::voltage_v() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Battery.voltage_v)
  return _internal_voltage_v();
}
inline void Battery::_internal_set_voltage_v(float value) {
  
  voltage_v_ = value;
}
inline void Battery::set_voltage_v(float value) {
  _internal_set_voltage_v(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Battery.voltage_v)
}

// float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Battery::clear_remaining_percent() {
  remaining_percent_ = 0;
}
inline float Battery::_internal_remaining_percent() const {
  return remaining_percent_;
}
inline float Battery::remaining_percent() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Battery.remaining_percent)
  return _internal_remaining_percent();
}
inline void Battery::_internal_set_remaining_percent(float value) {
  
  remaining_percent_ = value;
}
inline void Battery::set_remaining_percent(float value) {
  _internal_set_remaining_percent(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Battery.remaining_percent)
}

// -------------------------------------------------------------------

// Health

// bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
inline void Health::clear_is_gyrometer_calibration_ok() {
  is_gyrometer_calibration_ok_ = false;
}
inline bool Health::_internal_is_gyrometer_calibration_ok() const {
  return is_gyrometer_calibration_ok_;
}
inline bool Health::is_gyrometer_calibration_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_gyrometer_calibration_ok)
  return _internal_is_gyrometer_calibration_ok();
}
inline void Health::_internal_set_is_gyrometer_calibration_ok(bool value) {
  
  is_gyrometer_calibration_ok_ = value;
}
inline void Health::set_is_gyrometer_calibration_ok(bool value) {
  _internal_set_is_gyrometer_calibration_ok(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_gyrometer_calibration_ok)
}

// bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
inline void Health::clear_is_accelerometer_calibration_ok() {
  is_accelerometer_calibration_ok_ = false;
}
inline bool Health::_internal_is_accelerometer_calibration_ok() const {
  return is_accelerometer_calibration_ok_;
}
inline bool Health::is_accelerometer_calibration_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_accelerometer_calibration_ok)
  return _internal_is_accelerometer_calibration_ok();
}
inline void Health::_internal_set_is_accelerometer_calibration_ok(bool value) {
  
  is_accelerometer_calibration_ok_ = value;
}
inline void Health::set_is_accelerometer_calibration_ok(bool value) {
  _internal_set_is_accelerometer_calibration_ok(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_accelerometer_calibration_ok)
}

// bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
inline void Health::clear_is_magnetometer_calibration_ok() {
  is_magnetometer_calibration_ok_ = false;
}
inline bool Health::_internal_is_magnetometer_calibration_ok() const {
  return is_magnetometer_calibration_ok_;
}
inline bool Health::is_magnetometer_calibration_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_magnetometer_calibration_ok)
  return _internal_is_magnetometer_calibration_ok();
}
inline void Health::_internal_set_is_magnetometer_calibration_ok(bool value) {
  
  is_magnetometer_calibration_ok_ = value;
}
inline void Health::set_is_magnetometer_calibration_ok(bool value) {
  _internal_set_is_magnetometer_calibration_ok(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_magnetometer_calibration_ok)
}

// bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
inline void Health::clear_is_local_position_ok() {
  is_local_position_ok_ = false;
}
inline bool Health::_internal_is_local_position_ok() const {
  return is_local_position_ok_;
}
inline bool Health::is_local_position_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_local_position_ok)
  return _internal_is_local_position_ok();
}
inline void Health::_internal_set_is_local_position_ok(bool value) {
  
  is_local_position_ok_ = value;
}
inline void Health::set_is_local_position_ok(bool value) {
  _internal_set_is_local_position_ok(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_local_position_ok)
}

// bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
inline void Health::clear_is_global_position_ok() {
  is_global_position_ok_ = false;
}
inline bool Health::_internal_is_global_position_ok() const {
  return is_global_position_ok_;
}
inline bool Health::is_global_position_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_global_position_ok)
  return _internal_is_global_position_ok();
}
inline void Health::_internal_set_is_global_position_ok(bool value) {
  
  is_global_position_ok_ = value;
}
inline void Health::set_is_global_position_ok(bool value) {
  _internal_set_is_global_position_ok(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_global_position_ok)
}

// bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
inline void Health::clear_is_home_position_ok() {
  is_home_position_ok_ = false;
}
inline bool Health::_internal_is_home_position_ok() const {
  return is_home_position_ok_;
}
inline bool Health::is_home_position_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_home_position_ok)
  return _internal_is_home_position_ok();
}
inline void Health::_internal_set_is_home_position_ok(bool value) {
  
  is_home_position_ok_ = value;
}
inline void Health::set_is_home_position_ok(bool value) {
  _internal_set_is_home_position_ok(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_home_position_ok)
}

// bool is_armable = 8 [(.mavsdk.options.default_value) = "false"];
inline void Health::clear_is_armable() {
  is_armable_ = false;
}
inline bool Health::_internal_is_armable() const {
  return is_armable_;
}
inline bool Health::is_armable() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_armable)
  return _internal_is_armable();
}
inline void Health::_internal_set_is_armable(bool value) {
  
  is_armable_ = value;
}
inline void Health::set_is_armable(bool value) {
  _internal_set_is_armable(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_armable)
}

// -------------------------------------------------------------------

// RcStatus

// bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
inline void RcStatus::clear_was_available_once() {
  was_available_once_ = false;
}
inline bool RcStatus::_internal_was_available_once() const {
  return was_available_once_;
}
inline bool RcStatus::was_available_once() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RcStatus.was_available_once)
  return _internal_was_available_once();
}
inline void RcStatus::_internal_set_was_available_once(bool value) {
  
  was_available_once_ = value;
}
inline void RcStatus::set_was_available_once(bool value) {
  _internal_set_was_available_once(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RcStatus.was_available_once)
}

// bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
inline void RcStatus::clear_is_available() {
  is_available_ = false;
}
inline bool RcStatus::_internal_is_available() const {
  return is_available_;
}
inline bool RcStatus::is_available() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RcStatus.is_available)
  return _internal_is_available();
}
inline void RcStatus::_internal_set_is_available(bool value) {
  
  is_available_ = value;
}
inline void RcStatus::set_is_available(bool value) {
  _internal_set_is_available(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RcStatus.is_available)
}

// float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void RcStatus::clear_signal_strength_percent() {
  signal_strength_percent_ = 0;
}
inline float RcStatus::_internal_signal_strength_percent() const {
  return signal_strength_percent_;
}
inline float RcStatus::signal_strength_percent() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RcStatus.signal_strength_percent)
  return _internal_signal_strength_percent();
}
inline void RcStatus::_internal_set_signal_strength_percent(float value) {
  
  signal_strength_percent_ = value;
}
inline void RcStatus::set_signal_strength_percent(float value) {
  _internal_set_signal_strength_percent(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RcStatus.signal_strength_percent)
}

// -------------------------------------------------------------------

// StatusText

// .mavsdk.rpc.telemetry.StatusTextType type = 1;
inline void StatusText::clear_type() {
  type_ = 0;
}
inline ::mavsdk::rpc::telemetry::StatusTextType StatusText::_internal_type() const {
  return static_cast< ::mavsdk::rpc::telemetry::StatusTextType >(type_);
}
inline ::mavsdk::rpc::telemetry::StatusTextType StatusText::type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.StatusText.type)
  return _internal_type();
}
inline void StatusText::_internal_set_type(::mavsdk::rpc::telemetry::StatusTextType value) {
  
  type_ = value;
}
inline void StatusText::set_type(::mavsdk::rpc::telemetry::StatusTextType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.StatusText.type)
}

// string text = 2;
inline void StatusText::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& StatusText::text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.StatusText.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusText::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.StatusText.text)
}
inline std::string* StatusText::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.StatusText.text)
  return _s;
}
inline const std::string& StatusText::_internal_text() const {
  return text_.Get();
}
inline void StatusText::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* StatusText::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* StatusText::release_text() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.StatusText.text)
  return text_.Release();
}
inline void StatusText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.StatusText.text)
}

// -------------------------------------------------------------------

// ActuatorControlTarget

// int32 group = 1 [(.mavsdk.options.default_value) = "0"];
inline void ActuatorControlTarget::clear_group() {
  group_ = 0;
}
inline int32_t ActuatorControlTarget::_internal_group() const {
  return group_;
}
inline int32_t ActuatorControlTarget::group() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorControlTarget.group)
  return _internal_group();
}
inline void ActuatorControlTarget::_internal_set_group(int32_t value) {
  
  group_ = value;
}
inline void ActuatorControlTarget::set_group(int32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ActuatorControlTarget.group)
}

// repeated float controls = 2;
inline int ActuatorControlTarget::_internal_controls_size() const {
  return controls_.size();
}
inline int ActuatorControlTarget::controls_size() const {
  return _internal_controls_size();
}
inline void ActuatorControlTarget::clear_controls() {
  controls_.Clear();
}
inline float ActuatorControlTarget::_internal_controls(int index) const {
  return controls_.Get(index);
}
inline float ActuatorControlTarget::controls(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
  return _internal_controls(index);
}
inline void ActuatorControlTarget::set_controls(int index, float value) {
  controls_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
}
inline void ActuatorControlTarget::_internal_add_controls(float value) {
  controls_.Add(value);
}
inline void ActuatorControlTarget::add_controls(float value) {
  _internal_add_controls(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlTarget::_internal_controls() const {
  return controls_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlTarget::controls() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
  return _internal_controls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlTarget::_internal_mutable_controls() {
  return &controls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlTarget::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
  return _internal_mutable_controls();
}

// -------------------------------------------------------------------

// ActuatorOutputStatus

// uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
inline void ActuatorOutputStatus::clear_active() {
  active_ = 0u;
}
inline uint32_t ActuatorOutputStatus::_internal_active() const {
  return active_;
}
inline uint32_t ActuatorOutputStatus::active() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorOutputStatus.active)
  return _internal_active();
}
inline void ActuatorOutputStatus::_internal_set_active(uint32_t value) {
  
  active_ = value;
}
inline void ActuatorOutputStatus::set_active(uint32_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ActuatorOutputStatus.active)
}

// repeated float actuator = 2;
inline int ActuatorOutputStatus::_internal_actuator_size() const {
  return actuator_.size();
}
inline int ActuatorOutputStatus::actuator_size() const {
  return _internal_actuator_size();
}
inline void ActuatorOutputStatus::clear_actuator() {
  actuator_.Clear();
}
inline float ActuatorOutputStatus::_internal_actuator(int index) const {
  return actuator_.Get(index);
}
inline float ActuatorOutputStatus::actuator(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
  return _internal_actuator(index);
}
inline void ActuatorOutputStatus::set_actuator(int index, float value) {
  actuator_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
}
inline void ActuatorOutputStatus::_internal_add_actuator(float value) {
  actuator_.Add(value);
}
inline void ActuatorOutputStatus::add_actuator(float value) {
  _internal_add_actuator(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorOutputStatus::_internal_actuator() const {
  return actuator_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorOutputStatus::actuator() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
  return _internal_actuator();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorOutputStatus::_internal_mutable_actuator() {
  return &actuator_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorOutputStatus::mutable_actuator() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
  return _internal_mutable_actuator();
}

// -------------------------------------------------------------------

// Covariance

// repeated float covariance_matrix = 1;
inline int Covariance::_internal_covariance_matrix_size() const {
  return covariance_matrix_.size();
}
inline int Covariance::covariance_matrix_size() const {
  return _internal_covariance_matrix_size();
}
inline void Covariance::clear_covariance_matrix() {
  covariance_matrix_.Clear();
}
inline float Covariance::_internal_covariance_matrix(int index) const {
  return covariance_matrix_.Get(index);
}
inline float Covariance::covariance_matrix(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
  return _internal_covariance_matrix(index);
}
inline void Covariance::set_covariance_matrix(int index, float value) {
  covariance_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
}
inline void Covariance::_internal_add_covariance_matrix(float value) {
  covariance_matrix_.Add(value);
}
inline void Covariance::add_covariance_matrix(float value) {
  _internal_add_covariance_matrix(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Covariance::_internal_covariance_matrix() const {
  return covariance_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Covariance::covariance_matrix() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
  return _internal_covariance_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Covariance::_internal_mutable_covariance_matrix() {
  return &covariance_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Covariance::mutable_covariance_matrix() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
  return _internal_mutable_covariance_matrix();
}

// -------------------------------------------------------------------

// VelocityBody

// float x_m_s = 1;
inline void VelocityBody::clear_x_m_s() {
  x_m_s_ = 0;
}
inline float VelocityBody::_internal_x_m_s() const {
  return x_m_s_;
}
inline float VelocityBody::x_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.VelocityBody.x_m_s)
  return _internal_x_m_s();
}
inline void VelocityBody::_internal_set_x_m_s(float value) {
  
  x_m_s_ = value;
}
inline void VelocityBody::set_x_m_s(float value) {
  _internal_set_x_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.VelocityBody.x_m_s)
}

// float y_m_s = 2;
inline void VelocityBody::clear_y_m_s() {
  y_m_s_ = 0;
}
inline float VelocityBody::_internal_y_m_s() const {
  return y_m_s_;
}
inline float VelocityBody::y_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.VelocityBody.y_m_s)
  return _internal_y_m_s();
}
inline void VelocityBody::_internal_set_y_m_s(float value) {
  
  y_m_s_ = value;
}
inline void VelocityBody::set_y_m_s(float value) {
  _internal_set_y_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.VelocityBody.y_m_s)
}

// float z_m_s = 3;
inline void VelocityBody::clear_z_m_s() {
  z_m_s_ = 0;
}
inline float VelocityBody::_internal_z_m_s() const {
  return z_m_s_;
}
inline float VelocityBody::z_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.VelocityBody.z_m_s)
  return _internal_z_m_s();
}
inline void VelocityBody::_internal_set_z_m_s(float value) {
  
  z_m_s_ = value;
}
inline void VelocityBody::set_z_m_s(float value) {
  _internal_set_z_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.VelocityBody.z_m_s)
}

// -------------------------------------------------------------------

// PositionBody

// float x_m = 1;
inline void PositionBody::clear_x_m() {
  x_m_ = 0;
}
inline float PositionBody::_internal_x_m() const {
  return x_m_;
}
inline float PositionBody::x_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionBody.x_m)
  return _internal_x_m();
}
inline void PositionBody::_internal_set_x_m(float value) {
  
  x_m_ = value;
}
inline void PositionBody::set_x_m(float value) {
  _internal_set_x_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionBody.x_m)
}

// float y_m = 2;
inline void PositionBody::clear_y_m() {
  y_m_ = 0;
}
inline float PositionBody::_internal_y_m() const {
  return y_m_;
}
inline float PositionBody::y_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionBody.y_m)
  return _internal_y_m();
}
inline void PositionBody::_internal_set_y_m(float value) {
  
  y_m_ = value;
}
inline void PositionBody::set_y_m(float value) {
  _internal_set_y_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionBody.y_m)
}

// float z_m = 3;
inline void PositionBody::clear_z_m() {
  z_m_ = 0;
}
inline float PositionBody::_internal_z_m() const {
  return z_m_;
}
inline float PositionBody::z_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionBody.z_m)
  return _internal_z_m();
}
inline void PositionBody::_internal_set_z_m(float value) {
  
  z_m_ = value;
}
inline void PositionBody::set_z_m(float value) {
  _internal_set_z_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionBody.z_m)
}

// -------------------------------------------------------------------

// Odometry

// uint64 time_usec = 1;
inline void Odometry::clear_time_usec() {
  time_usec_ = uint64_t{0u};
}
inline uint64_t Odometry::_internal_time_usec() const {
  return time_usec_;
}
inline uint64_t Odometry::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.time_usec)
  return _internal_time_usec();
}
inline void Odometry::_internal_set_time_usec(uint64_t value) {
  
  time_usec_ = value;
}
inline void Odometry::set_time_usec(uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Odometry.time_usec)
}

// .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
inline void Odometry::clear_frame_id() {
  frame_id_ = 0;
}
inline ::mavsdk::rpc::telemetry::Odometry_MavFrame Odometry::_internal_frame_id() const {
  return static_cast< ::mavsdk::rpc::telemetry::Odometry_MavFrame >(frame_id_);
}
inline ::mavsdk::rpc::telemetry::Odometry_MavFrame Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.frame_id)
  return _internal_frame_id();
}
inline void Odometry::_internal_set_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value) {
  
  frame_id_ = value;
}
inline void Odometry::set_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Odometry.frame_id)
}

// .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
inline void Odometry::clear_child_frame_id() {
  child_frame_id_ = 0;
}
inline ::mavsdk::rpc::telemetry::Odometry_MavFrame Odometry::_internal_child_frame_id() const {
  return static_cast< ::mavsdk::rpc::telemetry::Odometry_MavFrame >(child_frame_id_);
}
inline ::mavsdk::rpc::telemetry::Odometry_MavFrame Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.child_frame_id)
  return _internal_child_frame_id();
}
inline void Odometry::_internal_set_child_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value) {
  
  child_frame_id_ = value;
}
inline void Odometry::set_child_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value) {
  _internal_set_child_frame_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Odometry.child_frame_id)
}

// .mavsdk.rpc.telemetry.PositionBody position_body = 4;
inline bool Odometry::_internal_has_position_body() const {
  return this != internal_default_instance() && position_body_ != nullptr;
}
inline bool Odometry::has_position_body() const {
  return _internal_has_position_body();
}
inline void Odometry::clear_position_body() {
  if (GetArenaForAllocation() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::PositionBody& Odometry::_internal_position_body() const {
  const ::mavsdk::rpc::telemetry::PositionBody* p = position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::PositionBody&>(
      ::mavsdk::rpc::telemetry::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::PositionBody& Odometry::position_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.position_body)
  return _internal_position_body();
}
inline void Odometry::unsafe_arena_set_allocated_position_body(
    ::mavsdk::rpc::telemetry::PositionBody* position_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_body_);
  }
  position_body_ = position_body;
  if (position_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Odometry.position_body)
}
inline ::mavsdk::rpc::telemetry::PositionBody* Odometry::release_position_body() {
  
  ::mavsdk::rpc::telemetry::PositionBody* temp = position_body_;
  position_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::PositionBody* Odometry::unsafe_arena_release_position_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.position_body)
  
  ::mavsdk::rpc::telemetry::PositionBody* temp = position_body_;
  position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::PositionBody* Odometry::_internal_mutable_position_body() {
  
  if (position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionBody>(GetArenaForAllocation());
    position_body_ = p;
  }
  return position_body_;
}
inline ::mavsdk::rpc::telemetry::PositionBody* Odometry::mutable_position_body() {
  ::mavsdk::rpc::telemetry::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.position_body)
  return _msg;
}
inline void Odometry::set_allocated_position_body(::mavsdk::rpc::telemetry::PositionBody* position_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_body_;
  }
  if (position_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_body);
    if (message_arena != submessage_arena) {
      position_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_body, submessage_arena);
    }
    
  } else {
    
  }
  position_body_ = position_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.position_body)
}

// .mavsdk.rpc.telemetry.Quaternion q = 5;
inline bool Odometry::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool Odometry::has_q() const {
  return _internal_has_q();
}
inline void Odometry::clear_q() {
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Quaternion& Odometry::_internal_q() const {
  const ::mavsdk::rpc::telemetry::Quaternion* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Quaternion&>(
      ::mavsdk::rpc::telemetry::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Quaternion& Odometry::q() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.q)
  return _internal_q();
}
inline void Odometry::unsafe_arena_set_allocated_q(
    ::mavsdk::rpc::telemetry::Quaternion* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Odometry.q)
}
inline ::mavsdk::rpc::telemetry::Quaternion* Odometry::release_q() {
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = q_;
  q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* Odometry::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.q)
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* Odometry::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(GetArenaForAllocation());
    q_ = p;
  }
  return q_;
}
inline ::mavsdk::rpc::telemetry::Quaternion* Odometry::mutable_q() {
  ::mavsdk::rpc::telemetry::Quaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.q)
  return _msg;
}
inline void Odometry::set_allocated_q(::mavsdk::rpc::telemetry::Quaternion* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.q)
}

// .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
inline bool Odometry::_internal_has_velocity_body() const {
  return this != internal_default_instance() && velocity_body_ != nullptr;
}
inline bool Odometry::has_velocity_body() const {
  return _internal_has_velocity_body();
}
inline void Odometry::clear_velocity_body() {
  if (GetArenaForAllocation() == nullptr && velocity_body_ != nullptr) {
    delete velocity_body_;
  }
  velocity_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::VelocityBody& Odometry::_internal_velocity_body() const {
  const ::mavsdk::rpc::telemetry::VelocityBody* p = velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::VelocityBody&>(
      ::mavsdk::rpc::telemetry::_VelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::VelocityBody& Odometry::velocity_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.velocity_body)
  return _internal_velocity_body();
}
inline void Odometry::unsafe_arena_set_allocated_velocity_body(
    ::mavsdk::rpc::telemetry::VelocityBody* velocity_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_body_);
  }
  velocity_body_ = velocity_body;
  if (velocity_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Odometry.velocity_body)
}
inline ::mavsdk::rpc::telemetry::VelocityBody* Odometry::release_velocity_body() {
  
  ::mavsdk::rpc::telemetry::VelocityBody* temp = velocity_body_;
  velocity_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::VelocityBody* Odometry::unsafe_arena_release_velocity_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.velocity_body)
  
  ::mavsdk::rpc::telemetry::VelocityBody* temp = velocity_body_;
  velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::VelocityBody* Odometry::_internal_mutable_velocity_body() {
  
  if (velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityBody>(GetArenaForAllocation());
    velocity_body_ = p;
  }
  return velocity_body_;
}
inline ::mavsdk::rpc::telemetry::VelocityBody* Odometry::mutable_velocity_body() {
  ::mavsdk::rpc::telemetry::VelocityBody* _msg = _internal_mutable_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.velocity_body)
  return _msg;
}
inline void Odometry::set_allocated_velocity_body(::mavsdk::rpc::telemetry::VelocityBody* velocity_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_body_;
  }
  if (velocity_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_body);
    if (message_arena != submessage_arena) {
      velocity_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_body, submessage_arena);
    }
    
  } else {
    
  }
  velocity_body_ = velocity_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.velocity_body)
}

// .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
inline bool Odometry::_internal_has_angular_velocity_body() const {
  return this != internal_default_instance() && angular_velocity_body_ != nullptr;
}
inline bool Odometry::has_angular_velocity_body() const {
  return _internal_has_angular_velocity_body();
}
inline void Odometry::clear_angular_velocity_body() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_body_ != nullptr) {
    delete angular_velocity_body_;
  }
  angular_velocity_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::AngularVelocityBody& Odometry::_internal_angular_velocity_body() const {
  const ::mavsdk::rpc::telemetry::AngularVelocityBody* p = angular_velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::AngularVelocityBody&>(
      ::mavsdk::rpc::telemetry::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::AngularVelocityBody& Odometry::angular_velocity_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
  return _internal_angular_velocity_body();
}
inline void Odometry::unsafe_arena_set_allocated_angular_velocity_body(
    ::mavsdk::rpc::telemetry::AngularVelocityBody* angular_velocity_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_body_);
  }
  angular_velocity_body_ = angular_velocity_body;
  if (angular_velocity_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* Odometry::release_angular_velocity_body() {
  
  ::mavsdk::rpc::telemetry::AngularVelocityBody* temp = angular_velocity_body_;
  angular_velocity_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* Odometry::unsafe_arena_release_angular_velocity_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
  
  ::mavsdk::rpc::telemetry::AngularVelocityBody* temp = angular_velocity_body_;
  angular_velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* Odometry::_internal_mutable_angular_velocity_body() {
  
  if (angular_velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityBody>(GetArenaForAllocation());
    angular_velocity_body_ = p;
  }
  return angular_velocity_body_;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* Odometry::mutable_angular_velocity_body() {
  ::mavsdk::rpc::telemetry::AngularVelocityBody* _msg = _internal_mutable_angular_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
  return _msg;
}
inline void Odometry::set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry::AngularVelocityBody* angular_velocity_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_body_;
  }
  if (angular_velocity_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_velocity_body);
    if (message_arena != submessage_arena) {
      angular_velocity_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_body, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_body_ = angular_velocity_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
}

// .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
inline bool Odometry::_internal_has_pose_covariance() const {
  return this != internal_default_instance() && pose_covariance_ != nullptr;
}
inline bool Odometry::has_pose_covariance() const {
  return _internal_has_pose_covariance();
}
inline void Odometry::clear_pose_covariance() {
  if (GetArenaForAllocation() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Covariance& Odometry::_internal_pose_covariance() const {
  const ::mavsdk::rpc::telemetry::Covariance* p = pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Covariance&>(
      ::mavsdk::rpc::telemetry::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Covariance& Odometry::pose_covariance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.pose_covariance)
  return _internal_pose_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_pose_covariance(
    ::mavsdk::rpc::telemetry::Covariance* pose_covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_covariance_);
  }
  pose_covariance_ = pose_covariance;
  if (pose_covariance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Odometry.pose_covariance)
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::release_pose_covariance() {
  
  ::mavsdk::rpc::telemetry::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::unsafe_arena_release_pose_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.pose_covariance)
  
  ::mavsdk::rpc::telemetry::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::_internal_mutable_pose_covariance() {
  
  if (pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Covariance>(GetArenaForAllocation());
    pose_covariance_ = p;
  }
  return pose_covariance_;
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::mutable_pose_covariance() {
  ::mavsdk::rpc::telemetry::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.pose_covariance)
  return _msg;
}
inline void Odometry::set_allocated_pose_covariance(::mavsdk::rpc::telemetry::Covariance* pose_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_covariance_;
  }
  if (pose_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose_covariance);
    if (message_arena != submessage_arena) {
      pose_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_covariance, submessage_arena);
    }
    
  } else {
    
  }
  pose_covariance_ = pose_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.pose_covariance)
}

// .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
inline bool Odometry::_internal_has_velocity_covariance() const {
  return this != internal_default_instance() && velocity_covariance_ != nullptr;
}
inline bool Odometry::has_velocity_covariance() const {
  return _internal_has_velocity_covariance();
}
inline void Odometry::clear_velocity_covariance() {
  if (GetArenaForAllocation() == nullptr && velocity_covariance_ != nullptr) {
    delete velocity_covariance_;
  }
  velocity_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Covariance& Odometry::_internal_velocity_covariance() const {
  const ::mavsdk::rpc::telemetry::Covariance* p = velocity_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::Covariance&>(
      ::mavsdk::rpc::telemetry::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::Covariance& Odometry::velocity_covariance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
  return _internal_velocity_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_velocity_covariance(
    ::mavsdk::rpc::telemetry::Covariance* velocity_covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_covariance_);
  }
  velocity_covariance_ = velocity_covariance;
  if (velocity_covariance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::release_velocity_covariance() {
  
  ::mavsdk::rpc::telemetry::Covariance* temp = velocity_covariance_;
  velocity_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::unsafe_arena_release_velocity_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
  
  ::mavsdk::rpc::telemetry::Covariance* temp = velocity_covariance_;
  velocity_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::_internal_mutable_velocity_covariance() {
  
  if (velocity_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Covariance>(GetArenaForAllocation());
    velocity_covariance_ = p;
  }
  return velocity_covariance_;
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::mutable_velocity_covariance() {
  ::mavsdk::rpc::telemetry::Covariance* _msg = _internal_mutable_velocity_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
  return _msg;
}
inline void Odometry::set_allocated_velocity_covariance(::mavsdk::rpc::telemetry::Covariance* velocity_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_covariance_;
  }
  if (velocity_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_covariance);
    if (message_arena != submessage_arena) {
      velocity_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_covariance, submessage_arena);
    }
    
  } else {
    
  }
  velocity_covariance_ = velocity_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
}

// -------------------------------------------------------------------

// DistanceSensor

// float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_minimum_distance_m() {
  minimum_distance_m_ = 0;
}
inline float DistanceSensor::_internal_minimum_distance_m() const {
  return minimum_distance_m_;
}
inline float DistanceSensor::minimum_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.DistanceSensor.minimum_distance_m)
  return _internal_minimum_distance_m();
}
inline void DistanceSensor::_internal_set_minimum_distance_m(float value) {
  
  minimum_distance_m_ = value;
}
inline void DistanceSensor::set_minimum_distance_m(float value) {
  _internal_set_minimum_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.DistanceSensor.minimum_distance_m)
}

// float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_maximum_distance_m() {
  maximum_distance_m_ = 0;
}
inline float DistanceSensor::_internal_maximum_distance_m() const {
  return maximum_distance_m_;
}
inline float DistanceSensor::maximum_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.DistanceSensor.maximum_distance_m)
  return _internal_maximum_distance_m();
}
inline void DistanceSensor::_internal_set_maximum_distance_m(float value) {
  
  maximum_distance_m_ = value;
}
inline void DistanceSensor::set_maximum_distance_m(float value) {
  _internal_set_maximum_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.DistanceSensor.maximum_distance_m)
}

// float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_current_distance_m() {
  current_distance_m_ = 0;
}
inline float DistanceSensor::_internal_current_distance_m() const {
  return current_distance_m_;
}
inline float DistanceSensor::current_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.DistanceSensor.current_distance_m)
  return _internal_current_distance_m();
}
inline void DistanceSensor::_internal_set_current_distance_m(float value) {
  
  current_distance_m_ = value;
}
inline void DistanceSensor::set_current_distance_m(float value) {
  _internal_set_current_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.DistanceSensor.current_distance_m)
}

// -------------------------------------------------------------------

// ScaledPressure

// uint64 timestamp_us = 1;
inline void ScaledPressure::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t ScaledPressure::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t ScaledPressure::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ScaledPressure.timestamp_us)
  return _internal_timestamp_us();
}
inline void ScaledPressure::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void ScaledPressure::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ScaledPressure.timestamp_us)
}

// float absolute_pressure_hpa = 2;
inline void ScaledPressure::clear_absolute_pressure_hpa() {
  absolute_pressure_hpa_ = 0;
}
inline float ScaledPressure::_internal_absolute_pressure_hpa() const {
  return absolute_pressure_hpa_;
}
inline float ScaledPressure::absolute_pressure_hpa() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ScaledPressure.absolute_pressure_hpa)
  return _internal_absolute_pressure_hpa();
}
inline void ScaledPressure::_internal_set_absolute_pressure_hpa(float value) {
  
  absolute_pressure_hpa_ = value;
}
inline void ScaledPressure::set_absolute_pressure_hpa(float value) {
  _internal_set_absolute_pressure_hpa(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ScaledPressure.absolute_pressure_hpa)
}

// float differential_pressure_hpa = 3;
inline void ScaledPressure::clear_differential_pressure_hpa() {
  differential_pressure_hpa_ = 0;
}
inline float ScaledPressure::_internal_differential_pressure_hpa() const {
  return differential_pressure_hpa_;
}
inline float ScaledPressure::differential_pressure_hpa() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ScaledPressure.differential_pressure_hpa)
  return _internal_differential_pressure_hpa();
}
inline void ScaledPressure::_internal_set_differential_pressure_hpa(float value) {
  
  differential_pressure_hpa_ = value;
}
inline void ScaledPressure::set_differential_pressure_hpa(float value) {
  _internal_set_differential_pressure_hpa(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ScaledPressure.differential_pressure_hpa)
}

// float temperature_deg = 4;
inline void ScaledPressure::clear_temperature_deg() {
  temperature_deg_ = 0;
}
inline float ScaledPressure::_internal_temperature_deg() const {
  return temperature_deg_;
}
inline float ScaledPressure::temperature_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ScaledPressure.temperature_deg)
  return _internal_temperature_deg();
}
inline void ScaledPressure::_internal_set_temperature_deg(float value) {
  
  temperature_deg_ = value;
}
inline void ScaledPressure::set_temperature_deg(float value) {
  _internal_set_temperature_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ScaledPressure.temperature_deg)
}

// float differential_pressure_temperature_deg = 5;
inline void ScaledPressure::clear_differential_pressure_temperature_deg() {
  differential_pressure_temperature_deg_ = 0;
}
inline float ScaledPressure::_internal_differential_pressure_temperature_deg() const {
  return differential_pressure_temperature_deg_;
}
inline float ScaledPressure::differential_pressure_temperature_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ScaledPressure.differential_pressure_temperature_deg)
  return _internal_differential_pressure_temperature_deg();
}
inline void ScaledPressure::_internal_set_differential_pressure_temperature_deg(float value) {
  
  differential_pressure_temperature_deg_ = value;
}
inline void ScaledPressure::set_differential_pressure_temperature_deg(float value) {
  _internal_set_differential_pressure_temperature_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ScaledPressure.differential_pressure_temperature_deg)
}

// -------------------------------------------------------------------

// PositionNed

// float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_north_m() {
  north_m_ = 0;
}
inline float PositionNed::_internal_north_m() const {
  return north_m_;
}
inline float PositionNed::north_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionNed.north_m)
  return _internal_north_m();
}
inline void PositionNed::_internal_set_north_m(float value) {
  
  north_m_ = value;
}
inline void PositionNed::set_north_m(float value) {
  _internal_set_north_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionNed.north_m)
}

// float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_east_m() {
  east_m_ = 0;
}
inline float PositionNed::_internal_east_m() const {
  return east_m_;
}
inline float PositionNed::east_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionNed.east_m)
  return _internal_east_m();
}
inline void PositionNed::_internal_set_east_m(float value) {
  
  east_m_ = value;
}
inline void PositionNed::set_east_m(float value) {
  _internal_set_east_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionNed.east_m)
}

// float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_down_m() {
  down_m_ = 0;
}
inline float PositionNed::_internal_down_m() const {
  return down_m_;
}
inline float PositionNed::down_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionNed.down_m)
  return _internal_down_m();
}
inline void PositionNed::_internal_set_down_m(float value) {
  
  down_m_ = value;
}
inline void PositionNed::set_down_m(float value) {
  _internal_set_down_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionNed.down_m)
}

// -------------------------------------------------------------------

// VelocityNed

// float north_m_s = 1;
inline void VelocityNed::clear_north_m_s() {
  north_m_s_ = 0;
}
inline float VelocityNed::_internal_north_m_s() const {
  return north_m_s_;
}
inline float VelocityNed::north_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.VelocityNed.north_m_s)
  return _internal_north_m_s();
}
inline void VelocityNed::_internal_set_north_m_s(float value) {
  
  north_m_s_ = value;
}
inline void VelocityNed::set_north_m_s(float value) {
  _internal_set_north_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.VelocityNed.north_m_s)
}

// float east_m_s = 2;
inline void VelocityNed::clear_east_m_s() {
  east_m_s_ = 0;
}
inline float VelocityNed::_internal_east_m_s() const {
  return east_m_s_;
}
inline float VelocityNed::east_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.VelocityNed.east_m_s)
  return _internal_east_m_s();
}
inline void VelocityNed::_internal_set_east_m_s(float value) {
  
  east_m_s_ = value;
}
inline void VelocityNed::set_east_m_s(float value) {
  _internal_set_east_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.VelocityNed.east_m_s)
}

// float down_m_s = 3;
inline void VelocityNed::clear_down_m_s() {
  down_m_s_ = 0;
}
inline float VelocityNed::_internal_down_m_s() const {
  return down_m_s_;
}
inline float VelocityNed::down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.VelocityNed.down_m_s)
  return _internal_down_m_s();
}
inline void VelocityNed::_internal_set_down_m_s(float value) {
  
  down_m_s_ = value;
}
inline void VelocityNed::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.VelocityNed.down_m_s)
}

// -------------------------------------------------------------------

// PositionVelocityNed

// .mavsdk.rpc.telemetry.PositionNed position = 1;
inline bool PositionVelocityNed::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PositionVelocityNed::has_position() const {
  return _internal_has_position();
}
inline void PositionVelocityNed::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::PositionNed& PositionVelocityNed::_internal_position() const {
  const ::mavsdk::rpc::telemetry::PositionNed* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::PositionNed&>(
      ::mavsdk::rpc::telemetry::_PositionNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::PositionNed& PositionVelocityNed::position() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionVelocityNed.position)
  return _internal_position();
}
inline void PositionVelocityNed::unsafe_arena_set_allocated_position(
    ::mavsdk::rpc::telemetry::PositionNed* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.PositionVelocityNed.position)
}
inline ::mavsdk::rpc::telemetry::PositionNed* PositionVelocityNed::release_position() {
  
  ::mavsdk::rpc::telemetry::PositionNed* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::PositionNed* PositionVelocityNed::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.PositionVelocityNed.position)
  
  ::mavsdk::rpc::telemetry::PositionNed* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::PositionNed* PositionVelocityNed::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionNed>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::mavsdk::rpc::telemetry::PositionNed* PositionVelocityNed::mutable_position() {
  ::mavsdk::rpc::telemetry::PositionNed* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.PositionVelocityNed.position)
  return _msg;
}
inline void PositionVelocityNed::set_allocated_position(::mavsdk::rpc::telemetry::PositionNed* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.PositionVelocityNed.position)
}

// .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
inline bool PositionVelocityNed::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool PositionVelocityNed::has_velocity() const {
  return _internal_has_velocity();
}
inline void PositionVelocityNed::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::VelocityNed& PositionVelocityNed::_internal_velocity() const {
  const ::mavsdk::rpc::telemetry::VelocityNed* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::VelocityNed&>(
      ::mavsdk::rpc::telemetry::_VelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::VelocityNed& PositionVelocityNed::velocity() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionVelocityNed.velocity)
  return _internal_velocity();
}
inline void PositionVelocityNed::unsafe_arena_set_allocated_velocity(
    ::mavsdk::rpc::telemetry::VelocityNed* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.PositionVelocityNed.velocity)
}
inline ::mavsdk::rpc::telemetry::VelocityNed* PositionVelocityNed::release_velocity() {
  
  ::mavsdk::rpc::telemetry::VelocityNed* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::VelocityNed* PositionVelocityNed::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.PositionVelocityNed.velocity)
  
  ::mavsdk::rpc::telemetry::VelocityNed* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::VelocityNed* PositionVelocityNed::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityNed>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::mavsdk::rpc::telemetry::VelocityNed* PositionVelocityNed::mutable_velocity() {
  ::mavsdk::rpc::telemetry::VelocityNed* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.PositionVelocityNed.velocity)
  return _msg;
}
inline void PositionVelocityNed::set_allocated_velocity(::mavsdk::rpc::telemetry::VelocityNed* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.PositionVelocityNed.velocity)
}

// -------------------------------------------------------------------

// GroundTruth

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double GroundTruth::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double GroundTruth::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GroundTruth.latitude_deg)
  return _internal_latitude_deg();
}
inline void GroundTruth::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void GroundTruth::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GroundTruth.latitude_deg)
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double GroundTruth::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double GroundTruth::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GroundTruth.longitude_deg)
  return _internal_longitude_deg();
}
inline void GroundTruth::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void GroundTruth::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GroundTruth.longitude_deg)
}

// float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float GroundTruth::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float GroundTruth::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GroundTruth.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void GroundTruth::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void GroundTruth::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GroundTruth.absolute_altitude_m)
}

// -------------------------------------------------------------------

// FixedwingMetrics

// float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_airspeed_m_s() {
  airspeed_m_s_ = 0;
}
inline float FixedwingMetrics::_internal_airspeed_m_s() const {
  return airspeed_m_s_;
}
inline float FixedwingMetrics::airspeed_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.FixedwingMetrics.airspeed_m_s)
  return _internal_airspeed_m_s();
}
inline void FixedwingMetrics::_internal_set_airspeed_m_s(float value) {
  
  airspeed_m_s_ = value;
}
inline void FixedwingMetrics::set_airspeed_m_s(float value) {
  _internal_set_airspeed_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.FixedwingMetrics.airspeed_m_s)
}

// float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_throttle_percentage() {
  throttle_percentage_ = 0;
}
inline float FixedwingMetrics::_internal_throttle_percentage() const {
  return throttle_percentage_;
}
inline float FixedwingMetrics::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.FixedwingMetrics.throttle_percentage)
  return _internal_throttle_percentage();
}
inline void FixedwingMetrics::_internal_set_throttle_percentage(float value) {
  
  throttle_percentage_ = value;
}
inline void FixedwingMetrics::set_throttle_percentage(float value) {
  _internal_set_throttle_percentage(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.FixedwingMetrics.throttle_percentage)
}

// float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_climb_rate_m_s() {
  climb_rate_m_s_ = 0;
}
inline float FixedwingMetrics::_internal_climb_rate_m_s() const {
  return climb_rate_m_s_;
}
inline float FixedwingMetrics::climb_rate_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.FixedwingMetrics.climb_rate_m_s)
  return _internal_climb_rate_m_s();
}
inline void FixedwingMetrics::_internal_set_climb_rate_m_s(float value) {
  
  climb_rate_m_s_ = value;
}
inline void FixedwingMetrics::set_climb_rate_m_s(float value) {
  _internal_set_climb_rate_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.FixedwingMetrics.climb_rate_m_s)
}

// -------------------------------------------------------------------

// AccelerationFrd

// float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_forward_m_s2() {
  forward_m_s2_ = 0;
}
inline float AccelerationFrd::_internal_forward_m_s2() const {
  return forward_m_s2_;
}
inline float AccelerationFrd::forward_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AccelerationFrd.forward_m_s2)
  return _internal_forward_m_s2();
}
inline void AccelerationFrd::_internal_set_forward_m_s2(float value) {
  
  forward_m_s2_ = value;
}
inline void AccelerationFrd::set_forward_m_s2(float value) {
  _internal_set_forward_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AccelerationFrd.forward_m_s2)
}

// float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_right_m_s2() {
  right_m_s2_ = 0;
}
inline float AccelerationFrd::_internal_right_m_s2() const {
  return right_m_s2_;
}
inline float AccelerationFrd::right_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AccelerationFrd.right_m_s2)
  return _internal_right_m_s2();
}
inline void AccelerationFrd::_internal_set_right_m_s2(float value) {
  
  right_m_s2_ = value;
}
inline void AccelerationFrd::set_right_m_s2(float value) {
  _internal_set_right_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AccelerationFrd.right_m_s2)
}

// float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_down_m_s2() {
  down_m_s2_ = 0;
}
inline float AccelerationFrd::_internal_down_m_s2() const {
  return down_m_s2_;
}
inline float AccelerationFrd::down_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AccelerationFrd.down_m_s2)
  return _internal_down_m_s2();
}
inline void AccelerationFrd::_internal_set_down_m_s2(float value) {
  
  down_m_s2_ = value;
}
inline void AccelerationFrd::set_down_m_s2(float value) {
  _internal_set_down_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AccelerationFrd.down_m_s2)
}

// -------------------------------------------------------------------

// AngularVelocityFrd

// float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_forward_rad_s() {
  forward_rad_s_ = 0;
}
inline float AngularVelocityFrd::_internal_forward_rad_s() const {
  return forward_rad_s_;
}
inline float AngularVelocityFrd::forward_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityFrd.forward_rad_s)
  return _internal_forward_rad_s();
}
inline void AngularVelocityFrd::_internal_set_forward_rad_s(float value) {
  
  forward_rad_s_ = value;
}
inline void AngularVelocityFrd::set_forward_rad_s(float value) {
  _internal_set_forward_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityFrd.forward_rad_s)
}

// float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_right_rad_s() {
  right_rad_s_ = 0;
}
inline float AngularVelocityFrd::_internal_right_rad_s() const {
  return right_rad_s_;
}
inline float AngularVelocityFrd::right_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityFrd.right_rad_s)
  return _internal_right_rad_s();
}
inline void AngularVelocityFrd::_internal_set_right_rad_s(float value) {
  
  right_rad_s_ = value;
}
inline void AngularVelocityFrd::set_right_rad_s(float value) {
  _internal_set_right_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityFrd.right_rad_s)
}

// float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_down_rad_s() {
  down_rad_s_ = 0;
}
inline float AngularVelocityFrd::_internal_down_rad_s() const {
  return down_rad_s_;
}
inline float AngularVelocityFrd::down_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityFrd.down_rad_s)
  return _internal_down_rad_s();
}
inline void AngularVelocityFrd::_internal_set_down_rad_s(float value) {
  
  down_rad_s_ = value;
}
inline void AngularVelocityFrd::set_down_rad_s(float value) {
  _internal_set_down_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityFrd.down_rad_s)
}

// -------------------------------------------------------------------

// MagneticFieldFrd

// float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_forward_gauss() {
  forward_gauss_ = 0;
}
inline float MagneticFieldFrd::_internal_forward_gauss() const {
  return forward_gauss_;
}
inline float MagneticFieldFrd::forward_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.MagneticFieldFrd.forward_gauss)
  return _internal_forward_gauss();
}
inline void MagneticFieldFrd::_internal_set_forward_gauss(float value) {
  
  forward_gauss_ = value;
}
inline void MagneticFieldFrd::set_forward_gauss(float value) {
  _internal_set_forward_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.MagneticFieldFrd.forward_gauss)
}

// float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_right_gauss() {
  right_gauss_ = 0;
}
inline float MagneticFieldFrd::_internal_right_gauss() const {
  return right_gauss_;
}
inline float MagneticFieldFrd::right_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.MagneticFieldFrd.right_gauss)
  return _internal_right_gauss();
}
inline void MagneticFieldFrd::_internal_set_right_gauss(float value) {
  
  right_gauss_ = value;
}
inline void MagneticFieldFrd::set_right_gauss(float value) {
  _internal_set_right_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.MagneticFieldFrd.right_gauss)
}

// float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_down_gauss() {
  down_gauss_ = 0;
}
inline float MagneticFieldFrd::_internal_down_gauss() const {
  return down_gauss_;
}
inline float MagneticFieldFrd::down_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.MagneticFieldFrd.down_gauss)
  return _internal_down_gauss();
}
inline void MagneticFieldFrd::_internal_set_down_gauss(float value) {
  
  down_gauss_ = value;
}
inline void MagneticFieldFrd::set_down_gauss(float value) {
  _internal_set_down_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.MagneticFieldFrd.down_gauss)
}

// -------------------------------------------------------------------

// Imu

// .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
inline bool Imu::_internal_has_acceleration_frd() const {
  return this != internal_default_instance() && acceleration_frd_ != nullptr;
}
inline bool Imu::has_acceleration_frd() const {
  return _internal_has_acceleration_frd();
}
inline void Imu::clear_acceleration_frd() {
  if (GetArenaForAllocation() == nullptr && acceleration_frd_ != nullptr) {
    delete acceleration_frd_;
  }
  acceleration_frd_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::AccelerationFrd& Imu::_internal_acceleration_frd() const {
  const ::mavsdk::rpc::telemetry::AccelerationFrd* p = acceleration_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::AccelerationFrd&>(
      ::mavsdk::rpc::telemetry::_AccelerationFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::AccelerationFrd& Imu::acceleration_frd() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Imu.acceleration_frd)
  return _internal_acceleration_frd();
}
inline void Imu::unsafe_arena_set_allocated_acceleration_frd(
    ::mavsdk::rpc::telemetry::AccelerationFrd* acceleration_frd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_frd_);
  }
  acceleration_frd_ = acceleration_frd;
  if (acceleration_frd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Imu.acceleration_frd)
}
inline ::mavsdk::rpc::telemetry::AccelerationFrd* Imu::release_acceleration_frd() {
  
  ::mavsdk::rpc::telemetry::AccelerationFrd* temp = acceleration_frd_;
  acceleration_frd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::AccelerationFrd* Imu::unsafe_arena_release_acceleration_frd() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Imu.acceleration_frd)
  
  ::mavsdk::rpc::telemetry::AccelerationFrd* temp = acceleration_frd_;
  acceleration_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::AccelerationFrd* Imu::_internal_mutable_acceleration_frd() {
  
  if (acceleration_frd_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::AccelerationFrd>(GetArenaForAllocation());
    acceleration_frd_ = p;
  }
  return acceleration_frd_;
}
inline ::mavsdk::rpc::telemetry::AccelerationFrd* Imu::mutable_acceleration_frd() {
  ::mavsdk::rpc::telemetry::AccelerationFrd* _msg = _internal_mutable_acceleration_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Imu.acceleration_frd)
  return _msg;
}
inline void Imu::set_allocated_acceleration_frd(::mavsdk::rpc::telemetry::AccelerationFrd* acceleration_frd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acceleration_frd_;
  }
  if (acceleration_frd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acceleration_frd);
    if (message_arena != submessage_arena) {
      acceleration_frd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration_frd, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_frd_ = acceleration_frd;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Imu.acceleration_frd)
}

// .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
inline bool Imu::_internal_has_angular_velocity_frd() const {
  return this != internal_default_instance() && angular_velocity_frd_ != nullptr;
}
inline bool Imu::has_angular_velocity_frd() const {
  return _internal_has_angular_velocity_frd();
}
inline void Imu::clear_angular_velocity_frd() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_frd_ != nullptr) {
    delete angular_velocity_frd_;
  }
  angular_velocity_frd_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::AngularVelocityFrd& Imu::_internal_angular_velocity_frd() const {
  const ::mavsdk::rpc::telemetry::AngularVelocityFrd* p = angular_velocity_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::AngularVelocityFrd&>(
      ::mavsdk::rpc::telemetry::_AngularVelocityFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::AngularVelocityFrd& Imu::angular_velocity_frd() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Imu.angular_velocity_frd)
  return _internal_angular_velocity_frd();
}
inline void Imu::unsafe_arena_set_allocated_angular_velocity_frd(
    ::mavsdk::rpc::telemetry::AngularVelocityFrd* angular_velocity_frd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_frd_);
  }
  angular_velocity_frd_ = angular_velocity_frd;
  if (angular_velocity_frd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Imu.angular_velocity_frd)
}
inline ::mavsdk::rpc::telemetry::AngularVelocityFrd* Imu::release_angular_velocity_frd() {
  
  ::mavsdk::rpc::telemetry::AngularVelocityFrd* temp = angular_velocity_frd_;
  angular_velocity_frd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityFrd* Imu::unsafe_arena_release_angular_velocity_frd() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Imu.angular_velocity_frd)
  
  ::mavsdk::rpc::telemetry::AngularVelocityFrd* temp = angular_velocity_frd_;
  angular_velocity_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityFrd* Imu::_internal_mutable_angular_velocity_frd() {
  
  if (angular_velocity_frd_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityFrd>(GetArenaForAllocation());
    angular_velocity_frd_ = p;
  }
  return angular_velocity_frd_;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityFrd* Imu::mutable_angular_velocity_frd() {
  ::mavsdk::rpc::telemetry::AngularVelocityFrd* _msg = _internal_mutable_angular_velocity_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Imu.angular_velocity_frd)
  return _msg;
}
inline void Imu::set_allocated_angular_velocity_frd(::mavsdk::rpc::telemetry::AngularVelocityFrd* angular_velocity_frd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_frd_;
  }
  if (angular_velocity_frd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_velocity_frd);
    if (message_arena != submessage_arena) {
      angular_velocity_frd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_frd, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_frd_ = angular_velocity_frd;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Imu.angular_velocity_frd)
}

// .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
inline bool Imu::_internal_has_magnetic_field_frd() const {
  return this != internal_default_instance() && magnetic_field_frd_ != nullptr;
}
inline bool Imu::has_magnetic_field_frd() const {
  return _internal_has_magnetic_field_frd();
}
inline void Imu::clear_magnetic_field_frd() {
  if (GetArenaForAllocation() == nullptr && magnetic_field_frd_ != nullptr) {
    delete magnetic_field_frd_;
  }
  magnetic_field_frd_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::MagneticFieldFrd& Imu::_internal_magnetic_field_frd() const {
  const ::mavsdk::rpc::telemetry::MagneticFieldFrd* p = magnetic_field_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry::MagneticFieldFrd&>(
      ::mavsdk::rpc::telemetry::_MagneticFieldFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry::MagneticFieldFrd& Imu::magnetic_field_frd() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Imu.magnetic_field_frd)
  return _internal_magnetic_field_frd();
}
inline void Imu::unsafe_arena_set_allocated_magnetic_field_frd(
    ::mavsdk::rpc::telemetry::MagneticFieldFrd* magnetic_field_frd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(magnetic_field_frd_);
  }
  magnetic_field_frd_ = magnetic_field_frd;
  if (magnetic_field_frd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry.Imu.magnetic_field_frd)
}
inline ::mavsdk::rpc::telemetry::MagneticFieldFrd* Imu::release_magnetic_field_frd() {
  
  ::mavsdk::rpc::telemetry::MagneticFieldFrd* temp = magnetic_field_frd_;
  magnetic_field_frd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry::MagneticFieldFrd* Imu::unsafe_arena_release_magnetic_field_frd() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Imu.magnetic_field_frd)
  
  ::mavsdk::rpc::telemetry::MagneticFieldFrd* temp = magnetic_field_frd_;
  magnetic_field_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::MagneticFieldFrd* Imu::_internal_mutable_magnetic_field_frd() {
  
  if (magnetic_field_frd_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::MagneticFieldFrd>(GetArenaForAllocation());
    magnetic_field_frd_ = p;
  }
  return magnetic_field_frd_;
}
inline ::mavsdk::rpc::telemetry::MagneticFieldFrd* Imu::mutable_magnetic_field_frd() {
  ::mavsdk::rpc::telemetry::MagneticFieldFrd* _msg = _internal_mutable_magnetic_field_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Imu.magnetic_field_frd)
  return _msg;
}
inline void Imu::set_allocated_magnetic_field_frd(::mavsdk::rpc::telemetry::MagneticFieldFrd* magnetic_field_frd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete magnetic_field_frd_;
  }
  if (magnetic_field_frd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(magnetic_field_frd);
    if (message_arena != submessage_arena) {
      magnetic_field_frd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magnetic_field_frd, submessage_arena);
    }
    
  } else {
    
  }
  magnetic_field_frd_ = magnetic_field_frd;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Imu.magnetic_field_frd)
}

// float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Imu::clear_temperature_degc() {
  temperature_degc_ = 0;
}
inline float Imu::_internal_temperature_degc() const {
  return temperature_degc_;
}
inline float Imu::temperature_degc() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Imu.temperature_degc)
  return _internal_temperature_degc();
}
inline void Imu::_internal_set_temperature_degc(float value) {
  
  temperature_degc_ = value;
}
inline void Imu::set_temperature_degc(float value) {
  _internal_set_temperature_degc(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Imu.temperature_degc)
}

// uint64 timestamp_us = 5;
inline void Imu::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t Imu::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t Imu::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Imu.timestamp_us)
  return _internal_timestamp_us();
}
inline void Imu::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void Imu::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Imu.timestamp_us)
}

// -------------------------------------------------------------------

// GpsGlobalOrigin

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void GpsGlobalOrigin::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double GpsGlobalOrigin::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double GpsGlobalOrigin::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsGlobalOrigin.latitude_deg)
  return _internal_latitude_deg();
}
inline void GpsGlobalOrigin::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void GpsGlobalOrigin::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GpsGlobalOrigin.latitude_deg)
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void GpsGlobalOrigin::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double GpsGlobalOrigin::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double GpsGlobalOrigin::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsGlobalOrigin.longitude_deg)
  return _internal_longitude_deg();
}
inline void GpsGlobalOrigin::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void GpsGlobalOrigin::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GpsGlobalOrigin.longitude_deg)
}

// float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void GpsGlobalOrigin::clear_altitude_m() {
  altitude_m_ = 0;
}
inline float GpsGlobalOrigin::_internal_altitude_m() const {
  return altitude_m_;
}
inline float GpsGlobalOrigin::altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsGlobalOrigin.altitude_m)
  return _internal_altitude_m();
}
inline void GpsGlobalOrigin::_internal_set_altitude_m(float value) {
  
  altitude_m_ = value;
}
inline void GpsGlobalOrigin::set_altitude_m(float value) {
  _internal_set_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GpsGlobalOrigin.altitude_m)
}

// -------------------------------------------------------------------

// TelemetryResult

// .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
inline void TelemetryResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::telemetry::TelemetryResult_Result TelemetryResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::telemetry::TelemetryResult_Result >(result_);
}
inline ::mavsdk::rpc::telemetry::TelemetryResult_Result TelemetryResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.TelemetryResult.result)
  return _internal_result();
}
inline void TelemetryResult::_internal_set_result(::mavsdk::rpc::telemetry::TelemetryResult_Result value) {
  
  result_ = value;
}
inline void TelemetryResult::set_result(::mavsdk::rpc::telemetry::TelemetryResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.TelemetryResult.result)
}

// string result_str = 2;
inline void TelemetryResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& TelemetryResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.TelemetryResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetryResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.TelemetryResult.result_str)
}
inline std::string* TelemetryResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.TelemetryResult.result_str)
  return _s;
}
inline const std::string& TelemetryResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void TelemetryResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* TelemetryResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* TelemetryResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.TelemetryResult.result_str)
  return result_str_.Release();
}
inline void TelemetryResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.TelemetryResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::Odometry_MavFrame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::Odometry_MavFrame>() {
  return ::mavsdk::rpc::telemetry::Odometry_MavFrame_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::TelemetryResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::TelemetryResult_Result>() {
  return ::mavsdk::rpc::telemetry::TelemetryResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::FixType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::FixType>() {
  return ::mavsdk::rpc::telemetry::FixType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::FlightMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::FlightMode>() {
  return ::mavsdk::rpc::telemetry::FlightMode_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::StatusTextType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::StatusTextType>() {
  return ::mavsdk::rpc::telemetry::StatusTextType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::LandedState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::LandedState>() {
  return ::mavsdk::rpc::telemetry::LandedState_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::VtolState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::VtolState>() {
  return ::mavsdk::rpc::telemetry::VtolState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_telemetry_2ftelemetry_2eproto
