// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry_server/telemetry_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_telemetry_5fserver_2ftelemetry_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_telemetry_5fserver_2ftelemetry_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace telemetry_server {
class AccelerationFrd;
struct AccelerationFrdDefaultTypeInternal;
extern AccelerationFrdDefaultTypeInternal _AccelerationFrd_default_instance_;
class ActuatorControlTarget;
struct ActuatorControlTargetDefaultTypeInternal;
extern ActuatorControlTargetDefaultTypeInternal _ActuatorControlTarget_default_instance_;
class ActuatorOutputStatus;
struct ActuatorOutputStatusDefaultTypeInternal;
extern ActuatorOutputStatusDefaultTypeInternal _ActuatorOutputStatus_default_instance_;
class AngularVelocityBody;
struct AngularVelocityBodyDefaultTypeInternal;
extern AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
class AngularVelocityFrd;
struct AngularVelocityFrdDefaultTypeInternal;
extern AngularVelocityFrdDefaultTypeInternal _AngularVelocityFrd_default_instance_;
class Battery;
struct BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
class Covariance;
struct CovarianceDefaultTypeInternal;
extern CovarianceDefaultTypeInternal _Covariance_default_instance_;
class DistanceSensor;
struct DistanceSensorDefaultTypeInternal;
extern DistanceSensorDefaultTypeInternal _DistanceSensor_default_instance_;
class EulerAngle;
struct EulerAngleDefaultTypeInternal;
extern EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
class FixedwingMetrics;
struct FixedwingMetricsDefaultTypeInternal;
extern FixedwingMetricsDefaultTypeInternal _FixedwingMetrics_default_instance_;
class GpsInfo;
struct GpsInfoDefaultTypeInternal;
extern GpsInfoDefaultTypeInternal _GpsInfo_default_instance_;
class GroundTruth;
struct GroundTruthDefaultTypeInternal;
extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
class Heading;
struct HeadingDefaultTypeInternal;
extern HeadingDefaultTypeInternal _Heading_default_instance_;
class Imu;
struct ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class MagneticFieldFrd;
struct MagneticFieldFrdDefaultTypeInternal;
extern MagneticFieldFrdDefaultTypeInternal _MagneticFieldFrd_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionBody;
struct PositionBodyDefaultTypeInternal;
extern PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
class PositionNed;
struct PositionNedDefaultTypeInternal;
extern PositionNedDefaultTypeInternal _PositionNed_default_instance_;
class PositionVelocityNed;
struct PositionVelocityNedDefaultTypeInternal;
extern PositionVelocityNedDefaultTypeInternal _PositionVelocityNed_default_instance_;
class PublishBatteryRequest;
struct PublishBatteryRequestDefaultTypeInternal;
extern PublishBatteryRequestDefaultTypeInternal _PublishBatteryRequest_default_instance_;
class PublishBatteryResponse;
struct PublishBatteryResponseDefaultTypeInternal;
extern PublishBatteryResponseDefaultTypeInternal _PublishBatteryResponse_default_instance_;
class PublishExtendedSysStateRequest;
struct PublishExtendedSysStateRequestDefaultTypeInternal;
extern PublishExtendedSysStateRequestDefaultTypeInternal _PublishExtendedSysStateRequest_default_instance_;
class PublishExtendedSysStateResponse;
struct PublishExtendedSysStateResponseDefaultTypeInternal;
extern PublishExtendedSysStateResponseDefaultTypeInternal _PublishExtendedSysStateResponse_default_instance_;
class PublishGroundTruthRequest;
struct PublishGroundTruthRequestDefaultTypeInternal;
extern PublishGroundTruthRequestDefaultTypeInternal _PublishGroundTruthRequest_default_instance_;
class PublishGroundTruthResponse;
struct PublishGroundTruthResponseDefaultTypeInternal;
extern PublishGroundTruthResponseDefaultTypeInternal _PublishGroundTruthResponse_default_instance_;
class PublishHomeRequest;
struct PublishHomeRequestDefaultTypeInternal;
extern PublishHomeRequestDefaultTypeInternal _PublishHomeRequest_default_instance_;
class PublishHomeResponse;
struct PublishHomeResponseDefaultTypeInternal;
extern PublishHomeResponseDefaultTypeInternal _PublishHomeResponse_default_instance_;
class PublishImuRequest;
struct PublishImuRequestDefaultTypeInternal;
extern PublishImuRequestDefaultTypeInternal _PublishImuRequest_default_instance_;
class PublishImuResponse;
struct PublishImuResponseDefaultTypeInternal;
extern PublishImuResponseDefaultTypeInternal _PublishImuResponse_default_instance_;
class PublishInAirRequest;
struct PublishInAirRequestDefaultTypeInternal;
extern PublishInAirRequestDefaultTypeInternal _PublishInAirRequest_default_instance_;
class PublishLandedStateRequest;
struct PublishLandedStateRequestDefaultTypeInternal;
extern PublishLandedStateRequestDefaultTypeInternal _PublishLandedStateRequest_default_instance_;
class PublishOdometryRequest;
struct PublishOdometryRequestDefaultTypeInternal;
extern PublishOdometryRequestDefaultTypeInternal _PublishOdometryRequest_default_instance_;
class PublishOdometryResponse;
struct PublishOdometryResponseDefaultTypeInternal;
extern PublishOdometryResponseDefaultTypeInternal _PublishOdometryResponse_default_instance_;
class PublishPositionRequest;
struct PublishPositionRequestDefaultTypeInternal;
extern PublishPositionRequestDefaultTypeInternal _PublishPositionRequest_default_instance_;
class PublishPositionResponse;
struct PublishPositionResponseDefaultTypeInternal;
extern PublishPositionResponseDefaultTypeInternal _PublishPositionResponse_default_instance_;
class PublishPositionVelocityNedRequest;
struct PublishPositionVelocityNedRequestDefaultTypeInternal;
extern PublishPositionVelocityNedRequestDefaultTypeInternal _PublishPositionVelocityNedRequest_default_instance_;
class PublishPositionVelocityNedResponse;
struct PublishPositionVelocityNedResponseDefaultTypeInternal;
extern PublishPositionVelocityNedResponseDefaultTypeInternal _PublishPositionVelocityNedResponse_default_instance_;
class PublishRawGpsRequest;
struct PublishRawGpsRequestDefaultTypeInternal;
extern PublishRawGpsRequestDefaultTypeInternal _PublishRawGpsRequest_default_instance_;
class PublishRawGpsResponse;
struct PublishRawGpsResponseDefaultTypeInternal;
extern PublishRawGpsResponseDefaultTypeInternal _PublishRawGpsResponse_default_instance_;
class PublishRawImuRequest;
struct PublishRawImuRequestDefaultTypeInternal;
extern PublishRawImuRequestDefaultTypeInternal _PublishRawImuRequest_default_instance_;
class PublishRawImuResponse;
struct PublishRawImuResponseDefaultTypeInternal;
extern PublishRawImuResponseDefaultTypeInternal _PublishRawImuResponse_default_instance_;
class PublishRcStatusRequest;
struct PublishRcStatusRequestDefaultTypeInternal;
extern PublishRcStatusRequestDefaultTypeInternal _PublishRcStatusRequest_default_instance_;
class PublishScaledImuRequest;
struct PublishScaledImuRequestDefaultTypeInternal;
extern PublishScaledImuRequestDefaultTypeInternal _PublishScaledImuRequest_default_instance_;
class PublishScaledImuResponse;
struct PublishScaledImuResponseDefaultTypeInternal;
extern PublishScaledImuResponseDefaultTypeInternal _PublishScaledImuResponse_default_instance_;
class PublishStatusTextRequest;
struct PublishStatusTextRequestDefaultTypeInternal;
extern PublishStatusTextRequestDefaultTypeInternal _PublishStatusTextRequest_default_instance_;
class PublishStatusTextResponse;
struct PublishStatusTextResponseDefaultTypeInternal;
extern PublishStatusTextResponseDefaultTypeInternal _PublishStatusTextResponse_default_instance_;
class PublishSysStatusRequest;
struct PublishSysStatusRequestDefaultTypeInternal;
extern PublishSysStatusRequestDefaultTypeInternal _PublishSysStatusRequest_default_instance_;
class PublishSysStatusResponse;
struct PublishSysStatusResponseDefaultTypeInternal;
extern PublishSysStatusResponseDefaultTypeInternal _PublishSysStatusResponse_default_instance_;
class PublishUnixEpochTimeRequest;
struct PublishUnixEpochTimeRequestDefaultTypeInternal;
extern PublishUnixEpochTimeRequestDefaultTypeInternal _PublishUnixEpochTimeRequest_default_instance_;
class PublishUnixEpochTimeResponse;
struct PublishUnixEpochTimeResponseDefaultTypeInternal;
extern PublishUnixEpochTimeResponseDefaultTypeInternal _PublishUnixEpochTimeResponse_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class RawGps;
struct RawGpsDefaultTypeInternal;
extern RawGpsDefaultTypeInternal _RawGps_default_instance_;
class RcStatus;
struct RcStatusDefaultTypeInternal;
extern RcStatusDefaultTypeInternal _RcStatus_default_instance_;
class ScaledPressure;
struct ScaledPressureDefaultTypeInternal;
extern ScaledPressureDefaultTypeInternal _ScaledPressure_default_instance_;
class StatusText;
struct StatusTextDefaultTypeInternal;
extern StatusTextDefaultTypeInternal _StatusText_default_instance_;
class TelemetryServerResult;
struct TelemetryServerResultDefaultTypeInternal;
extern TelemetryServerResultDefaultTypeInternal _TelemetryServerResult_default_instance_;
class VelocityBody;
struct VelocityBodyDefaultTypeInternal;
extern VelocityBodyDefaultTypeInternal _VelocityBody_default_instance_;
class VelocityNed;
struct VelocityNedDefaultTypeInternal;
extern VelocityNedDefaultTypeInternal _VelocityNed_default_instance_;
}  // namespace telemetry_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::telemetry_server::AccelerationFrd* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::AccelerationFrd>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::ActuatorControlTarget* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::ActuatorControlTarget>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::ActuatorOutputStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::ActuatorOutputStatus>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::AngularVelocityFrd>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::Battery* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Battery>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::Covariance* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Covariance>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::DistanceSensor* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::DistanceSensor>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::EulerAngle* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::EulerAngle>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::FixedwingMetrics* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::FixedwingMetrics>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::GpsInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::GpsInfo>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::GroundTruth* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::GroundTruth>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::Heading* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Heading>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::Imu* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Imu>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::MagneticFieldFrd>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::Odometry* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Odometry>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::Position* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Position>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PositionBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PositionBody>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PositionNed* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PositionNed>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PositionVelocityNed* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PositionVelocityNed>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishBatteryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishBatteryRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishBatteryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishBatteryResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishHomeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishHomeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishHomeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishHomeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishInAirRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishInAirRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishLandedStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishLandedStateRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishOdometryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishOdometryRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishOdometryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishOdometryResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishPositionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishPositionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishPositionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishPositionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishRawGpsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishRawGpsRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishRawGpsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishRawGpsResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishRawImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishRawImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishRawImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishRawImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishRcStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishRcStatusRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishScaledImuRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishScaledImuRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishScaledImuResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishScaledImuResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishStatusTextRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishStatusTextRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishStatusTextResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishStatusTextResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishSysStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishSysStatusRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishSysStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishSysStatusResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::Quaternion* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Quaternion>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::RawGps* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::RawGps>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::RcStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::RcStatus>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::ScaledPressure* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::ScaledPressure>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::StatusText* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::StatusText>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::TelemetryServerResult* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::VelocityBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::VelocityBody>(Arena*);
template<> ::mavsdk::rpc::telemetry_server::VelocityNed* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry_server::VelocityNed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace telemetry_server {

enum Odometry_MavFrame : int {
  Odometry_MavFrame_MAV_FRAME_UNDEF = 0,
  Odometry_MavFrame_MAV_FRAME_BODY_NED = 8,
  Odometry_MavFrame_MAV_FRAME_VISION_NED = 16,
  Odometry_MavFrame_MAV_FRAME_ESTIM_NED = 18,
  Odometry_MavFrame_Odometry_MavFrame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Odometry_MavFrame_Odometry_MavFrame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Odometry_MavFrame_IsValid(int value);
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MIN = Odometry_MavFrame_MAV_FRAME_UNDEF;
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MAX = Odometry_MavFrame_MAV_FRAME_ESTIM_NED;
constexpr int Odometry_MavFrame_MavFrame_ARRAYSIZE = Odometry_MavFrame_MavFrame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor();
template<typename T>
inline const std::string& Odometry_MavFrame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Odometry_MavFrame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Odometry_MavFrame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Odometry_MavFrame_descriptor(), enum_t_value);
}
inline bool Odometry_MavFrame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Odometry_MavFrame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Odometry_MavFrame>(
    Odometry_MavFrame_descriptor(), name, value);
}
enum TelemetryServerResult_Result : int {
  TelemetryServerResult_Result_RESULT_UNKNOWN = 0,
  TelemetryServerResult_Result_RESULT_SUCCESS = 1,
  TelemetryServerResult_Result_RESULT_NO_SYSTEM = 2,
  TelemetryServerResult_Result_RESULT_CONNECTION_ERROR = 3,
  TelemetryServerResult_Result_RESULT_BUSY = 4,
  TelemetryServerResult_Result_RESULT_COMMAND_DENIED = 5,
  TelemetryServerResult_Result_RESULT_TIMEOUT = 6,
  TelemetryServerResult_Result_RESULT_UNSUPPORTED = 7,
  TelemetryServerResult_Result_TelemetryServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TelemetryServerResult_Result_TelemetryServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TelemetryServerResult_Result_IsValid(int value);
constexpr TelemetryServerResult_Result TelemetryServerResult_Result_Result_MIN = TelemetryServerResult_Result_RESULT_UNKNOWN;
constexpr TelemetryServerResult_Result TelemetryServerResult_Result_Result_MAX = TelemetryServerResult_Result_RESULT_UNSUPPORTED;
constexpr int TelemetryServerResult_Result_Result_ARRAYSIZE = TelemetryServerResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryServerResult_Result_descriptor();
template<typename T>
inline const std::string& TelemetryServerResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TelemetryServerResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TelemetryServerResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TelemetryServerResult_Result_descriptor(), enum_t_value);
}
inline bool TelemetryServerResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TelemetryServerResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TelemetryServerResult_Result>(
    TelemetryServerResult_Result_descriptor(), name, value);
}
enum FixType : int {
  FIX_TYPE_NO_GPS = 0,
  FIX_TYPE_NO_FIX = 1,
  FIX_TYPE_FIX_2D = 2,
  FIX_TYPE_FIX_3D = 3,
  FIX_TYPE_FIX_DGPS = 4,
  FIX_TYPE_RTK_FLOAT = 5,
  FIX_TYPE_RTK_FIXED = 6,
  FixType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FixType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FixType_IsValid(int value);
constexpr FixType FixType_MIN = FIX_TYPE_NO_GPS;
constexpr FixType FixType_MAX = FIX_TYPE_RTK_FIXED;
constexpr int FixType_ARRAYSIZE = FixType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixType_descriptor();
template<typename T>
inline const std::string& FixType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FixType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FixType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FixType_descriptor(), enum_t_value);
}
inline bool FixType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FixType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FixType>(
    FixType_descriptor(), name, value);
}
enum VtolState : int {
  VTOL_STATE_UNDEFINED = 0,
  VTOL_STATE_TRANSITION_TO_FW = 1,
  VTOL_STATE_TRANSITION_TO_MC = 2,
  VTOL_STATE_MC = 3,
  VTOL_STATE_FW = 4,
  VtolState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VtolState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VtolState_IsValid(int value);
constexpr VtolState VtolState_MIN = VTOL_STATE_UNDEFINED;
constexpr VtolState VtolState_MAX = VTOL_STATE_FW;
constexpr int VtolState_ARRAYSIZE = VtolState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VtolState_descriptor();
template<typename T>
inline const std::string& VtolState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VtolState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VtolState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VtolState_descriptor(), enum_t_value);
}
inline bool VtolState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VtolState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VtolState>(
    VtolState_descriptor(), name, value);
}
enum StatusTextType : int {
  STATUS_TEXT_TYPE_DEBUG = 0,
  STATUS_TEXT_TYPE_INFO = 1,
  STATUS_TEXT_TYPE_NOTICE = 2,
  STATUS_TEXT_TYPE_WARNING = 3,
  STATUS_TEXT_TYPE_ERROR = 4,
  STATUS_TEXT_TYPE_CRITICAL = 5,
  STATUS_TEXT_TYPE_ALERT = 6,
  STATUS_TEXT_TYPE_EMERGENCY = 7,
  StatusTextType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatusTextType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatusTextType_IsValid(int value);
constexpr StatusTextType StatusTextType_MIN = STATUS_TEXT_TYPE_DEBUG;
constexpr StatusTextType StatusTextType_MAX = STATUS_TEXT_TYPE_EMERGENCY;
constexpr int StatusTextType_ARRAYSIZE = StatusTextType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusTextType_descriptor();
template<typename T>
inline const std::string& StatusTextType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusTextType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusTextType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusTextType_descriptor(), enum_t_value);
}
inline bool StatusTextType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusTextType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusTextType>(
    StatusTextType_descriptor(), name, value);
}
enum LandedState : int {
  LANDED_STATE_UNKNOWN = 0,
  LANDED_STATE_ON_GROUND = 1,
  LANDED_STATE_IN_AIR = 2,
  LANDED_STATE_TAKING_OFF = 3,
  LANDED_STATE_LANDING = 4,
  LandedState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LandedState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LandedState_IsValid(int value);
constexpr LandedState LandedState_MIN = LANDED_STATE_UNKNOWN;
constexpr LandedState LandedState_MAX = LANDED_STATE_LANDING;
constexpr int LandedState_ARRAYSIZE = LandedState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LandedState_descriptor();
template<typename T>
inline const std::string& LandedState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LandedState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LandedState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LandedState_descriptor(), enum_t_value);
}
inline bool LandedState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LandedState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LandedState>(
    LandedState_descriptor(), name, value);
}
// ===================================================================

class PublishPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishPositionRequest) */ {
 public:
  inline PublishPositionRequest() : PublishPositionRequest(nullptr) {}
  ~PublishPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishPositionRequest(const PublishPositionRequest& from);
  PublishPositionRequest(PublishPositionRequest&& from) noexcept
    : PublishPositionRequest() {
    *this = ::std::move(from);
  }

  inline PublishPositionRequest& operator=(const PublishPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishPositionRequest& operator=(PublishPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishPositionRequest* internal_default_instance() {
    return reinterpret_cast<const PublishPositionRequest*>(
               &_PublishPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublishPositionRequest& a, PublishPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishPositionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishPositionRequest";
  }
  protected:
  explicit PublishPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kVelocityNedFieldNumber = 2,
    kHeadingFieldNumber = 3,
  };
  // .mavsdk.rpc.telemetry_server.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::telemetry_server::Position& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Position* release_position();
  ::mavsdk::rpc::telemetry_server::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::telemetry_server::Position* position);
  private:
  const ::mavsdk::rpc::telemetry_server::Position& _internal_position() const;
  ::mavsdk::rpc::telemetry_server::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::mavsdk::rpc::telemetry_server::Position* position);
  ::mavsdk::rpc::telemetry_server::Position* unsafe_arena_release_position();

  // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
  bool has_velocity_ned() const;
  private:
  bool _internal_has_velocity_ned() const;
  public:
  void clear_velocity_ned();
  const ::mavsdk::rpc::telemetry_server::VelocityNed& velocity_ned() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::VelocityNed* release_velocity_ned();
  ::mavsdk::rpc::telemetry_server::VelocityNed* mutable_velocity_ned();
  void set_allocated_velocity_ned(::mavsdk::rpc::telemetry_server::VelocityNed* velocity_ned);
  private:
  const ::mavsdk::rpc::telemetry_server::VelocityNed& _internal_velocity_ned() const;
  ::mavsdk::rpc::telemetry_server::VelocityNed* _internal_mutable_velocity_ned();
  public:
  void unsafe_arena_set_allocated_velocity_ned(
      ::mavsdk::rpc::telemetry_server::VelocityNed* velocity_ned);
  ::mavsdk::rpc::telemetry_server::VelocityNed* unsafe_arena_release_velocity_ned();

  // .mavsdk.rpc.telemetry_server.Heading heading = 3;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  const ::mavsdk::rpc::telemetry_server::Heading& heading() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Heading* release_heading();
  ::mavsdk::rpc::telemetry_server::Heading* mutable_heading();
  void set_allocated_heading(::mavsdk::rpc::telemetry_server::Heading* heading);
  private:
  const ::mavsdk::rpc::telemetry_server::Heading& _internal_heading() const;
  ::mavsdk::rpc::telemetry_server::Heading* _internal_mutable_heading();
  public:
  void unsafe_arena_set_allocated_heading(
      ::mavsdk::rpc::telemetry_server::Heading* heading);
  ::mavsdk::rpc::telemetry_server::Heading* unsafe_arena_release_heading();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::Position* position_;
  ::mavsdk::rpc::telemetry_server::VelocityNed* velocity_ned_;
  ::mavsdk::rpc::telemetry_server::Heading* heading_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishHomeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishHomeRequest) */ {
 public:
  inline PublishHomeRequest() : PublishHomeRequest(nullptr) {}
  ~PublishHomeRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishHomeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishHomeRequest(const PublishHomeRequest& from);
  PublishHomeRequest(PublishHomeRequest&& from) noexcept
    : PublishHomeRequest() {
    *this = ::std::move(from);
  }

  inline PublishHomeRequest& operator=(const PublishHomeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishHomeRequest& operator=(PublishHomeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishHomeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishHomeRequest* internal_default_instance() {
    return reinterpret_cast<const PublishHomeRequest*>(
               &_PublishHomeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PublishHomeRequest& a, PublishHomeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishHomeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishHomeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishHomeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishHomeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishHomeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishHomeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishHomeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishHomeRequest";
  }
  protected:
  explicit PublishHomeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Position home = 1;
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const ::mavsdk::rpc::telemetry_server::Position& home() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Position* release_home();
  ::mavsdk::rpc::telemetry_server::Position* mutable_home();
  void set_allocated_home(::mavsdk::rpc::telemetry_server::Position* home);
  private:
  const ::mavsdk::rpc::telemetry_server::Position& _internal_home() const;
  ::mavsdk::rpc::telemetry_server::Position* _internal_mutable_home();
  public:
  void unsafe_arena_set_allocated_home(
      ::mavsdk::rpc::telemetry_server::Position* home);
  ::mavsdk::rpc::telemetry_server::Position* unsafe_arena_release_home();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishHomeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::Position* home_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishSysStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishSysStatusRequest) */ {
 public:
  inline PublishSysStatusRequest() : PublishSysStatusRequest(nullptr) {}
  ~PublishSysStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishSysStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishSysStatusRequest(const PublishSysStatusRequest& from);
  PublishSysStatusRequest(PublishSysStatusRequest&& from) noexcept
    : PublishSysStatusRequest() {
    *this = ::std::move(from);
  }

  inline PublishSysStatusRequest& operator=(const PublishSysStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishSysStatusRequest& operator=(PublishSysStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishSysStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishSysStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PublishSysStatusRequest*>(
               &_PublishSysStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PublishSysStatusRequest& a, PublishSysStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishSysStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishSysStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishSysStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishSysStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishSysStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishSysStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishSysStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishSysStatusRequest";
  }
  protected:
  explicit PublishSysStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryFieldNumber = 1,
    kRcReceiverStatusFieldNumber = 2,
    kGyroStatusFieldNumber = 3,
    kAccelStatusFieldNumber = 4,
    kMagStatusFieldNumber = 5,
    kGpsStatusFieldNumber = 6,
  };
  // .mavsdk.rpc.telemetry_server.Battery battery = 1;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;
  public:
  void clear_battery();
  const ::mavsdk::rpc::telemetry_server::Battery& battery() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Battery* release_battery();
  ::mavsdk::rpc::telemetry_server::Battery* mutable_battery();
  void set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* battery);
  private:
  const ::mavsdk::rpc::telemetry_server::Battery& _internal_battery() const;
  ::mavsdk::rpc::telemetry_server::Battery* _internal_mutable_battery();
  public:
  void unsafe_arena_set_allocated_battery(
      ::mavsdk::rpc::telemetry_server::Battery* battery);
  ::mavsdk::rpc::telemetry_server::Battery* unsafe_arena_release_battery();

  // bool rc_receiver_status = 2;
  void clear_rc_receiver_status();
  bool rc_receiver_status() const;
  void set_rc_receiver_status(bool value);
  private:
  bool _internal_rc_receiver_status() const;
  void _internal_set_rc_receiver_status(bool value);
  public:

  // bool gyro_status = 3;
  void clear_gyro_status();
  bool gyro_status() const;
  void set_gyro_status(bool value);
  private:
  bool _internal_gyro_status() const;
  void _internal_set_gyro_status(bool value);
  public:

  // bool accel_status = 4;
  void clear_accel_status();
  bool accel_status() const;
  void set_accel_status(bool value);
  private:
  bool _internal_accel_status() const;
  void _internal_set_accel_status(bool value);
  public:

  // bool mag_status = 5;
  void clear_mag_status();
  bool mag_status() const;
  void set_mag_status(bool value);
  private:
  bool _internal_mag_status() const;
  void _internal_set_mag_status(bool value);
  public:

  // bool gps_status = 6;
  void clear_gps_status();
  bool gps_status() const;
  void set_gps_status(bool value);
  private:
  bool _internal_gps_status() const;
  void _internal_set_gps_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::Battery* battery_;
  bool rc_receiver_status_;
  bool gyro_status_;
  bool accel_status_;
  bool mag_status_;
  bool gps_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishExtendedSysStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest) */ {
 public:
  inline PublishExtendedSysStateRequest() : PublishExtendedSysStateRequest(nullptr) {}
  ~PublishExtendedSysStateRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishExtendedSysStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishExtendedSysStateRequest(const PublishExtendedSysStateRequest& from);
  PublishExtendedSysStateRequest(PublishExtendedSysStateRequest&& from) noexcept
    : PublishExtendedSysStateRequest() {
    *this = ::std::move(from);
  }

  inline PublishExtendedSysStateRequest& operator=(const PublishExtendedSysStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishExtendedSysStateRequest& operator=(PublishExtendedSysStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishExtendedSysStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishExtendedSysStateRequest* internal_default_instance() {
    return reinterpret_cast<const PublishExtendedSysStateRequest*>(
               &_PublishExtendedSysStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PublishExtendedSysStateRequest& a, PublishExtendedSysStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishExtendedSysStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishExtendedSysStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishExtendedSysStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishExtendedSysStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishExtendedSysStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishExtendedSysStateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishExtendedSysStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest";
  }
  protected:
  explicit PublishExtendedSysStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVtolStateFieldNumber = 1,
    kLandedStateFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
  void clear_vtol_state();
  ::mavsdk::rpc::telemetry_server::VtolState vtol_state() const;
  void set_vtol_state(::mavsdk::rpc::telemetry_server::VtolState value);
  private:
  ::mavsdk::rpc::telemetry_server::VtolState _internal_vtol_state() const;
  void _internal_set_vtol_state(::mavsdk::rpc::telemetry_server::VtolState value);
  public:

  // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
  void clear_landed_state();
  ::mavsdk::rpc::telemetry_server::LandedState landed_state() const;
  void set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value);
  private:
  ::mavsdk::rpc::telemetry_server::LandedState _internal_landed_state() const;
  void _internal_set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int vtol_state_;
  int landed_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishInAirRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishInAirRequest) */ {
 public:
  inline PublishInAirRequest() : PublishInAirRequest(nullptr) {}
  ~PublishInAirRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishInAirRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishInAirRequest(const PublishInAirRequest& from);
  PublishInAirRequest(PublishInAirRequest&& from) noexcept
    : PublishInAirRequest() {
    *this = ::std::move(from);
  }

  inline PublishInAirRequest& operator=(const PublishInAirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishInAirRequest& operator=(PublishInAirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishInAirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishInAirRequest* internal_default_instance() {
    return reinterpret_cast<const PublishInAirRequest*>(
               &_PublishInAirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PublishInAirRequest& a, PublishInAirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishInAirRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishInAirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishInAirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishInAirRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishInAirRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishInAirRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishInAirRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishInAirRequest";
  }
  protected:
  explicit PublishInAirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsInAirFieldNumber = 1,
  };
  // bool is_in_air = 1;
  void clear_is_in_air();
  bool is_in_air() const;
  void set_is_in_air(bool value);
  private:
  bool _internal_is_in_air() const;
  void _internal_set_is_in_air(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishInAirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_in_air_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishLandedStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishLandedStateRequest) */ {
 public:
  inline PublishLandedStateRequest() : PublishLandedStateRequest(nullptr) {}
  ~PublishLandedStateRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishLandedStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishLandedStateRequest(const PublishLandedStateRequest& from);
  PublishLandedStateRequest(PublishLandedStateRequest&& from) noexcept
    : PublishLandedStateRequest() {
    *this = ::std::move(from);
  }

  inline PublishLandedStateRequest& operator=(const PublishLandedStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishLandedStateRequest& operator=(PublishLandedStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishLandedStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishLandedStateRequest* internal_default_instance() {
    return reinterpret_cast<const PublishLandedStateRequest*>(
               &_PublishLandedStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PublishLandedStateRequest& a, PublishLandedStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishLandedStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishLandedStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishLandedStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishLandedStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishLandedStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishLandedStateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishLandedStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishLandedStateRequest";
  }
  protected:
  explicit PublishLandedStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandedStateFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
  void clear_landed_state();
  ::mavsdk::rpc::telemetry_server::LandedState landed_state() const;
  void set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value);
  private:
  ::mavsdk::rpc::telemetry_server::LandedState _internal_landed_state() const;
  void _internal_set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int landed_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRawGpsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRawGpsRequest) */ {
 public:
  inline PublishRawGpsRequest() : PublishRawGpsRequest(nullptr) {}
  ~PublishRawGpsRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishRawGpsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRawGpsRequest(const PublishRawGpsRequest& from);
  PublishRawGpsRequest(PublishRawGpsRequest&& from) noexcept
    : PublishRawGpsRequest() {
    *this = ::std::move(from);
  }

  inline PublishRawGpsRequest& operator=(const PublishRawGpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRawGpsRequest& operator=(PublishRawGpsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRawGpsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRawGpsRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRawGpsRequest*>(
               &_PublishRawGpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PublishRawGpsRequest& a, PublishRawGpsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRawGpsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRawGpsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRawGpsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRawGpsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishRawGpsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishRawGpsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRawGpsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishRawGpsRequest";
  }
  protected:
  explicit PublishRawGpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawGpsFieldNumber = 1,
    kGpsInfoFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
  bool has_raw_gps() const;
  private:
  bool _internal_has_raw_gps() const;
  public:
  void clear_raw_gps();
  const ::mavsdk::rpc::telemetry_server::RawGps& raw_gps() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::RawGps* release_raw_gps();
  ::mavsdk::rpc::telemetry_server::RawGps* mutable_raw_gps();
  void set_allocated_raw_gps(::mavsdk::rpc::telemetry_server::RawGps* raw_gps);
  private:
  const ::mavsdk::rpc::telemetry_server::RawGps& _internal_raw_gps() const;
  ::mavsdk::rpc::telemetry_server::RawGps* _internal_mutable_raw_gps();
  public:
  void unsafe_arena_set_allocated_raw_gps(
      ::mavsdk::rpc::telemetry_server::RawGps* raw_gps);
  ::mavsdk::rpc::telemetry_server::RawGps* unsafe_arena_release_raw_gps();

  // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
  bool has_gps_info() const;
  private:
  bool _internal_has_gps_info() const;
  public:
  void clear_gps_info();
  const ::mavsdk::rpc::telemetry_server::GpsInfo& gps_info() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::GpsInfo* release_gps_info();
  ::mavsdk::rpc::telemetry_server::GpsInfo* mutable_gps_info();
  void set_allocated_gps_info(::mavsdk::rpc::telemetry_server::GpsInfo* gps_info);
  private:
  const ::mavsdk::rpc::telemetry_server::GpsInfo& _internal_gps_info() const;
  ::mavsdk::rpc::telemetry_server::GpsInfo* _internal_mutable_gps_info();
  public:
  void unsafe_arena_set_allocated_gps_info(
      ::mavsdk::rpc::telemetry_server::GpsInfo* gps_info);
  ::mavsdk::rpc::telemetry_server::GpsInfo* unsafe_arena_release_gps_info();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::RawGps* raw_gps_;
  ::mavsdk::rpc::telemetry_server::GpsInfo* gps_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishBatteryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishBatteryRequest) */ {
 public:
  inline PublishBatteryRequest() : PublishBatteryRequest(nullptr) {}
  ~PublishBatteryRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishBatteryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishBatteryRequest(const PublishBatteryRequest& from);
  PublishBatteryRequest(PublishBatteryRequest&& from) noexcept
    : PublishBatteryRequest() {
    *this = ::std::move(from);
  }

  inline PublishBatteryRequest& operator=(const PublishBatteryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishBatteryRequest& operator=(PublishBatteryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishBatteryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishBatteryRequest* internal_default_instance() {
    return reinterpret_cast<const PublishBatteryRequest*>(
               &_PublishBatteryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PublishBatteryRequest& a, PublishBatteryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishBatteryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishBatteryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishBatteryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishBatteryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishBatteryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishBatteryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishBatteryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishBatteryRequest";
  }
  protected:
  explicit PublishBatteryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Battery battery = 1;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;
  public:
  void clear_battery();
  const ::mavsdk::rpc::telemetry_server::Battery& battery() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Battery* release_battery();
  ::mavsdk::rpc::telemetry_server::Battery* mutable_battery();
  void set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* battery);
  private:
  const ::mavsdk::rpc::telemetry_server::Battery& _internal_battery() const;
  ::mavsdk::rpc::telemetry_server::Battery* _internal_mutable_battery();
  public:
  void unsafe_arena_set_allocated_battery(
      ::mavsdk::rpc::telemetry_server::Battery* battery);
  ::mavsdk::rpc::telemetry_server::Battery* unsafe_arena_release_battery();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::Battery* battery_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRcStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRcStatusRequest) */ {
 public:
  inline PublishRcStatusRequest() : PublishRcStatusRequest(nullptr) {}
  ~PublishRcStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishRcStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRcStatusRequest(const PublishRcStatusRequest& from);
  PublishRcStatusRequest(PublishRcStatusRequest&& from) noexcept
    : PublishRcStatusRequest() {
    *this = ::std::move(from);
  }

  inline PublishRcStatusRequest& operator=(const PublishRcStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRcStatusRequest& operator=(PublishRcStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRcStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRcStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRcStatusRequest*>(
               &_PublishRcStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PublishRcStatusRequest& a, PublishRcStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRcStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRcStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRcStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRcStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishRcStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishRcStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRcStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishRcStatusRequest";
  }
  protected:
  explicit PublishRcStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
  bool has_rc_status() const;
  private:
  bool _internal_has_rc_status() const;
  public:
  void clear_rc_status();
  const ::mavsdk::rpc::telemetry_server::RcStatus& rc_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::RcStatus* release_rc_status();
  ::mavsdk::rpc::telemetry_server::RcStatus* mutable_rc_status();
  void set_allocated_rc_status(::mavsdk::rpc::telemetry_server::RcStatus* rc_status);
  private:
  const ::mavsdk::rpc::telemetry_server::RcStatus& _internal_rc_status() const;
  ::mavsdk::rpc::telemetry_server::RcStatus* _internal_mutable_rc_status();
  public:
  void unsafe_arena_set_allocated_rc_status(
      ::mavsdk::rpc::telemetry_server::RcStatus* rc_status);
  ::mavsdk::rpc::telemetry_server::RcStatus* unsafe_arena_release_rc_status();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::RcStatus* rc_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishStatusTextRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishStatusTextRequest) */ {
 public:
  inline PublishStatusTextRequest() : PublishStatusTextRequest(nullptr) {}
  ~PublishStatusTextRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishStatusTextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishStatusTextRequest(const PublishStatusTextRequest& from);
  PublishStatusTextRequest(PublishStatusTextRequest&& from) noexcept
    : PublishStatusTextRequest() {
    *this = ::std::move(from);
  }

  inline PublishStatusTextRequest& operator=(const PublishStatusTextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishStatusTextRequest& operator=(PublishStatusTextRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishStatusTextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishStatusTextRequest* internal_default_instance() {
    return reinterpret_cast<const PublishStatusTextRequest*>(
               &_PublishStatusTextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PublishStatusTextRequest& a, PublishStatusTextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishStatusTextRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishStatusTextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishStatusTextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishStatusTextRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishStatusTextRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishStatusTextRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishStatusTextRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishStatusTextRequest";
  }
  protected:
  explicit PublishStatusTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusTextFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
  bool has_status_text() const;
  private:
  bool _internal_has_status_text() const;
  public:
  void clear_status_text();
  const ::mavsdk::rpc::telemetry_server::StatusText& status_text() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::StatusText* release_status_text();
  ::mavsdk::rpc::telemetry_server::StatusText* mutable_status_text();
  void set_allocated_status_text(::mavsdk::rpc::telemetry_server::StatusText* status_text);
  private:
  const ::mavsdk::rpc::telemetry_server::StatusText& _internal_status_text() const;
  ::mavsdk::rpc::telemetry_server::StatusText* _internal_mutable_status_text();
  public:
  void unsafe_arena_set_allocated_status_text(
      ::mavsdk::rpc::telemetry_server::StatusText* status_text);
  ::mavsdk::rpc::telemetry_server::StatusText* unsafe_arena_release_status_text();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::StatusText* status_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishOdometryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishOdometryRequest) */ {
 public:
  inline PublishOdometryRequest() : PublishOdometryRequest(nullptr) {}
  ~PublishOdometryRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishOdometryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishOdometryRequest(const PublishOdometryRequest& from);
  PublishOdometryRequest(PublishOdometryRequest&& from) noexcept
    : PublishOdometryRequest() {
    *this = ::std::move(from);
  }

  inline PublishOdometryRequest& operator=(const PublishOdometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishOdometryRequest& operator=(PublishOdometryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishOdometryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishOdometryRequest* internal_default_instance() {
    return reinterpret_cast<const PublishOdometryRequest*>(
               &_PublishOdometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PublishOdometryRequest& a, PublishOdometryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishOdometryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishOdometryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishOdometryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishOdometryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishOdometryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishOdometryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishOdometryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishOdometryRequest";
  }
  protected:
  explicit PublishOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOdometryFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
  bool has_odometry() const;
  private:
  bool _internal_has_odometry() const;
  public:
  void clear_odometry();
  const ::mavsdk::rpc::telemetry_server::Odometry& odometry() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Odometry* release_odometry();
  ::mavsdk::rpc::telemetry_server::Odometry* mutable_odometry();
  void set_allocated_odometry(::mavsdk::rpc::telemetry_server::Odometry* odometry);
  private:
  const ::mavsdk::rpc::telemetry_server::Odometry& _internal_odometry() const;
  ::mavsdk::rpc::telemetry_server::Odometry* _internal_mutable_odometry();
  public:
  void unsafe_arena_set_allocated_odometry(
      ::mavsdk::rpc::telemetry_server::Odometry* odometry);
  ::mavsdk::rpc::telemetry_server::Odometry* unsafe_arena_release_odometry();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::Odometry* odometry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishPositionVelocityNedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest) */ {
 public:
  inline PublishPositionVelocityNedRequest() : PublishPositionVelocityNedRequest(nullptr) {}
  ~PublishPositionVelocityNedRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishPositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishPositionVelocityNedRequest(const PublishPositionVelocityNedRequest& from);
  PublishPositionVelocityNedRequest(PublishPositionVelocityNedRequest&& from) noexcept
    : PublishPositionVelocityNedRequest() {
    *this = ::std::move(from);
  }

  inline PublishPositionVelocityNedRequest& operator=(const PublishPositionVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishPositionVelocityNedRequest& operator=(PublishPositionVelocityNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishPositionVelocityNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishPositionVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const PublishPositionVelocityNedRequest*>(
               &_PublishPositionVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PublishPositionVelocityNedRequest& a, PublishPositionVelocityNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishPositionVelocityNedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishPositionVelocityNedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishPositionVelocityNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishPositionVelocityNedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishPositionVelocityNedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishPositionVelocityNedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishPositionVelocityNedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest";
  }
  protected:
  explicit PublishPositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionVelocityNedFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
  bool has_position_velocity_ned() const;
  private:
  bool _internal_has_position_velocity_ned() const;
  public:
  void clear_position_velocity_ned();
  const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& position_velocity_ned() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::PositionVelocityNed* release_position_velocity_ned();
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* mutable_position_velocity_ned();
  void set_allocated_position_velocity_ned(::mavsdk::rpc::telemetry_server::PositionVelocityNed* position_velocity_ned);
  private:
  const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& _internal_position_velocity_ned() const;
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* _internal_mutable_position_velocity_ned();
  public:
  void unsafe_arena_set_allocated_position_velocity_ned(
      ::mavsdk::rpc::telemetry_server::PositionVelocityNed* position_velocity_ned);
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* unsafe_arena_release_position_velocity_ned();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* position_velocity_ned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishGroundTruthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest) */ {
 public:
  inline PublishGroundTruthRequest() : PublishGroundTruthRequest(nullptr) {}
  ~PublishGroundTruthRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishGroundTruthRequest(const PublishGroundTruthRequest& from);
  PublishGroundTruthRequest(PublishGroundTruthRequest&& from) noexcept
    : PublishGroundTruthRequest() {
    *this = ::std::move(from);
  }

  inline PublishGroundTruthRequest& operator=(const PublishGroundTruthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishGroundTruthRequest& operator=(PublishGroundTruthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishGroundTruthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishGroundTruthRequest* internal_default_instance() {
    return reinterpret_cast<const PublishGroundTruthRequest*>(
               &_PublishGroundTruthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PublishGroundTruthRequest& a, PublishGroundTruthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishGroundTruthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishGroundTruthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishGroundTruthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishGroundTruthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishGroundTruthRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishGroundTruthRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishGroundTruthRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishGroundTruthRequest";
  }
  protected:
  explicit PublishGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroundTruthFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
  bool has_ground_truth() const;
  private:
  bool _internal_has_ground_truth() const;
  public:
  void clear_ground_truth();
  const ::mavsdk::rpc::telemetry_server::GroundTruth& ground_truth() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::GroundTruth* release_ground_truth();
  ::mavsdk::rpc::telemetry_server::GroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::mavsdk::rpc::telemetry_server::GroundTruth* ground_truth);
  private:
  const ::mavsdk::rpc::telemetry_server::GroundTruth& _internal_ground_truth() const;
  ::mavsdk::rpc::telemetry_server::GroundTruth* _internal_mutable_ground_truth();
  public:
  void unsafe_arena_set_allocated_ground_truth(
      ::mavsdk::rpc::telemetry_server::GroundTruth* ground_truth);
  ::mavsdk::rpc::telemetry_server::GroundTruth* unsafe_arena_release_ground_truth();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::GroundTruth* ground_truth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishImuRequest) */ {
 public:
  inline PublishImuRequest() : PublishImuRequest(nullptr) {}
  ~PublishImuRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishImuRequest(const PublishImuRequest& from);
  PublishImuRequest(PublishImuRequest&& from) noexcept
    : PublishImuRequest() {
    *this = ::std::move(from);
  }

  inline PublishImuRequest& operator=(const PublishImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishImuRequest& operator=(PublishImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishImuRequest* internal_default_instance() {
    return reinterpret_cast<const PublishImuRequest*>(
               &_PublishImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PublishImuRequest& a, PublishImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishImuRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishImuRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishImuRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishImuRequest";
  }
  protected:
  explicit PublishImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::mavsdk::rpc::telemetry_server::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Imu* release_imu();
  ::mavsdk::rpc::telemetry_server::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* imu);
  private:
  const ::mavsdk::rpc::telemetry_server::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry_server::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::mavsdk::rpc::telemetry_server::Imu* imu);
  ::mavsdk::rpc::telemetry_server::Imu* unsafe_arena_release_imu();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::Imu* imu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishScaledImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishScaledImuRequest) */ {
 public:
  inline PublishScaledImuRequest() : PublishScaledImuRequest(nullptr) {}
  ~PublishScaledImuRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishScaledImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishScaledImuRequest(const PublishScaledImuRequest& from);
  PublishScaledImuRequest(PublishScaledImuRequest&& from) noexcept
    : PublishScaledImuRequest() {
    *this = ::std::move(from);
  }

  inline PublishScaledImuRequest& operator=(const PublishScaledImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishScaledImuRequest& operator=(PublishScaledImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishScaledImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishScaledImuRequest* internal_default_instance() {
    return reinterpret_cast<const PublishScaledImuRequest*>(
               &_PublishScaledImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PublishScaledImuRequest& a, PublishScaledImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishScaledImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishScaledImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishScaledImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishScaledImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishScaledImuRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishScaledImuRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishScaledImuRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishScaledImuRequest";
  }
  protected:
  explicit PublishScaledImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::mavsdk::rpc::telemetry_server::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Imu* release_imu();
  ::mavsdk::rpc::telemetry_server::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* imu);
  private:
  const ::mavsdk::rpc::telemetry_server::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry_server::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::mavsdk::rpc::telemetry_server::Imu* imu);
  ::mavsdk::rpc::telemetry_server::Imu* unsafe_arena_release_imu();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::Imu* imu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRawImuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRawImuRequest) */ {
 public:
  inline PublishRawImuRequest() : PublishRawImuRequest(nullptr) {}
  ~PublishRawImuRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishRawImuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRawImuRequest(const PublishRawImuRequest& from);
  PublishRawImuRequest(PublishRawImuRequest&& from) noexcept
    : PublishRawImuRequest() {
    *this = ::std::move(from);
  }

  inline PublishRawImuRequest& operator=(const PublishRawImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRawImuRequest& operator=(PublishRawImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRawImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRawImuRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRawImuRequest*>(
               &_PublishRawImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PublishRawImuRequest& a, PublishRawImuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRawImuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRawImuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRawImuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRawImuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishRawImuRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishRawImuRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRawImuRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishRawImuRequest";
  }
  protected:
  explicit PublishRawImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::mavsdk::rpc::telemetry_server::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Imu* release_imu();
  ::mavsdk::rpc::telemetry_server::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* imu);
  private:
  const ::mavsdk::rpc::telemetry_server::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry_server::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::mavsdk::rpc::telemetry_server::Imu* imu);
  ::mavsdk::rpc::telemetry_server::Imu* unsafe_arena_release_imu();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::Imu* imu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishUnixEpochTimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest) */ {
 public:
  inline PublishUnixEpochTimeRequest() : PublishUnixEpochTimeRequest(nullptr) {}
  ~PublishUnixEpochTimeRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishUnixEpochTimeRequest(const PublishUnixEpochTimeRequest& from);
  PublishUnixEpochTimeRequest(PublishUnixEpochTimeRequest&& from) noexcept
    : PublishUnixEpochTimeRequest() {
    *this = ::std::move(from);
  }

  inline PublishUnixEpochTimeRequest& operator=(const PublishUnixEpochTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishUnixEpochTimeRequest& operator=(PublishUnixEpochTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishUnixEpochTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishUnixEpochTimeRequest* internal_default_instance() {
    return reinterpret_cast<const PublishUnixEpochTimeRequest*>(
               &_PublishUnixEpochTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PublishUnixEpochTimeRequest& a, PublishUnixEpochTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishUnixEpochTimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishUnixEpochTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishUnixEpochTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishUnixEpochTimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishUnixEpochTimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishUnixEpochTimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishUnixEpochTimeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest";
  }
  protected:
  explicit PublishUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUsFieldNumber = 1,
  };
  // uint64 time_us = 1;
  void clear_time_us();
  uint64_t time_us() const;
  void set_time_us(uint64_t value);
  private:
  uint64_t _internal_time_us() const;
  void _internal_set_time_us(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t time_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishPositionResponse) */ {
 public:
  inline PublishPositionResponse() : PublishPositionResponse(nullptr) {}
  ~PublishPositionResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishPositionResponse(const PublishPositionResponse& from);
  PublishPositionResponse(PublishPositionResponse&& from) noexcept
    : PublishPositionResponse() {
    *this = ::std::move(from);
  }

  inline PublishPositionResponse& operator=(const PublishPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishPositionResponse& operator=(PublishPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishPositionResponse* internal_default_instance() {
    return reinterpret_cast<const PublishPositionResponse*>(
               &_PublishPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PublishPositionResponse& a, PublishPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishPositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishPositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishPositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishPositionResponse";
  }
  protected:
  explicit PublishPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishHomeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishHomeResponse) */ {
 public:
  inline PublishHomeResponse() : PublishHomeResponse(nullptr) {}
  ~PublishHomeResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishHomeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishHomeResponse(const PublishHomeResponse& from);
  PublishHomeResponse(PublishHomeResponse&& from) noexcept
    : PublishHomeResponse() {
    *this = ::std::move(from);
  }

  inline PublishHomeResponse& operator=(const PublishHomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishHomeResponse& operator=(PublishHomeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishHomeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishHomeResponse* internal_default_instance() {
    return reinterpret_cast<const PublishHomeResponse*>(
               &_PublishHomeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PublishHomeResponse& a, PublishHomeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishHomeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishHomeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishHomeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishHomeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishHomeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishHomeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishHomeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishHomeResponse";
  }
  protected:
  explicit PublishHomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishHomeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishSysStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishSysStatusResponse) */ {
 public:
  inline PublishSysStatusResponse() : PublishSysStatusResponse(nullptr) {}
  ~PublishSysStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishSysStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishSysStatusResponse(const PublishSysStatusResponse& from);
  PublishSysStatusResponse(PublishSysStatusResponse&& from) noexcept
    : PublishSysStatusResponse() {
    *this = ::std::move(from);
  }

  inline PublishSysStatusResponse& operator=(const PublishSysStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishSysStatusResponse& operator=(PublishSysStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishSysStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishSysStatusResponse* internal_default_instance() {
    return reinterpret_cast<const PublishSysStatusResponse*>(
               &_PublishSysStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PublishSysStatusResponse& a, PublishSysStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishSysStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishSysStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishSysStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishSysStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishSysStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishSysStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishSysStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishSysStatusResponse";
  }
  protected:
  explicit PublishSysStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishExtendedSysStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse) */ {
 public:
  inline PublishExtendedSysStateResponse() : PublishExtendedSysStateResponse(nullptr) {}
  ~PublishExtendedSysStateResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishExtendedSysStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishExtendedSysStateResponse(const PublishExtendedSysStateResponse& from);
  PublishExtendedSysStateResponse(PublishExtendedSysStateResponse&& from) noexcept
    : PublishExtendedSysStateResponse() {
    *this = ::std::move(from);
  }

  inline PublishExtendedSysStateResponse& operator=(const PublishExtendedSysStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishExtendedSysStateResponse& operator=(PublishExtendedSysStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishExtendedSysStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishExtendedSysStateResponse* internal_default_instance() {
    return reinterpret_cast<const PublishExtendedSysStateResponse*>(
               &_PublishExtendedSysStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PublishExtendedSysStateResponse& a, PublishExtendedSysStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishExtendedSysStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishExtendedSysStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishExtendedSysStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishExtendedSysStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishExtendedSysStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishExtendedSysStateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishExtendedSysStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse";
  }
  protected:
  explicit PublishExtendedSysStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRawGpsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRawGpsResponse) */ {
 public:
  inline PublishRawGpsResponse() : PublishRawGpsResponse(nullptr) {}
  ~PublishRawGpsResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishRawGpsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRawGpsResponse(const PublishRawGpsResponse& from);
  PublishRawGpsResponse(PublishRawGpsResponse&& from) noexcept
    : PublishRawGpsResponse() {
    *this = ::std::move(from);
  }

  inline PublishRawGpsResponse& operator=(const PublishRawGpsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRawGpsResponse& operator=(PublishRawGpsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRawGpsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRawGpsResponse* internal_default_instance() {
    return reinterpret_cast<const PublishRawGpsResponse*>(
               &_PublishRawGpsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PublishRawGpsResponse& a, PublishRawGpsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRawGpsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRawGpsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRawGpsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRawGpsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishRawGpsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishRawGpsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRawGpsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishRawGpsResponse";
  }
  protected:
  explicit PublishRawGpsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishBatteryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishBatteryResponse) */ {
 public:
  inline PublishBatteryResponse() : PublishBatteryResponse(nullptr) {}
  ~PublishBatteryResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishBatteryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishBatteryResponse(const PublishBatteryResponse& from);
  PublishBatteryResponse(PublishBatteryResponse&& from) noexcept
    : PublishBatteryResponse() {
    *this = ::std::move(from);
  }

  inline PublishBatteryResponse& operator=(const PublishBatteryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishBatteryResponse& operator=(PublishBatteryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishBatteryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishBatteryResponse* internal_default_instance() {
    return reinterpret_cast<const PublishBatteryResponse*>(
               &_PublishBatteryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PublishBatteryResponse& a, PublishBatteryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishBatteryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishBatteryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishBatteryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishBatteryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishBatteryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishBatteryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishBatteryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishBatteryResponse";
  }
  protected:
  explicit PublishBatteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishStatusTextResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishStatusTextResponse) */ {
 public:
  inline PublishStatusTextResponse() : PublishStatusTextResponse(nullptr) {}
  ~PublishStatusTextResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishStatusTextResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishStatusTextResponse(const PublishStatusTextResponse& from);
  PublishStatusTextResponse(PublishStatusTextResponse&& from) noexcept
    : PublishStatusTextResponse() {
    *this = ::std::move(from);
  }

  inline PublishStatusTextResponse& operator=(const PublishStatusTextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishStatusTextResponse& operator=(PublishStatusTextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishStatusTextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishStatusTextResponse* internal_default_instance() {
    return reinterpret_cast<const PublishStatusTextResponse*>(
               &_PublishStatusTextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PublishStatusTextResponse& a, PublishStatusTextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishStatusTextResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishStatusTextResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishStatusTextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishStatusTextResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishStatusTextResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishStatusTextResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishStatusTextResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishStatusTextResponse";
  }
  protected:
  explicit PublishStatusTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishOdometryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishOdometryResponse) */ {
 public:
  inline PublishOdometryResponse() : PublishOdometryResponse(nullptr) {}
  ~PublishOdometryResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishOdometryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishOdometryResponse(const PublishOdometryResponse& from);
  PublishOdometryResponse(PublishOdometryResponse&& from) noexcept
    : PublishOdometryResponse() {
    *this = ::std::move(from);
  }

  inline PublishOdometryResponse& operator=(const PublishOdometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishOdometryResponse& operator=(PublishOdometryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishOdometryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishOdometryResponse* internal_default_instance() {
    return reinterpret_cast<const PublishOdometryResponse*>(
               &_PublishOdometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PublishOdometryResponse& a, PublishOdometryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishOdometryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishOdometryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishOdometryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishOdometryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishOdometryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishOdometryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishOdometryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishOdometryResponse";
  }
  protected:
  explicit PublishOdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishPositionVelocityNedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse) */ {
 public:
  inline PublishPositionVelocityNedResponse() : PublishPositionVelocityNedResponse(nullptr) {}
  ~PublishPositionVelocityNedResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishPositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishPositionVelocityNedResponse(const PublishPositionVelocityNedResponse& from);
  PublishPositionVelocityNedResponse(PublishPositionVelocityNedResponse&& from) noexcept
    : PublishPositionVelocityNedResponse() {
    *this = ::std::move(from);
  }

  inline PublishPositionVelocityNedResponse& operator=(const PublishPositionVelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishPositionVelocityNedResponse& operator=(PublishPositionVelocityNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishPositionVelocityNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishPositionVelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const PublishPositionVelocityNedResponse*>(
               &_PublishPositionVelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PublishPositionVelocityNedResponse& a, PublishPositionVelocityNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishPositionVelocityNedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishPositionVelocityNedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishPositionVelocityNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishPositionVelocityNedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishPositionVelocityNedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishPositionVelocityNedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishPositionVelocityNedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse";
  }
  protected:
  explicit PublishPositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishGroundTruthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse) */ {
 public:
  inline PublishGroundTruthResponse() : PublishGroundTruthResponse(nullptr) {}
  ~PublishGroundTruthResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishGroundTruthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishGroundTruthResponse(const PublishGroundTruthResponse& from);
  PublishGroundTruthResponse(PublishGroundTruthResponse&& from) noexcept
    : PublishGroundTruthResponse() {
    *this = ::std::move(from);
  }

  inline PublishGroundTruthResponse& operator=(const PublishGroundTruthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishGroundTruthResponse& operator=(PublishGroundTruthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishGroundTruthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishGroundTruthResponse* internal_default_instance() {
    return reinterpret_cast<const PublishGroundTruthResponse*>(
               &_PublishGroundTruthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PublishGroundTruthResponse& a, PublishGroundTruthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishGroundTruthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishGroundTruthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishGroundTruthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishGroundTruthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishGroundTruthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishGroundTruthResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishGroundTruthResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishGroundTruthResponse";
  }
  protected:
  explicit PublishGroundTruthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishImuResponse) */ {
 public:
  inline PublishImuResponse() : PublishImuResponse(nullptr) {}
  ~PublishImuResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishImuResponse(const PublishImuResponse& from);
  PublishImuResponse(PublishImuResponse&& from) noexcept
    : PublishImuResponse() {
    *this = ::std::move(from);
  }

  inline PublishImuResponse& operator=(const PublishImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishImuResponse& operator=(PublishImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishImuResponse* internal_default_instance() {
    return reinterpret_cast<const PublishImuResponse*>(
               &_PublishImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PublishImuResponse& a, PublishImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishImuResponse";
  }
  protected:
  explicit PublishImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishScaledImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishScaledImuResponse) */ {
 public:
  inline PublishScaledImuResponse() : PublishScaledImuResponse(nullptr) {}
  ~PublishScaledImuResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishScaledImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishScaledImuResponse(const PublishScaledImuResponse& from);
  PublishScaledImuResponse(PublishScaledImuResponse&& from) noexcept
    : PublishScaledImuResponse() {
    *this = ::std::move(from);
  }

  inline PublishScaledImuResponse& operator=(const PublishScaledImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishScaledImuResponse& operator=(PublishScaledImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishScaledImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishScaledImuResponse* internal_default_instance() {
    return reinterpret_cast<const PublishScaledImuResponse*>(
               &_PublishScaledImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PublishScaledImuResponse& a, PublishScaledImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishScaledImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishScaledImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishScaledImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishScaledImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishScaledImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishScaledImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishScaledImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishScaledImuResponse";
  }
  protected:
  explicit PublishScaledImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRawImuResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRawImuResponse) */ {
 public:
  inline PublishRawImuResponse() : PublishRawImuResponse(nullptr) {}
  ~PublishRawImuResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishRawImuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRawImuResponse(const PublishRawImuResponse& from);
  PublishRawImuResponse(PublishRawImuResponse&& from) noexcept
    : PublishRawImuResponse() {
    *this = ::std::move(from);
  }

  inline PublishRawImuResponse& operator=(const PublishRawImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRawImuResponse& operator=(PublishRawImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRawImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRawImuResponse* internal_default_instance() {
    return reinterpret_cast<const PublishRawImuResponse*>(
               &_PublishRawImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PublishRawImuResponse& a, PublishRawImuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRawImuResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRawImuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRawImuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRawImuResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishRawImuResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishRawImuResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRawImuResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishRawImuResponse";
  }
  protected:
  explicit PublishRawImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishUnixEpochTimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse) */ {
 public:
  inline PublishUnixEpochTimeResponse() : PublishUnixEpochTimeResponse(nullptr) {}
  ~PublishUnixEpochTimeResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishUnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishUnixEpochTimeResponse(const PublishUnixEpochTimeResponse& from);
  PublishUnixEpochTimeResponse(PublishUnixEpochTimeResponse&& from) noexcept
    : PublishUnixEpochTimeResponse() {
    *this = ::std::move(from);
  }

  inline PublishUnixEpochTimeResponse& operator=(const PublishUnixEpochTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishUnixEpochTimeResponse& operator=(PublishUnixEpochTimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishUnixEpochTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishUnixEpochTimeResponse* internal_default_instance() {
    return reinterpret_cast<const PublishUnixEpochTimeResponse*>(
               &_PublishUnixEpochTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PublishUnixEpochTimeResponse& a, PublishUnixEpochTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishUnixEpochTimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishUnixEpochTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishUnixEpochTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishUnixEpochTimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishUnixEpochTimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishUnixEpochTimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishUnixEpochTimeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse";
  }
  protected:
  explicit PublishUnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  private:
  bool _internal_has_telemetry_server_result() const;
  public:
  void clear_telemetry_server_result();
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();
  public:
  void unsafe_arena_set_allocated_telemetry_server_result(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float relative_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Heading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Heading) */ {
 public:
  inline Heading() : Heading(nullptr) {}
  ~Heading() override;
  explicit PROTOBUF_CONSTEXPR Heading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heading(const Heading& from);
  Heading(Heading&& from) noexcept
    : Heading() {
    *this = ::std::move(from);
  }

  inline Heading& operator=(const Heading& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heading& operator=(Heading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heading& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heading* internal_default_instance() {
    return reinterpret_cast<const Heading*>(
               &_Heading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Heading& a, Heading& b) {
    a.Swap(&b);
  }
  inline void Swap(Heading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Heading& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.Heading";
  }
  protected:
  explicit Heading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingDegFieldNumber = 1,
  };
  // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_heading_deg();
  double heading_deg() const;
  void set_heading_deg(double value);
  private:
  double _internal_heading_deg() const;
  void _internal_set_heading_deg(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Heading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double heading_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Quaternion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kTimestampUsFieldNumber = 5,
  };
  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // uint64 timestamp_us = 5;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float w_;
  float x_;
  float y_;
  float z_;
  uint64_t timestamp_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class EulerAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.EulerAngle) */ {
 public:
  inline EulerAngle() : EulerAngle(nullptr) {}
  ~EulerAngle() override;
  explicit PROTOBUF_CONSTEXPR EulerAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EulerAngle(const EulerAngle& from);
  EulerAngle(EulerAngle&& from) noexcept
    : EulerAngle() {
    *this = ::std::move(from);
  }

  inline EulerAngle& operator=(const EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerAngle& operator=(EulerAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EulerAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const EulerAngle* internal_default_instance() {
    return reinterpret_cast<const EulerAngle*>(
               &_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(EulerAngle& a, EulerAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerAngle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EulerAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EulerAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EulerAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EulerAngle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerAngle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.EulerAngle";
  }
  protected:
  explicit EulerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kTimestampUsFieldNumber = 4,
    kYawDegFieldNumber = 3,
  };
  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // uint64 timestamp_us = 4;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.EulerAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_deg_;
  float pitch_deg_;
  uint64_t timestamp_us_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.AngularVelocityBody) */ {
 public:
  inline AngularVelocityBody() : AngularVelocityBody(nullptr) {}
  ~AngularVelocityBody() override;
  explicit PROTOBUF_CONSTEXPR AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AngularVelocityBody(const AngularVelocityBody& from);
  AngularVelocityBody(AngularVelocityBody&& from) noexcept
    : AngularVelocityBody() {
    *this = ::std::move(from);
  }

  inline AngularVelocityBody& operator=(const AngularVelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityBody& operator=(AngularVelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityBody* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityBody*>(
               &_AngularVelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AngularVelocityBody& a, AngularVelocityBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocityBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngularVelocityBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AngularVelocityBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AngularVelocityBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularVelocityBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.AngularVelocityBody";
  }
  protected:
  explicit AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRadSFieldNumber = 1,
    kPitchRadSFieldNumber = 2,
    kYawRadSFieldNumber = 3,
  };
  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_rad_s();
  float roll_rad_s() const;
  void set_roll_rad_s(float value);
  private:
  float _internal_roll_rad_s() const;
  void _internal_set_roll_rad_s(float value);
  public:

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_rad_s();
  float pitch_rad_s() const;
  void set_pitch_rad_s(float value);
  private:
  float _internal_pitch_rad_s() const;
  void _internal_set_pitch_rad_s(float value);
  public:

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_rad_s();
  float yaw_rad_s() const;
  void set_yaw_rad_s(float value);
  private:
  float _internal_yaw_rad_s() const;
  void _internal_set_yaw_rad_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.AngularVelocityBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_rad_s_;
  float pitch_rad_s_;
  float yaw_rad_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GpsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.GpsInfo) */ {
 public:
  inline GpsInfo() : GpsInfo(nullptr) {}
  ~GpsInfo() override;
  explicit PROTOBUF_CONSTEXPR GpsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpsInfo(const GpsInfo& from);
  GpsInfo(GpsInfo&& from) noexcept
    : GpsInfo() {
    *this = ::std::move(from);
  }

  inline GpsInfo& operator=(const GpsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsInfo& operator=(GpsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpsInfo* internal_default_instance() {
    return reinterpret_cast<const GpsInfo*>(
               &_GpsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GpsInfo& a, GpsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.GpsInfo";
  }
  protected:
  explicit GpsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumSatellitesFieldNumber = 1,
    kFixTypeFieldNumber = 2,
  };
  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_num_satellites();
  int32_t num_satellites() const;
  void set_num_satellites(int32_t value);
  private:
  int32_t _internal_num_satellites() const;
  void _internal_set_num_satellites(int32_t value);
  public:

  // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
  void clear_fix_type();
  ::mavsdk::rpc::telemetry_server::FixType fix_type() const;
  void set_fix_type(::mavsdk::rpc::telemetry_server::FixType value);
  private:
  ::mavsdk::rpc::telemetry_server::FixType _internal_fix_type() const;
  void _internal_set_fix_type(::mavsdk::rpc::telemetry_server::FixType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.GpsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t num_satellites_;
  int fix_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RawGps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.RawGps) */ {
 public:
  inline RawGps() : RawGps(nullptr) {}
  ~RawGps() override;
  explicit PROTOBUF_CONSTEXPR RawGps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawGps(const RawGps& from);
  RawGps(RawGps&& from) noexcept
    : RawGps() {
    *this = ::std::move(from);
  }

  inline RawGps& operator=(const RawGps& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawGps& operator=(RawGps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawGps& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawGps* internal_default_instance() {
    return reinterpret_cast<const RawGps*>(
               &_RawGps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RawGps& a, RawGps& b) {
    a.Swap(&b);
  }
  inline void Swap(RawGps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawGps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawGps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RawGps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawGps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RawGps& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawGps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.RawGps";
  }
  protected:
  explicit RawGps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampUsFieldNumber = 1,
    kLatitudeDegFieldNumber = 2,
    kLongitudeDegFieldNumber = 3,
    kAbsoluteAltitudeMFieldNumber = 4,
    kHdopFieldNumber = 5,
    kVdopFieldNumber = 6,
    kVelocityMSFieldNumber = 7,
    kCogDegFieldNumber = 8,
    kAltitudeEllipsoidMFieldNumber = 9,
    kHorizontalUncertaintyMFieldNumber = 10,
    kVerticalUncertaintyMFieldNumber = 11,
    kVelocityUncertaintyMSFieldNumber = 12,
    kHeadingUncertaintyDegFieldNumber = 13,
    kYawDegFieldNumber = 14,
  };
  // uint64 timestamp_us = 1;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // double latitude_deg = 2;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 3;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 4;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float hdop = 5;
  void clear_hdop();
  float hdop() const;
  void set_hdop(float value);
  private:
  float _internal_hdop() const;
  void _internal_set_hdop(float value);
  public:

  // float vdop = 6;
  void clear_vdop();
  float vdop() const;
  void set_vdop(float value);
  private:
  float _internal_vdop() const;
  void _internal_set_vdop(float value);
  public:

  // float velocity_m_s = 7;
  void clear_velocity_m_s();
  float velocity_m_s() const;
  void set_velocity_m_s(float value);
  private:
  float _internal_velocity_m_s() const;
  void _internal_set_velocity_m_s(float value);
  public:

  // float cog_deg = 8;
  void clear_cog_deg();
  float cog_deg() const;
  void set_cog_deg(float value);
  private:
  float _internal_cog_deg() const;
  void _internal_set_cog_deg(float value);
  public:

  // float altitude_ellipsoid_m = 9;
  void clear_altitude_ellipsoid_m();
  float altitude_ellipsoid_m() const;
  void set_altitude_ellipsoid_m(float value);
  private:
  float _internal_altitude_ellipsoid_m() const;
  void _internal_set_altitude_ellipsoid_m(float value);
  public:

  // float horizontal_uncertainty_m = 10;
  void clear_horizontal_uncertainty_m();
  float horizontal_uncertainty_m() const;
  void set_horizontal_uncertainty_m(float value);
  private:
  float _internal_horizontal_uncertainty_m() const;
  void _internal_set_horizontal_uncertainty_m(float value);
  public:

  // float vertical_uncertainty_m = 11;
  void clear_vertical_uncertainty_m();
  float vertical_uncertainty_m() const;
  void set_vertical_uncertainty_m(float value);
  private:
  float _internal_vertical_uncertainty_m() const;
  void _internal_set_vertical_uncertainty_m(float value);
  public:

  // float velocity_uncertainty_m_s = 12;
  void clear_velocity_uncertainty_m_s();
  float velocity_uncertainty_m_s() const;
  void set_velocity_uncertainty_m_s(float value);
  private:
  float _internal_velocity_uncertainty_m_s() const;
  void _internal_set_velocity_uncertainty_m_s(float value);
  public:

  // float heading_uncertainty_deg = 13;
  void clear_heading_uncertainty_deg();
  float heading_uncertainty_deg() const;
  void set_heading_uncertainty_deg(float value);
  private:
  float _internal_heading_uncertainty_deg() const;
  void _internal_set_heading_uncertainty_deg(float value);
  public:

  // float yaw_deg = 14;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.RawGps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t timestamp_us_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float hdop_;
  float vdop_;
  float velocity_m_s_;
  float cog_deg_;
  float altitude_ellipsoid_m_;
  float horizontal_uncertainty_m_;
  float vertical_uncertainty_m_;
  float velocity_uncertainty_m_s_;
  float heading_uncertainty_deg_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Battery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Battery) */ {
 public:
  inline Battery() : Battery(nullptr) {}
  ~Battery() override;
  explicit PROTOBUF_CONSTEXPR Battery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Battery(const Battery& from);
  Battery(Battery&& from) noexcept
    : Battery() {
    *this = ::std::move(from);
  }

  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Battery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
               &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Battery& a, Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(Battery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Battery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Battery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Battery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Battery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Battery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.Battery";
  }
  protected:
  explicit Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoltageVFieldNumber = 1,
    kRemainingPercentFieldNumber = 2,
  };
  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_voltage_v();
  float voltage_v() const;
  void set_voltage_v(float value);
  private:
  float _internal_voltage_v() const;
  void _internal_set_voltage_v(float value);
  public:

  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_remaining_percent();
  float remaining_percent() const;
  void set_remaining_percent(float value);
  private:
  float _internal_remaining_percent() const;
  void _internal_set_remaining_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Battery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float voltage_v_;
  float remaining_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RcStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.RcStatus) */ {
 public:
  inline RcStatus() : RcStatus(nullptr) {}
  ~RcStatus() override;
  explicit PROTOBUF_CONSTEXPR RcStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcStatus(const RcStatus& from);
  RcStatus(RcStatus&& from) noexcept
    : RcStatus() {
    *this = ::std::move(from);
  }

  inline RcStatus& operator=(const RcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcStatus& operator=(RcStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcStatus* internal_default_instance() {
    return reinterpret_cast<const RcStatus*>(
               &_RcStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RcStatus& a, RcStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RcStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RcStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.RcStatus";
  }
  protected:
  explicit RcStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWasAvailableOnceFieldNumber = 1,
    kIsAvailableFieldNumber = 2,
    kSignalStrengthPercentFieldNumber = 3,
  };
  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  void clear_was_available_once();
  bool was_available_once() const;
  void set_was_available_once(bool value);
  private:
  bool _internal_was_available_once() const;
  void _internal_set_was_available_once(bool value);
  public:

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  void clear_is_available();
  bool is_available() const;
  void set_is_available(bool value);
  private:
  bool _internal_is_available() const;
  void _internal_set_is_available(bool value);
  public:

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_signal_strength_percent();
  float signal_strength_percent() const;
  void set_signal_strength_percent(float value);
  private:
  float _internal_signal_strength_percent() const;
  void _internal_set_signal_strength_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.RcStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool was_available_once_;
  bool is_available_;
  float signal_strength_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StatusText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.StatusText) */ {
 public:
  inline StatusText() : StatusText(nullptr) {}
  ~StatusText() override;
  explicit PROTOBUF_CONSTEXPR StatusText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusText(const StatusText& from);
  StatusText(StatusText&& from) noexcept
    : StatusText() {
    *this = ::std::move(from);
  }

  inline StatusText& operator=(const StatusText& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusText& operator=(StatusText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusText& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusText* internal_default_instance() {
    return reinterpret_cast<const StatusText*>(
               &_StatusText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(StatusText& a, StatusText& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusText& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.StatusText";
  }
  protected:
  explicit StatusText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
  void clear_type();
  ::mavsdk::rpc::telemetry_server::StatusTextType type() const;
  void set_type(::mavsdk::rpc::telemetry_server::StatusTextType value);
  private:
  ::mavsdk::rpc::telemetry_server::StatusTextType _internal_type() const;
  void _internal_set_type(::mavsdk::rpc::telemetry_server::StatusTextType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.StatusText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControlTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.ActuatorControlTarget) */ {
 public:
  inline ActuatorControlTarget() : ActuatorControlTarget(nullptr) {}
  ~ActuatorControlTarget() override;
  explicit PROTOBUF_CONSTEXPR ActuatorControlTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorControlTarget(const ActuatorControlTarget& from);
  ActuatorControlTarget(ActuatorControlTarget&& from) noexcept
    : ActuatorControlTarget() {
    *this = ::std::move(from);
  }

  inline ActuatorControlTarget& operator=(const ActuatorControlTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControlTarget& operator=(ActuatorControlTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorControlTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorControlTarget* internal_default_instance() {
    return reinterpret_cast<const ActuatorControlTarget*>(
               &_ActuatorControlTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ActuatorControlTarget& a, ActuatorControlTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControlTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorControlTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorControlTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorControlTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorControlTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorControlTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControlTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.ActuatorControlTarget";
  }
  protected:
  explicit ActuatorControlTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlsFieldNumber = 2,
    kGroupFieldNumber = 1,
  };
  // repeated float controls = 2;
  int controls_size() const;
  private:
  int _internal_controls_size() const;
  public:
  void clear_controls();
  private:
  float _internal_controls(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_controls() const;
  void _internal_add_controls(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_controls();
  public:
  float controls(int index) const;
  void set_controls(int index, float value);
  void add_controls(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      controls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_controls();

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_group();
  int32_t group() const;
  void set_group(int32_t value);
  private:
  int32_t _internal_group() const;
  void _internal_set_group(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > controls_;
  int32_t group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ActuatorOutputStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.ActuatorOutputStatus) */ {
 public:
  inline ActuatorOutputStatus() : ActuatorOutputStatus(nullptr) {}
  ~ActuatorOutputStatus() override;
  explicit PROTOBUF_CONSTEXPR ActuatorOutputStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorOutputStatus(const ActuatorOutputStatus& from);
  ActuatorOutputStatus(ActuatorOutputStatus&& from) noexcept
    : ActuatorOutputStatus() {
    *this = ::std::move(from);
  }

  inline ActuatorOutputStatus& operator=(const ActuatorOutputStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorOutputStatus& operator=(ActuatorOutputStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorOutputStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorOutputStatus* internal_default_instance() {
    return reinterpret_cast<const ActuatorOutputStatus*>(
               &_ActuatorOutputStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ActuatorOutputStatus& a, ActuatorOutputStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorOutputStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorOutputStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorOutputStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorOutputStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorOutputStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorOutputStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorOutputStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.ActuatorOutputStatus";
  }
  protected:
  explicit ActuatorOutputStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorFieldNumber = 2,
    kActiveFieldNumber = 1,
  };
  // repeated float actuator = 2;
  int actuator_size() const;
  private:
  int _internal_actuator_size() const;
  public:
  void clear_actuator();
  private:
  float _internal_actuator(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_actuator() const;
  void _internal_add_actuator(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_actuator();
  public:
  float actuator(int index) const;
  void set_actuator(int index, float value);
  void add_actuator(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      actuator() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_actuator();

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_active();
  uint32_t active() const;
  void set_active(uint32_t value);
  private:
  uint32_t _internal_active() const;
  void _internal_set_active(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > actuator_;
  uint32_t active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Covariance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Covariance) */ {
 public:
  inline Covariance() : Covariance(nullptr) {}
  ~Covariance() override;
  explicit PROTOBUF_CONSTEXPR Covariance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Covariance(const Covariance& from);
  Covariance(Covariance&& from) noexcept
    : Covariance() {
    *this = ::std::move(from);
  }

  inline Covariance& operator=(const Covariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Covariance& operator=(Covariance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Covariance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Covariance* internal_default_instance() {
    return reinterpret_cast<const Covariance*>(
               &_Covariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Covariance& a, Covariance& b) {
    a.Swap(&b);
  }
  inline void Swap(Covariance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Covariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Covariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Covariance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Covariance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Covariance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Covariance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.Covariance";
  }
  protected:
  explicit Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceMatrixFieldNumber = 1,
  };
  // repeated float covariance_matrix = 1;
  int covariance_matrix_size() const;
  private:
  int _internal_covariance_matrix_size() const;
  public:
  void clear_covariance_matrix();
  private:
  float _internal_covariance_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_covariance_matrix() const;
  void _internal_add_covariance_matrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_covariance_matrix();
  public:
  float covariance_matrix(int index) const;
  void set_covariance_matrix(int index, float value);
  void add_covariance_matrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      covariance_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_covariance_matrix();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Covariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > covariance_matrix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class VelocityBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.VelocityBody) */ {
 public:
  inline VelocityBody() : VelocityBody(nullptr) {}
  ~VelocityBody() override;
  explicit PROTOBUF_CONSTEXPR VelocityBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelocityBody(const VelocityBody& from);
  VelocityBody(VelocityBody&& from) noexcept
    : VelocityBody() {
    *this = ::std::move(from);
  }

  inline VelocityBody& operator=(const VelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityBody& operator=(VelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityBody* internal_default_instance() {
    return reinterpret_cast<const VelocityBody*>(
               &_VelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(VelocityBody& a, VelocityBody& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelocityBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelocityBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelocityBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.VelocityBody";
  }
  protected:
  explicit VelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMSFieldNumber = 1,
    kYMSFieldNumber = 2,
    kZMSFieldNumber = 3,
  };
  // float x_m_s = 1;
  void clear_x_m_s();
  float x_m_s() const;
  void set_x_m_s(float value);
  private:
  float _internal_x_m_s() const;
  void _internal_set_x_m_s(float value);
  public:

  // float y_m_s = 2;
  void clear_y_m_s();
  float y_m_s() const;
  void set_y_m_s(float value);
  private:
  float _internal_y_m_s() const;
  void _internal_set_y_m_s(float value);
  public:

  // float z_m_s = 3;
  void clear_z_m_s();
  float z_m_s() const;
  void set_z_m_s(float value);
  private:
  float _internal_z_m_s() const;
  void _internal_set_z_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.VelocityBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_m_s_;
  float y_m_s_;
  float z_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PositionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PositionBody) */ {
 public:
  inline PositionBody() : PositionBody(nullptr) {}
  ~PositionBody() override;
  explicit PROTOBUF_CONSTEXPR PositionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionBody(const PositionBody& from);
  PositionBody(PositionBody&& from) noexcept
    : PositionBody() {
    *this = ::std::move(from);
  }

  inline PositionBody& operator=(const PositionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionBody& operator=(PositionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionBody* internal_default_instance() {
    return reinterpret_cast<const PositionBody*>(
               &_PositionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PositionBody& a, PositionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PositionBody";
  }
  protected:
  explicit PositionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMFieldNumber = 1,
    kYMFieldNumber = 2,
    kZMFieldNumber = 3,
  };
  // float x_m = 1;
  void clear_x_m();
  float x_m() const;
  void set_x_m(float value);
  private:
  float _internal_x_m() const;
  void _internal_set_x_m(float value);
  public:

  // float y_m = 2;
  void clear_y_m();
  float y_m() const;
  void set_y_m(float value);
  private:
  float _internal_y_m() const;
  void _internal_set_y_m(float value);
  public:

  // float z_m = 3;
  void clear_z_m();
  float z_m() const;
  void set_z_m(float value);
  private:
  float _internal_z_m() const;
  void _internal_set_z_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PositionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_m_;
  float y_m_;
  float z_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Odometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() override;
  explicit PROTOBUF_CONSTEXPR Odometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Odometry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Odometry_MavFrame MavFrame;
  static constexpr MavFrame MAV_FRAME_UNDEF =
    Odometry_MavFrame_MAV_FRAME_UNDEF;
  static constexpr MavFrame MAV_FRAME_BODY_NED =
    Odometry_MavFrame_MAV_FRAME_BODY_NED;
  static constexpr MavFrame MAV_FRAME_VISION_NED =
    Odometry_MavFrame_MAV_FRAME_VISION_NED;
  static constexpr MavFrame MAV_FRAME_ESTIM_NED =
    Odometry_MavFrame_MAV_FRAME_ESTIM_NED;
  static inline bool MavFrame_IsValid(int value) {
    return Odometry_MavFrame_IsValid(value);
  }
  static constexpr MavFrame MavFrame_MIN =
    Odometry_MavFrame_MavFrame_MIN;
  static constexpr MavFrame MavFrame_MAX =
    Odometry_MavFrame_MavFrame_MAX;
  static constexpr int MavFrame_ARRAYSIZE =
    Odometry_MavFrame_MavFrame_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MavFrame_descriptor() {
    return Odometry_MavFrame_descriptor();
  }
  template<typename T>
  static inline const std::string& MavFrame_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MavFrame>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MavFrame_Name.");
    return Odometry_MavFrame_Name(enum_t_value);
  }
  static inline bool MavFrame_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MavFrame* value) {
    return Odometry_MavFrame_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionBodyFieldNumber = 4,
    kQFieldNumber = 5,
    kVelocityBodyFieldNumber = 6,
    kAngularVelocityBodyFieldNumber = 7,
    kPoseCovarianceFieldNumber = 8,
    kVelocityCovarianceFieldNumber = 9,
    kTimeUsecFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kChildFrameIdFieldNumber = 3,
  };
  // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
  bool has_position_body() const;
  private:
  bool _internal_has_position_body() const;
  public:
  void clear_position_body();
  const ::mavsdk::rpc::telemetry_server::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::PositionBody* release_position_body();
  ::mavsdk::rpc::telemetry_server::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::telemetry_server::PositionBody* position_body);
  private:
  const ::mavsdk::rpc::telemetry_server::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::telemetry_server::PositionBody* _internal_mutable_position_body();
  public:
  void unsafe_arena_set_allocated_position_body(
      ::mavsdk::rpc::telemetry_server::PositionBody* position_body);
  ::mavsdk::rpc::telemetry_server::PositionBody* unsafe_arena_release_position_body();

  // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::mavsdk::rpc::telemetry_server::Quaternion& q() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Quaternion* release_q();
  ::mavsdk::rpc::telemetry_server::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::telemetry_server::Quaternion* q);
  private:
  const ::mavsdk::rpc::telemetry_server::Quaternion& _internal_q() const;
  ::mavsdk::rpc::telemetry_server::Quaternion* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::mavsdk::rpc::telemetry_server::Quaternion* q);
  ::mavsdk::rpc::telemetry_server::Quaternion* unsafe_arena_release_q();

  // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
  bool has_velocity_body() const;
  private:
  bool _internal_has_velocity_body() const;
  public:
  void clear_velocity_body();
  const ::mavsdk::rpc::telemetry_server::VelocityBody& velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::VelocityBody* release_velocity_body();
  ::mavsdk::rpc::telemetry_server::VelocityBody* mutable_velocity_body();
  void set_allocated_velocity_body(::mavsdk::rpc::telemetry_server::VelocityBody* velocity_body);
  private:
  const ::mavsdk::rpc::telemetry_server::VelocityBody& _internal_velocity_body() const;
  ::mavsdk::rpc::telemetry_server::VelocityBody* _internal_mutable_velocity_body();
  public:
  void unsafe_arena_set_allocated_velocity_body(
      ::mavsdk::rpc::telemetry_server::VelocityBody* velocity_body);
  ::mavsdk::rpc::telemetry_server::VelocityBody* unsafe_arena_release_velocity_body();

  // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
  bool has_angular_velocity_body() const;
  private:
  bool _internal_has_angular_velocity_body() const;
  public:
  void clear_angular_velocity_body();
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& angular_velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::AngularVelocityBody* release_angular_velocity_body();
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* mutable_angular_velocity_body();
  void set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry_server::AngularVelocityBody* angular_velocity_body);
  private:
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& _internal_angular_velocity_body() const;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* _internal_mutable_angular_velocity_body();
  public:
  void unsafe_arena_set_allocated_angular_velocity_body(
      ::mavsdk::rpc::telemetry_server::AngularVelocityBody* angular_velocity_body);
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* unsafe_arena_release_angular_velocity_body();

  // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
  bool has_pose_covariance() const;
  private:
  bool _internal_has_pose_covariance() const;
  public:
  void clear_pose_covariance();
  const ::mavsdk::rpc::telemetry_server::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Covariance* release_pose_covariance();
  ::mavsdk::rpc::telemetry_server::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::telemetry_server::Covariance* pose_covariance);
  private:
  const ::mavsdk::rpc::telemetry_server::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::telemetry_server::Covariance* _internal_mutable_pose_covariance();
  public:
  void unsafe_arena_set_allocated_pose_covariance(
      ::mavsdk::rpc::telemetry_server::Covariance* pose_covariance);
  ::mavsdk::rpc::telemetry_server::Covariance* unsafe_arena_release_pose_covariance();

  // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
  bool has_velocity_covariance() const;
  private:
  bool _internal_has_velocity_covariance() const;
  public:
  void clear_velocity_covariance();
  const ::mavsdk::rpc::telemetry_server::Covariance& velocity_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Covariance* release_velocity_covariance();
  ::mavsdk::rpc::telemetry_server::Covariance* mutable_velocity_covariance();
  void set_allocated_velocity_covariance(::mavsdk::rpc::telemetry_server::Covariance* velocity_covariance);
  private:
  const ::mavsdk::rpc::telemetry_server::Covariance& _internal_velocity_covariance() const;
  ::mavsdk::rpc::telemetry_server::Covariance* _internal_mutable_velocity_covariance();
  public:
  void unsafe_arena_set_allocated_velocity_covariance(
      ::mavsdk::rpc::telemetry_server::Covariance* velocity_covariance);
  ::mavsdk::rpc::telemetry_server::Covariance* unsafe_arena_release_velocity_covariance();

  // uint64 time_usec = 1;
  void clear_time_usec();
  uint64_t time_usec() const;
  void set_time_usec(uint64_t value);
  private:
  uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(uint64_t value);
  public:

  // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
  void clear_frame_id();
  ::mavsdk::rpc::telemetry_server::Odometry_MavFrame frame_id() const;
  void set_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value);
  private:
  ::mavsdk::rpc::telemetry_server::Odometry_MavFrame _internal_frame_id() const;
  void _internal_set_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value);
  public:

  // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
  void clear_child_frame_id();
  ::mavsdk::rpc::telemetry_server::Odometry_MavFrame child_frame_id() const;
  void set_child_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value);
  private:
  ::mavsdk::rpc::telemetry_server::Odometry_MavFrame _internal_child_frame_id() const;
  void _internal_set_child_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Odometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::PositionBody* position_body_;
  ::mavsdk::rpc::telemetry_server::Quaternion* q_;
  ::mavsdk::rpc::telemetry_server::VelocityBody* velocity_body_;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* angular_velocity_body_;
  ::mavsdk::rpc::telemetry_server::Covariance* pose_covariance_;
  ::mavsdk::rpc::telemetry_server::Covariance* velocity_covariance_;
  uint64_t time_usec_;
  int frame_id_;
  int child_frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DistanceSensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.DistanceSensor) */ {
 public:
  inline DistanceSensor() : DistanceSensor(nullptr) {}
  ~DistanceSensor() override;
  explicit PROTOBUF_CONSTEXPR DistanceSensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceSensor(const DistanceSensor& from);
  DistanceSensor(DistanceSensor&& from) noexcept
    : DistanceSensor() {
    *this = ::std::move(from);
  }

  inline DistanceSensor& operator=(const DistanceSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceSensor& operator=(DistanceSensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceSensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceSensor* internal_default_instance() {
    return reinterpret_cast<const DistanceSensor*>(
               &_DistanceSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(DistanceSensor& a, DistanceSensor& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceSensor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceSensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistanceSensor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceSensor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DistanceSensor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceSensor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.DistanceSensor";
  }
  protected:
  explicit DistanceSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinimumDistanceMFieldNumber = 1,
    kMaximumDistanceMFieldNumber = 2,
    kCurrentDistanceMFieldNumber = 3,
  };
  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_minimum_distance_m();
  float minimum_distance_m() const;
  void set_minimum_distance_m(float value);
  private:
  float _internal_minimum_distance_m() const;
  void _internal_set_minimum_distance_m(float value);
  public:

  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_maximum_distance_m();
  float maximum_distance_m() const;
  void set_maximum_distance_m(float value);
  private:
  float _internal_maximum_distance_m() const;
  void _internal_set_maximum_distance_m(float value);
  public:

  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_current_distance_m();
  float current_distance_m() const;
  void set_current_distance_m(float value);
  private:
  float _internal_current_distance_m() const;
  void _internal_set_current_distance_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.DistanceSensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float minimum_distance_m_;
  float maximum_distance_m_;
  float current_distance_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ScaledPressure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.ScaledPressure) */ {
 public:
  inline ScaledPressure() : ScaledPressure(nullptr) {}
  ~ScaledPressure() override;
  explicit PROTOBUF_CONSTEXPR ScaledPressure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScaledPressure(const ScaledPressure& from);
  ScaledPressure(ScaledPressure&& from) noexcept
    : ScaledPressure() {
    *this = ::std::move(from);
  }

  inline ScaledPressure& operator=(const ScaledPressure& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaledPressure& operator=(ScaledPressure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScaledPressure& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScaledPressure* internal_default_instance() {
    return reinterpret_cast<const ScaledPressure*>(
               &_ScaledPressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ScaledPressure& a, ScaledPressure& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaledPressure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaledPressure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScaledPressure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScaledPressure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScaledPressure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScaledPressure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaledPressure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.ScaledPressure";
  }
  protected:
  explicit ScaledPressure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampUsFieldNumber = 1,
    kAbsolutePressureHpaFieldNumber = 2,
    kDifferentialPressureHpaFieldNumber = 3,
    kTemperatureDegFieldNumber = 4,
    kDifferentialPressureTemperatureDegFieldNumber = 5,
  };
  // uint64 timestamp_us = 1;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // float absolute_pressure_hpa = 2;
  void clear_absolute_pressure_hpa();
  float absolute_pressure_hpa() const;
  void set_absolute_pressure_hpa(float value);
  private:
  float _internal_absolute_pressure_hpa() const;
  void _internal_set_absolute_pressure_hpa(float value);
  public:

  // float differential_pressure_hpa = 3;
  void clear_differential_pressure_hpa();
  float differential_pressure_hpa() const;
  void set_differential_pressure_hpa(float value);
  private:
  float _internal_differential_pressure_hpa() const;
  void _internal_set_differential_pressure_hpa(float value);
  public:

  // float temperature_deg = 4;
  void clear_temperature_deg();
  float temperature_deg() const;
  void set_temperature_deg(float value);
  private:
  float _internal_temperature_deg() const;
  void _internal_set_temperature_deg(float value);
  public:

  // float differential_pressure_temperature_deg = 5;
  void clear_differential_pressure_temperature_deg();
  float differential_pressure_temperature_deg() const;
  void set_differential_pressure_temperature_deg(float value);
  private:
  float _internal_differential_pressure_temperature_deg() const;
  void _internal_set_differential_pressure_temperature_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.ScaledPressure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t timestamp_us_;
  float absolute_pressure_hpa_;
  float differential_pressure_hpa_;
  float temperature_deg_;
  float differential_pressure_temperature_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PositionNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PositionNed) */ {
 public:
  inline PositionNed() : PositionNed(nullptr) {}
  ~PositionNed() override;
  explicit PROTOBUF_CONSTEXPR PositionNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionNed(const PositionNed& from);
  PositionNed(PositionNed&& from) noexcept
    : PositionNed() {
    *this = ::std::move(from);
  }

  inline PositionNed& operator=(const PositionNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionNed& operator=(PositionNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionNed* internal_default_instance() {
    return reinterpret_cast<const PositionNed*>(
               &_PositionNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PositionNed& a, PositionNed& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PositionNed";
  }
  protected:
  explicit PositionNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMFieldNumber = 1,
    kEastMFieldNumber = 2,
    kDownMFieldNumber = 3,
  };
  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_north_m();
  float north_m() const;
  void set_north_m(float value);
  private:
  float _internal_north_m() const;
  void _internal_set_north_m(float value);
  public:

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_east_m();
  float east_m() const;
  void set_east_m(float value);
  private:
  float _internal_east_m() const;
  void _internal_set_east_m(float value);
  public:

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_m();
  float down_m() const;
  void set_down_m(float value);
  private:
  float _internal_down_m() const;
  void _internal_set_down_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PositionNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_;
  float east_m_;
  float down_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class VelocityNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.VelocityNed) */ {
 public:
  inline VelocityNed() : VelocityNed(nullptr) {}
  ~VelocityNed() override;
  explicit PROTOBUF_CONSTEXPR VelocityNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelocityNed(const VelocityNed& from);
  VelocityNed(VelocityNed&& from) noexcept
    : VelocityNed() {
    *this = ::std::move(from);
  }

  inline VelocityNed& operator=(const VelocityNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityNed& operator=(VelocityNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityNed* internal_default_instance() {
    return reinterpret_cast<const VelocityNed*>(
               &_VelocityNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(VelocityNed& a, VelocityNed& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelocityNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelocityNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelocityNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.VelocityNed";
  }
  protected:
  explicit VelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMSFieldNumber = 1,
    kEastMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
  };
  // float north_m_s = 1;
  void clear_north_m_s();
  float north_m_s() const;
  void set_north_m_s(float value);
  private:
  float _internal_north_m_s() const;
  void _internal_set_north_m_s(float value);
  public:

  // float east_m_s = 2;
  void clear_east_m_s();
  float east_m_s() const;
  void set_east_m_s(float value);
  private:
  float _internal_east_m_s() const;
  void _internal_set_east_m_s(float value);
  public:

  // float down_m_s = 3;
  void clear_down_m_s();
  float down_m_s() const;
  void set_down_m_s(float value);
  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.VelocityNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_s_;
  float east_m_s_;
  float down_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PositionVelocityNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PositionVelocityNed) */ {
 public:
  inline PositionVelocityNed() : PositionVelocityNed(nullptr) {}
  ~PositionVelocityNed() override;
  explicit PROTOBUF_CONSTEXPR PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionVelocityNed(const PositionVelocityNed& from);
  PositionVelocityNed(PositionVelocityNed&& from) noexcept
    : PositionVelocityNed() {
    *this = ::std::move(from);
  }

  inline PositionVelocityNed& operator=(const PositionVelocityNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionVelocityNed& operator=(PositionVelocityNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionVelocityNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionVelocityNed* internal_default_instance() {
    return reinterpret_cast<const PositionVelocityNed*>(
               &_PositionVelocityNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PositionVelocityNed& a, PositionVelocityNed& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionVelocityNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionVelocityNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionVelocityNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionVelocityNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionVelocityNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionVelocityNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionVelocityNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.PositionVelocityNed";
  }
  protected:
  explicit PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kVelocityFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::telemetry_server::PositionNed& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::PositionNed* release_position();
  ::mavsdk::rpc::telemetry_server::PositionNed* mutable_position();
  void set_allocated_position(::mavsdk::rpc::telemetry_server::PositionNed* position);
  private:
  const ::mavsdk::rpc::telemetry_server::PositionNed& _internal_position() const;
  ::mavsdk::rpc::telemetry_server::PositionNed* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::mavsdk::rpc::telemetry_server::PositionNed* position);
  ::mavsdk::rpc::telemetry_server::PositionNed* unsafe_arena_release_position();

  // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::mavsdk::rpc::telemetry_server::VelocityNed& velocity() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::VelocityNed* release_velocity();
  ::mavsdk::rpc::telemetry_server::VelocityNed* mutable_velocity();
  void set_allocated_velocity(::mavsdk::rpc::telemetry_server::VelocityNed* velocity);
  private:
  const ::mavsdk::rpc::telemetry_server::VelocityNed& _internal_velocity() const;
  ::mavsdk::rpc::telemetry_server::VelocityNed* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::mavsdk::rpc::telemetry_server::VelocityNed* velocity);
  ::mavsdk::rpc::telemetry_server::VelocityNed* unsafe_arena_release_velocity();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PositionVelocityNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::PositionNed* position_;
  ::mavsdk::rpc::telemetry_server::VelocityNed* velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GroundTruth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.GroundTruth) */ {
 public:
  inline GroundTruth() : GroundTruth(nullptr) {}
  ~GroundTruth() override;
  explicit PROTOBUF_CONSTEXPR GroundTruth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroundTruth(const GroundTruth& from);
  GroundTruth(GroundTruth&& from) noexcept
    : GroundTruth() {
    *this = ::std::move(from);
  }

  inline GroundTruth& operator=(const GroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruth& operator=(GroundTruth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroundTruth& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundTruth* internal_default_instance() {
    return reinterpret_cast<const GroundTruth*>(
               &_GroundTruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GroundTruth& a, GroundTruth& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundTruth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundTruth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroundTruth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroundTruth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroundTruth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroundTruth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.GroundTruth";
  }
  protected:
  explicit GroundTruth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.GroundTruth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FixedwingMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.FixedwingMetrics) */ {
 public:
  inline FixedwingMetrics() : FixedwingMetrics(nullptr) {}
  ~FixedwingMetrics() override;
  explicit PROTOBUF_CONSTEXPR FixedwingMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedwingMetrics(const FixedwingMetrics& from);
  FixedwingMetrics(FixedwingMetrics&& from) noexcept
    : FixedwingMetrics() {
    *this = ::std::move(from);
  }

  inline FixedwingMetrics& operator=(const FixedwingMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedwingMetrics& operator=(FixedwingMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixedwingMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedwingMetrics* internal_default_instance() {
    return reinterpret_cast<const FixedwingMetrics*>(
               &_FixedwingMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(FixedwingMetrics& a, FixedwingMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedwingMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedwingMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixedwingMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FixedwingMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FixedwingMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FixedwingMetrics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedwingMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.FixedwingMetrics";
  }
  protected:
  explicit FixedwingMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAirspeedMSFieldNumber = 1,
    kThrottlePercentageFieldNumber = 2,
    kClimbRateMSFieldNumber = 3,
  };
  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_airspeed_m_s();
  float airspeed_m_s() const;
  void set_airspeed_m_s(float value);
  private:
  float _internal_airspeed_m_s() const;
  void _internal_set_airspeed_m_s(float value);
  public:

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_throttle_percentage();
  float throttle_percentage() const;
  void set_throttle_percentage(float value);
  private:
  float _internal_throttle_percentage() const;
  void _internal_set_throttle_percentage(float value);
  public:

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_climb_rate_m_s();
  float climb_rate_m_s() const;
  void set_climb_rate_m_s(float value);
  private:
  float _internal_climb_rate_m_s() const;
  void _internal_set_climb_rate_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.FixedwingMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float airspeed_m_s_;
  float throttle_percentage_;
  float climb_rate_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AccelerationFrd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.AccelerationFrd) */ {
 public:
  inline AccelerationFrd() : AccelerationFrd(nullptr) {}
  ~AccelerationFrd() override;
  explicit PROTOBUF_CONSTEXPR AccelerationFrd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccelerationFrd(const AccelerationFrd& from);
  AccelerationFrd(AccelerationFrd&& from) noexcept
    : AccelerationFrd() {
    *this = ::std::move(from);
  }

  inline AccelerationFrd& operator=(const AccelerationFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelerationFrd& operator=(AccelerationFrd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccelerationFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccelerationFrd* internal_default_instance() {
    return reinterpret_cast<const AccelerationFrd*>(
               &_AccelerationFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(AccelerationFrd& a, AccelerationFrd& b) {
    a.Swap(&b);
  }
  inline void Swap(AccelerationFrd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccelerationFrd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccelerationFrd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccelerationFrd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccelerationFrd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccelerationFrd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelerationFrd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.AccelerationFrd";
  }
  protected:
  explicit AccelerationFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardMS2FieldNumber = 1,
    kRightMS2FieldNumber = 2,
    kDownMS2FieldNumber = 3,
  };
  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_m_s2();
  float forward_m_s2() const;
  void set_forward_m_s2(float value);
  private:
  float _internal_forward_m_s2() const;
  void _internal_set_forward_m_s2(float value);
  public:

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_m_s2();
  float right_m_s2() const;
  void set_right_m_s2(float value);
  private:
  float _internal_right_m_s2() const;
  void _internal_set_right_m_s2(float value);
  public:

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_m_s2();
  float down_m_s2() const;
  void set_down_m_s2(float value);
  private:
  float _internal_down_m_s2() const;
  void _internal_set_down_m_s2(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.AccelerationFrd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float forward_m_s2_;
  float right_m_s2_;
  float down_m_s2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityFrd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.AngularVelocityFrd) */ {
 public:
  inline AngularVelocityFrd() : AngularVelocityFrd(nullptr) {}
  ~AngularVelocityFrd() override;
  explicit PROTOBUF_CONSTEXPR AngularVelocityFrd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AngularVelocityFrd(const AngularVelocityFrd& from);
  AngularVelocityFrd(AngularVelocityFrd&& from) noexcept
    : AngularVelocityFrd() {
    *this = ::std::move(from);
  }

  inline AngularVelocityFrd& operator=(const AngularVelocityFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityFrd& operator=(AngularVelocityFrd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityFrd* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityFrd*>(
               &_AngularVelocityFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(AngularVelocityFrd& a, AngularVelocityFrd& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocityFrd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityFrd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityFrd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngularVelocityFrd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AngularVelocityFrd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AngularVelocityFrd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularVelocityFrd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.AngularVelocityFrd";
  }
  protected:
  explicit AngularVelocityFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardRadSFieldNumber = 1,
    kRightRadSFieldNumber = 2,
    kDownRadSFieldNumber = 3,
  };
  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_rad_s();
  float forward_rad_s() const;
  void set_forward_rad_s(float value);
  private:
  float _internal_forward_rad_s() const;
  void _internal_set_forward_rad_s(float value);
  public:

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_rad_s();
  float right_rad_s() const;
  void set_right_rad_s(float value);
  private:
  float _internal_right_rad_s() const;
  void _internal_set_right_rad_s(float value);
  public:

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_rad_s();
  float down_rad_s() const;
  void set_down_rad_s(float value);
  private:
  float _internal_down_rad_s() const;
  void _internal_set_down_rad_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float forward_rad_s_;
  float right_rad_s_;
  float down_rad_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MagneticFieldFrd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.MagneticFieldFrd) */ {
 public:
  inline MagneticFieldFrd() : MagneticFieldFrd(nullptr) {}
  ~MagneticFieldFrd() override;
  explicit PROTOBUF_CONSTEXPR MagneticFieldFrd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MagneticFieldFrd(const MagneticFieldFrd& from);
  MagneticFieldFrd(MagneticFieldFrd&& from) noexcept
    : MagneticFieldFrd() {
    *this = ::std::move(from);
  }

  inline MagneticFieldFrd& operator=(const MagneticFieldFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagneticFieldFrd& operator=(MagneticFieldFrd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MagneticFieldFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const MagneticFieldFrd* internal_default_instance() {
    return reinterpret_cast<const MagneticFieldFrd*>(
               &_MagneticFieldFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(MagneticFieldFrd& a, MagneticFieldFrd& b) {
    a.Swap(&b);
  }
  inline void Swap(MagneticFieldFrd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagneticFieldFrd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MagneticFieldFrd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MagneticFieldFrd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MagneticFieldFrd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MagneticFieldFrd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MagneticFieldFrd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.MagneticFieldFrd";
  }
  protected:
  explicit MagneticFieldFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardGaussFieldNumber = 1,
    kRightGaussFieldNumber = 2,
    kDownGaussFieldNumber = 3,
  };
  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_gauss();
  float forward_gauss() const;
  void set_forward_gauss(float value);
  private:
  float _internal_forward_gauss() const;
  void _internal_set_forward_gauss(float value);
  public:

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_gauss();
  float right_gauss() const;
  void set_right_gauss(float value);
  private:
  float _internal_right_gauss() const;
  void _internal_set_right_gauss(float value);
  public:

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_gauss();
  float down_gauss() const;
  void set_down_gauss(float value);
  private:
  float _internal_down_gauss() const;
  void _internal_set_down_gauss(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float forward_gauss_;
  float right_gauss_;
  float down_gauss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Imu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Imu) */ {
 public:
  inline Imu() : Imu(nullptr) {}
  ~Imu() override;
  explicit PROTOBUF_CONSTEXPR Imu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Imu(const Imu& from);
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Imu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }
  inline void Swap(Imu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Imu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Imu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Imu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Imu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Imu& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Imu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.Imu";
  }
  protected:
  explicit Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFrdFieldNumber = 1,
    kAngularVelocityFrdFieldNumber = 2,
    kMagneticFieldFrdFieldNumber = 3,
    kTimestampUsFieldNumber = 5,
    kTemperatureDegcFieldNumber = 4,
  };
  // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
  bool has_acceleration_frd() const;
  private:
  bool _internal_has_acceleration_frd() const;
  public:
  void clear_acceleration_frd();
  const ::mavsdk::rpc::telemetry_server::AccelerationFrd& acceleration_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::AccelerationFrd* release_acceleration_frd();
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* mutable_acceleration_frd();
  void set_allocated_acceleration_frd(::mavsdk::rpc::telemetry_server::AccelerationFrd* acceleration_frd);
  private:
  const ::mavsdk::rpc::telemetry_server::AccelerationFrd& _internal_acceleration_frd() const;
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* _internal_mutable_acceleration_frd();
  public:
  void unsafe_arena_set_allocated_acceleration_frd(
      ::mavsdk::rpc::telemetry_server::AccelerationFrd* acceleration_frd);
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* unsafe_arena_release_acceleration_frd();

  // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
  bool has_angular_velocity_frd() const;
  private:
  bool _internal_has_angular_velocity_frd() const;
  public:
  void clear_angular_velocity_frd();
  const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& angular_velocity_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* release_angular_velocity_frd();
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* mutable_angular_velocity_frd();
  void set_allocated_angular_velocity_frd(::mavsdk::rpc::telemetry_server::AngularVelocityFrd* angular_velocity_frd);
  private:
  const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& _internal_angular_velocity_frd() const;
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* _internal_mutable_angular_velocity_frd();
  public:
  void unsafe_arena_set_allocated_angular_velocity_frd(
      ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* angular_velocity_frd);
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* unsafe_arena_release_angular_velocity_frd();

  // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
  bool has_magnetic_field_frd() const;
  private:
  bool _internal_has_magnetic_field_frd() const;
  public:
  void clear_magnetic_field_frd();
  const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& magnetic_field_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* release_magnetic_field_frd();
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* mutable_magnetic_field_frd();
  void set_allocated_magnetic_field_frd(::mavsdk::rpc::telemetry_server::MagneticFieldFrd* magnetic_field_frd);
  private:
  const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& _internal_magnetic_field_frd() const;
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* _internal_mutable_magnetic_field_frd();
  public:
  void unsafe_arena_set_allocated_magnetic_field_frd(
      ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* magnetic_field_frd);
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* unsafe_arena_release_magnetic_field_frd();

  // uint64 timestamp_us = 5;
  void clear_timestamp_us();
  uint64_t timestamp_us() const;
  void set_timestamp_us(uint64_t value);
  private:
  uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(uint64_t value);
  public:

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_temperature_degc();
  float temperature_degc() const;
  void set_temperature_degc(float value);
  private:
  float _internal_temperature_degc() const;
  void _internal_set_temperature_degc(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Imu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* acceleration_frd_;
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* angular_velocity_frd_;
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* magnetic_field_frd_;
  uint64_t timestamp_us_;
  float temperature_degc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TelemetryServerResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.TelemetryServerResult) */ {
 public:
  inline TelemetryServerResult() : TelemetryServerResult(nullptr) {}
  ~TelemetryServerResult() override;
  explicit PROTOBUF_CONSTEXPR TelemetryServerResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryServerResult(const TelemetryServerResult& from);
  TelemetryServerResult(TelemetryServerResult&& from) noexcept
    : TelemetryServerResult() {
    *this = ::std::move(from);
  }

  inline TelemetryServerResult& operator=(const TelemetryServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryServerResult& operator=(TelemetryServerResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryServerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryServerResult* internal_default_instance() {
    return reinterpret_cast<const TelemetryServerResult*>(
               &_TelemetryServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TelemetryServerResult& a, TelemetryServerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryServerResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryServerResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryServerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryServerResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryServerResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryServerResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryServerResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry_server.TelemetryServerResult";
  }
  protected:
  explicit TelemetryServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TelemetryServerResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    TelemetryServerResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    TelemetryServerResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    TelemetryServerResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    TelemetryServerResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    TelemetryServerResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    TelemetryServerResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT =
    TelemetryServerResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_UNSUPPORTED =
    TelemetryServerResult_Result_RESULT_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return TelemetryServerResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    TelemetryServerResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    TelemetryServerResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    TelemetryServerResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return TelemetryServerResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return TelemetryServerResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return TelemetryServerResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result result() const;
  void set_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result value);
  private:
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.TelemetryServerResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublishPositionRequest

// .mavsdk.rpc.telemetry_server.Position position = 1;
inline bool PublishPositionRequest::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PublishPositionRequest::has_position() const {
  return _internal_has_position();
}
inline void PublishPositionRequest::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Position& PublishPositionRequest::_internal_position() const {
  const ::mavsdk::rpc::telemetry_server::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Position&>(
      ::mavsdk::rpc::telemetry_server::_Position_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Position& PublishPositionRequest::position() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
  return _internal_position();
}
inline void PublishPositionRequest::unsafe_arena_set_allocated_position(
    ::mavsdk::rpc::telemetry_server::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishPositionRequest::release_position() {
  
  ::mavsdk::rpc::telemetry_server::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishPositionRequest::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
  
  ::mavsdk::rpc::telemetry_server::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishPositionRequest::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishPositionRequest::mutable_position() {
  ::mavsdk::rpc::telemetry_server::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
  return _msg;
}
inline void PublishPositionRequest::set_allocated_position(::mavsdk::rpc::telemetry_server::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
}

// .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
inline bool PublishPositionRequest::_internal_has_velocity_ned() const {
  return this != internal_default_instance() && velocity_ned_ != nullptr;
}
inline bool PublishPositionRequest::has_velocity_ned() const {
  return _internal_has_velocity_ned();
}
inline void PublishPositionRequest::clear_velocity_ned() {
  if (GetArenaForAllocation() == nullptr && velocity_ned_ != nullptr) {
    delete velocity_ned_;
  }
  velocity_ned_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::VelocityNed& PublishPositionRequest::_internal_velocity_ned() const {
  const ::mavsdk::rpc::telemetry_server::VelocityNed* p = velocity_ned_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::VelocityNed&>(
      ::mavsdk::rpc::telemetry_server::_VelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::VelocityNed& PublishPositionRequest::velocity_ned() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
  return _internal_velocity_ned();
}
inline void PublishPositionRequest::unsafe_arena_set_allocated_velocity_ned(
    ::mavsdk::rpc::telemetry_server::VelocityNed* velocity_ned) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_ned_);
  }
  velocity_ned_ = velocity_ned;
  if (velocity_ned) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PublishPositionRequest::release_velocity_ned() {
  
  ::mavsdk::rpc::telemetry_server::VelocityNed* temp = velocity_ned_;
  velocity_ned_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PublishPositionRequest::unsafe_arena_release_velocity_ned() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
  
  ::mavsdk::rpc::telemetry_server::VelocityNed* temp = velocity_ned_;
  velocity_ned_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PublishPositionRequest::_internal_mutable_velocity_ned() {
  
  if (velocity_ned_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::VelocityNed>(GetArenaForAllocation());
    velocity_ned_ = p;
  }
  return velocity_ned_;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PublishPositionRequest::mutable_velocity_ned() {
  ::mavsdk::rpc::telemetry_server::VelocityNed* _msg = _internal_mutable_velocity_ned();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
  return _msg;
}
inline void PublishPositionRequest::set_allocated_velocity_ned(::mavsdk::rpc::telemetry_server::VelocityNed* velocity_ned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_ned_;
  }
  if (velocity_ned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_ned);
    if (message_arena != submessage_arena) {
      velocity_ned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_ned, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ned_ = velocity_ned;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
}

// .mavsdk.rpc.telemetry_server.Heading heading = 3;
inline bool PublishPositionRequest::_internal_has_heading() const {
  return this != internal_default_instance() && heading_ != nullptr;
}
inline bool PublishPositionRequest::has_heading() const {
  return _internal_has_heading();
}
inline void PublishPositionRequest::clear_heading() {
  if (GetArenaForAllocation() == nullptr && heading_ != nullptr) {
    delete heading_;
  }
  heading_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Heading& PublishPositionRequest::_internal_heading() const {
  const ::mavsdk::rpc::telemetry_server::Heading* p = heading_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Heading&>(
      ::mavsdk::rpc::telemetry_server::_Heading_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Heading& PublishPositionRequest::heading() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
  return _internal_heading();
}
inline void PublishPositionRequest::unsafe_arena_set_allocated_heading(
    ::mavsdk::rpc::telemetry_server::Heading* heading) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_);
  }
  heading_ = heading;
  if (heading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
}
inline ::mavsdk::rpc::telemetry_server::Heading* PublishPositionRequest::release_heading() {
  
  ::mavsdk::rpc::telemetry_server::Heading* temp = heading_;
  heading_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Heading* PublishPositionRequest::unsafe_arena_release_heading() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
  
  ::mavsdk::rpc::telemetry_server::Heading* temp = heading_;
  heading_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Heading* PublishPositionRequest::_internal_mutable_heading() {
  
  if (heading_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Heading>(GetArenaForAllocation());
    heading_ = p;
  }
  return heading_;
}
inline ::mavsdk::rpc::telemetry_server::Heading* PublishPositionRequest::mutable_heading() {
  ::mavsdk::rpc::telemetry_server::Heading* _msg = _internal_mutable_heading();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
  return _msg;
}
inline void PublishPositionRequest::set_allocated_heading(::mavsdk::rpc::telemetry_server::Heading* heading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete heading_;
  }
  if (heading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heading);
    if (message_arena != submessage_arena) {
      heading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heading, submessage_arena);
    }
    
  } else {
    
  }
  heading_ = heading;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
}

// -------------------------------------------------------------------

// PublishHomeRequest

// .mavsdk.rpc.telemetry_server.Position home = 1;
inline bool PublishHomeRequest::_internal_has_home() const {
  return this != internal_default_instance() && home_ != nullptr;
}
inline bool PublishHomeRequest::has_home() const {
  return _internal_has_home();
}
inline void PublishHomeRequest::clear_home() {
  if (GetArenaForAllocation() == nullptr && home_ != nullptr) {
    delete home_;
  }
  home_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Position& PublishHomeRequest::_internal_home() const {
  const ::mavsdk::rpc::telemetry_server::Position* p = home_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Position&>(
      ::mavsdk::rpc::telemetry_server::_Position_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Position& PublishHomeRequest::home() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
  return _internal_home();
}
inline void PublishHomeRequest::unsafe_arena_set_allocated_home(
    ::mavsdk::rpc::telemetry_server::Position* home) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_);
  }
  home_ = home;
  if (home) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishHomeRequest::release_home() {
  
  ::mavsdk::rpc::telemetry_server::Position* temp = home_;
  home_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishHomeRequest::unsafe_arena_release_home() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
  
  ::mavsdk::rpc::telemetry_server::Position* temp = home_;
  home_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishHomeRequest::_internal_mutable_home() {
  
  if (home_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Position>(GetArenaForAllocation());
    home_ = p;
  }
  return home_;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishHomeRequest::mutable_home() {
  ::mavsdk::rpc::telemetry_server::Position* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
  return _msg;
}
inline void PublishHomeRequest::set_allocated_home(::mavsdk::rpc::telemetry_server::Position* home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete home_;
  }
  if (home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(home);
    if (message_arena != submessage_arena) {
      home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home, submessage_arena);
    }
    
  } else {
    
  }
  home_ = home;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
}

// -------------------------------------------------------------------

// PublishSysStatusRequest

// .mavsdk.rpc.telemetry_server.Battery battery = 1;
inline bool PublishSysStatusRequest::_internal_has_battery() const {
  return this != internal_default_instance() && battery_ != nullptr;
}
inline bool PublishSysStatusRequest::has_battery() const {
  return _internal_has_battery();
}
inline void PublishSysStatusRequest::clear_battery() {
  if (GetArenaForAllocation() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Battery& PublishSysStatusRequest::_internal_battery() const {
  const ::mavsdk::rpc::telemetry_server::Battery* p = battery_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Battery&>(
      ::mavsdk::rpc::telemetry_server::_Battery_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Battery& PublishSysStatusRequest::battery() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
  return _internal_battery();
}
inline void PublishSysStatusRequest::unsafe_arena_set_allocated_battery(
    ::mavsdk::rpc::telemetry_server::Battery* battery) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battery_);
  }
  battery_ = battery;
  if (battery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishSysStatusRequest::release_battery() {
  
  ::mavsdk::rpc::telemetry_server::Battery* temp = battery_;
  battery_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishSysStatusRequest::unsafe_arena_release_battery() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
  
  ::mavsdk::rpc::telemetry_server::Battery* temp = battery_;
  battery_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishSysStatusRequest::_internal_mutable_battery() {
  
  if (battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Battery>(GetArenaForAllocation());
    battery_ = p;
  }
  return battery_;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishSysStatusRequest::mutable_battery() {
  ::mavsdk::rpc::telemetry_server::Battery* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
  return _msg;
}
inline void PublishSysStatusRequest::set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete battery_;
  }
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(battery);
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    
  } else {
    
  }
  battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
}

// bool rc_receiver_status = 2;
inline void PublishSysStatusRequest::clear_rc_receiver_status() {
  rc_receiver_status_ = false;
}
inline bool PublishSysStatusRequest::_internal_rc_receiver_status() const {
  return rc_receiver_status_;
}
inline bool PublishSysStatusRequest::rc_receiver_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.rc_receiver_status)
  return _internal_rc_receiver_status();
}
inline void PublishSysStatusRequest::_internal_set_rc_receiver_status(bool value) {
  
  rc_receiver_status_ = value;
}
inline void PublishSysStatusRequest::set_rc_receiver_status(bool value) {
  _internal_set_rc_receiver_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.rc_receiver_status)
}

// bool gyro_status = 3;
inline void PublishSysStatusRequest::clear_gyro_status() {
  gyro_status_ = false;
}
inline bool PublishSysStatusRequest::_internal_gyro_status() const {
  return gyro_status_;
}
inline bool PublishSysStatusRequest::gyro_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.gyro_status)
  return _internal_gyro_status();
}
inline void PublishSysStatusRequest::_internal_set_gyro_status(bool value) {
  
  gyro_status_ = value;
}
inline void PublishSysStatusRequest::set_gyro_status(bool value) {
  _internal_set_gyro_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.gyro_status)
}

// bool accel_status = 4;
inline void PublishSysStatusRequest::clear_accel_status() {
  accel_status_ = false;
}
inline bool PublishSysStatusRequest::_internal_accel_status() const {
  return accel_status_;
}
inline bool PublishSysStatusRequest::accel_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.accel_status)
  return _internal_accel_status();
}
inline void PublishSysStatusRequest::_internal_set_accel_status(bool value) {
  
  accel_status_ = value;
}
inline void PublishSysStatusRequest::set_accel_status(bool value) {
  _internal_set_accel_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.accel_status)
}

// bool mag_status = 5;
inline void PublishSysStatusRequest::clear_mag_status() {
  mag_status_ = false;
}
inline bool PublishSysStatusRequest::_internal_mag_status() const {
  return mag_status_;
}
inline bool PublishSysStatusRequest::mag_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.mag_status)
  return _internal_mag_status();
}
inline void PublishSysStatusRequest::_internal_set_mag_status(bool value) {
  
  mag_status_ = value;
}
inline void PublishSysStatusRequest::set_mag_status(bool value) {
  _internal_set_mag_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.mag_status)
}

// bool gps_status = 6;
inline void PublishSysStatusRequest::clear_gps_status() {
  gps_status_ = false;
}
inline bool PublishSysStatusRequest::_internal_gps_status() const {
  return gps_status_;
}
inline bool PublishSysStatusRequest::gps_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.gps_status)
  return _internal_gps_status();
}
inline void PublishSysStatusRequest::_internal_set_gps_status(bool value) {
  
  gps_status_ = value;
}
inline void PublishSysStatusRequest::set_gps_status(bool value) {
  _internal_set_gps_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.gps_status)
}

// -------------------------------------------------------------------

// PublishExtendedSysStateRequest

// .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
inline void PublishExtendedSysStateRequest::clear_vtol_state() {
  vtol_state_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::VtolState PublishExtendedSysStateRequest::_internal_vtol_state() const {
  return static_cast< ::mavsdk::rpc::telemetry_server::VtolState >(vtol_state_);
}
inline ::mavsdk::rpc::telemetry_server::VtolState PublishExtendedSysStateRequest::vtol_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.vtol_state)
  return _internal_vtol_state();
}
inline void PublishExtendedSysStateRequest::_internal_set_vtol_state(::mavsdk::rpc::telemetry_server::VtolState value) {
  
  vtol_state_ = value;
}
inline void PublishExtendedSysStateRequest::set_vtol_state(::mavsdk::rpc::telemetry_server::VtolState value) {
  _internal_set_vtol_state(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.vtol_state)
}

// .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
inline void PublishExtendedSysStateRequest::clear_landed_state() {
  landed_state_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::LandedState PublishExtendedSysStateRequest::_internal_landed_state() const {
  return static_cast< ::mavsdk::rpc::telemetry_server::LandedState >(landed_state_);
}
inline ::mavsdk::rpc::telemetry_server::LandedState PublishExtendedSysStateRequest::landed_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.landed_state)
  return _internal_landed_state();
}
inline void PublishExtendedSysStateRequest::_internal_set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value) {
  
  landed_state_ = value;
}
inline void PublishExtendedSysStateRequest::set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value) {
  _internal_set_landed_state(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.landed_state)
}

// -------------------------------------------------------------------

// PublishInAirRequest

// bool is_in_air = 1;
inline void PublishInAirRequest::clear_is_in_air() {
  is_in_air_ = false;
}
inline bool PublishInAirRequest::_internal_is_in_air() const {
  return is_in_air_;
}
inline bool PublishInAirRequest::is_in_air() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishInAirRequest.is_in_air)
  return _internal_is_in_air();
}
inline void PublishInAirRequest::_internal_set_is_in_air(bool value) {
  
  is_in_air_ = value;
}
inline void PublishInAirRequest::set_is_in_air(bool value) {
  _internal_set_is_in_air(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishInAirRequest.is_in_air)
}

// -------------------------------------------------------------------

// PublishLandedStateRequest

// .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
inline void PublishLandedStateRequest::clear_landed_state() {
  landed_state_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::LandedState PublishLandedStateRequest::_internal_landed_state() const {
  return static_cast< ::mavsdk::rpc::telemetry_server::LandedState >(landed_state_);
}
inline ::mavsdk::rpc::telemetry_server::LandedState PublishLandedStateRequest::landed_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishLandedStateRequest.landed_state)
  return _internal_landed_state();
}
inline void PublishLandedStateRequest::_internal_set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value) {
  
  landed_state_ = value;
}
inline void PublishLandedStateRequest::set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value) {
  _internal_set_landed_state(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishLandedStateRequest.landed_state)
}

// -------------------------------------------------------------------

// PublishRawGpsRequest

// .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
inline bool PublishRawGpsRequest::_internal_has_raw_gps() const {
  return this != internal_default_instance() && raw_gps_ != nullptr;
}
inline bool PublishRawGpsRequest::has_raw_gps() const {
  return _internal_has_raw_gps();
}
inline void PublishRawGpsRequest::clear_raw_gps() {
  if (GetArenaForAllocation() == nullptr && raw_gps_ != nullptr) {
    delete raw_gps_;
  }
  raw_gps_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::RawGps& PublishRawGpsRequest::_internal_raw_gps() const {
  const ::mavsdk::rpc::telemetry_server::RawGps* p = raw_gps_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::RawGps&>(
      ::mavsdk::rpc::telemetry_server::_RawGps_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::RawGps& PublishRawGpsRequest::raw_gps() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
  return _internal_raw_gps();
}
inline void PublishRawGpsRequest::unsafe_arena_set_allocated_raw_gps(
    ::mavsdk::rpc::telemetry_server::RawGps* raw_gps) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_gps_);
  }
  raw_gps_ = raw_gps;
  if (raw_gps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
}
inline ::mavsdk::rpc::telemetry_server::RawGps* PublishRawGpsRequest::release_raw_gps() {
  
  ::mavsdk::rpc::telemetry_server::RawGps* temp = raw_gps_;
  raw_gps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::RawGps* PublishRawGpsRequest::unsafe_arena_release_raw_gps() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
  
  ::mavsdk::rpc::telemetry_server::RawGps* temp = raw_gps_;
  raw_gps_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::RawGps* PublishRawGpsRequest::_internal_mutable_raw_gps() {
  
  if (raw_gps_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::RawGps>(GetArenaForAllocation());
    raw_gps_ = p;
  }
  return raw_gps_;
}
inline ::mavsdk::rpc::telemetry_server::RawGps* PublishRawGpsRequest::mutable_raw_gps() {
  ::mavsdk::rpc::telemetry_server::RawGps* _msg = _internal_mutable_raw_gps();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
  return _msg;
}
inline void PublishRawGpsRequest::set_allocated_raw_gps(::mavsdk::rpc::telemetry_server::RawGps* raw_gps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete raw_gps_;
  }
  if (raw_gps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_gps);
    if (message_arena != submessage_arena) {
      raw_gps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_gps, submessage_arena);
    }
    
  } else {
    
  }
  raw_gps_ = raw_gps;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
}

// .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
inline bool PublishRawGpsRequest::_internal_has_gps_info() const {
  return this != internal_default_instance() && gps_info_ != nullptr;
}
inline bool PublishRawGpsRequest::has_gps_info() const {
  return _internal_has_gps_info();
}
inline void PublishRawGpsRequest::clear_gps_info() {
  if (GetArenaForAllocation() == nullptr && gps_info_ != nullptr) {
    delete gps_info_;
  }
  gps_info_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::GpsInfo& PublishRawGpsRequest::_internal_gps_info() const {
  const ::mavsdk::rpc::telemetry_server::GpsInfo* p = gps_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::GpsInfo&>(
      ::mavsdk::rpc::telemetry_server::_GpsInfo_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::GpsInfo& PublishRawGpsRequest::gps_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
  return _internal_gps_info();
}
inline void PublishRawGpsRequest::unsafe_arena_set_allocated_gps_info(
    ::mavsdk::rpc::telemetry_server::GpsInfo* gps_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_info_);
  }
  gps_info_ = gps_info;
  if (gps_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
}
inline ::mavsdk::rpc::telemetry_server::GpsInfo* PublishRawGpsRequest::release_gps_info() {
  
  ::mavsdk::rpc::telemetry_server::GpsInfo* temp = gps_info_;
  gps_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::GpsInfo* PublishRawGpsRequest::unsafe_arena_release_gps_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
  
  ::mavsdk::rpc::telemetry_server::GpsInfo* temp = gps_info_;
  gps_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::GpsInfo* PublishRawGpsRequest::_internal_mutable_gps_info() {
  
  if (gps_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::GpsInfo>(GetArenaForAllocation());
    gps_info_ = p;
  }
  return gps_info_;
}
inline ::mavsdk::rpc::telemetry_server::GpsInfo* PublishRawGpsRequest::mutable_gps_info() {
  ::mavsdk::rpc::telemetry_server::GpsInfo* _msg = _internal_mutable_gps_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
  return _msg;
}
inline void PublishRawGpsRequest::set_allocated_gps_info(::mavsdk::rpc::telemetry_server::GpsInfo* gps_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gps_info_;
  }
  if (gps_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gps_info);
    if (message_arena != submessage_arena) {
      gps_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_info, submessage_arena);
    }
    
  } else {
    
  }
  gps_info_ = gps_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
}

// -------------------------------------------------------------------

// PublishBatteryRequest

// .mavsdk.rpc.telemetry_server.Battery battery = 1;
inline bool PublishBatteryRequest::_internal_has_battery() const {
  return this != internal_default_instance() && battery_ != nullptr;
}
inline bool PublishBatteryRequest::has_battery() const {
  return _internal_has_battery();
}
inline void PublishBatteryRequest::clear_battery() {
  if (GetArenaForAllocation() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Battery& PublishBatteryRequest::_internal_battery() const {
  const ::mavsdk::rpc::telemetry_server::Battery* p = battery_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Battery&>(
      ::mavsdk::rpc::telemetry_server::_Battery_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Battery& PublishBatteryRequest::battery() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
  return _internal_battery();
}
inline void PublishBatteryRequest::unsafe_arena_set_allocated_battery(
    ::mavsdk::rpc::telemetry_server::Battery* battery) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battery_);
  }
  battery_ = battery;
  if (battery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishBatteryRequest::release_battery() {
  
  ::mavsdk::rpc::telemetry_server::Battery* temp = battery_;
  battery_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishBatteryRequest::unsafe_arena_release_battery() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
  
  ::mavsdk::rpc::telemetry_server::Battery* temp = battery_;
  battery_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishBatteryRequest::_internal_mutable_battery() {
  
  if (battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Battery>(GetArenaForAllocation());
    battery_ = p;
  }
  return battery_;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishBatteryRequest::mutable_battery() {
  ::mavsdk::rpc::telemetry_server::Battery* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
  return _msg;
}
inline void PublishBatteryRequest::set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete battery_;
  }
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(battery);
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    
  } else {
    
  }
  battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
}

// -------------------------------------------------------------------

// PublishRcStatusRequest

// .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
inline bool PublishRcStatusRequest::_internal_has_rc_status() const {
  return this != internal_default_instance() && rc_status_ != nullptr;
}
inline bool PublishRcStatusRequest::has_rc_status() const {
  return _internal_has_rc_status();
}
inline void PublishRcStatusRequest::clear_rc_status() {
  if (GetArenaForAllocation() == nullptr && rc_status_ != nullptr) {
    delete rc_status_;
  }
  rc_status_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::RcStatus& PublishRcStatusRequest::_internal_rc_status() const {
  const ::mavsdk::rpc::telemetry_server::RcStatus* p = rc_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::RcStatus&>(
      ::mavsdk::rpc::telemetry_server::_RcStatus_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::RcStatus& PublishRcStatusRequest::rc_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
  return _internal_rc_status();
}
inline void PublishRcStatusRequest::unsafe_arena_set_allocated_rc_status(
    ::mavsdk::rpc::telemetry_server::RcStatus* rc_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rc_status_);
  }
  rc_status_ = rc_status;
  if (rc_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
}
inline ::mavsdk::rpc::telemetry_server::RcStatus* PublishRcStatusRequest::release_rc_status() {
  
  ::mavsdk::rpc::telemetry_server::RcStatus* temp = rc_status_;
  rc_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::RcStatus* PublishRcStatusRequest::unsafe_arena_release_rc_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
  
  ::mavsdk::rpc::telemetry_server::RcStatus* temp = rc_status_;
  rc_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::RcStatus* PublishRcStatusRequest::_internal_mutable_rc_status() {
  
  if (rc_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::RcStatus>(GetArenaForAllocation());
    rc_status_ = p;
  }
  return rc_status_;
}
inline ::mavsdk::rpc::telemetry_server::RcStatus* PublishRcStatusRequest::mutable_rc_status() {
  ::mavsdk::rpc::telemetry_server::RcStatus* _msg = _internal_mutable_rc_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
  return _msg;
}
inline void PublishRcStatusRequest::set_allocated_rc_status(::mavsdk::rpc::telemetry_server::RcStatus* rc_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rc_status_;
  }
  if (rc_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rc_status);
    if (message_arena != submessage_arena) {
      rc_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rc_status, submessage_arena);
    }
    
  } else {
    
  }
  rc_status_ = rc_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
}

// -------------------------------------------------------------------

// PublishStatusTextRequest

// .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
inline bool PublishStatusTextRequest::_internal_has_status_text() const {
  return this != internal_default_instance() && status_text_ != nullptr;
}
inline bool PublishStatusTextRequest::has_status_text() const {
  return _internal_has_status_text();
}
inline void PublishStatusTextRequest::clear_status_text() {
  if (GetArenaForAllocation() == nullptr && status_text_ != nullptr) {
    delete status_text_;
  }
  status_text_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::StatusText& PublishStatusTextRequest::_internal_status_text() const {
  const ::mavsdk::rpc::telemetry_server::StatusText* p = status_text_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::StatusText&>(
      ::mavsdk::rpc::telemetry_server::_StatusText_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::StatusText& PublishStatusTextRequest::status_text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
  return _internal_status_text();
}
inline void PublishStatusTextRequest::unsafe_arena_set_allocated_status_text(
    ::mavsdk::rpc::telemetry_server::StatusText* status_text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_text_);
  }
  status_text_ = status_text;
  if (status_text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
}
inline ::mavsdk::rpc::telemetry_server::StatusText* PublishStatusTextRequest::release_status_text() {
  
  ::mavsdk::rpc::telemetry_server::StatusText* temp = status_text_;
  status_text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::StatusText* PublishStatusTextRequest::unsafe_arena_release_status_text() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
  
  ::mavsdk::rpc::telemetry_server::StatusText* temp = status_text_;
  status_text_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::StatusText* PublishStatusTextRequest::_internal_mutable_status_text() {
  
  if (status_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::StatusText>(GetArenaForAllocation());
    status_text_ = p;
  }
  return status_text_;
}
inline ::mavsdk::rpc::telemetry_server::StatusText* PublishStatusTextRequest::mutable_status_text() {
  ::mavsdk::rpc::telemetry_server::StatusText* _msg = _internal_mutable_status_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
  return _msg;
}
inline void PublishStatusTextRequest::set_allocated_status_text(::mavsdk::rpc::telemetry_server::StatusText* status_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_text_;
  }
  if (status_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status_text);
    if (message_arena != submessage_arena) {
      status_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_text, submessage_arena);
    }
    
  } else {
    
  }
  status_text_ = status_text;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
}

// -------------------------------------------------------------------

// PublishOdometryRequest

// .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
inline bool PublishOdometryRequest::_internal_has_odometry() const {
  return this != internal_default_instance() && odometry_ != nullptr;
}
inline bool PublishOdometryRequest::has_odometry() const {
  return _internal_has_odometry();
}
inline void PublishOdometryRequest::clear_odometry() {
  if (GetArenaForAllocation() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Odometry& PublishOdometryRequest::_internal_odometry() const {
  const ::mavsdk::rpc::telemetry_server::Odometry* p = odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Odometry&>(
      ::mavsdk::rpc::telemetry_server::_Odometry_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Odometry& PublishOdometryRequest::odometry() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
  return _internal_odometry();
}
inline void PublishOdometryRequest::unsafe_arena_set_allocated_odometry(
    ::mavsdk::rpc::telemetry_server::Odometry* odometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry_);
  }
  odometry_ = odometry;
  if (odometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
}
inline ::mavsdk::rpc::telemetry_server::Odometry* PublishOdometryRequest::release_odometry() {
  
  ::mavsdk::rpc::telemetry_server::Odometry* temp = odometry_;
  odometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Odometry* PublishOdometryRequest::unsafe_arena_release_odometry() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
  
  ::mavsdk::rpc::telemetry_server::Odometry* temp = odometry_;
  odometry_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Odometry* PublishOdometryRequest::_internal_mutable_odometry() {
  
  if (odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Odometry>(GetArenaForAllocation());
    odometry_ = p;
  }
  return odometry_;
}
inline ::mavsdk::rpc::telemetry_server::Odometry* PublishOdometryRequest::mutable_odometry() {
  ::mavsdk::rpc::telemetry_server::Odometry* _msg = _internal_mutable_odometry();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
  return _msg;
}
inline void PublishOdometryRequest::set_allocated_odometry(::mavsdk::rpc::telemetry_server::Odometry* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete odometry_;
  }
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(odometry);
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    
  } else {
    
  }
  odometry_ = odometry;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
}

// -------------------------------------------------------------------

// PublishPositionVelocityNedRequest

// .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
inline bool PublishPositionVelocityNedRequest::_internal_has_position_velocity_ned() const {
  return this != internal_default_instance() && position_velocity_ned_ != nullptr;
}
inline bool PublishPositionVelocityNedRequest::has_position_velocity_ned() const {
  return _internal_has_position_velocity_ned();
}
inline void PublishPositionVelocityNedRequest::clear_position_velocity_ned() {
  if (GetArenaForAllocation() == nullptr && position_velocity_ned_ != nullptr) {
    delete position_velocity_ned_;
  }
  position_velocity_ned_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& PublishPositionVelocityNedRequest::_internal_position_velocity_ned() const {
  const ::mavsdk::rpc::telemetry_server::PositionVelocityNed* p = position_velocity_ned_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::PositionVelocityNed&>(
      ::mavsdk::rpc::telemetry_server::_PositionVelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& PublishPositionVelocityNedRequest::position_velocity_ned() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
  return _internal_position_velocity_ned();
}
inline void PublishPositionVelocityNedRequest::unsafe_arena_set_allocated_position_velocity_ned(
    ::mavsdk::rpc::telemetry_server::PositionVelocityNed* position_velocity_ned) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_velocity_ned_);
  }
  position_velocity_ned_ = position_velocity_ned;
  if (position_velocity_ned) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
}
inline ::mavsdk::rpc::telemetry_server::PositionVelocityNed* PublishPositionVelocityNedRequest::release_position_velocity_ned() {
  
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* temp = position_velocity_ned_;
  position_velocity_ned_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionVelocityNed* PublishPositionVelocityNedRequest::unsafe_arena_release_position_velocity_ned() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
  
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* temp = position_velocity_ned_;
  position_velocity_ned_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionVelocityNed* PublishPositionVelocityNedRequest::_internal_mutable_position_velocity_ned() {
  
  if (position_velocity_ned_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PositionVelocityNed>(GetArenaForAllocation());
    position_velocity_ned_ = p;
  }
  return position_velocity_ned_;
}
inline ::mavsdk::rpc::telemetry_server::PositionVelocityNed* PublishPositionVelocityNedRequest::mutable_position_velocity_ned() {
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* _msg = _internal_mutable_position_velocity_ned();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
  return _msg;
}
inline void PublishPositionVelocityNedRequest::set_allocated_position_velocity_ned(::mavsdk::rpc::telemetry_server::PositionVelocityNed* position_velocity_ned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_velocity_ned_;
  }
  if (position_velocity_ned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_velocity_ned);
    if (message_arena != submessage_arena) {
      position_velocity_ned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_velocity_ned, submessage_arena);
    }
    
  } else {
    
  }
  position_velocity_ned_ = position_velocity_ned;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
}

// -------------------------------------------------------------------

// PublishGroundTruthRequest

// .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
inline bool PublishGroundTruthRequest::_internal_has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != nullptr;
}
inline bool PublishGroundTruthRequest::has_ground_truth() const {
  return _internal_has_ground_truth();
}
inline void PublishGroundTruthRequest::clear_ground_truth() {
  if (GetArenaForAllocation() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::GroundTruth& PublishGroundTruthRequest::_internal_ground_truth() const {
  const ::mavsdk::rpc::telemetry_server::GroundTruth* p = ground_truth_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::GroundTruth&>(
      ::mavsdk::rpc::telemetry_server::_GroundTruth_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::GroundTruth& PublishGroundTruthRequest::ground_truth() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
  return _internal_ground_truth();
}
inline void PublishGroundTruthRequest::unsafe_arena_set_allocated_ground_truth(
    ::mavsdk::rpc::telemetry_server::GroundTruth* ground_truth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_truth_);
  }
  ground_truth_ = ground_truth;
  if (ground_truth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
}
inline ::mavsdk::rpc::telemetry_server::GroundTruth* PublishGroundTruthRequest::release_ground_truth() {
  
  ::mavsdk::rpc::telemetry_server::GroundTruth* temp = ground_truth_;
  ground_truth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::GroundTruth* PublishGroundTruthRequest::unsafe_arena_release_ground_truth() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
  
  ::mavsdk::rpc::telemetry_server::GroundTruth* temp = ground_truth_;
  ground_truth_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::GroundTruth* PublishGroundTruthRequest::_internal_mutable_ground_truth() {
  
  if (ground_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::GroundTruth>(GetArenaForAllocation());
    ground_truth_ = p;
  }
  return ground_truth_;
}
inline ::mavsdk::rpc::telemetry_server::GroundTruth* PublishGroundTruthRequest::mutable_ground_truth() {
  ::mavsdk::rpc::telemetry_server::GroundTruth* _msg = _internal_mutable_ground_truth();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
  return _msg;
}
inline void PublishGroundTruthRequest::set_allocated_ground_truth(::mavsdk::rpc::telemetry_server::GroundTruth* ground_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ground_truth_;
  }
  if (ground_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ground_truth);
    if (message_arena != submessage_arena) {
      ground_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
}

// -------------------------------------------------------------------

// PublishImuRequest

// .mavsdk.rpc.telemetry_server.Imu imu = 1;
inline bool PublishImuRequest::_internal_has_imu() const {
  return this != internal_default_instance() && imu_ != nullptr;
}
inline bool PublishImuRequest::has_imu() const {
  return _internal_has_imu();
}
inline void PublishImuRequest::clear_imu() {
  if (GetArenaForAllocation() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishImuRequest::_internal_imu() const {
  const ::mavsdk::rpc::telemetry_server::Imu* p = imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Imu&>(
      ::mavsdk::rpc::telemetry_server::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishImuRequest::imu() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
  return _internal_imu();
}
inline void PublishImuRequest::unsafe_arena_set_allocated_imu(
    ::mavsdk::rpc::telemetry_server::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishImuRequest::release_imu() {
  
  ::mavsdk::rpc::telemetry_server::Imu* temp = imu_;
  imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishImuRequest::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
  
  ::mavsdk::rpc::telemetry_server::Imu* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishImuRequest::_internal_mutable_imu() {
  
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Imu>(GetArenaForAllocation());
    imu_ = p;
  }
  return imu_;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishImuRequest::mutable_imu() {
  ::mavsdk::rpc::telemetry_server::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
  return _msg;
}
inline void PublishImuRequest::set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete imu_;
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu);
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
}

// -------------------------------------------------------------------

// PublishScaledImuRequest

// .mavsdk.rpc.telemetry_server.Imu imu = 1;
inline bool PublishScaledImuRequest::_internal_has_imu() const {
  return this != internal_default_instance() && imu_ != nullptr;
}
inline bool PublishScaledImuRequest::has_imu() const {
  return _internal_has_imu();
}
inline void PublishScaledImuRequest::clear_imu() {
  if (GetArenaForAllocation() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishScaledImuRequest::_internal_imu() const {
  const ::mavsdk::rpc::telemetry_server::Imu* p = imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Imu&>(
      ::mavsdk::rpc::telemetry_server::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishScaledImuRequest::imu() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
  return _internal_imu();
}
inline void PublishScaledImuRequest::unsafe_arena_set_allocated_imu(
    ::mavsdk::rpc::telemetry_server::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishScaledImuRequest::release_imu() {
  
  ::mavsdk::rpc::telemetry_server::Imu* temp = imu_;
  imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishScaledImuRequest::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
  
  ::mavsdk::rpc::telemetry_server::Imu* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishScaledImuRequest::_internal_mutable_imu() {
  
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Imu>(GetArenaForAllocation());
    imu_ = p;
  }
  return imu_;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishScaledImuRequest::mutable_imu() {
  ::mavsdk::rpc::telemetry_server::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
  return _msg;
}
inline void PublishScaledImuRequest::set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete imu_;
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu);
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
}

// -------------------------------------------------------------------

// PublishRawImuRequest

// .mavsdk.rpc.telemetry_server.Imu imu = 1;
inline bool PublishRawImuRequest::_internal_has_imu() const {
  return this != internal_default_instance() && imu_ != nullptr;
}
inline bool PublishRawImuRequest::has_imu() const {
  return _internal_has_imu();
}
inline void PublishRawImuRequest::clear_imu() {
  if (GetArenaForAllocation() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishRawImuRequest::_internal_imu() const {
  const ::mavsdk::rpc::telemetry_server::Imu* p = imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Imu&>(
      ::mavsdk::rpc::telemetry_server::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishRawImuRequest::imu() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
  return _internal_imu();
}
inline void PublishRawImuRequest::unsafe_arena_set_allocated_imu(
    ::mavsdk::rpc::telemetry_server::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishRawImuRequest::release_imu() {
  
  ::mavsdk::rpc::telemetry_server::Imu* temp = imu_;
  imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishRawImuRequest::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
  
  ::mavsdk::rpc::telemetry_server::Imu* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishRawImuRequest::_internal_mutable_imu() {
  
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Imu>(GetArenaForAllocation());
    imu_ = p;
  }
  return imu_;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishRawImuRequest::mutable_imu() {
  ::mavsdk::rpc::telemetry_server::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
  return _msg;
}
inline void PublishRawImuRequest::set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete imu_;
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu);
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
}

// -------------------------------------------------------------------

// PublishUnixEpochTimeRequest

// uint64 time_us = 1;
inline void PublishUnixEpochTimeRequest::clear_time_us() {
  time_us_ = uint64_t{0u};
}
inline uint64_t PublishUnixEpochTimeRequest::_internal_time_us() const {
  return time_us_;
}
inline uint64_t PublishUnixEpochTimeRequest::time_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest.time_us)
  return _internal_time_us();
}
inline void PublishUnixEpochTimeRequest::_internal_set_time_us(uint64_t value) {
  
  time_us_ = value;
}
inline void PublishUnixEpochTimeRequest::set_time_us(uint64_t value) {
  _internal_set_time_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest.time_us)
}

// -------------------------------------------------------------------

// PublishPositionResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishPositionResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishPositionResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishPositionResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishPositionResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishPositionResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishPositionResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
  return _msg;
}
inline void PublishPositionResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishHomeResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishHomeResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishHomeResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishHomeResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishHomeResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishHomeResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishHomeResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishHomeResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishHomeResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishHomeResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishHomeResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
  return _msg;
}
inline void PublishHomeResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishSysStatusResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishSysStatusResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishSysStatusResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishSysStatusResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishSysStatusResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishSysStatusResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishSysStatusResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishSysStatusResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishSysStatusResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishSysStatusResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishSysStatusResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
  return _msg;
}
inline void PublishSysStatusResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishExtendedSysStateResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishExtendedSysStateResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishExtendedSysStateResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishExtendedSysStateResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishExtendedSysStateResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishExtendedSysStateResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishExtendedSysStateResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishExtendedSysStateResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishExtendedSysStateResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishExtendedSysStateResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishExtendedSysStateResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
  return _msg;
}
inline void PublishExtendedSysStateResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishRawGpsResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishRawGpsResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishRawGpsResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishRawGpsResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishRawGpsResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishRawGpsResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishRawGpsResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawGpsResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawGpsResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawGpsResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawGpsResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
  return _msg;
}
inline void PublishRawGpsResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishBatteryResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishBatteryResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishBatteryResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishBatteryResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishBatteryResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishBatteryResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishBatteryResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishBatteryResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishBatteryResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishBatteryResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishBatteryResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
  return _msg;
}
inline void PublishBatteryResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishStatusTextResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishStatusTextResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishStatusTextResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishStatusTextResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishStatusTextResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishStatusTextResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishStatusTextResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishStatusTextResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishStatusTextResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishStatusTextResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishStatusTextResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
  return _msg;
}
inline void PublishStatusTextResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishOdometryResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishOdometryResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishOdometryResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishOdometryResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishOdometryResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishOdometryResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishOdometryResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishOdometryResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishOdometryResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishOdometryResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishOdometryResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
  return _msg;
}
inline void PublishOdometryResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishPositionVelocityNedResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishPositionVelocityNedResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishPositionVelocityNedResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishPositionVelocityNedResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishPositionVelocityNedResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishPositionVelocityNedResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishPositionVelocityNedResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionVelocityNedResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionVelocityNedResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionVelocityNedResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionVelocityNedResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
  return _msg;
}
inline void PublishPositionVelocityNedResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishGroundTruthResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishGroundTruthResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishGroundTruthResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishGroundTruthResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishGroundTruthResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishGroundTruthResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishGroundTruthResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishGroundTruthResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishGroundTruthResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishGroundTruthResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishGroundTruthResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
  return _msg;
}
inline void PublishGroundTruthResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishImuResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishImuResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishImuResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishImuResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishImuResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishImuResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishImuResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishImuResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishImuResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishImuResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishImuResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
  return _msg;
}
inline void PublishImuResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishScaledImuResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishScaledImuResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishScaledImuResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishScaledImuResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishScaledImuResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishScaledImuResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishScaledImuResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishScaledImuResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishScaledImuResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishScaledImuResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishScaledImuResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
  return _msg;
}
inline void PublishScaledImuResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishRawImuResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishRawImuResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishRawImuResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishRawImuResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishRawImuResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishRawImuResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishRawImuResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawImuResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawImuResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawImuResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawImuResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
  return _msg;
}
inline void PublishRawImuResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishUnixEpochTimeResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishUnixEpochTimeResponse::_internal_has_telemetry_server_result() const {
  return this != internal_default_instance() && telemetry_server_result_ != nullptr;
}
inline bool PublishUnixEpochTimeResponse::has_telemetry_server_result() const {
  return _internal_has_telemetry_server_result();
}
inline void PublishUnixEpochTimeResponse::clear_telemetry_server_result() {
  if (GetArenaForAllocation() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishUnixEpochTimeResponse::_internal_telemetry_server_result() const {
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(
      ::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishUnixEpochTimeResponse::telemetry_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishUnixEpochTimeResponse::unsafe_arena_set_allocated_telemetry_server_result(
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_server_result_);
  }
  telemetry_server_result_ = telemetry_server_result;
  if (telemetry_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishUnixEpochTimeResponse::release_telemetry_server_result() {
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishUnixEpochTimeResponse::unsafe_arena_release_telemetry_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
  
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = telemetry_server_result_;
  telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishUnixEpochTimeResponse::_internal_mutable_telemetry_server_result() {
  
  if (telemetry_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArenaForAllocation());
    telemetry_server_result_ = p;
  }
  return telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishUnixEpochTimeResponse::mutable_telemetry_server_result() {
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
  return _msg;
}
inline void PublishUnixEpochTimeResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_server_result_;
  }
  if (telemetry_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry_server_result);
    if (message_arena != submessage_arena) {
      telemetry_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry_server_result, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_server_result_ = telemetry_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// Position

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double Position::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double Position::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Position.latitude_deg)
  return _internal_latitude_deg();
}
inline void Position::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void Position::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Position.latitude_deg)
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double Position::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double Position::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Position.longitude_deg)
  return _internal_longitude_deg();
}
inline void Position::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void Position::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Position.longitude_deg)
}

// float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float Position::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float Position::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Position.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void Position::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void Position::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Position.absolute_altitude_m)
}

// float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float Position::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float Position::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Position.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void Position::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void Position::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Position.relative_altitude_m)
}

// -------------------------------------------------------------------

// Heading

// double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Heading::clear_heading_deg() {
  heading_deg_ = 0;
}
inline double Heading::_internal_heading_deg() const {
  return heading_deg_;
}
inline double Heading::heading_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Heading.heading_deg)
  return _internal_heading_deg();
}
inline void Heading::_internal_set_heading_deg(double value) {
  
  heading_deg_ = value;
}
inline void Heading::set_heading_deg(double value) {
  _internal_set_heading_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Heading.heading_deg)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.w)
}

// float x = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.x)
}

// float y = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.y)
}

// float z = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.z)
}

// uint64 timestamp_us = 5;
inline void Quaternion::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t Quaternion::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t Quaternion::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.timestamp_us)
  return _internal_timestamp_us();
}
inline void Quaternion::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void Quaternion::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.timestamp_us)
}

// -------------------------------------------------------------------

// EulerAngle

// float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_roll_deg() {
  roll_deg_ = 0;
}
inline float EulerAngle::_internal_roll_deg() const {
  return roll_deg_;
}
inline float EulerAngle::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.EulerAngle.roll_deg)
  return _internal_roll_deg();
}
inline void EulerAngle::_internal_set_roll_deg(float value) {
  
  roll_deg_ = value;
}
inline void EulerAngle::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.EulerAngle.roll_deg)
}

// float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline float EulerAngle::_internal_pitch_deg() const {
  return pitch_deg_;
}
inline float EulerAngle::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.EulerAngle.pitch_deg)
  return _internal_pitch_deg();
}
inline void EulerAngle::_internal_set_pitch_deg(float value) {
  
  pitch_deg_ = value;
}
inline void EulerAngle::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.EulerAngle.pitch_deg)
}

// float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float EulerAngle::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float EulerAngle::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.EulerAngle.yaw_deg)
  return _internal_yaw_deg();
}
inline void EulerAngle::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void EulerAngle::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.EulerAngle.yaw_deg)
}

// uint64 timestamp_us = 4;
inline void EulerAngle::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t EulerAngle::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t EulerAngle::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.EulerAngle.timestamp_us)
  return _internal_timestamp_us();
}
inline void EulerAngle::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void EulerAngle::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.EulerAngle.timestamp_us)
}

// -------------------------------------------------------------------

// AngularVelocityBody

// float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_roll_rad_s() {
  roll_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_roll_rad_s() const {
  return roll_rad_s_;
}
inline float AngularVelocityBody::roll_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityBody.roll_rad_s)
  return _internal_roll_rad_s();
}
inline void AngularVelocityBody::_internal_set_roll_rad_s(float value) {
  
  roll_rad_s_ = value;
}
inline void AngularVelocityBody::set_roll_rad_s(float value) {
  _internal_set_roll_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityBody.roll_rad_s)
}

// float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_pitch_rad_s() {
  pitch_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_pitch_rad_s() const {
  return pitch_rad_s_;
}
inline float AngularVelocityBody::pitch_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityBody.pitch_rad_s)
  return _internal_pitch_rad_s();
}
inline void AngularVelocityBody::_internal_set_pitch_rad_s(float value) {
  
  pitch_rad_s_ = value;
}
inline void AngularVelocityBody::set_pitch_rad_s(float value) {
  _internal_set_pitch_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityBody.pitch_rad_s)
}

// float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_yaw_rad_s() {
  yaw_rad_s_ = 0;
}
inline float AngularVelocityBody::_internal_yaw_rad_s() const {
  return yaw_rad_s_;
}
inline float AngularVelocityBody::yaw_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityBody.yaw_rad_s)
  return _internal_yaw_rad_s();
}
inline void AngularVelocityBody::_internal_set_yaw_rad_s(float value) {
  
  yaw_rad_s_ = value;
}
inline void AngularVelocityBody::set_yaw_rad_s(float value) {
  _internal_set_yaw_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityBody.yaw_rad_s)
}

// -------------------------------------------------------------------

// GpsInfo

// int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
inline void GpsInfo::clear_num_satellites() {
  num_satellites_ = 0;
}
inline int32_t GpsInfo::_internal_num_satellites() const {
  return num_satellites_;
}
inline int32_t GpsInfo::num_satellites() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GpsInfo.num_satellites)
  return _internal_num_satellites();
}
inline void GpsInfo::_internal_set_num_satellites(int32_t value) {
  
  num_satellites_ = value;
}
inline void GpsInfo::set_num_satellites(int32_t value) {
  _internal_set_num_satellites(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GpsInfo.num_satellites)
}

// .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
inline void GpsInfo::clear_fix_type() {
  fix_type_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::FixType GpsInfo::_internal_fix_type() const {
  return static_cast< ::mavsdk::rpc::telemetry_server::FixType >(fix_type_);
}
inline ::mavsdk::rpc::telemetry_server::FixType GpsInfo::fix_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GpsInfo.fix_type)
  return _internal_fix_type();
}
inline void GpsInfo::_internal_set_fix_type(::mavsdk::rpc::telemetry_server::FixType value) {
  
  fix_type_ = value;
}
inline void GpsInfo::set_fix_type(::mavsdk::rpc::telemetry_server::FixType value) {
  _internal_set_fix_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GpsInfo.fix_type)
}

// -------------------------------------------------------------------

// RawGps

// uint64 timestamp_us = 1;
inline void RawGps::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t RawGps::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t RawGps::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.timestamp_us)
  return _internal_timestamp_us();
}
inline void RawGps::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void RawGps::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.timestamp_us)
}

// double latitude_deg = 2;
inline void RawGps::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double RawGps::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double RawGps::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.latitude_deg)
  return _internal_latitude_deg();
}
inline void RawGps::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void RawGps::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.latitude_deg)
}

// double longitude_deg = 3;
inline void RawGps::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double RawGps::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double RawGps::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.longitude_deg)
  return _internal_longitude_deg();
}
inline void RawGps::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void RawGps::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.longitude_deg)
}

// float absolute_altitude_m = 4;
inline void RawGps::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float RawGps::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float RawGps::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void RawGps::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void RawGps::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.absolute_altitude_m)
}

// float hdop = 5;
inline void RawGps::clear_hdop() {
  hdop_ = 0;
}
inline float RawGps::_internal_hdop() const {
  return hdop_;
}
inline float RawGps::hdop() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.hdop)
  return _internal_hdop();
}
inline void RawGps::_internal_set_hdop(float value) {
  
  hdop_ = value;
}
inline void RawGps::set_hdop(float value) {
  _internal_set_hdop(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.hdop)
}

// float vdop = 6;
inline void RawGps::clear_vdop() {
  vdop_ = 0;
}
inline float RawGps::_internal_vdop() const {
  return vdop_;
}
inline float RawGps::vdop() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.vdop)
  return _internal_vdop();
}
inline void RawGps::_internal_set_vdop(float value) {
  
  vdop_ = value;
}
inline void RawGps::set_vdop(float value) {
  _internal_set_vdop(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.vdop)
}

// float velocity_m_s = 7;
inline void RawGps::clear_velocity_m_s() {
  velocity_m_s_ = 0;
}
inline float RawGps::_internal_velocity_m_s() const {
  return velocity_m_s_;
}
inline float RawGps::velocity_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.velocity_m_s)
  return _internal_velocity_m_s();
}
inline void RawGps::_internal_set_velocity_m_s(float value) {
  
  velocity_m_s_ = value;
}
inline void RawGps::set_velocity_m_s(float value) {
  _internal_set_velocity_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.velocity_m_s)
}

// float cog_deg = 8;
inline void RawGps::clear_cog_deg() {
  cog_deg_ = 0;
}
inline float RawGps::_internal_cog_deg() const {
  return cog_deg_;
}
inline float RawGps::cog_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.cog_deg)
  return _internal_cog_deg();
}
inline void RawGps::_internal_set_cog_deg(float value) {
  
  cog_deg_ = value;
}
inline void RawGps::set_cog_deg(float value) {
  _internal_set_cog_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.cog_deg)
}

// float altitude_ellipsoid_m = 9;
inline void RawGps::clear_altitude_ellipsoid_m() {
  altitude_ellipsoid_m_ = 0;
}
inline float RawGps::_internal_altitude_ellipsoid_m() const {
  return altitude_ellipsoid_m_;
}
inline float RawGps::altitude_ellipsoid_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.altitude_ellipsoid_m)
  return _internal_altitude_ellipsoid_m();
}
inline void RawGps::_internal_set_altitude_ellipsoid_m(float value) {
  
  altitude_ellipsoid_m_ = value;
}
inline void RawGps::set_altitude_ellipsoid_m(float value) {
  _internal_set_altitude_ellipsoid_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.altitude_ellipsoid_m)
}

// float horizontal_uncertainty_m = 10;
inline void RawGps::clear_horizontal_uncertainty_m() {
  horizontal_uncertainty_m_ = 0;
}
inline float RawGps::_internal_horizontal_uncertainty_m() const {
  return horizontal_uncertainty_m_;
}
inline float RawGps::horizontal_uncertainty_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.horizontal_uncertainty_m)
  return _internal_horizontal_uncertainty_m();
}
inline void RawGps::_internal_set_horizontal_uncertainty_m(float value) {
  
  horizontal_uncertainty_m_ = value;
}
inline void RawGps::set_horizontal_uncertainty_m(float value) {
  _internal_set_horizontal_uncertainty_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.horizontal_uncertainty_m)
}

// float vertical_uncertainty_m = 11;
inline void RawGps::clear_vertical_uncertainty_m() {
  vertical_uncertainty_m_ = 0;
}
inline float RawGps::_internal_vertical_uncertainty_m() const {
  return vertical_uncertainty_m_;
}
inline float RawGps::vertical_uncertainty_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.vertical_uncertainty_m)
  return _internal_vertical_uncertainty_m();
}
inline void RawGps::_internal_set_vertical_uncertainty_m(float value) {
  
  vertical_uncertainty_m_ = value;
}
inline void RawGps::set_vertical_uncertainty_m(float value) {
  _internal_set_vertical_uncertainty_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.vertical_uncertainty_m)
}

// float velocity_uncertainty_m_s = 12;
inline void RawGps::clear_velocity_uncertainty_m_s() {
  velocity_uncertainty_m_s_ = 0;
}
inline float RawGps::_internal_velocity_uncertainty_m_s() const {
  return velocity_uncertainty_m_s_;
}
inline float RawGps::velocity_uncertainty_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.velocity_uncertainty_m_s)
  return _internal_velocity_uncertainty_m_s();
}
inline void RawGps::_internal_set_velocity_uncertainty_m_s(float value) {
  
  velocity_uncertainty_m_s_ = value;
}
inline void RawGps::set_velocity_uncertainty_m_s(float value) {
  _internal_set_velocity_uncertainty_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.velocity_uncertainty_m_s)
}

// float heading_uncertainty_deg = 13;
inline void RawGps::clear_heading_uncertainty_deg() {
  heading_uncertainty_deg_ = 0;
}
inline float RawGps::_internal_heading_uncertainty_deg() const {
  return heading_uncertainty_deg_;
}
inline float RawGps::heading_uncertainty_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.heading_uncertainty_deg)
  return _internal_heading_uncertainty_deg();
}
inline void RawGps::_internal_set_heading_uncertainty_deg(float value) {
  
  heading_uncertainty_deg_ = value;
}
inline void RawGps::set_heading_uncertainty_deg(float value) {
  _internal_set_heading_uncertainty_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.heading_uncertainty_deg)
}

// float yaw_deg = 14;
inline void RawGps::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float RawGps::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float RawGps::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.yaw_deg)
  return _internal_yaw_deg();
}
inline void RawGps::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void RawGps::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.yaw_deg)
}

// -------------------------------------------------------------------

// Battery

// float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Battery::clear_voltage_v() {
  voltage_v_ = 0;
}
inline float Battery::_internal_voltage_v() const {
  return voltage_v_;
}
inline float Battery::voltage_v() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Battery.voltage_v)
  return _internal_voltage_v();
}
inline void Battery::_internal_set_voltage_v(float value) {
  
  voltage_v_ = value;
}
inline void Battery::set_voltage_v(float value) {
  _internal_set_voltage_v(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Battery.voltage_v)
}

// float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Battery::clear_remaining_percent() {
  remaining_percent_ = 0;
}
inline float Battery::_internal_remaining_percent() const {
  return remaining_percent_;
}
inline float Battery::remaining_percent() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Battery.remaining_percent)
  return _internal_remaining_percent();
}
inline void Battery::_internal_set_remaining_percent(float value) {
  
  remaining_percent_ = value;
}
inline void Battery::set_remaining_percent(float value) {
  _internal_set_remaining_percent(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Battery.remaining_percent)
}

// -------------------------------------------------------------------

// RcStatus

// bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
inline void RcStatus::clear_was_available_once() {
  was_available_once_ = false;
}
inline bool RcStatus::_internal_was_available_once() const {
  return was_available_once_;
}
inline bool RcStatus::was_available_once() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RcStatus.was_available_once)
  return _internal_was_available_once();
}
inline void RcStatus::_internal_set_was_available_once(bool value) {
  
  was_available_once_ = value;
}
inline void RcStatus::set_was_available_once(bool value) {
  _internal_set_was_available_once(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RcStatus.was_available_once)
}

// bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
inline void RcStatus::clear_is_available() {
  is_available_ = false;
}
inline bool RcStatus::_internal_is_available() const {
  return is_available_;
}
inline bool RcStatus::is_available() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RcStatus.is_available)
  return _internal_is_available();
}
inline void RcStatus::_internal_set_is_available(bool value) {
  
  is_available_ = value;
}
inline void RcStatus::set_is_available(bool value) {
  _internal_set_is_available(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RcStatus.is_available)
}

// float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void RcStatus::clear_signal_strength_percent() {
  signal_strength_percent_ = 0;
}
inline float RcStatus::_internal_signal_strength_percent() const {
  return signal_strength_percent_;
}
inline float RcStatus::signal_strength_percent() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RcStatus.signal_strength_percent)
  return _internal_signal_strength_percent();
}
inline void RcStatus::_internal_set_signal_strength_percent(float value) {
  
  signal_strength_percent_ = value;
}
inline void RcStatus::set_signal_strength_percent(float value) {
  _internal_set_signal_strength_percent(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RcStatus.signal_strength_percent)
}

// -------------------------------------------------------------------

// StatusText

// .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
inline void StatusText::clear_type() {
  type_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::StatusTextType StatusText::_internal_type() const {
  return static_cast< ::mavsdk::rpc::telemetry_server::StatusTextType >(type_);
}
inline ::mavsdk::rpc::telemetry_server::StatusTextType StatusText::type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.StatusText.type)
  return _internal_type();
}
inline void StatusText::_internal_set_type(::mavsdk::rpc::telemetry_server::StatusTextType value) {
  
  type_ = value;
}
inline void StatusText::set_type(::mavsdk::rpc::telemetry_server::StatusTextType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.StatusText.type)
}

// string text = 2;
inline void StatusText::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& StatusText::text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.StatusText.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusText::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.StatusText.text)
}
inline std::string* StatusText::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.StatusText.text)
  return _s;
}
inline const std::string& StatusText::_internal_text() const {
  return text_.Get();
}
inline void StatusText::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* StatusText::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* StatusText::release_text() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.StatusText.text)
  return text_.Release();
}
inline void StatusText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.StatusText.text)
}

// -------------------------------------------------------------------

// ActuatorControlTarget

// int32 group = 1 [(.mavsdk.options.default_value) = "0"];
inline void ActuatorControlTarget::clear_group() {
  group_ = 0;
}
inline int32_t ActuatorControlTarget::_internal_group() const {
  return group_;
}
inline int32_t ActuatorControlTarget::group() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ActuatorControlTarget.group)
  return _internal_group();
}
inline void ActuatorControlTarget::_internal_set_group(int32_t value) {
  
  group_ = value;
}
inline void ActuatorControlTarget::set_group(int32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ActuatorControlTarget.group)
}

// repeated float controls = 2;
inline int ActuatorControlTarget::_internal_controls_size() const {
  return controls_.size();
}
inline int ActuatorControlTarget::controls_size() const {
  return _internal_controls_size();
}
inline void ActuatorControlTarget::clear_controls() {
  controls_.Clear();
}
inline float ActuatorControlTarget::_internal_controls(int index) const {
  return controls_.Get(index);
}
inline float ActuatorControlTarget::controls(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
  return _internal_controls(index);
}
inline void ActuatorControlTarget::set_controls(int index, float value) {
  controls_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
}
inline void ActuatorControlTarget::_internal_add_controls(float value) {
  controls_.Add(value);
}
inline void ActuatorControlTarget::add_controls(float value) {
  _internal_add_controls(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlTarget::_internal_controls() const {
  return controls_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlTarget::controls() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
  return _internal_controls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlTarget::_internal_mutable_controls() {
  return &controls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlTarget::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
  return _internal_mutable_controls();
}

// -------------------------------------------------------------------

// ActuatorOutputStatus

// uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
inline void ActuatorOutputStatus::clear_active() {
  active_ = 0u;
}
inline uint32_t ActuatorOutputStatus::_internal_active() const {
  return active_;
}
inline uint32_t ActuatorOutputStatus::active() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.active)
  return _internal_active();
}
inline void ActuatorOutputStatus::_internal_set_active(uint32_t value) {
  
  active_ = value;
}
inline void ActuatorOutputStatus::set_active(uint32_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.active)
}

// repeated float actuator = 2;
inline int ActuatorOutputStatus::_internal_actuator_size() const {
  return actuator_.size();
}
inline int ActuatorOutputStatus::actuator_size() const {
  return _internal_actuator_size();
}
inline void ActuatorOutputStatus::clear_actuator() {
  actuator_.Clear();
}
inline float ActuatorOutputStatus::_internal_actuator(int index) const {
  return actuator_.Get(index);
}
inline float ActuatorOutputStatus::actuator(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
  return _internal_actuator(index);
}
inline void ActuatorOutputStatus::set_actuator(int index, float value) {
  actuator_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
}
inline void ActuatorOutputStatus::_internal_add_actuator(float value) {
  actuator_.Add(value);
}
inline void ActuatorOutputStatus::add_actuator(float value) {
  _internal_add_actuator(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorOutputStatus::_internal_actuator() const {
  return actuator_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorOutputStatus::actuator() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
  return _internal_actuator();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorOutputStatus::_internal_mutable_actuator() {
  return &actuator_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorOutputStatus::mutable_actuator() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
  return _internal_mutable_actuator();
}

// -------------------------------------------------------------------

// Covariance

// repeated float covariance_matrix = 1;
inline int Covariance::_internal_covariance_matrix_size() const {
  return covariance_matrix_.size();
}
inline int Covariance::covariance_matrix_size() const {
  return _internal_covariance_matrix_size();
}
inline void Covariance::clear_covariance_matrix() {
  covariance_matrix_.Clear();
}
inline float Covariance::_internal_covariance_matrix(int index) const {
  return covariance_matrix_.Get(index);
}
inline float Covariance::covariance_matrix(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
  return _internal_covariance_matrix(index);
}
inline void Covariance::set_covariance_matrix(int index, float value) {
  covariance_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
}
inline void Covariance::_internal_add_covariance_matrix(float value) {
  covariance_matrix_.Add(value);
}
inline void Covariance::add_covariance_matrix(float value) {
  _internal_add_covariance_matrix(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Covariance::_internal_covariance_matrix() const {
  return covariance_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Covariance::covariance_matrix() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
  return _internal_covariance_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Covariance::_internal_mutable_covariance_matrix() {
  return &covariance_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Covariance::mutable_covariance_matrix() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
  return _internal_mutable_covariance_matrix();
}

// -------------------------------------------------------------------

// VelocityBody

// float x_m_s = 1;
inline void VelocityBody::clear_x_m_s() {
  x_m_s_ = 0;
}
inline float VelocityBody::_internal_x_m_s() const {
  return x_m_s_;
}
inline float VelocityBody::x_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityBody.x_m_s)
  return _internal_x_m_s();
}
inline void VelocityBody::_internal_set_x_m_s(float value) {
  
  x_m_s_ = value;
}
inline void VelocityBody::set_x_m_s(float value) {
  _internal_set_x_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityBody.x_m_s)
}

// float y_m_s = 2;
inline void VelocityBody::clear_y_m_s() {
  y_m_s_ = 0;
}
inline float VelocityBody::_internal_y_m_s() const {
  return y_m_s_;
}
inline float VelocityBody::y_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityBody.y_m_s)
  return _internal_y_m_s();
}
inline void VelocityBody::_internal_set_y_m_s(float value) {
  
  y_m_s_ = value;
}
inline void VelocityBody::set_y_m_s(float value) {
  _internal_set_y_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityBody.y_m_s)
}

// float z_m_s = 3;
inline void VelocityBody::clear_z_m_s() {
  z_m_s_ = 0;
}
inline float VelocityBody::_internal_z_m_s() const {
  return z_m_s_;
}
inline float VelocityBody::z_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityBody.z_m_s)
  return _internal_z_m_s();
}
inline void VelocityBody::_internal_set_z_m_s(float value) {
  
  z_m_s_ = value;
}
inline void VelocityBody::set_z_m_s(float value) {
  _internal_set_z_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityBody.z_m_s)
}

// -------------------------------------------------------------------

// PositionBody

// float x_m = 1;
inline void PositionBody::clear_x_m() {
  x_m_ = 0;
}
inline float PositionBody::_internal_x_m() const {
  return x_m_;
}
inline float PositionBody::x_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionBody.x_m)
  return _internal_x_m();
}
inline void PositionBody::_internal_set_x_m(float value) {
  
  x_m_ = value;
}
inline void PositionBody::set_x_m(float value) {
  _internal_set_x_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionBody.x_m)
}

// float y_m = 2;
inline void PositionBody::clear_y_m() {
  y_m_ = 0;
}
inline float PositionBody::_internal_y_m() const {
  return y_m_;
}
inline float PositionBody::y_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionBody.y_m)
  return _internal_y_m();
}
inline void PositionBody::_internal_set_y_m(float value) {
  
  y_m_ = value;
}
inline void PositionBody::set_y_m(float value) {
  _internal_set_y_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionBody.y_m)
}

// float z_m = 3;
inline void PositionBody::clear_z_m() {
  z_m_ = 0;
}
inline float PositionBody::_internal_z_m() const {
  return z_m_;
}
inline float PositionBody::z_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionBody.z_m)
  return _internal_z_m();
}
inline void PositionBody::_internal_set_z_m(float value) {
  
  z_m_ = value;
}
inline void PositionBody::set_z_m(float value) {
  _internal_set_z_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionBody.z_m)
}

// -------------------------------------------------------------------

// Odometry

// uint64 time_usec = 1;
inline void Odometry::clear_time_usec() {
  time_usec_ = uint64_t{0u};
}
inline uint64_t Odometry::_internal_time_usec() const {
  return time_usec_;
}
inline uint64_t Odometry::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.time_usec)
  return _internal_time_usec();
}
inline void Odometry::_internal_set_time_usec(uint64_t value) {
  
  time_usec_ = value;
}
inline void Odometry::set_time_usec(uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Odometry.time_usec)
}

// .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
inline void Odometry::clear_frame_id() {
  frame_id_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::Odometry_MavFrame Odometry::_internal_frame_id() const {
  return static_cast< ::mavsdk::rpc::telemetry_server::Odometry_MavFrame >(frame_id_);
}
inline ::mavsdk::rpc::telemetry_server::Odometry_MavFrame Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.frame_id)
  return _internal_frame_id();
}
inline void Odometry::_internal_set_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value) {
  
  frame_id_ = value;
}
inline void Odometry::set_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Odometry.frame_id)
}

// .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
inline void Odometry::clear_child_frame_id() {
  child_frame_id_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::Odometry_MavFrame Odometry::_internal_child_frame_id() const {
  return static_cast< ::mavsdk::rpc::telemetry_server::Odometry_MavFrame >(child_frame_id_);
}
inline ::mavsdk::rpc::telemetry_server::Odometry_MavFrame Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.child_frame_id)
  return _internal_child_frame_id();
}
inline void Odometry::_internal_set_child_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value) {
  
  child_frame_id_ = value;
}
inline void Odometry::set_child_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value) {
  _internal_set_child_frame_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Odometry.child_frame_id)
}

// .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
inline bool Odometry::_internal_has_position_body() const {
  return this != internal_default_instance() && position_body_ != nullptr;
}
inline bool Odometry::has_position_body() const {
  return _internal_has_position_body();
}
inline void Odometry::clear_position_body() {
  if (GetArenaForAllocation() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::PositionBody& Odometry::_internal_position_body() const {
  const ::mavsdk::rpc::telemetry_server::PositionBody* p = position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::PositionBody&>(
      ::mavsdk::rpc::telemetry_server::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::PositionBody& Odometry::position_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.position_body)
  return _internal_position_body();
}
inline void Odometry::unsafe_arena_set_allocated_position_body(
    ::mavsdk::rpc::telemetry_server::PositionBody* position_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_body_);
  }
  position_body_ = position_body;
  if (position_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.position_body)
}
inline ::mavsdk::rpc::telemetry_server::PositionBody* Odometry::release_position_body() {
  
  ::mavsdk::rpc::telemetry_server::PositionBody* temp = position_body_;
  position_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionBody* Odometry::unsafe_arena_release_position_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.position_body)
  
  ::mavsdk::rpc::telemetry_server::PositionBody* temp = position_body_;
  position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionBody* Odometry::_internal_mutable_position_body() {
  
  if (position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PositionBody>(GetArenaForAllocation());
    position_body_ = p;
  }
  return position_body_;
}
inline ::mavsdk::rpc::telemetry_server::PositionBody* Odometry::mutable_position_body() {
  ::mavsdk::rpc::telemetry_server::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.position_body)
  return _msg;
}
inline void Odometry::set_allocated_position_body(::mavsdk::rpc::telemetry_server::PositionBody* position_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_body_;
  }
  if (position_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_body);
    if (message_arena != submessage_arena) {
      position_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_body, submessage_arena);
    }
    
  } else {
    
  }
  position_body_ = position_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.position_body)
}

// .mavsdk.rpc.telemetry_server.Quaternion q = 5;
inline bool Odometry::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool Odometry::has_q() const {
  return _internal_has_q();
}
inline void Odometry::clear_q() {
  if (GetArenaForAllocation() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Quaternion& Odometry::_internal_q() const {
  const ::mavsdk::rpc::telemetry_server::Quaternion* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Quaternion&>(
      ::mavsdk::rpc::telemetry_server::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Quaternion& Odometry::q() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.q)
  return _internal_q();
}
inline void Odometry::unsafe_arena_set_allocated_q(
    ::mavsdk::rpc::telemetry_server::Quaternion* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.q)
}
inline ::mavsdk::rpc::telemetry_server::Quaternion* Odometry::release_q() {
  
  ::mavsdk::rpc::telemetry_server::Quaternion* temp = q_;
  q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Quaternion* Odometry::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.q)
  
  ::mavsdk::rpc::telemetry_server::Quaternion* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Quaternion* Odometry::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Quaternion>(GetArenaForAllocation());
    q_ = p;
  }
  return q_;
}
inline ::mavsdk::rpc::telemetry_server::Quaternion* Odometry::mutable_q() {
  ::mavsdk::rpc::telemetry_server::Quaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.q)
  return _msg;
}
inline void Odometry::set_allocated_q(::mavsdk::rpc::telemetry_server::Quaternion* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.q)
}

// .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
inline bool Odometry::_internal_has_velocity_body() const {
  return this != internal_default_instance() && velocity_body_ != nullptr;
}
inline bool Odometry::has_velocity_body() const {
  return _internal_has_velocity_body();
}
inline void Odometry::clear_velocity_body() {
  if (GetArenaForAllocation() == nullptr && velocity_body_ != nullptr) {
    delete velocity_body_;
  }
  velocity_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::VelocityBody& Odometry::_internal_velocity_body() const {
  const ::mavsdk::rpc::telemetry_server::VelocityBody* p = velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::VelocityBody&>(
      ::mavsdk::rpc::telemetry_server::_VelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::VelocityBody& Odometry::velocity_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
  return _internal_velocity_body();
}
inline void Odometry::unsafe_arena_set_allocated_velocity_body(
    ::mavsdk::rpc::telemetry_server::VelocityBody* velocity_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_body_);
  }
  velocity_body_ = velocity_body;
  if (velocity_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
}
inline ::mavsdk::rpc::telemetry_server::VelocityBody* Odometry::release_velocity_body() {
  
  ::mavsdk::rpc::telemetry_server::VelocityBody* temp = velocity_body_;
  velocity_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityBody* Odometry::unsafe_arena_release_velocity_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
  
  ::mavsdk::rpc::telemetry_server::VelocityBody* temp = velocity_body_;
  velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityBody* Odometry::_internal_mutable_velocity_body() {
  
  if (velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::VelocityBody>(GetArenaForAllocation());
    velocity_body_ = p;
  }
  return velocity_body_;
}
inline ::mavsdk::rpc::telemetry_server::VelocityBody* Odometry::mutable_velocity_body() {
  ::mavsdk::rpc::telemetry_server::VelocityBody* _msg = _internal_mutable_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
  return _msg;
}
inline void Odometry::set_allocated_velocity_body(::mavsdk::rpc::telemetry_server::VelocityBody* velocity_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_body_;
  }
  if (velocity_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_body);
    if (message_arena != submessage_arena) {
      velocity_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_body, submessage_arena);
    }
    
  } else {
    
  }
  velocity_body_ = velocity_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
}

// .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
inline bool Odometry::_internal_has_angular_velocity_body() const {
  return this != internal_default_instance() && angular_velocity_body_ != nullptr;
}
inline bool Odometry::has_angular_velocity_body() const {
  return _internal_has_angular_velocity_body();
}
inline void Odometry::clear_angular_velocity_body() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_body_ != nullptr) {
    delete angular_velocity_body_;
  }
  angular_velocity_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& Odometry::_internal_angular_velocity_body() const {
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody* p = angular_velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::AngularVelocityBody&>(
      ::mavsdk::rpc::telemetry_server::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& Odometry::angular_velocity_body() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
  return _internal_angular_velocity_body();
}
inline void Odometry::unsafe_arena_set_allocated_angular_velocity_body(
    ::mavsdk::rpc::telemetry_server::AngularVelocityBody* angular_velocity_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_body_);
  }
  angular_velocity_body_ = angular_velocity_body;
  if (angular_velocity_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Odometry::release_angular_velocity_body() {
  
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* temp = angular_velocity_body_;
  angular_velocity_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Odometry::unsafe_arena_release_angular_velocity_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
  
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* temp = angular_velocity_body_;
  angular_velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Odometry::_internal_mutable_angular_velocity_body() {
  
  if (angular_velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(GetArenaForAllocation());
    angular_velocity_body_ = p;
  }
  return angular_velocity_body_;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Odometry::mutable_angular_velocity_body() {
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* _msg = _internal_mutable_angular_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
  return _msg;
}
inline void Odometry::set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry_server::AngularVelocityBody* angular_velocity_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_body_;
  }
  if (angular_velocity_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_velocity_body);
    if (message_arena != submessage_arena) {
      angular_velocity_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_body, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_body_ = angular_velocity_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
}

// .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
inline bool Odometry::_internal_has_pose_covariance() const {
  return this != internal_default_instance() && pose_covariance_ != nullptr;
}
inline bool Odometry::has_pose_covariance() const {
  return _internal_has_pose_covariance();
}
inline void Odometry::clear_pose_covariance() {
  if (GetArenaForAllocation() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Covariance& Odometry::_internal_pose_covariance() const {
  const ::mavsdk::rpc::telemetry_server::Covariance* p = pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Covariance&>(
      ::mavsdk::rpc::telemetry_server::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Covariance& Odometry::pose_covariance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
  return _internal_pose_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_pose_covariance(
    ::mavsdk::rpc::telemetry_server::Covariance* pose_covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_covariance_);
  }
  pose_covariance_ = pose_covariance;
  if (pose_covariance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::release_pose_covariance() {
  
  ::mavsdk::rpc::telemetry_server::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::unsafe_arena_release_pose_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
  
  ::mavsdk::rpc::telemetry_server::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::_internal_mutable_pose_covariance() {
  
  if (pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Covariance>(GetArenaForAllocation());
    pose_covariance_ = p;
  }
  return pose_covariance_;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::mutable_pose_covariance() {
  ::mavsdk::rpc::telemetry_server::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
  return _msg;
}
inline void Odometry::set_allocated_pose_covariance(::mavsdk::rpc::telemetry_server::Covariance* pose_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_covariance_;
  }
  if (pose_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose_covariance);
    if (message_arena != submessage_arena) {
      pose_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_covariance, submessage_arena);
    }
    
  } else {
    
  }
  pose_covariance_ = pose_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
}

// .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
inline bool Odometry::_internal_has_velocity_covariance() const {
  return this != internal_default_instance() && velocity_covariance_ != nullptr;
}
inline bool Odometry::has_velocity_covariance() const {
  return _internal_has_velocity_covariance();
}
inline void Odometry::clear_velocity_covariance() {
  if (GetArenaForAllocation() == nullptr && velocity_covariance_ != nullptr) {
    delete velocity_covariance_;
  }
  velocity_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::Covariance& Odometry::_internal_velocity_covariance() const {
  const ::mavsdk::rpc::telemetry_server::Covariance* p = velocity_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Covariance&>(
      ::mavsdk::rpc::telemetry_server::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Covariance& Odometry::velocity_covariance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
  return _internal_velocity_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_velocity_covariance(
    ::mavsdk::rpc::telemetry_server::Covariance* velocity_covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_covariance_);
  }
  velocity_covariance_ = velocity_covariance;
  if (velocity_covariance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::release_velocity_covariance() {
  
  ::mavsdk::rpc::telemetry_server::Covariance* temp = velocity_covariance_;
  velocity_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::unsafe_arena_release_velocity_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
  
  ::mavsdk::rpc::telemetry_server::Covariance* temp = velocity_covariance_;
  velocity_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::_internal_mutable_velocity_covariance() {
  
  if (velocity_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::Covariance>(GetArenaForAllocation());
    velocity_covariance_ = p;
  }
  return velocity_covariance_;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::mutable_velocity_covariance() {
  ::mavsdk::rpc::telemetry_server::Covariance* _msg = _internal_mutable_velocity_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
  return _msg;
}
inline void Odometry::set_allocated_velocity_covariance(::mavsdk::rpc::telemetry_server::Covariance* velocity_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_covariance_;
  }
  if (velocity_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity_covariance);
    if (message_arena != submessage_arena) {
      velocity_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_covariance, submessage_arena);
    }
    
  } else {
    
  }
  velocity_covariance_ = velocity_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
}

// -------------------------------------------------------------------

// DistanceSensor

// float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_minimum_distance_m() {
  minimum_distance_m_ = 0;
}
inline float DistanceSensor::_internal_minimum_distance_m() const {
  return minimum_distance_m_;
}
inline float DistanceSensor::minimum_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.DistanceSensor.minimum_distance_m)
  return _internal_minimum_distance_m();
}
inline void DistanceSensor::_internal_set_minimum_distance_m(float value) {
  
  minimum_distance_m_ = value;
}
inline void DistanceSensor::set_minimum_distance_m(float value) {
  _internal_set_minimum_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.DistanceSensor.minimum_distance_m)
}

// float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_maximum_distance_m() {
  maximum_distance_m_ = 0;
}
inline float DistanceSensor::_internal_maximum_distance_m() const {
  return maximum_distance_m_;
}
inline float DistanceSensor::maximum_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.DistanceSensor.maximum_distance_m)
  return _internal_maximum_distance_m();
}
inline void DistanceSensor::_internal_set_maximum_distance_m(float value) {
  
  maximum_distance_m_ = value;
}
inline void DistanceSensor::set_maximum_distance_m(float value) {
  _internal_set_maximum_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.DistanceSensor.maximum_distance_m)
}

// float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_current_distance_m() {
  current_distance_m_ = 0;
}
inline float DistanceSensor::_internal_current_distance_m() const {
  return current_distance_m_;
}
inline float DistanceSensor::current_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.DistanceSensor.current_distance_m)
  return _internal_current_distance_m();
}
inline void DistanceSensor::_internal_set_current_distance_m(float value) {
  
  current_distance_m_ = value;
}
inline void DistanceSensor::set_current_distance_m(float value) {
  _internal_set_current_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.DistanceSensor.current_distance_m)
}

// -------------------------------------------------------------------

// ScaledPressure

// uint64 timestamp_us = 1;
inline void ScaledPressure::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t ScaledPressure::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t ScaledPressure::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.timestamp_us)
  return _internal_timestamp_us();
}
inline void ScaledPressure::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void ScaledPressure::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.timestamp_us)
}

// float absolute_pressure_hpa = 2;
inline void ScaledPressure::clear_absolute_pressure_hpa() {
  absolute_pressure_hpa_ = 0;
}
inline float ScaledPressure::_internal_absolute_pressure_hpa() const {
  return absolute_pressure_hpa_;
}
inline float ScaledPressure::absolute_pressure_hpa() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.absolute_pressure_hpa)
  return _internal_absolute_pressure_hpa();
}
inline void ScaledPressure::_internal_set_absolute_pressure_hpa(float value) {
  
  absolute_pressure_hpa_ = value;
}
inline void ScaledPressure::set_absolute_pressure_hpa(float value) {
  _internal_set_absolute_pressure_hpa(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.absolute_pressure_hpa)
}

// float differential_pressure_hpa = 3;
inline void ScaledPressure::clear_differential_pressure_hpa() {
  differential_pressure_hpa_ = 0;
}
inline float ScaledPressure::_internal_differential_pressure_hpa() const {
  return differential_pressure_hpa_;
}
inline float ScaledPressure::differential_pressure_hpa() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.differential_pressure_hpa)
  return _internal_differential_pressure_hpa();
}
inline void ScaledPressure::_internal_set_differential_pressure_hpa(float value) {
  
  differential_pressure_hpa_ = value;
}
inline void ScaledPressure::set_differential_pressure_hpa(float value) {
  _internal_set_differential_pressure_hpa(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.differential_pressure_hpa)
}

// float temperature_deg = 4;
inline void ScaledPressure::clear_temperature_deg() {
  temperature_deg_ = 0;
}
inline float ScaledPressure::_internal_temperature_deg() const {
  return temperature_deg_;
}
inline float ScaledPressure::temperature_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.temperature_deg)
  return _internal_temperature_deg();
}
inline void ScaledPressure::_internal_set_temperature_deg(float value) {
  
  temperature_deg_ = value;
}
inline void ScaledPressure::set_temperature_deg(float value) {
  _internal_set_temperature_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.temperature_deg)
}

// float differential_pressure_temperature_deg = 5;
inline void ScaledPressure::clear_differential_pressure_temperature_deg() {
  differential_pressure_temperature_deg_ = 0;
}
inline float ScaledPressure::_internal_differential_pressure_temperature_deg() const {
  return differential_pressure_temperature_deg_;
}
inline float ScaledPressure::differential_pressure_temperature_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.differential_pressure_temperature_deg)
  return _internal_differential_pressure_temperature_deg();
}
inline void ScaledPressure::_internal_set_differential_pressure_temperature_deg(float value) {
  
  differential_pressure_temperature_deg_ = value;
}
inline void ScaledPressure::set_differential_pressure_temperature_deg(float value) {
  _internal_set_differential_pressure_temperature_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.differential_pressure_temperature_deg)
}

// -------------------------------------------------------------------

// PositionNed

// float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_north_m() {
  north_m_ = 0;
}
inline float PositionNed::_internal_north_m() const {
  return north_m_;
}
inline float PositionNed::north_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionNed.north_m)
  return _internal_north_m();
}
inline void PositionNed::_internal_set_north_m(float value) {
  
  north_m_ = value;
}
inline void PositionNed::set_north_m(float value) {
  _internal_set_north_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionNed.north_m)
}

// float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_east_m() {
  east_m_ = 0;
}
inline float PositionNed::_internal_east_m() const {
  return east_m_;
}
inline float PositionNed::east_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionNed.east_m)
  return _internal_east_m();
}
inline void PositionNed::_internal_set_east_m(float value) {
  
  east_m_ = value;
}
inline void PositionNed::set_east_m(float value) {
  _internal_set_east_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionNed.east_m)
}

// float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_down_m() {
  down_m_ = 0;
}
inline float PositionNed::_internal_down_m() const {
  return down_m_;
}
inline float PositionNed::down_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionNed.down_m)
  return _internal_down_m();
}
inline void PositionNed::_internal_set_down_m(float value) {
  
  down_m_ = value;
}
inline void PositionNed::set_down_m(float value) {
  _internal_set_down_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionNed.down_m)
}

// -------------------------------------------------------------------

// VelocityNed

// float north_m_s = 1;
inline void VelocityNed::clear_north_m_s() {
  north_m_s_ = 0;
}
inline float VelocityNed::_internal_north_m_s() const {
  return north_m_s_;
}
inline float VelocityNed::north_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityNed.north_m_s)
  return _internal_north_m_s();
}
inline void VelocityNed::_internal_set_north_m_s(float value) {
  
  north_m_s_ = value;
}
inline void VelocityNed::set_north_m_s(float value) {
  _internal_set_north_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityNed.north_m_s)
}

// float east_m_s = 2;
inline void VelocityNed::clear_east_m_s() {
  east_m_s_ = 0;
}
inline float VelocityNed::_internal_east_m_s() const {
  return east_m_s_;
}
inline float VelocityNed::east_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityNed.east_m_s)
  return _internal_east_m_s();
}
inline void VelocityNed::_internal_set_east_m_s(float value) {
  
  east_m_s_ = value;
}
inline void VelocityNed::set_east_m_s(float value) {
  _internal_set_east_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityNed.east_m_s)
}

// float down_m_s = 3;
inline void VelocityNed::clear_down_m_s() {
  down_m_s_ = 0;
}
inline float VelocityNed::_internal_down_m_s() const {
  return down_m_s_;
}
inline float VelocityNed::down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityNed.down_m_s)
  return _internal_down_m_s();
}
inline void VelocityNed::_internal_set_down_m_s(float value) {
  
  down_m_s_ = value;
}
inline void VelocityNed::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityNed.down_m_s)
}

// -------------------------------------------------------------------

// PositionVelocityNed

// .mavsdk.rpc.telemetry_server.PositionNed position = 1;
inline bool PositionVelocityNed::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PositionVelocityNed::has_position() const {
  return _internal_has_position();
}
inline void PositionVelocityNed::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::PositionNed& PositionVelocityNed::_internal_position() const {
  const ::mavsdk::rpc::telemetry_server::PositionNed* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::PositionNed&>(
      ::mavsdk::rpc::telemetry_server::_PositionNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::PositionNed& PositionVelocityNed::position() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
  return _internal_position();
}
inline void PositionVelocityNed::unsafe_arena_set_allocated_position(
    ::mavsdk::rpc::telemetry_server::PositionNed* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
}
inline ::mavsdk::rpc::telemetry_server::PositionNed* PositionVelocityNed::release_position() {
  
  ::mavsdk::rpc::telemetry_server::PositionNed* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionNed* PositionVelocityNed::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
  
  ::mavsdk::rpc::telemetry_server::PositionNed* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionNed* PositionVelocityNed::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::PositionNed>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::mavsdk::rpc::telemetry_server::PositionNed* PositionVelocityNed::mutable_position() {
  ::mavsdk::rpc::telemetry_server::PositionNed* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
  return _msg;
}
inline void PositionVelocityNed::set_allocated_position(::mavsdk::rpc::telemetry_server::PositionNed* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
}

// .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
inline bool PositionVelocityNed::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool PositionVelocityNed::has_velocity() const {
  return _internal_has_velocity();
}
inline void PositionVelocityNed::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::VelocityNed& PositionVelocityNed::_internal_velocity() const {
  const ::mavsdk::rpc::telemetry_server::VelocityNed* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::VelocityNed&>(
      ::mavsdk::rpc::telemetry_server::_VelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::VelocityNed& PositionVelocityNed::velocity() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
  return _internal_velocity();
}
inline void PositionVelocityNed::unsafe_arena_set_allocated_velocity(
    ::mavsdk::rpc::telemetry_server::VelocityNed* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PositionVelocityNed::release_velocity() {
  
  ::mavsdk::rpc::telemetry_server::VelocityNed* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PositionVelocityNed::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
  
  ::mavsdk::rpc::telemetry_server::VelocityNed* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PositionVelocityNed::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::VelocityNed>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PositionVelocityNed::mutable_velocity() {
  ::mavsdk::rpc::telemetry_server::VelocityNed* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
  return _msg;
}
inline void PositionVelocityNed::set_allocated_velocity(::mavsdk::rpc::telemetry_server::VelocityNed* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
}

// -------------------------------------------------------------------

// GroundTruth

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double GroundTruth::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double GroundTruth::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GroundTruth.latitude_deg)
  return _internal_latitude_deg();
}
inline void GroundTruth::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void GroundTruth::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GroundTruth.latitude_deg)
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double GroundTruth::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double GroundTruth::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GroundTruth.longitude_deg)
  return _internal_longitude_deg();
}
inline void GroundTruth::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void GroundTruth::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GroundTruth.longitude_deg)
}

// float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float GroundTruth::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float GroundTruth::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GroundTruth.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void GroundTruth::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void GroundTruth::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GroundTruth.absolute_altitude_m)
}

// -------------------------------------------------------------------

// FixedwingMetrics

// float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_airspeed_m_s() {
  airspeed_m_s_ = 0;
}
inline float FixedwingMetrics::_internal_airspeed_m_s() const {
  return airspeed_m_s_;
}
inline float FixedwingMetrics::airspeed_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.airspeed_m_s)
  return _internal_airspeed_m_s();
}
inline void FixedwingMetrics::_internal_set_airspeed_m_s(float value) {
  
  airspeed_m_s_ = value;
}
inline void FixedwingMetrics::set_airspeed_m_s(float value) {
  _internal_set_airspeed_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.airspeed_m_s)
}

// float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_throttle_percentage() {
  throttle_percentage_ = 0;
}
inline float FixedwingMetrics::_internal_throttle_percentage() const {
  return throttle_percentage_;
}
inline float FixedwingMetrics::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.throttle_percentage)
  return _internal_throttle_percentage();
}
inline void FixedwingMetrics::_internal_set_throttle_percentage(float value) {
  
  throttle_percentage_ = value;
}
inline void FixedwingMetrics::set_throttle_percentage(float value) {
  _internal_set_throttle_percentage(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.throttle_percentage)
}

// float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_climb_rate_m_s() {
  climb_rate_m_s_ = 0;
}
inline float FixedwingMetrics::_internal_climb_rate_m_s() const {
  return climb_rate_m_s_;
}
inline float FixedwingMetrics::climb_rate_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.climb_rate_m_s)
  return _internal_climb_rate_m_s();
}
inline void FixedwingMetrics::_internal_set_climb_rate_m_s(float value) {
  
  climb_rate_m_s_ = value;
}
inline void FixedwingMetrics::set_climb_rate_m_s(float value) {
  _internal_set_climb_rate_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.climb_rate_m_s)
}

// -------------------------------------------------------------------

// AccelerationFrd

// float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_forward_m_s2() {
  forward_m_s2_ = 0;
}
inline float AccelerationFrd::_internal_forward_m_s2() const {
  return forward_m_s2_;
}
inline float AccelerationFrd::forward_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AccelerationFrd.forward_m_s2)
  return _internal_forward_m_s2();
}
inline void AccelerationFrd::_internal_set_forward_m_s2(float value) {
  
  forward_m_s2_ = value;
}
inline void AccelerationFrd::set_forward_m_s2(float value) {
  _internal_set_forward_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AccelerationFrd.forward_m_s2)
}

// float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_right_m_s2() {
  right_m_s2_ = 0;
}
inline float AccelerationFrd::_internal_right_m_s2() const {
  return right_m_s2_;
}
inline float AccelerationFrd::right_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AccelerationFrd.right_m_s2)
  return _internal_right_m_s2();
}
inline void AccelerationFrd::_internal_set_right_m_s2(float value) {
  
  right_m_s2_ = value;
}
inline void AccelerationFrd::set_right_m_s2(float value) {
  _internal_set_right_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AccelerationFrd.right_m_s2)
}

// float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_down_m_s2() {
  down_m_s2_ = 0;
}
inline float AccelerationFrd::_internal_down_m_s2() const {
  return down_m_s2_;
}
inline float AccelerationFrd::down_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AccelerationFrd.down_m_s2)
  return _internal_down_m_s2();
}
inline void AccelerationFrd::_internal_set_down_m_s2(float value) {
  
  down_m_s2_ = value;
}
inline void AccelerationFrd::set_down_m_s2(float value) {
  _internal_set_down_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AccelerationFrd.down_m_s2)
}

// -------------------------------------------------------------------

// AngularVelocityFrd

// float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_forward_rad_s() {
  forward_rad_s_ = 0;
}
inline float AngularVelocityFrd::_internal_forward_rad_s() const {
  return forward_rad_s_;
}
inline float AngularVelocityFrd::forward_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityFrd.forward_rad_s)
  return _internal_forward_rad_s();
}
inline void AngularVelocityFrd::_internal_set_forward_rad_s(float value) {
  
  forward_rad_s_ = value;
}
inline void AngularVelocityFrd::set_forward_rad_s(float value) {
  _internal_set_forward_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityFrd.forward_rad_s)
}

// float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_right_rad_s() {
  right_rad_s_ = 0;
}
inline float AngularVelocityFrd::_internal_right_rad_s() const {
  return right_rad_s_;
}
inline float AngularVelocityFrd::right_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityFrd.right_rad_s)
  return _internal_right_rad_s();
}
inline void AngularVelocityFrd::_internal_set_right_rad_s(float value) {
  
  right_rad_s_ = value;
}
inline void AngularVelocityFrd::set_right_rad_s(float value) {
  _internal_set_right_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityFrd.right_rad_s)
}

// float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_down_rad_s() {
  down_rad_s_ = 0;
}
inline float AngularVelocityFrd::_internal_down_rad_s() const {
  return down_rad_s_;
}
inline float AngularVelocityFrd::down_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityFrd.down_rad_s)
  return _internal_down_rad_s();
}
inline void AngularVelocityFrd::_internal_set_down_rad_s(float value) {
  
  down_rad_s_ = value;
}
inline void AngularVelocityFrd::set_down_rad_s(float value) {
  _internal_set_down_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityFrd.down_rad_s)
}

// -------------------------------------------------------------------

// MagneticFieldFrd

// float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_forward_gauss() {
  forward_gauss_ = 0;
}
inline float MagneticFieldFrd::_internal_forward_gauss() const {
  return forward_gauss_;
}
inline float MagneticFieldFrd::forward_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.MagneticFieldFrd.forward_gauss)
  return _internal_forward_gauss();
}
inline void MagneticFieldFrd::_internal_set_forward_gauss(float value) {
  
  forward_gauss_ = value;
}
inline void MagneticFieldFrd::set_forward_gauss(float value) {
  _internal_set_forward_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.MagneticFieldFrd.forward_gauss)
}

// float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_right_gauss() {
  right_gauss_ = 0;
}
inline float MagneticFieldFrd::_internal_right_gauss() const {
  return right_gauss_;
}
inline float MagneticFieldFrd::right_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.MagneticFieldFrd.right_gauss)
  return _internal_right_gauss();
}
inline void MagneticFieldFrd::_internal_set_right_gauss(float value) {
  
  right_gauss_ = value;
}
inline void MagneticFieldFrd::set_right_gauss(float value) {
  _internal_set_right_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.MagneticFieldFrd.right_gauss)
}

// float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_down_gauss() {
  down_gauss_ = 0;
}
inline float MagneticFieldFrd::_internal_down_gauss() const {
  return down_gauss_;
}
inline float MagneticFieldFrd::down_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.MagneticFieldFrd.down_gauss)
  return _internal_down_gauss();
}
inline void MagneticFieldFrd::_internal_set_down_gauss(float value) {
  
  down_gauss_ = value;
}
inline void MagneticFieldFrd::set_down_gauss(float value) {
  _internal_set_down_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.MagneticFieldFrd.down_gauss)
}

// -------------------------------------------------------------------

// Imu

// .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
inline bool Imu::_internal_has_acceleration_frd() const {
  return this != internal_default_instance() && acceleration_frd_ != nullptr;
}
inline bool Imu::has_acceleration_frd() const {
  return _internal_has_acceleration_frd();
}
inline void Imu::clear_acceleration_frd() {
  if (GetArenaForAllocation() == nullptr && acceleration_frd_ != nullptr) {
    delete acceleration_frd_;
  }
  acceleration_frd_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::AccelerationFrd& Imu::_internal_acceleration_frd() const {
  const ::mavsdk::rpc::telemetry_server::AccelerationFrd* p = acceleration_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::AccelerationFrd&>(
      ::mavsdk::rpc::telemetry_server::_AccelerationFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::AccelerationFrd& Imu::acceleration_frd() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
  return _internal_acceleration_frd();
}
inline void Imu::unsafe_arena_set_allocated_acceleration_frd(
    ::mavsdk::rpc::telemetry_server::AccelerationFrd* acceleration_frd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_frd_);
  }
  acceleration_frd_ = acceleration_frd;
  if (acceleration_frd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
}
inline ::mavsdk::rpc::telemetry_server::AccelerationFrd* Imu::release_acceleration_frd() {
  
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* temp = acceleration_frd_;
  acceleration_frd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AccelerationFrd* Imu::unsafe_arena_release_acceleration_frd() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
  
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* temp = acceleration_frd_;
  acceleration_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AccelerationFrd* Imu::_internal_mutable_acceleration_frd() {
  
  if (acceleration_frd_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::AccelerationFrd>(GetArenaForAllocation());
    acceleration_frd_ = p;
  }
  return acceleration_frd_;
}
inline ::mavsdk::rpc::telemetry_server::AccelerationFrd* Imu::mutable_acceleration_frd() {
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* _msg = _internal_mutable_acceleration_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
  return _msg;
}
inline void Imu::set_allocated_acceleration_frd(::mavsdk::rpc::telemetry_server::AccelerationFrd* acceleration_frd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acceleration_frd_;
  }
  if (acceleration_frd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acceleration_frd);
    if (message_arena != submessage_arena) {
      acceleration_frd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration_frd, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_frd_ = acceleration_frd;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
}

// .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
inline bool Imu::_internal_has_angular_velocity_frd() const {
  return this != internal_default_instance() && angular_velocity_frd_ != nullptr;
}
inline bool Imu::has_angular_velocity_frd() const {
  return _internal_has_angular_velocity_frd();
}
inline void Imu::clear_angular_velocity_frd() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_frd_ != nullptr) {
    delete angular_velocity_frd_;
  }
  angular_velocity_frd_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& Imu::_internal_angular_velocity_frd() const {
  const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* p = angular_velocity_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd&>(
      ::mavsdk::rpc::telemetry_server::_AngularVelocityFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& Imu::angular_velocity_frd() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
  return _internal_angular_velocity_frd();
}
inline void Imu::unsafe_arena_set_allocated_angular_velocity_frd(
    ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* angular_velocity_frd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_frd_);
  }
  angular_velocity_frd_ = angular_velocity_frd;
  if (angular_velocity_frd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Imu::release_angular_velocity_frd() {
  
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* temp = angular_velocity_frd_;
  angular_velocity_frd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Imu::unsafe_arena_release_angular_velocity_frd() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
  
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* temp = angular_velocity_frd_;
  angular_velocity_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Imu::_internal_mutable_angular_velocity_frd() {
  
  if (angular_velocity_frd_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::AngularVelocityFrd>(GetArenaForAllocation());
    angular_velocity_frd_ = p;
  }
  return angular_velocity_frd_;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Imu::mutable_angular_velocity_frd() {
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* _msg = _internal_mutable_angular_velocity_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
  return _msg;
}
inline void Imu::set_allocated_angular_velocity_frd(::mavsdk::rpc::telemetry_server::AngularVelocityFrd* angular_velocity_frd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_frd_;
  }
  if (angular_velocity_frd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_velocity_frd);
    if (message_arena != submessage_arena) {
      angular_velocity_frd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_frd, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_frd_ = angular_velocity_frd;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
}

// .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
inline bool Imu::_internal_has_magnetic_field_frd() const {
  return this != internal_default_instance() && magnetic_field_frd_ != nullptr;
}
inline bool Imu::has_magnetic_field_frd() const {
  return _internal_has_magnetic_field_frd();
}
inline void Imu::clear_magnetic_field_frd() {
  if (GetArenaForAllocation() == nullptr && magnetic_field_frd_ != nullptr) {
    delete magnetic_field_frd_;
  }
  magnetic_field_frd_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& Imu::_internal_magnetic_field_frd() const {
  const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* p = magnetic_field_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd&>(
      ::mavsdk::rpc::telemetry_server::_MagneticFieldFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& Imu::magnetic_field_frd() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
  return _internal_magnetic_field_frd();
}
inline void Imu::unsafe_arena_set_allocated_magnetic_field_frd(
    ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* magnetic_field_frd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(magnetic_field_frd_);
  }
  magnetic_field_frd_ = magnetic_field_frd;
  if (magnetic_field_frd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
}
inline ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Imu::release_magnetic_field_frd() {
  
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* temp = magnetic_field_frd_;
  magnetic_field_frd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Imu::unsafe_arena_release_magnetic_field_frd() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
  
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* temp = magnetic_field_frd_;
  magnetic_field_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Imu::_internal_mutable_magnetic_field_frd() {
  
  if (magnetic_field_frd_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry_server::MagneticFieldFrd>(GetArenaForAllocation());
    magnetic_field_frd_ = p;
  }
  return magnetic_field_frd_;
}
inline ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Imu::mutable_magnetic_field_frd() {
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* _msg = _internal_mutable_magnetic_field_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
  return _msg;
}
inline void Imu::set_allocated_magnetic_field_frd(::mavsdk::rpc::telemetry_server::MagneticFieldFrd* magnetic_field_frd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete magnetic_field_frd_;
  }
  if (magnetic_field_frd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(magnetic_field_frd);
    if (message_arena != submessage_arena) {
      magnetic_field_frd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magnetic_field_frd, submessage_arena);
    }
    
  } else {
    
  }
  magnetic_field_frd_ = magnetic_field_frd;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
}

// float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Imu::clear_temperature_degc() {
  temperature_degc_ = 0;
}
inline float Imu::_internal_temperature_degc() const {
  return temperature_degc_;
}
inline float Imu::temperature_degc() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.temperature_degc)
  return _internal_temperature_degc();
}
inline void Imu::_internal_set_temperature_degc(float value) {
  
  temperature_degc_ = value;
}
inline void Imu::set_temperature_degc(float value) {
  _internal_set_temperature_degc(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Imu.temperature_degc)
}

// uint64 timestamp_us = 5;
inline void Imu::clear_timestamp_us() {
  timestamp_us_ = uint64_t{0u};
}
inline uint64_t Imu::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline uint64_t Imu::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.timestamp_us)
  return _internal_timestamp_us();
}
inline void Imu::_internal_set_timestamp_us(uint64_t value) {
  
  timestamp_us_ = value;
}
inline void Imu::set_timestamp_us(uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Imu.timestamp_us)
}

// -------------------------------------------------------------------

// TelemetryServerResult

// .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
inline void TelemetryServerResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result TelemetryServerResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result >(result_);
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result TelemetryServerResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.TelemetryServerResult.result)
  return _internal_result();
}
inline void TelemetryServerResult::_internal_set_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result value) {
  
  result_ = value;
}
inline void TelemetryServerResult::set_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.TelemetryServerResult.result)
}

// string result_str = 2;
inline void TelemetryServerResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& TelemetryServerResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetryServerResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
}
inline std::string* TelemetryServerResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
  return _s;
}
inline const std::string& TelemetryServerResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void TelemetryServerResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* TelemetryServerResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* TelemetryServerResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
  return result_str_.Release();
}
inline void TelemetryServerResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace telemetry_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::telemetry_server::Odometry_MavFrame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry_server::Odometry_MavFrame>() {
  return ::mavsdk::rpc::telemetry_server::Odometry_MavFrame_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result>() {
  return ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry_server::FixType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry_server::FixType>() {
  return ::mavsdk::rpc::telemetry_server::FixType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry_server::VtolState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry_server::VtolState>() {
  return ::mavsdk::rpc::telemetry_server::VtolState_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry_server::StatusTextType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry_server::StatusTextType>() {
  return ::mavsdk::rpc::telemetry_server::StatusTextType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry_server::LandedState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry_server::LandedState>() {
  return ::mavsdk::rpc::telemetry_server::LandedState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_telemetry_5fserver_2ftelemetry_5fserver_2eproto
