// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking_server/tracking_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tracking_5fserver_2ftracking_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tracking_5fserver_2ftracking_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tracking_5fserver_2ftracking_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace tracking_server {
class RespondTrackingOffCommandRequest;
class RespondTrackingOffCommandRequestDefaultTypeInternal;
extern RespondTrackingOffCommandRequestDefaultTypeInternal _RespondTrackingOffCommandRequest_default_instance_;
class RespondTrackingOffCommandResponse;
class RespondTrackingOffCommandResponseDefaultTypeInternal;
extern RespondTrackingOffCommandResponseDefaultTypeInternal _RespondTrackingOffCommandResponse_default_instance_;
class RespondTrackingPointCommandRequest;
class RespondTrackingPointCommandRequestDefaultTypeInternal;
extern RespondTrackingPointCommandRequestDefaultTypeInternal _RespondTrackingPointCommandRequest_default_instance_;
class RespondTrackingPointCommandResponse;
class RespondTrackingPointCommandResponseDefaultTypeInternal;
extern RespondTrackingPointCommandResponseDefaultTypeInternal _RespondTrackingPointCommandResponse_default_instance_;
class RespondTrackingRectangleCommandRequest;
class RespondTrackingRectangleCommandRequestDefaultTypeInternal;
extern RespondTrackingRectangleCommandRequestDefaultTypeInternal _RespondTrackingRectangleCommandRequest_default_instance_;
class RespondTrackingRectangleCommandResponse;
class RespondTrackingRectangleCommandResponseDefaultTypeInternal;
extern RespondTrackingRectangleCommandResponseDefaultTypeInternal _RespondTrackingRectangleCommandResponse_default_instance_;
class SetTrackingOffStatusRequest;
class SetTrackingOffStatusRequestDefaultTypeInternal;
extern SetTrackingOffStatusRequestDefaultTypeInternal _SetTrackingOffStatusRequest_default_instance_;
class SetTrackingOffStatusResponse;
class SetTrackingOffStatusResponseDefaultTypeInternal;
extern SetTrackingOffStatusResponseDefaultTypeInternal _SetTrackingOffStatusResponse_default_instance_;
class SetTrackingPointStatusRequest;
class SetTrackingPointStatusRequestDefaultTypeInternal;
extern SetTrackingPointStatusRequestDefaultTypeInternal _SetTrackingPointStatusRequest_default_instance_;
class SetTrackingPointStatusResponse;
class SetTrackingPointStatusResponseDefaultTypeInternal;
extern SetTrackingPointStatusResponseDefaultTypeInternal _SetTrackingPointStatusResponse_default_instance_;
class SetTrackingRectangleStatusRequest;
class SetTrackingRectangleStatusRequestDefaultTypeInternal;
extern SetTrackingRectangleStatusRequestDefaultTypeInternal _SetTrackingRectangleStatusRequest_default_instance_;
class SetTrackingRectangleStatusResponse;
class SetTrackingRectangleStatusResponseDefaultTypeInternal;
extern SetTrackingRectangleStatusResponseDefaultTypeInternal _SetTrackingRectangleStatusResponse_default_instance_;
class SubscribeTrackingOffCommandRequest;
class SubscribeTrackingOffCommandRequestDefaultTypeInternal;
extern SubscribeTrackingOffCommandRequestDefaultTypeInternal _SubscribeTrackingOffCommandRequest_default_instance_;
class SubscribeTrackingPointCommandRequest;
class SubscribeTrackingPointCommandRequestDefaultTypeInternal;
extern SubscribeTrackingPointCommandRequestDefaultTypeInternal _SubscribeTrackingPointCommandRequest_default_instance_;
class SubscribeTrackingRectangleCommandRequest;
class SubscribeTrackingRectangleCommandRequestDefaultTypeInternal;
extern SubscribeTrackingRectangleCommandRequestDefaultTypeInternal _SubscribeTrackingRectangleCommandRequest_default_instance_;
class TrackPoint;
class TrackPointDefaultTypeInternal;
extern TrackPointDefaultTypeInternal _TrackPoint_default_instance_;
class TrackRectangle;
class TrackRectangleDefaultTypeInternal;
extern TrackRectangleDefaultTypeInternal _TrackRectangle_default_instance_;
class TrackingOffCommandResponse;
class TrackingOffCommandResponseDefaultTypeInternal;
extern TrackingOffCommandResponseDefaultTypeInternal _TrackingOffCommandResponse_default_instance_;
class TrackingPointCommandResponse;
class TrackingPointCommandResponseDefaultTypeInternal;
extern TrackingPointCommandResponseDefaultTypeInternal _TrackingPointCommandResponse_default_instance_;
class TrackingRectangleCommandResponse;
class TrackingRectangleCommandResponseDefaultTypeInternal;
extern TrackingRectangleCommandResponseDefaultTypeInternal _TrackingRectangleCommandResponse_default_instance_;
class TrackingServerResult;
class TrackingServerResultDefaultTypeInternal;
extern TrackingServerResultDefaultTypeInternal _TrackingServerResult_default_instance_;
}  // namespace tracking_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest>(Arena*);
template<> ::mavsdk::rpc::tracking_server::TrackPoint* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackPoint>(Arena*);
template<> ::mavsdk::rpc::tracking_server::TrackRectangle* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackRectangle>(Arena*);
template<> ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>(Arena*);
template<> ::mavsdk::rpc::tracking_server::TrackingServerResult* Arena::CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackingServerResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace tracking_server {

enum TrackingServerResult_Result : int {
  TrackingServerResult_Result_RESULT_UNKNOWN = 0,
  TrackingServerResult_Result_RESULT_SUCCESS = 1,
  TrackingServerResult_Result_RESULT_NO_SYSTEM = 2,
  TrackingServerResult_Result_RESULT_CONNECTION_ERROR = 3,
  TrackingServerResult_Result_TrackingServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrackingServerResult_Result_TrackingServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrackingServerResult_Result_IsValid(int value);
constexpr TrackingServerResult_Result TrackingServerResult_Result_Result_MIN = TrackingServerResult_Result_RESULT_UNKNOWN;
constexpr TrackingServerResult_Result TrackingServerResult_Result_Result_MAX = TrackingServerResult_Result_RESULT_CONNECTION_ERROR;
constexpr int TrackingServerResult_Result_Result_ARRAYSIZE = TrackingServerResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingServerResult_Result_descriptor();
template<typename T>
inline const std::string& TrackingServerResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackingServerResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackingServerResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackingServerResult_Result_descriptor(), enum_t_value);
}
inline bool TrackingServerResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackingServerResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackingServerResult_Result>(
    TrackingServerResult_Result_descriptor(), name, value);
}
enum CommandAnswer : int {
  COMMAND_ANSWER_ACCEPTED = 0,
  COMMAND_ANSWER_TEMPORARILY_REJECTED = 1,
  COMMAND_ANSWER_DENIED = 2,
  COMMAND_ANSWER_UNSUPPORTED = 3,
  COMMAND_ANSWER_FAILED = 4,
  CommandAnswer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandAnswer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandAnswer_IsValid(int value);
constexpr CommandAnswer CommandAnswer_MIN = COMMAND_ANSWER_ACCEPTED;
constexpr CommandAnswer CommandAnswer_MAX = COMMAND_ANSWER_FAILED;
constexpr int CommandAnswer_ARRAYSIZE = CommandAnswer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandAnswer_descriptor();
template<typename T>
inline const std::string& CommandAnswer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandAnswer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandAnswer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandAnswer_descriptor(), enum_t_value);
}
inline bool CommandAnswer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandAnswer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandAnswer>(
    CommandAnswer_descriptor(), name, value);
}
// ===================================================================

class SetTrackingPointStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SetTrackingPointStatusRequest) */ {
 public:
  inline SetTrackingPointStatusRequest() : SetTrackingPointStatusRequest(nullptr) {}
  virtual ~SetTrackingPointStatusRequest();

  SetTrackingPointStatusRequest(const SetTrackingPointStatusRequest& from);
  SetTrackingPointStatusRequest(SetTrackingPointStatusRequest&& from) noexcept
    : SetTrackingPointStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetTrackingPointStatusRequest& operator=(const SetTrackingPointStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrackingPointStatusRequest& operator=(SetTrackingPointStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTrackingPointStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTrackingPointStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetTrackingPointStatusRequest*>(
               &_SetTrackingPointStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetTrackingPointStatusRequest& a, SetTrackingPointStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrackingPointStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrackingPointStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTrackingPointStatusRequest* New() const final {
    return CreateMaybeMessage<SetTrackingPointStatusRequest>(nullptr);
  }

  SetTrackingPointStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTrackingPointStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTrackingPointStatusRequest& from);
  void MergeFrom(const SetTrackingPointStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrackingPointStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SetTrackingPointStatusRequest";
  }
  protected:
  explicit SetTrackingPointStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedPointFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.TrackPoint tracked_point = 1;
  bool has_tracked_point() const;
  private:
  bool _internal_has_tracked_point() const;
  public:
  void clear_tracked_point();
  const ::mavsdk::rpc::tracking_server::TrackPoint& tracked_point() const;
  ::mavsdk::rpc::tracking_server::TrackPoint* release_tracked_point();
  ::mavsdk::rpc::tracking_server::TrackPoint* mutable_tracked_point();
  void set_allocated_tracked_point(::mavsdk::rpc::tracking_server::TrackPoint* tracked_point);
  private:
  const ::mavsdk::rpc::tracking_server::TrackPoint& _internal_tracked_point() const;
  ::mavsdk::rpc::tracking_server::TrackPoint* _internal_mutable_tracked_point();
  public:
  void unsafe_arena_set_allocated_tracked_point(
      ::mavsdk::rpc::tracking_server::TrackPoint* tracked_point);
  ::mavsdk::rpc::tracking_server::TrackPoint* unsafe_arena_release_tracked_point();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SetTrackingPointStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::tracking_server::TrackPoint* tracked_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetTrackingPointStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SetTrackingPointStatusResponse) */ {
 public:
  inline SetTrackingPointStatusResponse() : SetTrackingPointStatusResponse(nullptr) {}
  virtual ~SetTrackingPointStatusResponse();

  SetTrackingPointStatusResponse(const SetTrackingPointStatusResponse& from);
  SetTrackingPointStatusResponse(SetTrackingPointStatusResponse&& from) noexcept
    : SetTrackingPointStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetTrackingPointStatusResponse& operator=(const SetTrackingPointStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrackingPointStatusResponse& operator=(SetTrackingPointStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTrackingPointStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTrackingPointStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetTrackingPointStatusResponse*>(
               &_SetTrackingPointStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetTrackingPointStatusResponse& a, SetTrackingPointStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrackingPointStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrackingPointStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTrackingPointStatusResponse* New() const final {
    return CreateMaybeMessage<SetTrackingPointStatusResponse>(nullptr);
  }

  SetTrackingPointStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTrackingPointStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTrackingPointStatusResponse& from);
  void MergeFrom(const SetTrackingPointStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrackingPointStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SetTrackingPointStatusResponse";
  }
  protected:
  explicit SetTrackingPointStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SetTrackingPointStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetTrackingRectangleStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusRequest) */ {
 public:
  inline SetTrackingRectangleStatusRequest() : SetTrackingRectangleStatusRequest(nullptr) {}
  virtual ~SetTrackingRectangleStatusRequest();

  SetTrackingRectangleStatusRequest(const SetTrackingRectangleStatusRequest& from);
  SetTrackingRectangleStatusRequest(SetTrackingRectangleStatusRequest&& from) noexcept
    : SetTrackingRectangleStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetTrackingRectangleStatusRequest& operator=(const SetTrackingRectangleStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrackingRectangleStatusRequest& operator=(SetTrackingRectangleStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTrackingRectangleStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTrackingRectangleStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetTrackingRectangleStatusRequest*>(
               &_SetTrackingRectangleStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetTrackingRectangleStatusRequest& a, SetTrackingRectangleStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrackingRectangleStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrackingRectangleStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTrackingRectangleStatusRequest* New() const final {
    return CreateMaybeMessage<SetTrackingRectangleStatusRequest>(nullptr);
  }

  SetTrackingRectangleStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTrackingRectangleStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTrackingRectangleStatusRequest& from);
  void MergeFrom(const SetTrackingRectangleStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrackingRectangleStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SetTrackingRectangleStatusRequest";
  }
  protected:
  explicit SetTrackingRectangleStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedRectangleFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.TrackRectangle tracked_rectangle = 1;
  bool has_tracked_rectangle() const;
  private:
  bool _internal_has_tracked_rectangle() const;
  public:
  void clear_tracked_rectangle();
  const ::mavsdk::rpc::tracking_server::TrackRectangle& tracked_rectangle() const;
  ::mavsdk::rpc::tracking_server::TrackRectangle* release_tracked_rectangle();
  ::mavsdk::rpc::tracking_server::TrackRectangle* mutable_tracked_rectangle();
  void set_allocated_tracked_rectangle(::mavsdk::rpc::tracking_server::TrackRectangle* tracked_rectangle);
  private:
  const ::mavsdk::rpc::tracking_server::TrackRectangle& _internal_tracked_rectangle() const;
  ::mavsdk::rpc::tracking_server::TrackRectangle* _internal_mutable_tracked_rectangle();
  public:
  void unsafe_arena_set_allocated_tracked_rectangle(
      ::mavsdk::rpc::tracking_server::TrackRectangle* tracked_rectangle);
  ::mavsdk::rpc::tracking_server::TrackRectangle* unsafe_arena_release_tracked_rectangle();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::tracking_server::TrackRectangle* tracked_rectangle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetTrackingRectangleStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusResponse) */ {
 public:
  inline SetTrackingRectangleStatusResponse() : SetTrackingRectangleStatusResponse(nullptr) {}
  virtual ~SetTrackingRectangleStatusResponse();

  SetTrackingRectangleStatusResponse(const SetTrackingRectangleStatusResponse& from);
  SetTrackingRectangleStatusResponse(SetTrackingRectangleStatusResponse&& from) noexcept
    : SetTrackingRectangleStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetTrackingRectangleStatusResponse& operator=(const SetTrackingRectangleStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrackingRectangleStatusResponse& operator=(SetTrackingRectangleStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTrackingRectangleStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTrackingRectangleStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetTrackingRectangleStatusResponse*>(
               &_SetTrackingRectangleStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetTrackingRectangleStatusResponse& a, SetTrackingRectangleStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrackingRectangleStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrackingRectangleStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTrackingRectangleStatusResponse* New() const final {
    return CreateMaybeMessage<SetTrackingRectangleStatusResponse>(nullptr);
  }

  SetTrackingRectangleStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTrackingRectangleStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTrackingRectangleStatusResponse& from);
  void MergeFrom(const SetTrackingRectangleStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrackingRectangleStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SetTrackingRectangleStatusResponse";
  }
  protected:
  explicit SetTrackingRectangleStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetTrackingOffStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SetTrackingOffStatusRequest) */ {
 public:
  inline SetTrackingOffStatusRequest() : SetTrackingOffStatusRequest(nullptr) {}
  virtual ~SetTrackingOffStatusRequest();

  SetTrackingOffStatusRequest(const SetTrackingOffStatusRequest& from);
  SetTrackingOffStatusRequest(SetTrackingOffStatusRequest&& from) noexcept
    : SetTrackingOffStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetTrackingOffStatusRequest& operator=(const SetTrackingOffStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrackingOffStatusRequest& operator=(SetTrackingOffStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTrackingOffStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTrackingOffStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetTrackingOffStatusRequest*>(
               &_SetTrackingOffStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetTrackingOffStatusRequest& a, SetTrackingOffStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrackingOffStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrackingOffStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTrackingOffStatusRequest* New() const final {
    return CreateMaybeMessage<SetTrackingOffStatusRequest>(nullptr);
  }

  SetTrackingOffStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTrackingOffStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTrackingOffStatusRequest& from);
  void MergeFrom(const SetTrackingOffStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrackingOffStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SetTrackingOffStatusRequest";
  }
  protected:
  explicit SetTrackingOffStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SetTrackingOffStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetTrackingOffStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SetTrackingOffStatusResponse) */ {
 public:
  inline SetTrackingOffStatusResponse() : SetTrackingOffStatusResponse(nullptr) {}
  virtual ~SetTrackingOffStatusResponse();

  SetTrackingOffStatusResponse(const SetTrackingOffStatusResponse& from);
  SetTrackingOffStatusResponse(SetTrackingOffStatusResponse&& from) noexcept
    : SetTrackingOffStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetTrackingOffStatusResponse& operator=(const SetTrackingOffStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrackingOffStatusResponse& operator=(SetTrackingOffStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTrackingOffStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTrackingOffStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetTrackingOffStatusResponse*>(
               &_SetTrackingOffStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetTrackingOffStatusResponse& a, SetTrackingOffStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrackingOffStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrackingOffStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTrackingOffStatusResponse* New() const final {
    return CreateMaybeMessage<SetTrackingOffStatusResponse>(nullptr);
  }

  SetTrackingOffStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTrackingOffStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTrackingOffStatusResponse& from);
  void MergeFrom(const SetTrackingOffStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrackingOffStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SetTrackingOffStatusResponse";
  }
  protected:
  explicit SetTrackingOffStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SetTrackingOffStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTrackingPointCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SubscribeTrackingPointCommandRequest) */ {
 public:
  inline SubscribeTrackingPointCommandRequest() : SubscribeTrackingPointCommandRequest(nullptr) {}
  virtual ~SubscribeTrackingPointCommandRequest();

  SubscribeTrackingPointCommandRequest(const SubscribeTrackingPointCommandRequest& from);
  SubscribeTrackingPointCommandRequest(SubscribeTrackingPointCommandRequest&& from) noexcept
    : SubscribeTrackingPointCommandRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeTrackingPointCommandRequest& operator=(const SubscribeTrackingPointCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTrackingPointCommandRequest& operator=(SubscribeTrackingPointCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTrackingPointCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTrackingPointCommandRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeTrackingPointCommandRequest*>(
               &_SubscribeTrackingPointCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeTrackingPointCommandRequest& a, SubscribeTrackingPointCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTrackingPointCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTrackingPointCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTrackingPointCommandRequest* New() const final {
    return CreateMaybeMessage<SubscribeTrackingPointCommandRequest>(nullptr);
  }

  SubscribeTrackingPointCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTrackingPointCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTrackingPointCommandRequest& from);
  void MergeFrom(const SubscribeTrackingPointCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTrackingPointCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SubscribeTrackingPointCommandRequest";
  }
  protected:
  explicit SubscribeTrackingPointCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SubscribeTrackingPointCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrackingPointCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.TrackingPointCommandResponse) */ {
 public:
  inline TrackingPointCommandResponse() : TrackingPointCommandResponse(nullptr) {}
  virtual ~TrackingPointCommandResponse();

  TrackingPointCommandResponse(const TrackingPointCommandResponse& from);
  TrackingPointCommandResponse(TrackingPointCommandResponse&& from) noexcept
    : TrackingPointCommandResponse() {
    *this = ::std::move(from);
  }

  inline TrackingPointCommandResponse& operator=(const TrackingPointCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingPointCommandResponse& operator=(TrackingPointCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingPointCommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingPointCommandResponse* internal_default_instance() {
    return reinterpret_cast<const TrackingPointCommandResponse*>(
               &_TrackingPointCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrackingPointCommandResponse& a, TrackingPointCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingPointCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingPointCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingPointCommandResponse* New() const final {
    return CreateMaybeMessage<TrackingPointCommandResponse>(nullptr);
  }

  TrackingPointCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingPointCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingPointCommandResponse& from);
  void MergeFrom(const TrackingPointCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingPointCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.TrackingPointCommandResponse";
  }
  protected:
  explicit TrackingPointCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackPointFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.TrackPoint track_point = 1;
  bool has_track_point() const;
  private:
  bool _internal_has_track_point() const;
  public:
  void clear_track_point();
  const ::mavsdk::rpc::tracking_server::TrackPoint& track_point() const;
  ::mavsdk::rpc::tracking_server::TrackPoint* release_track_point();
  ::mavsdk::rpc::tracking_server::TrackPoint* mutable_track_point();
  void set_allocated_track_point(::mavsdk::rpc::tracking_server::TrackPoint* track_point);
  private:
  const ::mavsdk::rpc::tracking_server::TrackPoint& _internal_track_point() const;
  ::mavsdk::rpc::tracking_server::TrackPoint* _internal_mutable_track_point();
  public:
  void unsafe_arena_set_allocated_track_point(
      ::mavsdk::rpc::tracking_server::TrackPoint* track_point);
  ::mavsdk::rpc::tracking_server::TrackPoint* unsafe_arena_release_track_point();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.TrackingPointCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::tracking_server::TrackPoint* track_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTrackingRectangleCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SubscribeTrackingRectangleCommandRequest) */ {
 public:
  inline SubscribeTrackingRectangleCommandRequest() : SubscribeTrackingRectangleCommandRequest(nullptr) {}
  virtual ~SubscribeTrackingRectangleCommandRequest();

  SubscribeTrackingRectangleCommandRequest(const SubscribeTrackingRectangleCommandRequest& from);
  SubscribeTrackingRectangleCommandRequest(SubscribeTrackingRectangleCommandRequest&& from) noexcept
    : SubscribeTrackingRectangleCommandRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeTrackingRectangleCommandRequest& operator=(const SubscribeTrackingRectangleCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTrackingRectangleCommandRequest& operator=(SubscribeTrackingRectangleCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTrackingRectangleCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTrackingRectangleCommandRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeTrackingRectangleCommandRequest*>(
               &_SubscribeTrackingRectangleCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubscribeTrackingRectangleCommandRequest& a, SubscribeTrackingRectangleCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTrackingRectangleCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTrackingRectangleCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTrackingRectangleCommandRequest* New() const final {
    return CreateMaybeMessage<SubscribeTrackingRectangleCommandRequest>(nullptr);
  }

  SubscribeTrackingRectangleCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTrackingRectangleCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTrackingRectangleCommandRequest& from);
  void MergeFrom(const SubscribeTrackingRectangleCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTrackingRectangleCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SubscribeTrackingRectangleCommandRequest";
  }
  protected:
  explicit SubscribeTrackingRectangleCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SubscribeTrackingRectangleCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrackingRectangleCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.TrackingRectangleCommandResponse) */ {
 public:
  inline TrackingRectangleCommandResponse() : TrackingRectangleCommandResponse(nullptr) {}
  virtual ~TrackingRectangleCommandResponse();

  TrackingRectangleCommandResponse(const TrackingRectangleCommandResponse& from);
  TrackingRectangleCommandResponse(TrackingRectangleCommandResponse&& from) noexcept
    : TrackingRectangleCommandResponse() {
    *this = ::std::move(from);
  }

  inline TrackingRectangleCommandResponse& operator=(const TrackingRectangleCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingRectangleCommandResponse& operator=(TrackingRectangleCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingRectangleCommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingRectangleCommandResponse* internal_default_instance() {
    return reinterpret_cast<const TrackingRectangleCommandResponse*>(
               &_TrackingRectangleCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TrackingRectangleCommandResponse& a, TrackingRectangleCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingRectangleCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingRectangleCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingRectangleCommandResponse* New() const final {
    return CreateMaybeMessage<TrackingRectangleCommandResponse>(nullptr);
  }

  TrackingRectangleCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingRectangleCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingRectangleCommandResponse& from);
  void MergeFrom(const TrackingRectangleCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingRectangleCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.TrackingRectangleCommandResponse";
  }
  protected:
  explicit TrackingRectangleCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackRectangleFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.TrackRectangle track_rectangle = 1;
  bool has_track_rectangle() const;
  private:
  bool _internal_has_track_rectangle() const;
  public:
  void clear_track_rectangle();
  const ::mavsdk::rpc::tracking_server::TrackRectangle& track_rectangle() const;
  ::mavsdk::rpc::tracking_server::TrackRectangle* release_track_rectangle();
  ::mavsdk::rpc::tracking_server::TrackRectangle* mutable_track_rectangle();
  void set_allocated_track_rectangle(::mavsdk::rpc::tracking_server::TrackRectangle* track_rectangle);
  private:
  const ::mavsdk::rpc::tracking_server::TrackRectangle& _internal_track_rectangle() const;
  ::mavsdk::rpc::tracking_server::TrackRectangle* _internal_mutable_track_rectangle();
  public:
  void unsafe_arena_set_allocated_track_rectangle(
      ::mavsdk::rpc::tracking_server::TrackRectangle* track_rectangle);
  ::mavsdk::rpc::tracking_server::TrackRectangle* unsafe_arena_release_track_rectangle();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.TrackingRectangleCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::tracking_server::TrackRectangle* track_rectangle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTrackingOffCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.SubscribeTrackingOffCommandRequest) */ {
 public:
  inline SubscribeTrackingOffCommandRequest() : SubscribeTrackingOffCommandRequest(nullptr) {}
  virtual ~SubscribeTrackingOffCommandRequest();

  SubscribeTrackingOffCommandRequest(const SubscribeTrackingOffCommandRequest& from);
  SubscribeTrackingOffCommandRequest(SubscribeTrackingOffCommandRequest&& from) noexcept
    : SubscribeTrackingOffCommandRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeTrackingOffCommandRequest& operator=(const SubscribeTrackingOffCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTrackingOffCommandRequest& operator=(SubscribeTrackingOffCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTrackingOffCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTrackingOffCommandRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeTrackingOffCommandRequest*>(
               &_SubscribeTrackingOffCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubscribeTrackingOffCommandRequest& a, SubscribeTrackingOffCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTrackingOffCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTrackingOffCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTrackingOffCommandRequest* New() const final {
    return CreateMaybeMessage<SubscribeTrackingOffCommandRequest>(nullptr);
  }

  SubscribeTrackingOffCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTrackingOffCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTrackingOffCommandRequest& from);
  void MergeFrom(const SubscribeTrackingOffCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTrackingOffCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.SubscribeTrackingOffCommandRequest";
  }
  protected:
  explicit SubscribeTrackingOffCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.SubscribeTrackingOffCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrackingOffCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.TrackingOffCommandResponse) */ {
 public:
  inline TrackingOffCommandResponse() : TrackingOffCommandResponse(nullptr) {}
  virtual ~TrackingOffCommandResponse();

  TrackingOffCommandResponse(const TrackingOffCommandResponse& from);
  TrackingOffCommandResponse(TrackingOffCommandResponse&& from) noexcept
    : TrackingOffCommandResponse() {
    *this = ::std::move(from);
  }

  inline TrackingOffCommandResponse& operator=(const TrackingOffCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingOffCommandResponse& operator=(TrackingOffCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingOffCommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingOffCommandResponse* internal_default_instance() {
    return reinterpret_cast<const TrackingOffCommandResponse*>(
               &_TrackingOffCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TrackingOffCommandResponse& a, TrackingOffCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingOffCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingOffCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingOffCommandResponse* New() const final {
    return CreateMaybeMessage<TrackingOffCommandResponse>(nullptr);
  }

  TrackingOffCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingOffCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingOffCommandResponse& from);
  void MergeFrom(const TrackingOffCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingOffCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.TrackingOffCommandResponse";
  }
  protected:
  explicit TrackingOffCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDummyFieldNumber = 1,
  };
  // int32 dummy = 1;
  void clear_dummy();
  ::PROTOBUF_NAMESPACE_ID::int32 dummy() const;
  void set_dummy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dummy() const;
  void _internal_set_dummy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.TrackingOffCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 dummy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondTrackingPointCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.RespondTrackingPointCommandRequest) */ {
 public:
  inline RespondTrackingPointCommandRequest() : RespondTrackingPointCommandRequest(nullptr) {}
  virtual ~RespondTrackingPointCommandRequest();

  RespondTrackingPointCommandRequest(const RespondTrackingPointCommandRequest& from);
  RespondTrackingPointCommandRequest(RespondTrackingPointCommandRequest&& from) noexcept
    : RespondTrackingPointCommandRequest() {
    *this = ::std::move(from);
  }

  inline RespondTrackingPointCommandRequest& operator=(const RespondTrackingPointCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTrackingPointCommandRequest& operator=(RespondTrackingPointCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespondTrackingPointCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespondTrackingPointCommandRequest* internal_default_instance() {
    return reinterpret_cast<const RespondTrackingPointCommandRequest*>(
               &_RespondTrackingPointCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RespondTrackingPointCommandRequest& a, RespondTrackingPointCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTrackingPointCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTrackingPointCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespondTrackingPointCommandRequest* New() const final {
    return CreateMaybeMessage<RespondTrackingPointCommandRequest>(nullptr);
  }

  RespondTrackingPointCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespondTrackingPointCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespondTrackingPointCommandRequest& from);
  void MergeFrom(const RespondTrackingPointCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondTrackingPointCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.RespondTrackingPointCommandRequest";
  }
  protected:
  explicit RespondTrackingPointCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandAnswerFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.CommandAnswer command_answer = 1;
  void clear_command_answer();
  ::mavsdk::rpc::tracking_server::CommandAnswer command_answer() const;
  void set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value);
  private:
  ::mavsdk::rpc::tracking_server::CommandAnswer _internal_command_answer() const;
  void _internal_set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.RespondTrackingPointCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int command_answer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondTrackingPointCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.RespondTrackingPointCommandResponse) */ {
 public:
  inline RespondTrackingPointCommandResponse() : RespondTrackingPointCommandResponse(nullptr) {}
  virtual ~RespondTrackingPointCommandResponse();

  RespondTrackingPointCommandResponse(const RespondTrackingPointCommandResponse& from);
  RespondTrackingPointCommandResponse(RespondTrackingPointCommandResponse&& from) noexcept
    : RespondTrackingPointCommandResponse() {
    *this = ::std::move(from);
  }

  inline RespondTrackingPointCommandResponse& operator=(const RespondTrackingPointCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTrackingPointCommandResponse& operator=(RespondTrackingPointCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespondTrackingPointCommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespondTrackingPointCommandResponse* internal_default_instance() {
    return reinterpret_cast<const RespondTrackingPointCommandResponse*>(
               &_RespondTrackingPointCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RespondTrackingPointCommandResponse& a, RespondTrackingPointCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTrackingPointCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTrackingPointCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespondTrackingPointCommandResponse* New() const final {
    return CreateMaybeMessage<RespondTrackingPointCommandResponse>(nullptr);
  }

  RespondTrackingPointCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespondTrackingPointCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespondTrackingPointCommandResponse& from);
  void MergeFrom(const RespondTrackingPointCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondTrackingPointCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.RespondTrackingPointCommandResponse";
  }
  protected:
  explicit RespondTrackingPointCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.TrackingServerResult tracking_server_result = 1;
  bool has_tracking_server_result() const;
  private:
  bool _internal_has_tracking_server_result() const;
  public:
  void clear_tracking_server_result();
  const ::mavsdk::rpc::tracking_server::TrackingServerResult& tracking_server_result() const;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* release_tracking_server_result();
  ::mavsdk::rpc::tracking_server::TrackingServerResult* mutable_tracking_server_result();
  void set_allocated_tracking_server_result(::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result);
  private:
  const ::mavsdk::rpc::tracking_server::TrackingServerResult& _internal_tracking_server_result() const;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* _internal_mutable_tracking_server_result();
  public:
  void unsafe_arena_set_allocated_tracking_server_result(
      ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result);
  ::mavsdk::rpc::tracking_server::TrackingServerResult* unsafe_arena_release_tracking_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.RespondTrackingPointCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondTrackingRectangleCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandRequest) */ {
 public:
  inline RespondTrackingRectangleCommandRequest() : RespondTrackingRectangleCommandRequest(nullptr) {}
  virtual ~RespondTrackingRectangleCommandRequest();

  RespondTrackingRectangleCommandRequest(const RespondTrackingRectangleCommandRequest& from);
  RespondTrackingRectangleCommandRequest(RespondTrackingRectangleCommandRequest&& from) noexcept
    : RespondTrackingRectangleCommandRequest() {
    *this = ::std::move(from);
  }

  inline RespondTrackingRectangleCommandRequest& operator=(const RespondTrackingRectangleCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTrackingRectangleCommandRequest& operator=(RespondTrackingRectangleCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespondTrackingRectangleCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespondTrackingRectangleCommandRequest* internal_default_instance() {
    return reinterpret_cast<const RespondTrackingRectangleCommandRequest*>(
               &_RespondTrackingRectangleCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RespondTrackingRectangleCommandRequest& a, RespondTrackingRectangleCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTrackingRectangleCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTrackingRectangleCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespondTrackingRectangleCommandRequest* New() const final {
    return CreateMaybeMessage<RespondTrackingRectangleCommandRequest>(nullptr);
  }

  RespondTrackingRectangleCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespondTrackingRectangleCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespondTrackingRectangleCommandRequest& from);
  void MergeFrom(const RespondTrackingRectangleCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondTrackingRectangleCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandRequest";
  }
  protected:
  explicit RespondTrackingRectangleCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandAnswerFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.CommandAnswer command_answer = 1;
  void clear_command_answer();
  ::mavsdk::rpc::tracking_server::CommandAnswer command_answer() const;
  void set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value);
  private:
  ::mavsdk::rpc::tracking_server::CommandAnswer _internal_command_answer() const;
  void _internal_set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int command_answer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondTrackingRectangleCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandResponse) */ {
 public:
  inline RespondTrackingRectangleCommandResponse() : RespondTrackingRectangleCommandResponse(nullptr) {}
  virtual ~RespondTrackingRectangleCommandResponse();

  RespondTrackingRectangleCommandResponse(const RespondTrackingRectangleCommandResponse& from);
  RespondTrackingRectangleCommandResponse(RespondTrackingRectangleCommandResponse&& from) noexcept
    : RespondTrackingRectangleCommandResponse() {
    *this = ::std::move(from);
  }

  inline RespondTrackingRectangleCommandResponse& operator=(const RespondTrackingRectangleCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTrackingRectangleCommandResponse& operator=(RespondTrackingRectangleCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespondTrackingRectangleCommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespondTrackingRectangleCommandResponse* internal_default_instance() {
    return reinterpret_cast<const RespondTrackingRectangleCommandResponse*>(
               &_RespondTrackingRectangleCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RespondTrackingRectangleCommandResponse& a, RespondTrackingRectangleCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTrackingRectangleCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTrackingRectangleCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespondTrackingRectangleCommandResponse* New() const final {
    return CreateMaybeMessage<RespondTrackingRectangleCommandResponse>(nullptr);
  }

  RespondTrackingRectangleCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespondTrackingRectangleCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespondTrackingRectangleCommandResponse& from);
  void MergeFrom(const RespondTrackingRectangleCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondTrackingRectangleCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandResponse";
  }
  protected:
  explicit RespondTrackingRectangleCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.TrackingServerResult tracking_server_result = 1;
  bool has_tracking_server_result() const;
  private:
  bool _internal_has_tracking_server_result() const;
  public:
  void clear_tracking_server_result();
  const ::mavsdk::rpc::tracking_server::TrackingServerResult& tracking_server_result() const;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* release_tracking_server_result();
  ::mavsdk::rpc::tracking_server::TrackingServerResult* mutable_tracking_server_result();
  void set_allocated_tracking_server_result(::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result);
  private:
  const ::mavsdk::rpc::tracking_server::TrackingServerResult& _internal_tracking_server_result() const;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* _internal_mutable_tracking_server_result();
  public:
  void unsafe_arena_set_allocated_tracking_server_result(
      ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result);
  ::mavsdk::rpc::tracking_server::TrackingServerResult* unsafe_arena_release_tracking_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondTrackingOffCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.RespondTrackingOffCommandRequest) */ {
 public:
  inline RespondTrackingOffCommandRequest() : RespondTrackingOffCommandRequest(nullptr) {}
  virtual ~RespondTrackingOffCommandRequest();

  RespondTrackingOffCommandRequest(const RespondTrackingOffCommandRequest& from);
  RespondTrackingOffCommandRequest(RespondTrackingOffCommandRequest&& from) noexcept
    : RespondTrackingOffCommandRequest() {
    *this = ::std::move(from);
  }

  inline RespondTrackingOffCommandRequest& operator=(const RespondTrackingOffCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTrackingOffCommandRequest& operator=(RespondTrackingOffCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespondTrackingOffCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespondTrackingOffCommandRequest* internal_default_instance() {
    return reinterpret_cast<const RespondTrackingOffCommandRequest*>(
               &_RespondTrackingOffCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RespondTrackingOffCommandRequest& a, RespondTrackingOffCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTrackingOffCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTrackingOffCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespondTrackingOffCommandRequest* New() const final {
    return CreateMaybeMessage<RespondTrackingOffCommandRequest>(nullptr);
  }

  RespondTrackingOffCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespondTrackingOffCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespondTrackingOffCommandRequest& from);
  void MergeFrom(const RespondTrackingOffCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondTrackingOffCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.RespondTrackingOffCommandRequest";
  }
  protected:
  explicit RespondTrackingOffCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandAnswerFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.CommandAnswer command_answer = 1;
  void clear_command_answer();
  ::mavsdk::rpc::tracking_server::CommandAnswer command_answer() const;
  void set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value);
  private:
  ::mavsdk::rpc::tracking_server::CommandAnswer _internal_command_answer() const;
  void _internal_set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.RespondTrackingOffCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int command_answer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RespondTrackingOffCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.RespondTrackingOffCommandResponse) */ {
 public:
  inline RespondTrackingOffCommandResponse() : RespondTrackingOffCommandResponse(nullptr) {}
  virtual ~RespondTrackingOffCommandResponse();

  RespondTrackingOffCommandResponse(const RespondTrackingOffCommandResponse& from);
  RespondTrackingOffCommandResponse(RespondTrackingOffCommandResponse&& from) noexcept
    : RespondTrackingOffCommandResponse() {
    *this = ::std::move(from);
  }

  inline RespondTrackingOffCommandResponse& operator=(const RespondTrackingOffCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTrackingOffCommandResponse& operator=(RespondTrackingOffCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespondTrackingOffCommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespondTrackingOffCommandResponse* internal_default_instance() {
    return reinterpret_cast<const RespondTrackingOffCommandResponse*>(
               &_RespondTrackingOffCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RespondTrackingOffCommandResponse& a, RespondTrackingOffCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTrackingOffCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTrackingOffCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespondTrackingOffCommandResponse* New() const final {
    return CreateMaybeMessage<RespondTrackingOffCommandResponse>(nullptr);
  }

  RespondTrackingOffCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespondTrackingOffCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespondTrackingOffCommandResponse& from);
  void MergeFrom(const RespondTrackingOffCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespondTrackingOffCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.RespondTrackingOffCommandResponse";
  }
  protected:
  explicit RespondTrackingOffCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.tracking_server.TrackingServerResult tracking_server_result = 1;
  bool has_tracking_server_result() const;
  private:
  bool _internal_has_tracking_server_result() const;
  public:
  void clear_tracking_server_result();
  const ::mavsdk::rpc::tracking_server::TrackingServerResult& tracking_server_result() const;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* release_tracking_server_result();
  ::mavsdk::rpc::tracking_server::TrackingServerResult* mutable_tracking_server_result();
  void set_allocated_tracking_server_result(::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result);
  private:
  const ::mavsdk::rpc::tracking_server::TrackingServerResult& _internal_tracking_server_result() const;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* _internal_mutable_tracking_server_result();
  public:
  void unsafe_arena_set_allocated_tracking_server_result(
      ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result);
  ::mavsdk::rpc::tracking_server::TrackingServerResult* unsafe_arena_release_tracking_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.RespondTrackingOffCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrackPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.TrackPoint) */ {
 public:
  inline TrackPoint() : TrackPoint(nullptr) {}
  virtual ~TrackPoint();

  TrackPoint(const TrackPoint& from);
  TrackPoint(TrackPoint&& from) noexcept
    : TrackPoint() {
    *this = ::std::move(from);
  }

  inline TrackPoint& operator=(const TrackPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackPoint& operator=(TrackPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackPoint* internal_default_instance() {
    return reinterpret_cast<const TrackPoint*>(
               &_TrackPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TrackPoint& a, TrackPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackPoint* New() const final {
    return CreateMaybeMessage<TrackPoint>(nullptr);
  }

  TrackPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackPoint& from);
  void MergeFrom(const TrackPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.TrackPoint";
  }
  protected:
  explicit TrackPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointXFieldNumber = 1,
    kPointYFieldNumber = 2,
    kRadiusFieldNumber = 3,
  };
  // float point_x = 1;
  void clear_point_x();
  float point_x() const;
  void set_point_x(float value);
  private:
  float _internal_point_x() const;
  void _internal_set_point_x(float value);
  public:

  // float point_y = 2;
  void clear_point_y();
  float point_y() const;
  void set_point_y(float value);
  private:
  float _internal_point_y() const;
  void _internal_set_point_y(float value);
  public:

  // float radius = 3;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.TrackPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float point_x_;
  float point_y_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrackRectangle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.TrackRectangle) */ {
 public:
  inline TrackRectangle() : TrackRectangle(nullptr) {}
  virtual ~TrackRectangle();

  TrackRectangle(const TrackRectangle& from);
  TrackRectangle(TrackRectangle&& from) noexcept
    : TrackRectangle() {
    *this = ::std::move(from);
  }

  inline TrackRectangle& operator=(const TrackRectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackRectangle& operator=(TrackRectangle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackRectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackRectangle* internal_default_instance() {
    return reinterpret_cast<const TrackRectangle*>(
               &_TrackRectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TrackRectangle& a, TrackRectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackRectangle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackRectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackRectangle* New() const final {
    return CreateMaybeMessage<TrackRectangle>(nullptr);
  }

  TrackRectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackRectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackRectangle& from);
  void MergeFrom(const TrackRectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackRectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.TrackRectangle";
  }
  protected:
  explicit TrackRectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopLeftCornerXFieldNumber = 1,
    kTopLeftCornerYFieldNumber = 2,
    kBottomRightCornerXFieldNumber = 3,
    kBottomRightCornerYFieldNumber = 4,
  };
  // float top_left_corner_x = 1;
  void clear_top_left_corner_x();
  float top_left_corner_x() const;
  void set_top_left_corner_x(float value);
  private:
  float _internal_top_left_corner_x() const;
  void _internal_set_top_left_corner_x(float value);
  public:

  // float top_left_corner_y = 2;
  void clear_top_left_corner_y();
  float top_left_corner_y() const;
  void set_top_left_corner_y(float value);
  private:
  float _internal_top_left_corner_y() const;
  void _internal_set_top_left_corner_y(float value);
  public:

  // float bottom_right_corner_x = 3;
  void clear_bottom_right_corner_x();
  float bottom_right_corner_x() const;
  void set_bottom_right_corner_x(float value);
  private:
  float _internal_bottom_right_corner_x() const;
  void _internal_set_bottom_right_corner_x(float value);
  public:

  // float bottom_right_corner_y = 4;
  void clear_bottom_right_corner_y();
  float bottom_right_corner_y() const;
  void set_bottom_right_corner_y(float value);
  private:
  float _internal_bottom_right_corner_y() const;
  void _internal_set_bottom_right_corner_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.TrackRectangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float top_left_corner_x_;
  float top_left_corner_y_;
  float bottom_right_corner_x_;
  float bottom_right_corner_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrackingServerResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tracking_server.TrackingServerResult) */ {
 public:
  inline TrackingServerResult() : TrackingServerResult(nullptr) {}
  virtual ~TrackingServerResult();

  TrackingServerResult(const TrackingServerResult& from);
  TrackingServerResult(TrackingServerResult&& from) noexcept
    : TrackingServerResult() {
    *this = ::std::move(from);
  }

  inline TrackingServerResult& operator=(const TrackingServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingServerResult& operator=(TrackingServerResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingServerResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingServerResult* internal_default_instance() {
    return reinterpret_cast<const TrackingServerResult*>(
               &_TrackingServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TrackingServerResult& a, TrackingServerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingServerResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingServerResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingServerResult* New() const final {
    return CreateMaybeMessage<TrackingServerResult>(nullptr);
  }

  TrackingServerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingServerResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingServerResult& from);
  void MergeFrom(const TrackingServerResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingServerResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.tracking_server.TrackingServerResult";
  }
  protected:
  explicit TrackingServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto);
    return ::descriptor_table_tracking_5fserver_2ftracking_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrackingServerResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    TrackingServerResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    TrackingServerResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    TrackingServerResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    TrackingServerResult_Result_RESULT_CONNECTION_ERROR;
  static inline bool Result_IsValid(int value) {
    return TrackingServerResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    TrackingServerResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    TrackingServerResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    TrackingServerResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return TrackingServerResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return TrackingServerResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return TrackingServerResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.tracking_server.TrackingServerResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::tracking_server::TrackingServerResult_Result result() const;
  void set_result(::mavsdk::rpc::tracking_server::TrackingServerResult_Result value);
  private:
  ::mavsdk::rpc::tracking_server::TrackingServerResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::tracking_server::TrackingServerResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tracking_server.TrackingServerResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_5fserver_2ftracking_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetTrackingPointStatusRequest

// .mavsdk.rpc.tracking_server.TrackPoint tracked_point = 1;
inline bool SetTrackingPointStatusRequest::_internal_has_tracked_point() const {
  return this != internal_default_instance() && tracked_point_ != nullptr;
}
inline bool SetTrackingPointStatusRequest::has_tracked_point() const {
  return _internal_has_tracked_point();
}
inline void SetTrackingPointStatusRequest::clear_tracked_point() {
  if (GetArena() == nullptr && tracked_point_ != nullptr) {
    delete tracked_point_;
  }
  tracked_point_ = nullptr;
}
inline const ::mavsdk::rpc::tracking_server::TrackPoint& SetTrackingPointStatusRequest::_internal_tracked_point() const {
  const ::mavsdk::rpc::tracking_server::TrackPoint* p = tracked_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::tracking_server::TrackPoint*>(
      &::mavsdk::rpc::tracking_server::_TrackPoint_default_instance_);
}
inline const ::mavsdk::rpc::tracking_server::TrackPoint& SetTrackingPointStatusRequest::tracked_point() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.SetTrackingPointStatusRequest.tracked_point)
  return _internal_tracked_point();
}
inline void SetTrackingPointStatusRequest::unsafe_arena_set_allocated_tracked_point(
    ::mavsdk::rpc::tracking_server::TrackPoint* tracked_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_point_);
  }
  tracked_point_ = tracked_point;
  if (tracked_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tracking_server.SetTrackingPointStatusRequest.tracked_point)
}
inline ::mavsdk::rpc::tracking_server::TrackPoint* SetTrackingPointStatusRequest::release_tracked_point() {
  
  ::mavsdk::rpc::tracking_server::TrackPoint* temp = tracked_point_;
  tracked_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackPoint* SetTrackingPointStatusRequest::unsafe_arena_release_tracked_point() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tracking_server.SetTrackingPointStatusRequest.tracked_point)
  
  ::mavsdk::rpc::tracking_server::TrackPoint* temp = tracked_point_;
  tracked_point_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackPoint* SetTrackingPointStatusRequest::_internal_mutable_tracked_point() {
  
  if (tracked_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackPoint>(GetArena());
    tracked_point_ = p;
  }
  return tracked_point_;
}
inline ::mavsdk::rpc::tracking_server::TrackPoint* SetTrackingPointStatusRequest::mutable_tracked_point() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tracking_server.SetTrackingPointStatusRequest.tracked_point)
  return _internal_mutable_tracked_point();
}
inline void SetTrackingPointStatusRequest::set_allocated_tracked_point(::mavsdk::rpc::tracking_server::TrackPoint* tracked_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracked_point_;
  }
  if (tracked_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracked_point);
    if (message_arena != submessage_arena) {
      tracked_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_point, submessage_arena);
    }
    
  } else {
    
  }
  tracked_point_ = tracked_point;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tracking_server.SetTrackingPointStatusRequest.tracked_point)
}

// -------------------------------------------------------------------

// SetTrackingPointStatusResponse

// -------------------------------------------------------------------

// SetTrackingRectangleStatusRequest

// .mavsdk.rpc.tracking_server.TrackRectangle tracked_rectangle = 1;
inline bool SetTrackingRectangleStatusRequest::_internal_has_tracked_rectangle() const {
  return this != internal_default_instance() && tracked_rectangle_ != nullptr;
}
inline bool SetTrackingRectangleStatusRequest::has_tracked_rectangle() const {
  return _internal_has_tracked_rectangle();
}
inline void SetTrackingRectangleStatusRequest::clear_tracked_rectangle() {
  if (GetArena() == nullptr && tracked_rectangle_ != nullptr) {
    delete tracked_rectangle_;
  }
  tracked_rectangle_ = nullptr;
}
inline const ::mavsdk::rpc::tracking_server::TrackRectangle& SetTrackingRectangleStatusRequest::_internal_tracked_rectangle() const {
  const ::mavsdk::rpc::tracking_server::TrackRectangle* p = tracked_rectangle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::tracking_server::TrackRectangle*>(
      &::mavsdk::rpc::tracking_server::_TrackRectangle_default_instance_);
}
inline const ::mavsdk::rpc::tracking_server::TrackRectangle& SetTrackingRectangleStatusRequest::tracked_rectangle() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusRequest.tracked_rectangle)
  return _internal_tracked_rectangle();
}
inline void SetTrackingRectangleStatusRequest::unsafe_arena_set_allocated_tracked_rectangle(
    ::mavsdk::rpc::tracking_server::TrackRectangle* tracked_rectangle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_rectangle_);
  }
  tracked_rectangle_ = tracked_rectangle;
  if (tracked_rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusRequest.tracked_rectangle)
}
inline ::mavsdk::rpc::tracking_server::TrackRectangle* SetTrackingRectangleStatusRequest::release_tracked_rectangle() {
  
  ::mavsdk::rpc::tracking_server::TrackRectangle* temp = tracked_rectangle_;
  tracked_rectangle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackRectangle* SetTrackingRectangleStatusRequest::unsafe_arena_release_tracked_rectangle() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusRequest.tracked_rectangle)
  
  ::mavsdk::rpc::tracking_server::TrackRectangle* temp = tracked_rectangle_;
  tracked_rectangle_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackRectangle* SetTrackingRectangleStatusRequest::_internal_mutable_tracked_rectangle() {
  
  if (tracked_rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackRectangle>(GetArena());
    tracked_rectangle_ = p;
  }
  return tracked_rectangle_;
}
inline ::mavsdk::rpc::tracking_server::TrackRectangle* SetTrackingRectangleStatusRequest::mutable_tracked_rectangle() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusRequest.tracked_rectangle)
  return _internal_mutable_tracked_rectangle();
}
inline void SetTrackingRectangleStatusRequest::set_allocated_tracked_rectangle(::mavsdk::rpc::tracking_server::TrackRectangle* tracked_rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracked_rectangle_;
  }
  if (tracked_rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracked_rectangle);
    if (message_arena != submessage_arena) {
      tracked_rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_rectangle, submessage_arena);
    }
    
  } else {
    
  }
  tracked_rectangle_ = tracked_rectangle;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tracking_server.SetTrackingRectangleStatusRequest.tracked_rectangle)
}

// -------------------------------------------------------------------

// SetTrackingRectangleStatusResponse

// -------------------------------------------------------------------

// SetTrackingOffStatusRequest

// -------------------------------------------------------------------

// SetTrackingOffStatusResponse

// -------------------------------------------------------------------

// SubscribeTrackingPointCommandRequest

// -------------------------------------------------------------------

// TrackingPointCommandResponse

// .mavsdk.rpc.tracking_server.TrackPoint track_point = 1;
inline bool TrackingPointCommandResponse::_internal_has_track_point() const {
  return this != internal_default_instance() && track_point_ != nullptr;
}
inline bool TrackingPointCommandResponse::has_track_point() const {
  return _internal_has_track_point();
}
inline void TrackingPointCommandResponse::clear_track_point() {
  if (GetArena() == nullptr && track_point_ != nullptr) {
    delete track_point_;
  }
  track_point_ = nullptr;
}
inline const ::mavsdk::rpc::tracking_server::TrackPoint& TrackingPointCommandResponse::_internal_track_point() const {
  const ::mavsdk::rpc::tracking_server::TrackPoint* p = track_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::tracking_server::TrackPoint*>(
      &::mavsdk::rpc::tracking_server::_TrackPoint_default_instance_);
}
inline const ::mavsdk::rpc::tracking_server::TrackPoint& TrackingPointCommandResponse::track_point() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackingPointCommandResponse.track_point)
  return _internal_track_point();
}
inline void TrackingPointCommandResponse::unsafe_arena_set_allocated_track_point(
    ::mavsdk::rpc::tracking_server::TrackPoint* track_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_point_);
  }
  track_point_ = track_point;
  if (track_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tracking_server.TrackingPointCommandResponse.track_point)
}
inline ::mavsdk::rpc::tracking_server::TrackPoint* TrackingPointCommandResponse::release_track_point() {
  
  ::mavsdk::rpc::tracking_server::TrackPoint* temp = track_point_;
  track_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackPoint* TrackingPointCommandResponse::unsafe_arena_release_track_point() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tracking_server.TrackingPointCommandResponse.track_point)
  
  ::mavsdk::rpc::tracking_server::TrackPoint* temp = track_point_;
  track_point_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackPoint* TrackingPointCommandResponse::_internal_mutable_track_point() {
  
  if (track_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackPoint>(GetArena());
    track_point_ = p;
  }
  return track_point_;
}
inline ::mavsdk::rpc::tracking_server::TrackPoint* TrackingPointCommandResponse::mutable_track_point() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tracking_server.TrackingPointCommandResponse.track_point)
  return _internal_mutable_track_point();
}
inline void TrackingPointCommandResponse::set_allocated_track_point(::mavsdk::rpc::tracking_server::TrackPoint* track_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete track_point_;
  }
  if (track_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(track_point);
    if (message_arena != submessage_arena) {
      track_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_point, submessage_arena);
    }
    
  } else {
    
  }
  track_point_ = track_point;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tracking_server.TrackingPointCommandResponse.track_point)
}

// -------------------------------------------------------------------

// SubscribeTrackingRectangleCommandRequest

// -------------------------------------------------------------------

// TrackingRectangleCommandResponse

// .mavsdk.rpc.tracking_server.TrackRectangle track_rectangle = 1;
inline bool TrackingRectangleCommandResponse::_internal_has_track_rectangle() const {
  return this != internal_default_instance() && track_rectangle_ != nullptr;
}
inline bool TrackingRectangleCommandResponse::has_track_rectangle() const {
  return _internal_has_track_rectangle();
}
inline void TrackingRectangleCommandResponse::clear_track_rectangle() {
  if (GetArena() == nullptr && track_rectangle_ != nullptr) {
    delete track_rectangle_;
  }
  track_rectangle_ = nullptr;
}
inline const ::mavsdk::rpc::tracking_server::TrackRectangle& TrackingRectangleCommandResponse::_internal_track_rectangle() const {
  const ::mavsdk::rpc::tracking_server::TrackRectangle* p = track_rectangle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::tracking_server::TrackRectangle*>(
      &::mavsdk::rpc::tracking_server::_TrackRectangle_default_instance_);
}
inline const ::mavsdk::rpc::tracking_server::TrackRectangle& TrackingRectangleCommandResponse::track_rectangle() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackingRectangleCommandResponse.track_rectangle)
  return _internal_track_rectangle();
}
inline void TrackingRectangleCommandResponse::unsafe_arena_set_allocated_track_rectangle(
    ::mavsdk::rpc::tracking_server::TrackRectangle* track_rectangle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_rectangle_);
  }
  track_rectangle_ = track_rectangle;
  if (track_rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tracking_server.TrackingRectangleCommandResponse.track_rectangle)
}
inline ::mavsdk::rpc::tracking_server::TrackRectangle* TrackingRectangleCommandResponse::release_track_rectangle() {
  
  ::mavsdk::rpc::tracking_server::TrackRectangle* temp = track_rectangle_;
  track_rectangle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackRectangle* TrackingRectangleCommandResponse::unsafe_arena_release_track_rectangle() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tracking_server.TrackingRectangleCommandResponse.track_rectangle)
  
  ::mavsdk::rpc::tracking_server::TrackRectangle* temp = track_rectangle_;
  track_rectangle_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackRectangle* TrackingRectangleCommandResponse::_internal_mutable_track_rectangle() {
  
  if (track_rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackRectangle>(GetArena());
    track_rectangle_ = p;
  }
  return track_rectangle_;
}
inline ::mavsdk::rpc::tracking_server::TrackRectangle* TrackingRectangleCommandResponse::mutable_track_rectangle() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tracking_server.TrackingRectangleCommandResponse.track_rectangle)
  return _internal_mutable_track_rectangle();
}
inline void TrackingRectangleCommandResponse::set_allocated_track_rectangle(::mavsdk::rpc::tracking_server::TrackRectangle* track_rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete track_rectangle_;
  }
  if (track_rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(track_rectangle);
    if (message_arena != submessage_arena) {
      track_rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_rectangle, submessage_arena);
    }
    
  } else {
    
  }
  track_rectangle_ = track_rectangle;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tracking_server.TrackingRectangleCommandResponse.track_rectangle)
}

// -------------------------------------------------------------------

// SubscribeTrackingOffCommandRequest

// -------------------------------------------------------------------

// TrackingOffCommandResponse

// int32 dummy = 1;
inline void TrackingOffCommandResponse::clear_dummy() {
  dummy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOffCommandResponse::_internal_dummy() const {
  return dummy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOffCommandResponse::dummy() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackingOffCommandResponse.dummy)
  return _internal_dummy();
}
inline void TrackingOffCommandResponse::_internal_set_dummy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dummy_ = value;
}
inline void TrackingOffCommandResponse::set_dummy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dummy(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackingOffCommandResponse.dummy)
}

// -------------------------------------------------------------------

// RespondTrackingPointCommandRequest

// .mavsdk.rpc.tracking_server.CommandAnswer command_answer = 1;
inline void RespondTrackingPointCommandRequest::clear_command_answer() {
  command_answer_ = 0;
}
inline ::mavsdk::rpc::tracking_server::CommandAnswer RespondTrackingPointCommandRequest::_internal_command_answer() const {
  return static_cast< ::mavsdk::rpc::tracking_server::CommandAnswer >(command_answer_);
}
inline ::mavsdk::rpc::tracking_server::CommandAnswer RespondTrackingPointCommandRequest::command_answer() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.RespondTrackingPointCommandRequest.command_answer)
  return _internal_command_answer();
}
inline void RespondTrackingPointCommandRequest::_internal_set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value) {
  
  command_answer_ = value;
}
inline void RespondTrackingPointCommandRequest::set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value) {
  _internal_set_command_answer(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.RespondTrackingPointCommandRequest.command_answer)
}

// -------------------------------------------------------------------

// RespondTrackingPointCommandResponse

// .mavsdk.rpc.tracking_server.TrackingServerResult tracking_server_result = 1;
inline bool RespondTrackingPointCommandResponse::_internal_has_tracking_server_result() const {
  return this != internal_default_instance() && tracking_server_result_ != nullptr;
}
inline bool RespondTrackingPointCommandResponse::has_tracking_server_result() const {
  return _internal_has_tracking_server_result();
}
inline void RespondTrackingPointCommandResponse::clear_tracking_server_result() {
  if (GetArena() == nullptr && tracking_server_result_ != nullptr) {
    delete tracking_server_result_;
  }
  tracking_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::tracking_server::TrackingServerResult& RespondTrackingPointCommandResponse::_internal_tracking_server_result() const {
  const ::mavsdk::rpc::tracking_server::TrackingServerResult* p = tracking_server_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::tracking_server::TrackingServerResult*>(
      &::mavsdk::rpc::tracking_server::_TrackingServerResult_default_instance_);
}
inline const ::mavsdk::rpc::tracking_server::TrackingServerResult& RespondTrackingPointCommandResponse::tracking_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.RespondTrackingPointCommandResponse.tracking_server_result)
  return _internal_tracking_server_result();
}
inline void RespondTrackingPointCommandResponse::unsafe_arena_set_allocated_tracking_server_result(
    ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracking_server_result_);
  }
  tracking_server_result_ = tracking_server_result;
  if (tracking_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tracking_server.RespondTrackingPointCommandResponse.tracking_server_result)
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingPointCommandResponse::release_tracking_server_result() {
  
  ::mavsdk::rpc::tracking_server::TrackingServerResult* temp = tracking_server_result_;
  tracking_server_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingPointCommandResponse::unsafe_arena_release_tracking_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tracking_server.RespondTrackingPointCommandResponse.tracking_server_result)
  
  ::mavsdk::rpc::tracking_server::TrackingServerResult* temp = tracking_server_result_;
  tracking_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingPointCommandResponse::_internal_mutable_tracking_server_result() {
  
  if (tracking_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackingServerResult>(GetArena());
    tracking_server_result_ = p;
  }
  return tracking_server_result_;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingPointCommandResponse::mutable_tracking_server_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tracking_server.RespondTrackingPointCommandResponse.tracking_server_result)
  return _internal_mutable_tracking_server_result();
}
inline void RespondTrackingPointCommandResponse::set_allocated_tracking_server_result(::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracking_server_result_;
  }
  if (tracking_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracking_server_result);
    if (message_arena != submessage_arena) {
      tracking_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracking_server_result, submessage_arena);
    }
    
  } else {
    
  }
  tracking_server_result_ = tracking_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tracking_server.RespondTrackingPointCommandResponse.tracking_server_result)
}

// -------------------------------------------------------------------

// RespondTrackingRectangleCommandRequest

// .mavsdk.rpc.tracking_server.CommandAnswer command_answer = 1;
inline void RespondTrackingRectangleCommandRequest::clear_command_answer() {
  command_answer_ = 0;
}
inline ::mavsdk::rpc::tracking_server::CommandAnswer RespondTrackingRectangleCommandRequest::_internal_command_answer() const {
  return static_cast< ::mavsdk::rpc::tracking_server::CommandAnswer >(command_answer_);
}
inline ::mavsdk::rpc::tracking_server::CommandAnswer RespondTrackingRectangleCommandRequest::command_answer() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandRequest.command_answer)
  return _internal_command_answer();
}
inline void RespondTrackingRectangleCommandRequest::_internal_set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value) {
  
  command_answer_ = value;
}
inline void RespondTrackingRectangleCommandRequest::set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value) {
  _internal_set_command_answer(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandRequest.command_answer)
}

// -------------------------------------------------------------------

// RespondTrackingRectangleCommandResponse

// .mavsdk.rpc.tracking_server.TrackingServerResult tracking_server_result = 1;
inline bool RespondTrackingRectangleCommandResponse::_internal_has_tracking_server_result() const {
  return this != internal_default_instance() && tracking_server_result_ != nullptr;
}
inline bool RespondTrackingRectangleCommandResponse::has_tracking_server_result() const {
  return _internal_has_tracking_server_result();
}
inline void RespondTrackingRectangleCommandResponse::clear_tracking_server_result() {
  if (GetArena() == nullptr && tracking_server_result_ != nullptr) {
    delete tracking_server_result_;
  }
  tracking_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::tracking_server::TrackingServerResult& RespondTrackingRectangleCommandResponse::_internal_tracking_server_result() const {
  const ::mavsdk::rpc::tracking_server::TrackingServerResult* p = tracking_server_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::tracking_server::TrackingServerResult*>(
      &::mavsdk::rpc::tracking_server::_TrackingServerResult_default_instance_);
}
inline const ::mavsdk::rpc::tracking_server::TrackingServerResult& RespondTrackingRectangleCommandResponse::tracking_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandResponse.tracking_server_result)
  return _internal_tracking_server_result();
}
inline void RespondTrackingRectangleCommandResponse::unsafe_arena_set_allocated_tracking_server_result(
    ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracking_server_result_);
  }
  tracking_server_result_ = tracking_server_result;
  if (tracking_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandResponse.tracking_server_result)
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingRectangleCommandResponse::release_tracking_server_result() {
  
  ::mavsdk::rpc::tracking_server::TrackingServerResult* temp = tracking_server_result_;
  tracking_server_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingRectangleCommandResponse::unsafe_arena_release_tracking_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandResponse.tracking_server_result)
  
  ::mavsdk::rpc::tracking_server::TrackingServerResult* temp = tracking_server_result_;
  tracking_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingRectangleCommandResponse::_internal_mutable_tracking_server_result() {
  
  if (tracking_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackingServerResult>(GetArena());
    tracking_server_result_ = p;
  }
  return tracking_server_result_;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingRectangleCommandResponse::mutable_tracking_server_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandResponse.tracking_server_result)
  return _internal_mutable_tracking_server_result();
}
inline void RespondTrackingRectangleCommandResponse::set_allocated_tracking_server_result(::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracking_server_result_;
  }
  if (tracking_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracking_server_result);
    if (message_arena != submessage_arena) {
      tracking_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracking_server_result, submessage_arena);
    }
    
  } else {
    
  }
  tracking_server_result_ = tracking_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tracking_server.RespondTrackingRectangleCommandResponse.tracking_server_result)
}

// -------------------------------------------------------------------

// RespondTrackingOffCommandRequest

// .mavsdk.rpc.tracking_server.CommandAnswer command_answer = 1;
inline void RespondTrackingOffCommandRequest::clear_command_answer() {
  command_answer_ = 0;
}
inline ::mavsdk::rpc::tracking_server::CommandAnswer RespondTrackingOffCommandRequest::_internal_command_answer() const {
  return static_cast< ::mavsdk::rpc::tracking_server::CommandAnswer >(command_answer_);
}
inline ::mavsdk::rpc::tracking_server::CommandAnswer RespondTrackingOffCommandRequest::command_answer() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.RespondTrackingOffCommandRequest.command_answer)
  return _internal_command_answer();
}
inline void RespondTrackingOffCommandRequest::_internal_set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value) {
  
  command_answer_ = value;
}
inline void RespondTrackingOffCommandRequest::set_command_answer(::mavsdk::rpc::tracking_server::CommandAnswer value) {
  _internal_set_command_answer(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.RespondTrackingOffCommandRequest.command_answer)
}

// -------------------------------------------------------------------

// RespondTrackingOffCommandResponse

// .mavsdk.rpc.tracking_server.TrackingServerResult tracking_server_result = 1;
inline bool RespondTrackingOffCommandResponse::_internal_has_tracking_server_result() const {
  return this != internal_default_instance() && tracking_server_result_ != nullptr;
}
inline bool RespondTrackingOffCommandResponse::has_tracking_server_result() const {
  return _internal_has_tracking_server_result();
}
inline void RespondTrackingOffCommandResponse::clear_tracking_server_result() {
  if (GetArena() == nullptr && tracking_server_result_ != nullptr) {
    delete tracking_server_result_;
  }
  tracking_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::tracking_server::TrackingServerResult& RespondTrackingOffCommandResponse::_internal_tracking_server_result() const {
  const ::mavsdk::rpc::tracking_server::TrackingServerResult* p = tracking_server_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::tracking_server::TrackingServerResult*>(
      &::mavsdk::rpc::tracking_server::_TrackingServerResult_default_instance_);
}
inline const ::mavsdk::rpc::tracking_server::TrackingServerResult& RespondTrackingOffCommandResponse::tracking_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.RespondTrackingOffCommandResponse.tracking_server_result)
  return _internal_tracking_server_result();
}
inline void RespondTrackingOffCommandResponse::unsafe_arena_set_allocated_tracking_server_result(
    ::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracking_server_result_);
  }
  tracking_server_result_ = tracking_server_result;
  if (tracking_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tracking_server.RespondTrackingOffCommandResponse.tracking_server_result)
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingOffCommandResponse::release_tracking_server_result() {
  
  ::mavsdk::rpc::tracking_server::TrackingServerResult* temp = tracking_server_result_;
  tracking_server_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingOffCommandResponse::unsafe_arena_release_tracking_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tracking_server.RespondTrackingOffCommandResponse.tracking_server_result)
  
  ::mavsdk::rpc::tracking_server::TrackingServerResult* temp = tracking_server_result_;
  tracking_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingOffCommandResponse::_internal_mutable_tracking_server_result() {
  
  if (tracking_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tracking_server::TrackingServerResult>(GetArena());
    tracking_server_result_ = p;
  }
  return tracking_server_result_;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult* RespondTrackingOffCommandResponse::mutable_tracking_server_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tracking_server.RespondTrackingOffCommandResponse.tracking_server_result)
  return _internal_mutable_tracking_server_result();
}
inline void RespondTrackingOffCommandResponse::set_allocated_tracking_server_result(::mavsdk::rpc::tracking_server::TrackingServerResult* tracking_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracking_server_result_;
  }
  if (tracking_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracking_server_result);
    if (message_arena != submessage_arena) {
      tracking_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracking_server_result, submessage_arena);
    }
    
  } else {
    
  }
  tracking_server_result_ = tracking_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tracking_server.RespondTrackingOffCommandResponse.tracking_server_result)
}

// -------------------------------------------------------------------

// TrackPoint

// float point_x = 1;
inline void TrackPoint::clear_point_x() {
  point_x_ = 0;
}
inline float TrackPoint::_internal_point_x() const {
  return point_x_;
}
inline float TrackPoint::point_x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackPoint.point_x)
  return _internal_point_x();
}
inline void TrackPoint::_internal_set_point_x(float value) {
  
  point_x_ = value;
}
inline void TrackPoint::set_point_x(float value) {
  _internal_set_point_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackPoint.point_x)
}

// float point_y = 2;
inline void TrackPoint::clear_point_y() {
  point_y_ = 0;
}
inline float TrackPoint::_internal_point_y() const {
  return point_y_;
}
inline float TrackPoint::point_y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackPoint.point_y)
  return _internal_point_y();
}
inline void TrackPoint::_internal_set_point_y(float value) {
  
  point_y_ = value;
}
inline void TrackPoint::set_point_y(float value) {
  _internal_set_point_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackPoint.point_y)
}

// float radius = 3;
inline void TrackPoint::clear_radius() {
  radius_ = 0;
}
inline float TrackPoint::_internal_radius() const {
  return radius_;
}
inline float TrackPoint::radius() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackPoint.radius)
  return _internal_radius();
}
inline void TrackPoint::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void TrackPoint::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackPoint.radius)
}

// -------------------------------------------------------------------

// TrackRectangle

// float top_left_corner_x = 1;
inline void TrackRectangle::clear_top_left_corner_x() {
  top_left_corner_x_ = 0;
}
inline float TrackRectangle::_internal_top_left_corner_x() const {
  return top_left_corner_x_;
}
inline float TrackRectangle::top_left_corner_x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackRectangle.top_left_corner_x)
  return _internal_top_left_corner_x();
}
inline void TrackRectangle::_internal_set_top_left_corner_x(float value) {
  
  top_left_corner_x_ = value;
}
inline void TrackRectangle::set_top_left_corner_x(float value) {
  _internal_set_top_left_corner_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackRectangle.top_left_corner_x)
}

// float top_left_corner_y = 2;
inline void TrackRectangle::clear_top_left_corner_y() {
  top_left_corner_y_ = 0;
}
inline float TrackRectangle::_internal_top_left_corner_y() const {
  return top_left_corner_y_;
}
inline float TrackRectangle::top_left_corner_y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackRectangle.top_left_corner_y)
  return _internal_top_left_corner_y();
}
inline void TrackRectangle::_internal_set_top_left_corner_y(float value) {
  
  top_left_corner_y_ = value;
}
inline void TrackRectangle::set_top_left_corner_y(float value) {
  _internal_set_top_left_corner_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackRectangle.top_left_corner_y)
}

// float bottom_right_corner_x = 3;
inline void TrackRectangle::clear_bottom_right_corner_x() {
  bottom_right_corner_x_ = 0;
}
inline float TrackRectangle::_internal_bottom_right_corner_x() const {
  return bottom_right_corner_x_;
}
inline float TrackRectangle::bottom_right_corner_x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackRectangle.bottom_right_corner_x)
  return _internal_bottom_right_corner_x();
}
inline void TrackRectangle::_internal_set_bottom_right_corner_x(float value) {
  
  bottom_right_corner_x_ = value;
}
inline void TrackRectangle::set_bottom_right_corner_x(float value) {
  _internal_set_bottom_right_corner_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackRectangle.bottom_right_corner_x)
}

// float bottom_right_corner_y = 4;
inline void TrackRectangle::clear_bottom_right_corner_y() {
  bottom_right_corner_y_ = 0;
}
inline float TrackRectangle::_internal_bottom_right_corner_y() const {
  return bottom_right_corner_y_;
}
inline float TrackRectangle::bottom_right_corner_y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackRectangle.bottom_right_corner_y)
  return _internal_bottom_right_corner_y();
}
inline void TrackRectangle::_internal_set_bottom_right_corner_y(float value) {
  
  bottom_right_corner_y_ = value;
}
inline void TrackRectangle::set_bottom_right_corner_y(float value) {
  _internal_set_bottom_right_corner_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackRectangle.bottom_right_corner_y)
}

// -------------------------------------------------------------------

// TrackingServerResult

// .mavsdk.rpc.tracking_server.TrackingServerResult.Result result = 1;
inline void TrackingServerResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult_Result TrackingServerResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::tracking_server::TrackingServerResult_Result >(result_);
}
inline ::mavsdk::rpc::tracking_server::TrackingServerResult_Result TrackingServerResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackingServerResult.result)
  return _internal_result();
}
inline void TrackingServerResult::_internal_set_result(::mavsdk::rpc::tracking_server::TrackingServerResult_Result value) {
  
  result_ = value;
}
inline void TrackingServerResult::set_result(::mavsdk::rpc::tracking_server::TrackingServerResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackingServerResult.result)
}

// string result_str = 2;
inline void TrackingServerResult::clear_result_str() {
  result_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrackingServerResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tracking_server.TrackingServerResult.result_str)
  return _internal_result_str();
}
inline void TrackingServerResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tracking_server.TrackingServerResult.result_str)
}
inline std::string* TrackingServerResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tracking_server.TrackingServerResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& TrackingServerResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void TrackingServerResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrackingServerResult::set_result_str(std::string&& value) {
  
  result_str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.tracking_server.TrackingServerResult.result_str)
}
inline void TrackingServerResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.tracking_server.TrackingServerResult.result_str)
}
inline void TrackingServerResult::set_result_str(const char* value,
    size_t size) {
  
  result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.tracking_server.TrackingServerResult.result_str)
}
inline std::string* TrackingServerResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrackingServerResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tracking_server.TrackingServerResult.result_str)
  return result_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackingServerResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tracking_server.TrackingServerResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracking_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::tracking_server::TrackingServerResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::tracking_server::TrackingServerResult_Result>() {
  return ::mavsdk::rpc::tracking_server::TrackingServerResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::tracking_server::CommandAnswer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::tracking_server::CommandAnswer>() {
  return ::mavsdk::rpc::tracking_server::CommandAnswer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tracking_5fserver_2ftracking_5fserver_2eproto
