// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transponder/transponder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transponder_2ftransponder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transponder_2ftransponder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transponder_2ftransponder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transponder_2ftransponder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transponder_2ftransponder_2eproto;
namespace mavsdk {
namespace rpc {
namespace transponder {
class AdsbVehicle;
struct AdsbVehicleDefaultTypeInternal;
extern AdsbVehicleDefaultTypeInternal _AdsbVehicle_default_instance_;
class SetRateTransponderRequest;
struct SetRateTransponderRequestDefaultTypeInternal;
extern SetRateTransponderRequestDefaultTypeInternal _SetRateTransponderRequest_default_instance_;
class SetRateTransponderResponse;
struct SetRateTransponderResponseDefaultTypeInternal;
extern SetRateTransponderResponseDefaultTypeInternal _SetRateTransponderResponse_default_instance_;
class SubscribeTransponderRequest;
struct SubscribeTransponderRequestDefaultTypeInternal;
extern SubscribeTransponderRequestDefaultTypeInternal _SubscribeTransponderRequest_default_instance_;
class TransponderResponse;
struct TransponderResponseDefaultTypeInternal;
extern TransponderResponseDefaultTypeInternal _TransponderResponse_default_instance_;
class TransponderResult;
struct TransponderResultDefaultTypeInternal;
extern TransponderResultDefaultTypeInternal _TransponderResult_default_instance_;
}  // namespace transponder
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::transponder::AdsbVehicle* Arena::CreateMaybeMessage<::mavsdk::rpc::transponder::AdsbVehicle>(Arena*);
template<> ::mavsdk::rpc::transponder::SetRateTransponderRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::transponder::SetRateTransponderRequest>(Arena*);
template<> ::mavsdk::rpc::transponder::SetRateTransponderResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::transponder::SetRateTransponderResponse>(Arena*);
template<> ::mavsdk::rpc::transponder::SubscribeTransponderRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::transponder::SubscribeTransponderRequest>(Arena*);
template<> ::mavsdk::rpc::transponder::TransponderResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::transponder::TransponderResponse>(Arena*);
template<> ::mavsdk::rpc::transponder::TransponderResult* Arena::CreateMaybeMessage<::mavsdk::rpc::transponder::TransponderResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace transponder {

enum TransponderResult_Result : int {
  TransponderResult_Result_RESULT_UNKNOWN = 0,
  TransponderResult_Result_RESULT_SUCCESS = 1,
  TransponderResult_Result_RESULT_NO_SYSTEM = 2,
  TransponderResult_Result_RESULT_CONNECTION_ERROR = 3,
  TransponderResult_Result_RESULT_BUSY = 4,
  TransponderResult_Result_RESULT_COMMAND_DENIED = 5,
  TransponderResult_Result_RESULT_TIMEOUT = 6,
  TransponderResult_Result_TransponderResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransponderResult_Result_TransponderResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransponderResult_Result_IsValid(int value);
constexpr TransponderResult_Result TransponderResult_Result_Result_MIN = TransponderResult_Result_RESULT_UNKNOWN;
constexpr TransponderResult_Result TransponderResult_Result_Result_MAX = TransponderResult_Result_RESULT_TIMEOUT;
constexpr int TransponderResult_Result_Result_ARRAYSIZE = TransponderResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransponderResult_Result_descriptor();
template<typename T>
inline const std::string& TransponderResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransponderResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransponderResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransponderResult_Result_descriptor(), enum_t_value);
}
inline bool TransponderResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransponderResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransponderResult_Result>(
    TransponderResult_Result_descriptor(), name, value);
}
enum AdsbEmitterType : int {
  ADSB_EMITTER_TYPE_NO_INFO = 0,
  ADSB_EMITTER_TYPE_LIGHT = 1,
  ADSB_EMITTER_TYPE_SMALL = 2,
  ADSB_EMITTER_TYPE_LARGE = 3,
  ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE = 4,
  ADSB_EMITTER_TYPE_HEAVY = 5,
  ADSB_EMITTER_TYPE_HIGHLY_MANUV = 6,
  ADSB_EMITTER_TYPE_ROTOCRAFT = 7,
  ADSB_EMITTER_TYPE_UNASSIGNED = 8,
  ADSB_EMITTER_TYPE_GLIDER = 9,
  ADSB_EMITTER_TYPE_LIGHTER_AIR = 10,
  ADSB_EMITTER_TYPE_PARACHUTE = 11,
  ADSB_EMITTER_TYPE_ULTRA_LIGHT = 12,
  ADSB_EMITTER_TYPE_UNASSIGNED2 = 13,
  ADSB_EMITTER_TYPE_UAV = 14,
  ADSB_EMITTER_TYPE_SPACE = 15,
  ADSB_EMITTER_TYPE_UNASSGINED3 = 16,
  ADSB_EMITTER_TYPE_EMERGENCY_SURFACE = 17,
  ADSB_EMITTER_TYPE_SERVICE_SURFACE = 18,
  ADSB_EMITTER_TYPE_POINT_OBSTACLE = 19,
  AdsbEmitterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AdsbEmitterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AdsbEmitterType_IsValid(int value);
constexpr AdsbEmitterType AdsbEmitterType_MIN = ADSB_EMITTER_TYPE_NO_INFO;
constexpr AdsbEmitterType AdsbEmitterType_MAX = ADSB_EMITTER_TYPE_POINT_OBSTACLE;
constexpr int AdsbEmitterType_ARRAYSIZE = AdsbEmitterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdsbEmitterType_descriptor();
template<typename T>
inline const std::string& AdsbEmitterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdsbEmitterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdsbEmitterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdsbEmitterType_descriptor(), enum_t_value);
}
inline bool AdsbEmitterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdsbEmitterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdsbEmitterType>(
    AdsbEmitterType_descriptor(), name, value);
}
// ===================================================================

class SubscribeTransponderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.transponder.SubscribeTransponderRequest) */ {
 public:
  inline SubscribeTransponderRequest() : SubscribeTransponderRequest(nullptr) {}
  ~SubscribeTransponderRequest() override;
  explicit constexpr SubscribeTransponderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeTransponderRequest(const SubscribeTransponderRequest& from);
  SubscribeTransponderRequest(SubscribeTransponderRequest&& from) noexcept
    : SubscribeTransponderRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeTransponderRequest& operator=(const SubscribeTransponderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTransponderRequest& operator=(SubscribeTransponderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeTransponderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeTransponderRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeTransponderRequest*>(
               &_SubscribeTransponderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeTransponderRequest& a, SubscribeTransponderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTransponderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTransponderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTransponderRequest* New() const final {
    return new SubscribeTransponderRequest();
  }

  SubscribeTransponderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTransponderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeTransponderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubscribeTransponderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTransponderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.transponder.SubscribeTransponderRequest";
  }
  protected:
  explicit SubscribeTransponderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.transponder.SubscribeTransponderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transponder_2ftransponder_2eproto;
};
// -------------------------------------------------------------------

class TransponderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.transponder.TransponderResponse) */ {
 public:
  inline TransponderResponse() : TransponderResponse(nullptr) {}
  ~TransponderResponse() override;
  explicit constexpr TransponderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransponderResponse(const TransponderResponse& from);
  TransponderResponse(TransponderResponse&& from) noexcept
    : TransponderResponse() {
    *this = ::std::move(from);
  }

  inline TransponderResponse& operator=(const TransponderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransponderResponse& operator=(TransponderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransponderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransponderResponse* internal_default_instance() {
    return reinterpret_cast<const TransponderResponse*>(
               &_TransponderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransponderResponse& a, TransponderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransponderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransponderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransponderResponse* New() const final {
    return new TransponderResponse();
  }

  TransponderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransponderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransponderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransponderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransponderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.transponder.TransponderResponse";
  }
  protected:
  explicit TransponderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransponderFieldNumber = 1,
  };
  // .mavsdk.rpc.transponder.AdsbVehicle transponder = 1;
  bool has_transponder() const;
  private:
  bool _internal_has_transponder() const;
  public:
  void clear_transponder();
  const ::mavsdk::rpc::transponder::AdsbVehicle& transponder() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::transponder::AdsbVehicle* release_transponder();
  ::mavsdk::rpc::transponder::AdsbVehicle* mutable_transponder();
  void set_allocated_transponder(::mavsdk::rpc::transponder::AdsbVehicle* transponder);
  private:
  const ::mavsdk::rpc::transponder::AdsbVehicle& _internal_transponder() const;
  ::mavsdk::rpc::transponder::AdsbVehicle* _internal_mutable_transponder();
  public:
  void unsafe_arena_set_allocated_transponder(
      ::mavsdk::rpc::transponder::AdsbVehicle* transponder);
  ::mavsdk::rpc::transponder::AdsbVehicle* unsafe_arena_release_transponder();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.transponder.TransponderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::transponder::AdsbVehicle* transponder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transponder_2ftransponder_2eproto;
};
// -------------------------------------------------------------------

class SetRateTransponderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.transponder.SetRateTransponderRequest) */ {
 public:
  inline SetRateTransponderRequest() : SetRateTransponderRequest(nullptr) {}
  ~SetRateTransponderRequest() override;
  explicit constexpr SetRateTransponderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateTransponderRequest(const SetRateTransponderRequest& from);
  SetRateTransponderRequest(SetRateTransponderRequest&& from) noexcept
    : SetRateTransponderRequest() {
    *this = ::std::move(from);
  }

  inline SetRateTransponderRequest& operator=(const SetRateTransponderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateTransponderRequest& operator=(SetRateTransponderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateTransponderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateTransponderRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateTransponderRequest*>(
               &_SetRateTransponderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetRateTransponderRequest& a, SetRateTransponderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateTransponderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateTransponderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRateTransponderRequest* New() const final {
    return new SetRateTransponderRequest();
  }

  SetRateTransponderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRateTransponderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateTransponderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateTransponderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateTransponderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.transponder.SetRateTransponderRequest";
  }
  protected:
  explicit SetRateTransponderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateHzFieldNumber = 1,
  };
  // double rate_hz = 1;
  void clear_rate_hz();
  double rate_hz() const;
  void set_rate_hz(double value);
  private:
  double _internal_rate_hz() const;
  void _internal_set_rate_hz(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.transponder.SetRateTransponderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transponder_2ftransponder_2eproto;
};
// -------------------------------------------------------------------

class SetRateTransponderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.transponder.SetRateTransponderResponse) */ {
 public:
  inline SetRateTransponderResponse() : SetRateTransponderResponse(nullptr) {}
  ~SetRateTransponderResponse() override;
  explicit constexpr SetRateTransponderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateTransponderResponse(const SetRateTransponderResponse& from);
  SetRateTransponderResponse(SetRateTransponderResponse&& from) noexcept
    : SetRateTransponderResponse() {
    *this = ::std::move(from);
  }

  inline SetRateTransponderResponse& operator=(const SetRateTransponderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateTransponderResponse& operator=(SetRateTransponderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateTransponderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateTransponderResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateTransponderResponse*>(
               &_SetRateTransponderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetRateTransponderResponse& a, SetRateTransponderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateTransponderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateTransponderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRateTransponderResponse* New() const final {
    return new SetRateTransponderResponse();
  }

  SetRateTransponderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRateTransponderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateTransponderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateTransponderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateTransponderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.transponder.SetRateTransponderResponse";
  }
  protected:
  explicit SetRateTransponderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransponderResultFieldNumber = 1,
  };
  // .mavsdk.rpc.transponder.TransponderResult transponder_result = 1;
  bool has_transponder_result() const;
  private:
  bool _internal_has_transponder_result() const;
  public:
  void clear_transponder_result();
  const ::mavsdk::rpc::transponder::TransponderResult& transponder_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::transponder::TransponderResult* release_transponder_result();
  ::mavsdk::rpc::transponder::TransponderResult* mutable_transponder_result();
  void set_allocated_transponder_result(::mavsdk::rpc::transponder::TransponderResult* transponder_result);
  private:
  const ::mavsdk::rpc::transponder::TransponderResult& _internal_transponder_result() const;
  ::mavsdk::rpc::transponder::TransponderResult* _internal_mutable_transponder_result();
  public:
  void unsafe_arena_set_allocated_transponder_result(
      ::mavsdk::rpc::transponder::TransponderResult* transponder_result);
  ::mavsdk::rpc::transponder::TransponderResult* unsafe_arena_release_transponder_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.transponder.SetRateTransponderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::transponder::TransponderResult* transponder_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transponder_2ftransponder_2eproto;
};
// -------------------------------------------------------------------

class AdsbVehicle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.transponder.AdsbVehicle) */ {
 public:
  inline AdsbVehicle() : AdsbVehicle(nullptr) {}
  ~AdsbVehicle() override;
  explicit constexpr AdsbVehicle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdsbVehicle(const AdsbVehicle& from);
  AdsbVehicle(AdsbVehicle&& from) noexcept
    : AdsbVehicle() {
    *this = ::std::move(from);
  }

  inline AdsbVehicle& operator=(const AdsbVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdsbVehicle& operator=(AdsbVehicle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdsbVehicle& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdsbVehicle* internal_default_instance() {
    return reinterpret_cast<const AdsbVehicle*>(
               &_AdsbVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AdsbVehicle& a, AdsbVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(AdsbVehicle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdsbVehicle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdsbVehicle* New() const final {
    return new AdsbVehicle();
  }

  AdsbVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdsbVehicle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdsbVehicle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AdsbVehicle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdsbVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.transponder.AdsbVehicle";
  }
  protected:
  explicit AdsbVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallsignFieldNumber = 9,
    kLatitudeDegFieldNumber = 2,
    kLongitudeDegFieldNumber = 3,
    kIcaoAddressFieldNumber = 1,
    kAbsoluteAltitudeMFieldNumber = 5,
    kHeadingDegFieldNumber = 6,
    kHorizontalVelocityMSFieldNumber = 7,
    kVerticalVelocityMSFieldNumber = 8,
    kEmitterTypeFieldNumber = 10,
    kSquawkFieldNumber = 13,
    kTslcSFieldNumber = 14,
  };
  // string callsign = 9;
  void clear_callsign();
  const std::string& callsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callsign();
  PROTOBUF_MUST_USE_RESULT std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // double latitude_deg = 2;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 3;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // uint32 icao_address = 1;
  void clear_icao_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 icao_address() const;
  void set_icao_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_icao_address() const;
  void _internal_set_icao_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float absolute_altitude_m = 5;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float heading_deg = 6;
  void clear_heading_deg();
  float heading_deg() const;
  void set_heading_deg(float value);
  private:
  float _internal_heading_deg() const;
  void _internal_set_heading_deg(float value);
  public:

  // float horizontal_velocity_m_s = 7;
  void clear_horizontal_velocity_m_s();
  float horizontal_velocity_m_s() const;
  void set_horizontal_velocity_m_s(float value);
  private:
  float _internal_horizontal_velocity_m_s() const;
  void _internal_set_horizontal_velocity_m_s(float value);
  public:

  // float vertical_velocity_m_s = 8;
  void clear_vertical_velocity_m_s();
  float vertical_velocity_m_s() const;
  void set_vertical_velocity_m_s(float value);
  private:
  float _internal_vertical_velocity_m_s() const;
  void _internal_set_vertical_velocity_m_s(float value);
  public:

  // .mavsdk.rpc.transponder.AdsbEmitterType emitter_type = 10;
  void clear_emitter_type();
  ::mavsdk::rpc::transponder::AdsbEmitterType emitter_type() const;
  void set_emitter_type(::mavsdk::rpc::transponder::AdsbEmitterType value);
  private:
  ::mavsdk::rpc::transponder::AdsbEmitterType _internal_emitter_type() const;
  void _internal_set_emitter_type(::mavsdk::rpc::transponder::AdsbEmitterType value);
  public:

  // uint32 squawk = 13;
  void clear_squawk();
  ::PROTOBUF_NAMESPACE_ID::uint32 squawk() const;
  void set_squawk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_squawk() const;
  void _internal_set_squawk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tslc_s = 14;
  void clear_tslc_s();
  ::PROTOBUF_NAMESPACE_ID::uint32 tslc_s() const;
  void set_tslc_s(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tslc_s() const;
  void _internal_set_tslc_s(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.transponder.AdsbVehicle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  double latitude_deg_;
  double longitude_deg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 icao_address_;
  float absolute_altitude_m_;
  float heading_deg_;
  float horizontal_velocity_m_s_;
  float vertical_velocity_m_s_;
  int emitter_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 squawk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tslc_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transponder_2ftransponder_2eproto;
};
// -------------------------------------------------------------------

class TransponderResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.transponder.TransponderResult) */ {
 public:
  inline TransponderResult() : TransponderResult(nullptr) {}
  ~TransponderResult() override;
  explicit constexpr TransponderResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransponderResult(const TransponderResult& from);
  TransponderResult(TransponderResult&& from) noexcept
    : TransponderResult() {
    *this = ::std::move(from);
  }

  inline TransponderResult& operator=(const TransponderResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransponderResult& operator=(TransponderResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransponderResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransponderResult* internal_default_instance() {
    return reinterpret_cast<const TransponderResult*>(
               &_TransponderResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransponderResult& a, TransponderResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TransponderResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransponderResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransponderResult* New() const final {
    return new TransponderResult();
  }

  TransponderResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransponderResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransponderResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransponderResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransponderResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.transponder.TransponderResult";
  }
  protected:
  explicit TransponderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransponderResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    TransponderResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    TransponderResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    TransponderResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    TransponderResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    TransponderResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    TransponderResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT =
    TransponderResult_Result_RESULT_TIMEOUT;
  static inline bool Result_IsValid(int value) {
    return TransponderResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    TransponderResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    TransponderResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    TransponderResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return TransponderResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return TransponderResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return TransponderResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.transponder.TransponderResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::transponder::TransponderResult_Result result() const;
  void set_result(::mavsdk::rpc::transponder::TransponderResult_Result value);
  private:
  ::mavsdk::rpc::transponder::TransponderResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::transponder::TransponderResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.transponder.TransponderResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transponder_2ftransponder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeTransponderRequest

// -------------------------------------------------------------------

// TransponderResponse

// .mavsdk.rpc.transponder.AdsbVehicle transponder = 1;
inline bool TransponderResponse::_internal_has_transponder() const {
  return this != internal_default_instance() && transponder_ != nullptr;
}
inline bool TransponderResponse::has_transponder() const {
  return _internal_has_transponder();
}
inline void TransponderResponse::clear_transponder() {
  if (GetArenaForAllocation() == nullptr && transponder_ != nullptr) {
    delete transponder_;
  }
  transponder_ = nullptr;
}
inline const ::mavsdk::rpc::transponder::AdsbVehicle& TransponderResponse::_internal_transponder() const {
  const ::mavsdk::rpc::transponder::AdsbVehicle* p = transponder_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::transponder::AdsbVehicle&>(
      ::mavsdk::rpc::transponder::_AdsbVehicle_default_instance_);
}
inline const ::mavsdk::rpc::transponder::AdsbVehicle& TransponderResponse::transponder() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.TransponderResponse.transponder)
  return _internal_transponder();
}
inline void TransponderResponse::unsafe_arena_set_allocated_transponder(
    ::mavsdk::rpc::transponder::AdsbVehicle* transponder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transponder_);
  }
  transponder_ = transponder;
  if (transponder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.transponder.TransponderResponse.transponder)
}
inline ::mavsdk::rpc::transponder::AdsbVehicle* TransponderResponse::release_transponder() {
  
  ::mavsdk::rpc::transponder::AdsbVehicle* temp = transponder_;
  transponder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::transponder::AdsbVehicle* TransponderResponse::unsafe_arena_release_transponder() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.transponder.TransponderResponse.transponder)
  
  ::mavsdk::rpc::transponder::AdsbVehicle* temp = transponder_;
  transponder_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::transponder::AdsbVehicle* TransponderResponse::_internal_mutable_transponder() {
  
  if (transponder_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::transponder::AdsbVehicle>(GetArenaForAllocation());
    transponder_ = p;
  }
  return transponder_;
}
inline ::mavsdk::rpc::transponder::AdsbVehicle* TransponderResponse::mutable_transponder() {
  ::mavsdk::rpc::transponder::AdsbVehicle* _msg = _internal_mutable_transponder();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.transponder.TransponderResponse.transponder)
  return _msg;
}
inline void TransponderResponse::set_allocated_transponder(::mavsdk::rpc::transponder::AdsbVehicle* transponder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transponder_;
  }
  if (transponder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::transponder::AdsbVehicle>::GetOwningArena(transponder);
    if (message_arena != submessage_arena) {
      transponder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transponder, submessage_arena);
    }
    
  } else {
    
  }
  transponder_ = transponder;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.transponder.TransponderResponse.transponder)
}

// -------------------------------------------------------------------

// SetRateTransponderRequest

// double rate_hz = 1;
inline void SetRateTransponderRequest::clear_rate_hz() {
  rate_hz_ = 0;
}
inline double SetRateTransponderRequest::_internal_rate_hz() const {
  return rate_hz_;
}
inline double SetRateTransponderRequest::rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.SetRateTransponderRequest.rate_hz)
  return _internal_rate_hz();
}
inline void SetRateTransponderRequest::_internal_set_rate_hz(double value) {
  
  rate_hz_ = value;
}
inline void SetRateTransponderRequest::set_rate_hz(double value) {
  _internal_set_rate_hz(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.SetRateTransponderRequest.rate_hz)
}

// -------------------------------------------------------------------

// SetRateTransponderResponse

// .mavsdk.rpc.transponder.TransponderResult transponder_result = 1;
inline bool SetRateTransponderResponse::_internal_has_transponder_result() const {
  return this != internal_default_instance() && transponder_result_ != nullptr;
}
inline bool SetRateTransponderResponse::has_transponder_result() const {
  return _internal_has_transponder_result();
}
inline void SetRateTransponderResponse::clear_transponder_result() {
  if (GetArenaForAllocation() == nullptr && transponder_result_ != nullptr) {
    delete transponder_result_;
  }
  transponder_result_ = nullptr;
}
inline const ::mavsdk::rpc::transponder::TransponderResult& SetRateTransponderResponse::_internal_transponder_result() const {
  const ::mavsdk::rpc::transponder::TransponderResult* p = transponder_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::transponder::TransponderResult&>(
      ::mavsdk::rpc::transponder::_TransponderResult_default_instance_);
}
inline const ::mavsdk::rpc::transponder::TransponderResult& SetRateTransponderResponse::transponder_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.SetRateTransponderResponse.transponder_result)
  return _internal_transponder_result();
}
inline void SetRateTransponderResponse::unsafe_arena_set_allocated_transponder_result(
    ::mavsdk::rpc::transponder::TransponderResult* transponder_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transponder_result_);
  }
  transponder_result_ = transponder_result;
  if (transponder_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.transponder.SetRateTransponderResponse.transponder_result)
}
inline ::mavsdk::rpc::transponder::TransponderResult* SetRateTransponderResponse::release_transponder_result() {
  
  ::mavsdk::rpc::transponder::TransponderResult* temp = transponder_result_;
  transponder_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::transponder::TransponderResult* SetRateTransponderResponse::unsafe_arena_release_transponder_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.transponder.SetRateTransponderResponse.transponder_result)
  
  ::mavsdk::rpc::transponder::TransponderResult* temp = transponder_result_;
  transponder_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::transponder::TransponderResult* SetRateTransponderResponse::_internal_mutable_transponder_result() {
  
  if (transponder_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::transponder::TransponderResult>(GetArenaForAllocation());
    transponder_result_ = p;
  }
  return transponder_result_;
}
inline ::mavsdk::rpc::transponder::TransponderResult* SetRateTransponderResponse::mutable_transponder_result() {
  ::mavsdk::rpc::transponder::TransponderResult* _msg = _internal_mutable_transponder_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.transponder.SetRateTransponderResponse.transponder_result)
  return _msg;
}
inline void SetRateTransponderResponse::set_allocated_transponder_result(::mavsdk::rpc::transponder::TransponderResult* transponder_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transponder_result_;
  }
  if (transponder_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::transponder::TransponderResult>::GetOwningArena(transponder_result);
    if (message_arena != submessage_arena) {
      transponder_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transponder_result, submessage_arena);
    }
    
  } else {
    
  }
  transponder_result_ = transponder_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.transponder.SetRateTransponderResponse.transponder_result)
}

// -------------------------------------------------------------------

// AdsbVehicle

// uint32 icao_address = 1;
inline void AdsbVehicle::clear_icao_address() {
  icao_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdsbVehicle::_internal_icao_address() const {
  return icao_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdsbVehicle::icao_address() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.icao_address)
  return _internal_icao_address();
}
inline void AdsbVehicle::_internal_set_icao_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  icao_address_ = value;
}
inline void AdsbVehicle::set_icao_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_icao_address(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.icao_address)
}

// double latitude_deg = 2;
inline void AdsbVehicle::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double AdsbVehicle::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double AdsbVehicle::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.latitude_deg)
  return _internal_latitude_deg();
}
inline void AdsbVehicle::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void AdsbVehicle::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.latitude_deg)
}

// double longitude_deg = 3;
inline void AdsbVehicle::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double AdsbVehicle::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double AdsbVehicle::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.longitude_deg)
  return _internal_longitude_deg();
}
inline void AdsbVehicle::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void AdsbVehicle::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.longitude_deg)
}

// float absolute_altitude_m = 5;
inline void AdsbVehicle::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float AdsbVehicle::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float AdsbVehicle::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void AdsbVehicle::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void AdsbVehicle::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.absolute_altitude_m)
}

// float heading_deg = 6;
inline void AdsbVehicle::clear_heading_deg() {
  heading_deg_ = 0;
}
inline float AdsbVehicle::_internal_heading_deg() const {
  return heading_deg_;
}
inline float AdsbVehicle::heading_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.heading_deg)
  return _internal_heading_deg();
}
inline void AdsbVehicle::_internal_set_heading_deg(float value) {
  
  heading_deg_ = value;
}
inline void AdsbVehicle::set_heading_deg(float value) {
  _internal_set_heading_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.heading_deg)
}

// float horizontal_velocity_m_s = 7;
inline void AdsbVehicle::clear_horizontal_velocity_m_s() {
  horizontal_velocity_m_s_ = 0;
}
inline float AdsbVehicle::_internal_horizontal_velocity_m_s() const {
  return horizontal_velocity_m_s_;
}
inline float AdsbVehicle::horizontal_velocity_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.horizontal_velocity_m_s)
  return _internal_horizontal_velocity_m_s();
}
inline void AdsbVehicle::_internal_set_horizontal_velocity_m_s(float value) {
  
  horizontal_velocity_m_s_ = value;
}
inline void AdsbVehicle::set_horizontal_velocity_m_s(float value) {
  _internal_set_horizontal_velocity_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.horizontal_velocity_m_s)
}

// float vertical_velocity_m_s = 8;
inline void AdsbVehicle::clear_vertical_velocity_m_s() {
  vertical_velocity_m_s_ = 0;
}
inline float AdsbVehicle::_internal_vertical_velocity_m_s() const {
  return vertical_velocity_m_s_;
}
inline float AdsbVehicle::vertical_velocity_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.vertical_velocity_m_s)
  return _internal_vertical_velocity_m_s();
}
inline void AdsbVehicle::_internal_set_vertical_velocity_m_s(float value) {
  
  vertical_velocity_m_s_ = value;
}
inline void AdsbVehicle::set_vertical_velocity_m_s(float value) {
  _internal_set_vertical_velocity_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.vertical_velocity_m_s)
}

// string callsign = 9;
inline void AdsbVehicle::clear_callsign() {
  callsign_.ClearToEmpty();
}
inline const std::string& AdsbVehicle::callsign() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.callsign)
  return _internal_callsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdsbVehicle::set_callsign(ArgT0&& arg0, ArgT... args) {
 
 callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.callsign)
}
inline std::string* AdsbVehicle::mutable_callsign() {
  std::string* _s = _internal_mutable_callsign();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.transponder.AdsbVehicle.callsign)
  return _s;
}
inline const std::string& AdsbVehicle::_internal_callsign() const {
  return callsign_.Get();
}
inline void AdsbVehicle::_internal_set_callsign(const std::string& value) {
  
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AdsbVehicle::_internal_mutable_callsign() {
  
  return callsign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AdsbVehicle::release_callsign() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.transponder.AdsbVehicle.callsign)
  return callsign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AdsbVehicle::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    
  } else {
    
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.transponder.AdsbVehicle.callsign)
}

// .mavsdk.rpc.transponder.AdsbEmitterType emitter_type = 10;
inline void AdsbVehicle::clear_emitter_type() {
  emitter_type_ = 0;
}
inline ::mavsdk::rpc::transponder::AdsbEmitterType AdsbVehicle::_internal_emitter_type() const {
  return static_cast< ::mavsdk::rpc::transponder::AdsbEmitterType >(emitter_type_);
}
inline ::mavsdk::rpc::transponder::AdsbEmitterType AdsbVehicle::emitter_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.emitter_type)
  return _internal_emitter_type();
}
inline void AdsbVehicle::_internal_set_emitter_type(::mavsdk::rpc::transponder::AdsbEmitterType value) {
  
  emitter_type_ = value;
}
inline void AdsbVehicle::set_emitter_type(::mavsdk::rpc::transponder::AdsbEmitterType value) {
  _internal_set_emitter_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.emitter_type)
}

// uint32 squawk = 13;
inline void AdsbVehicle::clear_squawk() {
  squawk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdsbVehicle::_internal_squawk() const {
  return squawk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdsbVehicle::squawk() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.squawk)
  return _internal_squawk();
}
inline void AdsbVehicle::_internal_set_squawk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  squawk_ = value;
}
inline void AdsbVehicle::set_squawk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_squawk(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.squawk)
}

// uint32 tslc_s = 14;
inline void AdsbVehicle::clear_tslc_s() {
  tslc_s_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdsbVehicle::_internal_tslc_s() const {
  return tslc_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdsbVehicle::tslc_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.AdsbVehicle.tslc_s)
  return _internal_tslc_s();
}
inline void AdsbVehicle::_internal_set_tslc_s(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tslc_s_ = value;
}
inline void AdsbVehicle::set_tslc_s(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tslc_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.AdsbVehicle.tslc_s)
}

// -------------------------------------------------------------------

// TransponderResult

// .mavsdk.rpc.transponder.TransponderResult.Result result = 1;
inline void TransponderResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::transponder::TransponderResult_Result TransponderResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::transponder::TransponderResult_Result >(result_);
}
inline ::mavsdk::rpc::transponder::TransponderResult_Result TransponderResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.TransponderResult.result)
  return _internal_result();
}
inline void TransponderResult::_internal_set_result(::mavsdk::rpc::transponder::TransponderResult_Result value) {
  
  result_ = value;
}
inline void TransponderResult::set_result(::mavsdk::rpc::transponder::TransponderResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.TransponderResult.result)
}

// string result_str = 2;
inline void TransponderResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& TransponderResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.transponder.TransponderResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransponderResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.transponder.TransponderResult.result_str)
}
inline std::string* TransponderResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.transponder.TransponderResult.result_str)
  return _s;
}
inline const std::string& TransponderResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void TransponderResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransponderResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransponderResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.transponder.TransponderResult.result_str)
  return result_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransponderResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.transponder.TransponderResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transponder
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::transponder::TransponderResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::transponder::TransponderResult_Result>() {
  return ::mavsdk::rpc::transponder::TransponderResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::transponder::AdsbEmitterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::transponder::AdsbEmitterType>() {
  return ::mavsdk::rpc::transponder::AdsbEmitterType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transponder_2ftransponder_2eproto
