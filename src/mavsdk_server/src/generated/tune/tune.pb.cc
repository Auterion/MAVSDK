// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tune/tune.proto

#include "tune/tune.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tune_2ftune_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TuneDescription_tune_2ftune_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tune_2ftune_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TuneResult_tune_2ftune_2eproto;
namespace mavsdk {
namespace rpc {
namespace tune {
class PlayTuneRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayTuneRequest> _instance;
} _PlayTuneRequest_default_instance_;
class PlayTuneResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayTuneResponse> _instance;
} _PlayTuneResponse_default_instance_;
class TuneDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TuneDescription> _instance;
} _TuneDescription_default_instance_;
class TuneResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TuneResult> _instance;
} _TuneResult_default_instance_;
}  // namespace tune
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_PlayTuneRequest_tune_2ftune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::tune::_PlayTuneRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::tune::PlayTuneRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::tune::PlayTuneRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayTuneRequest_tune_2ftune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayTuneRequest_tune_2ftune_2eproto}, {
      &scc_info_TuneDescription_tune_2ftune_2eproto.base,}};

static void InitDefaultsscc_info_PlayTuneResponse_tune_2ftune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::tune::_PlayTuneResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::tune::PlayTuneResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::tune::PlayTuneResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayTuneResponse_tune_2ftune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayTuneResponse_tune_2ftune_2eproto}, {
      &scc_info_TuneResult_tune_2ftune_2eproto.base,}};

static void InitDefaultsscc_info_TuneDescription_tune_2ftune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::tune::_TuneDescription_default_instance_;
    new (ptr) ::mavsdk::rpc::tune::TuneDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::tune::TuneDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TuneDescription_tune_2ftune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TuneDescription_tune_2ftune_2eproto}, {}};

static void InitDefaultsscc_info_TuneResult_tune_2ftune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::tune::_TuneResult_default_instance_;
    new (ptr) ::mavsdk::rpc::tune::TuneResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::tune::TuneResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TuneResult_tune_2ftune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TuneResult_tune_2ftune_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tune_2ftune_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tune_2ftune_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tune_2ftune_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tune_2ftune_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::PlayTuneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::PlayTuneRequest, tune_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::PlayTuneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::PlayTuneResponse, tune_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::TuneDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::TuneDescription, song_elements_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::TuneDescription, tempo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::TuneResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::TuneResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::tune::TuneResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::tune::PlayTuneRequest)},
  { 6, -1, sizeof(::mavsdk::rpc::tune::PlayTuneResponse)},
  { 12, -1, sizeof(::mavsdk::rpc::tune::TuneDescription)},
  { 19, -1, sizeof(::mavsdk::rpc::tune::TuneResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::tune::_PlayTuneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::tune::_PlayTuneResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::tune::_TuneDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::tune::_TuneResult_default_instance_),
};

const char descriptor_table_protodef_tune_2ftune_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017tune/tune.proto\022\017mavsdk.rpc.tune\"M\n\017Pl"
  "ayTuneRequest\022:\n\020tune_description\030\001 \001(\0132"
  " .mavsdk.rpc.tune.TuneDescription\"D\n\020Pla"
  "yTuneResponse\0220\n\013tune_result\030\001 \001(\0132\033.mav"
  "sdk.rpc.tune.TuneResult\"U\n\017TuneDescripti"
  "on\0223\n\rsong_elements\030\001 \003(\0162\034.mavsdk.rpc.t"
  "une.SongElement\022\r\n\005tempo\030\002 \001(\005\"\314\001\n\nTuneR"
  "esult\0222\n\006result\030\001 \001(\0162\".mavsdk.rpc.tune."
  "TuneResult.Result\022\022\n\nresult_str\030\002 \001(\t\"v\n"
  "\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_SU"
  "CCESS\020\001\022\030\n\024RESULT_INVALID_TEMPO\020\002\022\030\n\024RES"
  "ULT_TUNE_TOO_LONG\020\003\022\020\n\014RESULT_ERROR\020\004*\321\004"
  "\n\013SongElement\022\035\n\031SONG_ELEMENT_STYLE_LEGA"
  "TO\020\000\022\035\n\031SONG_ELEMENT_STYLE_NORMAL\020\001\022\037\n\033S"
  "ONG_ELEMENT_STYLE_STACCATO\020\002\022\033\n\027SONG_ELE"
  "MENT_DURATION_1\020\003\022\033\n\027SONG_ELEMENT_DURATI"
  "ON_2\020\004\022\033\n\027SONG_ELEMENT_DURATION_4\020\005\022\033\n\027S"
  "ONG_ELEMENT_DURATION_8\020\006\022\034\n\030SONG_ELEMENT"
  "_DURATION_16\020\007\022\034\n\030SONG_ELEMENT_DURATION_"
  "32\020\010\022\027\n\023SONG_ELEMENT_NOTE_A\020\t\022\027\n\023SONG_EL"
  "EMENT_NOTE_B\020\n\022\027\n\023SONG_ELEMENT_NOTE_C\020\013\022"
  "\027\n\023SONG_ELEMENT_NOTE_D\020\014\022\027\n\023SONG_ELEMENT"
  "_NOTE_E\020\r\022\027\n\023SONG_ELEMENT_NOTE_F\020\016\022\027\n\023SO"
  "NG_ELEMENT_NOTE_G\020\017\022\033\n\027SONG_ELEMENT_NOTE"
  "_PAUSE\020\020\022\026\n\022SONG_ELEMENT_SHARP\020\021\022\025\n\021SONG"
  "_ELEMENT_FLAT\020\022\022\032\n\026SONG_ELEMENT_OCTAVE_U"
  "P\020\023\022\034\n\030SONG_ELEMENT_OCTAVE_DOWN\020\0242`\n\013Tun"
  "eService\022Q\n\010PlayTune\022 .mavsdk.rpc.tune.P"
  "layTuneRequest\032!.mavsdk.rpc.tune.PlayTun"
  "eResponse\"\000B\033\n\016io.mavsdk.tuneB\tTuneProto"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tune_2ftune_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tune_2ftune_2eproto_sccs[4] = {
  &scc_info_PlayTuneRequest_tune_2ftune_2eproto.base,
  &scc_info_PlayTuneResponse_tune_2ftune_2eproto.base,
  &scc_info_TuneDescription_tune_2ftune_2eproto.base,
  &scc_info_TuneResult_tune_2ftune_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tune_2ftune_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tune_2ftune_2eproto = {
  false, false, descriptor_table_protodef_tune_2ftune_2eproto, "tune/tune.proto", 1208,
  &descriptor_table_tune_2ftune_2eproto_once, descriptor_table_tune_2ftune_2eproto_sccs, descriptor_table_tune_2ftune_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_tune_2ftune_2eproto::offsets,
  file_level_metadata_tune_2ftune_2eproto, 4, file_level_enum_descriptors_tune_2ftune_2eproto, file_level_service_descriptors_tune_2ftune_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tune_2ftune_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tune_2ftune_2eproto)), true);
namespace mavsdk {
namespace rpc {
namespace tune {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TuneResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tune_2ftune_2eproto);
  return file_level_enum_descriptors_tune_2ftune_2eproto[0];
}
bool TuneResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TuneResult_Result TuneResult::RESULT_UNKNOWN;
constexpr TuneResult_Result TuneResult::RESULT_SUCCESS;
constexpr TuneResult_Result TuneResult::RESULT_INVALID_TEMPO;
constexpr TuneResult_Result TuneResult::RESULT_TUNE_TOO_LONG;
constexpr TuneResult_Result TuneResult::RESULT_ERROR;
constexpr TuneResult_Result TuneResult::Result_MIN;
constexpr TuneResult_Result TuneResult::Result_MAX;
constexpr int TuneResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SongElement_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tune_2ftune_2eproto);
  return file_level_enum_descriptors_tune_2ftune_2eproto[1];
}
bool SongElement_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlayTuneRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::tune::_PlayTuneRequest_default_instance_._instance.get_mutable()->tune_description_ = const_cast< ::mavsdk::rpc::tune::TuneDescription*>(
      ::mavsdk::rpc::tune::TuneDescription::internal_default_instance());
}
class PlayTuneRequest::_Internal {
 public:
  static const ::mavsdk::rpc::tune::TuneDescription& tune_description(const PlayTuneRequest* msg);
};

const ::mavsdk::rpc::tune::TuneDescription&
PlayTuneRequest::_Internal::tune_description(const PlayTuneRequest* msg) {
  return *msg->tune_description_;
}
PlayTuneRequest::PlayTuneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.tune.PlayTuneRequest)
}
PlayTuneRequest::PlayTuneRequest(const PlayTuneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tune_description()) {
    tune_description_ = new ::mavsdk::rpc::tune::TuneDescription(*from.tune_description_);
  } else {
    tune_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.tune.PlayTuneRequest)
}

void PlayTuneRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayTuneRequest_tune_2ftune_2eproto.base);
  tune_description_ = nullptr;
}

PlayTuneRequest::~PlayTuneRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.tune.PlayTuneRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayTuneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tune_description_;
}

void PlayTuneRequest::ArenaDtor(void* object) {
  PlayTuneRequest* _this = reinterpret_cast< PlayTuneRequest* >(object);
  (void)_this;
}
void PlayTuneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayTuneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayTuneRequest& PlayTuneRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayTuneRequest_tune_2ftune_2eproto.base);
  return *internal_default_instance();
}


void PlayTuneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.tune.PlayTuneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tune_description_ != nullptr) {
    delete tune_description_;
  }
  tune_description_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayTuneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.tune.TuneDescription tune_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tune_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayTuneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.tune.PlayTuneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.tune.TuneDescription tune_description = 1;
  if (this->has_tune_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tune_description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.tune.PlayTuneRequest)
  return target;
}

size_t PlayTuneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.tune.PlayTuneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.tune.TuneDescription tune_description = 1;
  if (this->has_tune_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tune_description_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayTuneRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.tune.PlayTuneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayTuneRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayTuneRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.tune.PlayTuneRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.tune.PlayTuneRequest)
    MergeFrom(*source);
  }
}

void PlayTuneRequest::MergeFrom(const PlayTuneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.tune.PlayTuneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tune_description()) {
    _internal_mutable_tune_description()->::mavsdk::rpc::tune::TuneDescription::MergeFrom(from._internal_tune_description());
  }
}

void PlayTuneRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.tune.PlayTuneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayTuneRequest::CopyFrom(const PlayTuneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.tune.PlayTuneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayTuneRequest::IsInitialized() const {
  return true;
}

void PlayTuneRequest::InternalSwap(PlayTuneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tune_description_, other->tune_description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayTuneRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayTuneResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::tune::_PlayTuneResponse_default_instance_._instance.get_mutable()->tune_result_ = const_cast< ::mavsdk::rpc::tune::TuneResult*>(
      ::mavsdk::rpc::tune::TuneResult::internal_default_instance());
}
class PlayTuneResponse::_Internal {
 public:
  static const ::mavsdk::rpc::tune::TuneResult& tune_result(const PlayTuneResponse* msg);
};

const ::mavsdk::rpc::tune::TuneResult&
PlayTuneResponse::_Internal::tune_result(const PlayTuneResponse* msg) {
  return *msg->tune_result_;
}
PlayTuneResponse::PlayTuneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.tune.PlayTuneResponse)
}
PlayTuneResponse::PlayTuneResponse(const PlayTuneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tune_result()) {
    tune_result_ = new ::mavsdk::rpc::tune::TuneResult(*from.tune_result_);
  } else {
    tune_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.tune.PlayTuneResponse)
}

void PlayTuneResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayTuneResponse_tune_2ftune_2eproto.base);
  tune_result_ = nullptr;
}

PlayTuneResponse::~PlayTuneResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.tune.PlayTuneResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayTuneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tune_result_;
}

void PlayTuneResponse::ArenaDtor(void* object) {
  PlayTuneResponse* _this = reinterpret_cast< PlayTuneResponse* >(object);
  (void)_this;
}
void PlayTuneResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayTuneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayTuneResponse& PlayTuneResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayTuneResponse_tune_2ftune_2eproto.base);
  return *internal_default_instance();
}


void PlayTuneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.tune.PlayTuneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tune_result_ != nullptr) {
    delete tune_result_;
  }
  tune_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayTuneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.tune.TuneResult tune_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tune_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayTuneResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.tune.PlayTuneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.tune.TuneResult tune_result = 1;
  if (this->has_tune_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tune_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.tune.PlayTuneResponse)
  return target;
}

size_t PlayTuneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.tune.PlayTuneResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.tune.TuneResult tune_result = 1;
  if (this->has_tune_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tune_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayTuneResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.tune.PlayTuneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayTuneResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayTuneResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.tune.PlayTuneResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.tune.PlayTuneResponse)
    MergeFrom(*source);
  }
}

void PlayTuneResponse::MergeFrom(const PlayTuneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.tune.PlayTuneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tune_result()) {
    _internal_mutable_tune_result()->::mavsdk::rpc::tune::TuneResult::MergeFrom(from._internal_tune_result());
  }
}

void PlayTuneResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.tune.PlayTuneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayTuneResponse::CopyFrom(const PlayTuneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.tune.PlayTuneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayTuneResponse::IsInitialized() const {
  return true;
}

void PlayTuneResponse::InternalSwap(PlayTuneResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tune_result_, other->tune_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayTuneResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TuneDescription::InitAsDefaultInstance() {
}
class TuneDescription::_Internal {
 public:
};

TuneDescription::TuneDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  song_elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.tune.TuneDescription)
}
TuneDescription::TuneDescription(const TuneDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      song_elements_(from.song_elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tempo_ = from.tempo_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.tune.TuneDescription)
}

void TuneDescription::SharedCtor() {
  tempo_ = 0;
}

TuneDescription::~TuneDescription() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.tune.TuneDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuneDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TuneDescription::ArenaDtor(void* object) {
  TuneDescription* _this = reinterpret_cast< TuneDescription* >(object);
  (void)_this;
}
void TuneDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuneDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TuneDescription& TuneDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TuneDescription_tune_2ftune_2eproto.base);
  return *internal_default_instance();
}


void TuneDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.tune.TuneDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  song_elements_.Clear();
  tempo_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuneDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mavsdk.rpc.tune.SongElement song_elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_song_elements(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_song_elements(static_cast<::mavsdk::rpc::tune::SongElement>(val));
        } else goto handle_unusual;
        continue;
      // int32 tempo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tempo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuneDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.tune.TuneDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.tune.SongElement song_elements = 1;
  {
    int byte_size = _song_elements_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, song_elements_, byte_size, target);
    }
  }

  // int32 tempo = 2;
  if (this->tempo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tempo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.tune.TuneDescription)
  return target;
}

size_t TuneDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.tune.TuneDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.tune.SongElement song_elements = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_song_elements_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_song_elements(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _song_elements_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 tempo = 2;
  if (this->tempo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tempo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuneDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.tune.TuneDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const TuneDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuneDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.tune.TuneDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.tune.TuneDescription)
    MergeFrom(*source);
  }
}

void TuneDescription::MergeFrom(const TuneDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.tune.TuneDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  song_elements_.MergeFrom(from.song_elements_);
  if (from.tempo() != 0) {
    _internal_set_tempo(from._internal_tempo());
  }
}

void TuneDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.tune.TuneDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuneDescription::CopyFrom(const TuneDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.tune.TuneDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuneDescription::IsInitialized() const {
  return true;
}

void TuneDescription::InternalSwap(TuneDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  song_elements_.InternalSwap(&other->song_elements_);
  swap(tempo_, other->tempo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuneDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TuneResult::InitAsDefaultInstance() {
}
class TuneResult::_Internal {
 public:
};

TuneResult::TuneResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.tune.TuneResult)
}
TuneResult::TuneResult(const TuneResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_str(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.tune.TuneResult)
}

void TuneResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TuneResult_tune_2ftune_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

TuneResult::~TuneResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.tune.TuneResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TuneResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TuneResult::ArenaDtor(void* object) {
  TuneResult* _this = reinterpret_cast< TuneResult* >(object);
  (void)_this;
}
void TuneResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TuneResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TuneResult& TuneResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TuneResult_tune_2ftune_2eproto.base);
  return *internal_default_instance();
}


void TuneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.tune.TuneResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuneResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.tune.TuneResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::tune::TuneResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.tune.TuneResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TuneResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.tune.TuneResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.tune.TuneResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.tune.TuneResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.tune.TuneResult)
  return target;
}

size_t TuneResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.tune.TuneResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.tune.TuneResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuneResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.tune.TuneResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TuneResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuneResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.tune.TuneResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.tune.TuneResult)
    MergeFrom(*source);
  }
}

void TuneResult::MergeFrom(const TuneResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.tune.TuneResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void TuneResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.tune.TuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuneResult::CopyFrom(const TuneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.tune.TuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuneResult::IsInitialized() const {
  return true;
}

void TuneResult::InternalSwap(TuneResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuneResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tune
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::tune::PlayTuneRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::tune::PlayTuneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::tune::PlayTuneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::tune::PlayTuneResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::tune::PlayTuneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::tune::PlayTuneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::tune::TuneDescription* Arena::CreateMaybeMessage< ::mavsdk::rpc::tune::TuneDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::tune::TuneDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::tune::TuneResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::tune::TuneResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::tune::TuneResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
