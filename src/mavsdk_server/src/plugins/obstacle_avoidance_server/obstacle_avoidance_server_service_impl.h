// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/obstacle_avoidance_server/obstacle_avoidance_server.proto)

#include "obstacle_avoidance_server/obstacle_avoidance_server.grpc.pb.h"
#include "plugins/obstacle_avoidance_server/obstacle_avoidance_server.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename ObstacleAvoidanceServer = ObstacleAvoidanceServer>
class ObstacleAvoidanceServerServiceImpl final
    : public rpc::obstacle_avoidance_server::ObstacleAvoidanceServerService::Service {
public:
    ObstacleAvoidanceServerServiceImpl(ObstacleAvoidanceServer& obstacle_avoidance_server) :
        _obstacle_avoidance_server(obstacle_avoidance_server)
    {}

    static rpc::obstacle_avoidance_server::ControlType::Type
    translateToRpcType(const mavsdk::ObstacleAvoidanceServer::ControlType::Type& type)
    {
        switch (type) {
            default:
                LogErr() << "Unknown type enum value: " << static_cast<int>(type);
            // FALLTHROUGH
            case mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlUnknown:
                return rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_UNKNOWN;
            case mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlStart:
                return rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_START;
            case mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlStop:
                return rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_STOP;
            case mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlRestart:
                return rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_RESTART;
            case mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlEnable:
                return rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_ENABLE;
            case mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlDisable:
                return rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_DISABLE;
        }
    }

    static mavsdk::ObstacleAvoidanceServer::ControlType::Type
    translateFromRpcType(const rpc::obstacle_avoidance_server::ControlType::Type type)
    {
        switch (type) {
            default:
                LogErr() << "Unknown type enum value: " << static_cast<int>(type);
            // FALLTHROUGH
            case rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_UNKNOWN:
                return mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlUnknown;
            case rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_START:
                return mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlStart;
            case rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_STOP:
                return mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlStop;
            case rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_RESTART:
                return mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlRestart;
            case rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_ENABLE:
                return mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlEnable;
            case rpc::obstacle_avoidance_server::ControlType_Type_TYPE_CONTROL_DISABLE:
                return mavsdk::ObstacleAvoidanceServer::ControlType::Type::ControlDisable;
        }
    }

    static std::unique_ptr<rpc::obstacle_avoidance_server::ControlType>
    translateToRpcControlType(const mavsdk::ObstacleAvoidanceServer::ControlType& control_type)
    {
        auto rpc_obj = std::make_unique<rpc::obstacle_avoidance_server::ControlType>();

        rpc_obj->set_control_type(translateToRpcType(control_type.control_type));

        return rpc_obj;
    }

    static mavsdk::ObstacleAvoidanceServer::ControlType
    translateFromRpcControlType(const rpc::obstacle_avoidance_server::ControlType& control_type)
    {
        mavsdk::ObstacleAvoidanceServer::ControlType obj;

        obj.control_type = translateFromRpcType(control_type.control_type());

        return obj;
    }

    grpc::Status SubscribeControl(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::obstacle_avoidance_server::SubscribeControlRequest* /* request */,
        grpc::ServerWriter<rpc::obstacle_avoidance_server::ControlResponse>* writer) override
    {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);

        std::mutex subscribe_mutex{};

        _obstacle_avoidance_server.subscribe_control(
            [this, &writer, &stream_closed_promise, is_finished, &subscribe_mutex](
                const mavsdk::ObstacleAvoidanceServer::ControlType control) {
                rpc::obstacle_avoidance_server::ControlResponse rpc_response;

                rpc_response.set_allocated_control_type(
                    translateToRpcControlType(control).release());

                std::unique_lock<std::mutex> lock(subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _obstacle_avoidance_server.subscribe_control(nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    lock.unlock();
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    ObstacleAvoidanceServer& _obstacle_avoidance_server;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk