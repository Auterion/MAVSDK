// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/custom_action/custom_action.proto)

#include <iomanip>

#include "custom_action_impl.h"
#include "plugins/custom_action/custom_action.h"

namespace mavsdk {

using ActionToExecute = CustomAction::ActionToExecute;
using Command = CustomAction::Command;
using Stage = CustomAction::Stage;
using ActionMetadata = CustomAction::ActionMetadata;

CustomAction::CustomAction(System& system) : PluginBase(), _impl{new CustomActionImpl(system)} {}

CustomAction::CustomAction(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{new CustomActionImpl(system)}
{}

CustomAction::~CustomAction() {}

void CustomAction::set_custom_action_async(ActionToExecute action, const ResultCallback callback)
{
    _impl->set_custom_action_async(action, callback);
}

CustomAction::Result CustomAction::set_custom_action(ActionToExecute action) const
{
    return _impl->set_custom_action(action);
}

void CustomAction::subscribe_custom_action(CustomActionCallback callback)
{
    _impl->custom_action_async(callback);
}

CustomAction::ActionToExecute CustomAction::custom_action() const
{
    return _impl->custom_action();
}

void CustomAction::respond_custom_action_async(
    ActionToExecute action, CustomActionResult result, const ResultCallback callback)
{
    _impl->respond_custom_action_async(action, result, callback);
}

CustomAction::Result
CustomAction::respond_custom_action(ActionToExecute action, CustomActionResult result) const
{
    return _impl->respond_custom_action(action, result);
}

void CustomAction::custom_action_metadata_async(
    ActionToExecute action, std::string file_path, const CustomActionMetadataCallback callback)
{
    _impl->custom_action_metadata_async(action, file_path, callback);
}

std::pair<CustomAction::Result, CustomAction::ActionMetadata>
CustomAction::custom_action_metadata(ActionToExecute action, std::string file_path) const
{
    return _impl->custom_action_metadata(action, file_path);
}

bool operator==(const CustomAction::ActionToExecute& lhs, const CustomAction::ActionToExecute& rhs)
{
    return (rhs.id == lhs.id) && (rhs.timeout == lhs.timeout) && (rhs.progress == lhs.progress);
}

std::ostream& operator<<(std::ostream& str, CustomAction::ActionToExecute const& action_to_execute)
{
    str << std::setprecision(15);
    str << "action_to_execute:" << '\n' << "{\n";
    str << "    id: " << action_to_execute.id << '\n';
    str << "    timeout: " << action_to_execute.timeout << '\n';
    str << "    progress: " << action_to_execute.progress << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, CustomAction::Command::Type const& type)
{
    switch (type) {
        case CustomAction::Command::Type::Long:
            return str << "Long";
        case CustomAction::Command::Type::Int:
            return str << "Int";
        default:
            return str << "Unknown";
    }
}
bool operator==(const CustomAction::Command& lhs, const CustomAction::Command& rhs)
{
    return (rhs.type == lhs.type) && (rhs.target_system_id == lhs.target_system_id) &&
           (rhs.target_component_id == lhs.target_component_id) && (rhs.command == lhs.command) &&
           ((std::isnan(rhs.param1) && std::isnan(lhs.param1)) || rhs.param1 == lhs.param1) &&
           ((std::isnan(rhs.param2) && std::isnan(lhs.param2)) || rhs.param2 == lhs.param2) &&
           ((std::isnan(rhs.param3) && std::isnan(lhs.param3)) || rhs.param3 == lhs.param3) &&
           ((std::isnan(rhs.param4) && std::isnan(lhs.param4)) || rhs.param4 == lhs.param4) &&
           ((std::isnan(rhs.param5) && std::isnan(lhs.param5)) || rhs.param5 == lhs.param5) &&
           ((std::isnan(rhs.param6) && std::isnan(lhs.param6)) || rhs.param6 == lhs.param6) &&
           ((std::isnan(rhs.param7) && std::isnan(lhs.param7)) || rhs.param7 == lhs.param7);
}

std::ostream& operator<<(std::ostream& str, CustomAction::Command const& command)
{
    str << std::setprecision(15);
    str << "command:" << '\n' << "{\n";
    str << "    type: " << command.type << '\n';
    str << "    target_system_id: " << command.target_system_id << '\n';
    str << "    target_component_id: " << command.target_component_id << '\n';
    str << "    command: " << command.command << '\n';
    str << "    param1: " << command.param1 << '\n';
    str << "    param2: " << command.param2 << '\n';
    str << "    param3: " << command.param3 << '\n';
    str << "    param4: " << command.param4 << '\n';
    str << "    param5: " << command.param5 << '\n';
    str << "    param6: " << command.param6 << '\n';
    str << "    param7: " << command.param7 << '\n';
    str << '}';
    return str;
}

bool operator==(const CustomAction::Stage& lhs, const CustomAction::Stage& rhs)
{
    return (rhs.command == lhs.command) && (rhs.run_script == lhs.run_script) &&
           (rhs.timestamp_start == lhs.timestamp_start) &&
           (rhs.timestamp_stop == lhs.timestamp_stop);
}

std::ostream& operator<<(std::ostream& str, CustomAction::Stage const& stage)
{
    str << std::setprecision(15);
    str << "stage:" << '\n' << "{\n";
    str << "    command: " << stage.command << '\n';
    str << "    run_script: " << stage.run_script << '\n';
    str << "    timestamp_start: " << stage.timestamp_start << '\n';
    str << "    timestamp_stop: " << stage.timestamp_stop << '\n';
    str << '}';
    return str;
}

bool operator==(const CustomAction::ActionMetadata& lhs, const CustomAction::ActionMetadata& rhs)
{
    return (rhs.id == lhs.id) && (rhs.name == lhs.name) && (rhs.description == lhs.description) &&
           (rhs.run_general_script == lhs.run_general_script) && (rhs.stages == lhs.stages);
}

std::ostream& operator<<(std::ostream& str, CustomAction::ActionMetadata const& action_metadata)
{
    str << std::setprecision(15);
    str << "action_metadata:" << '\n' << "{\n";
    str << "    id: " << action_metadata.id << '\n';
    str << "    name: " << action_metadata.name << '\n';
    str << "    description: " << action_metadata.description << '\n';
    str << "    run_general_script: " << action_metadata.run_general_script << '\n';
    str << "    stages: [";
    for (auto it = action_metadata.stages.begin(); it != action_metadata.stages.end(); ++it) {
        str << *it;
        str << (it + 1 != action_metadata.stages.end() ? ", " : "]\n");
    }
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, CustomAction::Result const& result)
{
    switch (result) {
        case CustomAction::Result::Unknown:
            return str << "Unknown";
        case CustomAction::Result::Success:
            return str << "Success";
        case CustomAction::Result::Error:
            return str << "Error";
        case CustomAction::Result::Timeout:
            return str << "Timeout";
        case CustomAction::Result::Unsupported:
            return str << "Unsupported";
        case CustomAction::Result::InProgress:
            return str << "In Progress";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk