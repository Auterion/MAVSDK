// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/custom_action/custom_action.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

namespace mavsdk {

class System;
class CustomActionImpl;

/**
 * @brief Allows to send a receive and process custom actions, which
 * description and parameters are defined by a metadata XML file
 */
class CustomAction : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto custom_action = CustomAction(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit CustomAction(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto custom_action = CustomAction(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit CustomAction(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~CustomAction();

    /**
     * @brief
     */
    struct ActionToExecute {
        int32_t id{}; /**< @brief ID of the action */
        int32_t timeout{}; /**< @brief Action timeout / max execution time */
        int32_t progress{}; /**< @brief Action progress */
    };

    /**
     * @brief Equal operator to compare two `CustomAction::ActionToExecute` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const CustomAction::ActionToExecute& lhs, const CustomAction::ActionToExecute& rhs);

    /**
     * @brief Stream operator to print information about a `CustomAction::ActionToExecute`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, CustomAction::ActionToExecute const& action_to_execute);

    /**
     * @brief Possible results returned for action requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Command was accepted. */
        Error, /**< @brief Error occurred sending the command. */
        Timeout, /**< @brief Command timed out. */
        Unsupported, /**< @brief Functionality not supported. */
        InProgress, /**< @brief Command in progress. */
    };

    /**
     * @brief Stream operator to print information about a `CustomAction::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, CustomAction::Result const& result);

    /**
     * @brief Callback type for asynchronous CustomAction calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Send custom action command to the system.
     *
     * This function is non-blocking. See 'set_custom_action' for the blocking counterpart.
     */
    void set_custom_action_async(ActionToExecute action, const ResultCallback callback);

    /**
     * @brief Send custom action command to the system.
     *
     * This function is blocking. See 'set_custom_action_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result set_custom_action(ActionToExecute action) const;

    /**
     * @brief Callback type for subscribe_custom_action.
     */

    using CustomActionCallback = std::function<void(ActionToExecute)>;

    /**
     * @brief Receive and process custom action command.
     */
    void subscribe_custom_action(CustomActionCallback callback);

    /**
     * @brief Poll for 'ActionToExecute' (blocking).
     *
     * @return One ActionToExecute update.
     */
    ActionToExecute custom_action() const;

    /**
     * @brief Respond to the custom action command after completion.
     *
     * This function is non-blocking. See 'respond_custom_action' for the blocking counterpart.
     */
    void respond_custom_action_async(
        ActionToExecute action, Result result, const ResultCallback callback);

    /**
     * @brief Respond to the custom action command after completion.
     *
     * This function is blocking. See 'respond_custom_action_async' for the non-blocking
     * counterpart.
     *
     * @return Result of request.
     */
    Result respond_custom_action(ActionToExecute action, Result result) const;

    /**
     * @brief Copy constructor.
     */
    CustomAction(const CustomAction& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const CustomAction& operator=(const CustomAction&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<CustomActionImpl> _impl;
};

} // namespace mavsdk
