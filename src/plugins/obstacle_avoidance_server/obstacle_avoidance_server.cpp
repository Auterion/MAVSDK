// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/obstacle_avoidance_server/obstacle_avoidance_server.proto)

#include <iomanip>

#include "obstacle_avoidance_server_impl.h"
#include "plugins/obstacle_avoidance_server/obstacle_avoidance_server.h"

namespace mavsdk {

using ControlType = ObstacleAvoidanceServer::ControlType;

ObstacleAvoidanceServer::ObstacleAvoidanceServer(System& system) :
    PluginBase(),
    _impl{new ObstacleAvoidanceServerImpl(system)}
{}

ObstacleAvoidanceServer::ObstacleAvoidanceServer(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{new ObstacleAvoidanceServerImpl(system)}
{}

ObstacleAvoidanceServer::~ObstacleAvoidanceServer() {}

void ObstacleAvoidanceServer::subscribe_control(ControlCallback callback)
{
    _impl->control_async(callback);
}

ObstacleAvoidanceServer::ControlType ObstacleAvoidanceServer::control() const
{
    return _impl->control();
}

std::ostream& operator<<(std::ostream& str, ObstacleAvoidanceServer::ControlType::Type const& type)
{
    switch (type) {
        case ObstacleAvoidanceServer::ControlType::Type::ControlUnknown:
            return str << "Control Unknown";
        case ObstacleAvoidanceServer::ControlType::Type::ControlStart:
            return str << "Control Start";
        case ObstacleAvoidanceServer::ControlType::Type::ControlStop:
            return str << "Control Stop";
        case ObstacleAvoidanceServer::ControlType::Type::ControlRestart:
            return str << "Control Restart";
        case ObstacleAvoidanceServer::ControlType::Type::ControlEnable:
            return str << "Control Enable";
        case ObstacleAvoidanceServer::ControlType::Type::ControlDisable:
            return str << "Control Disable";
        default:
            return str << "Unknown";
    }
}
bool operator==(
    const ObstacleAvoidanceServer::ControlType& lhs,
    const ObstacleAvoidanceServer::ControlType& rhs)
{
    return (rhs.control_type == lhs.control_type);
}

std::ostream&
operator<<(std::ostream& str, ObstacleAvoidanceServer::ControlType const& control_type)
{
    str << std::setprecision(15);
    str << "control_type:" << '\n' << "{\n";
    str << "    control_type: " << control_type.control_type << '\n';
    str << '}';
    return str;
}

} // namespace mavsdk