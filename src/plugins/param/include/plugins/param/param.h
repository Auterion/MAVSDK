// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/param/param.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

namespace mavsdk {

class System;
class SystemImpl;
class ParamImpl;

/**
 * @brief Provide raw access to get and set parameters.
 */
class Param : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto param = Param(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Param(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto param = Param(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Param(std::shared_ptr<System> system); // new

    explicit Param(SystemImpl* system_impl); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~Param();

    /**
     * @brief Type for integer parameters.
     */
    struct IntParam {
        std::string name{}; /**< @brief Name of the parameter */
        int32_t value{}; /**< @brief Value of the parameter */
    };

    /**
     * @brief Equal operator to compare two `Param::IntParam` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Param::IntParam& lhs, const Param::IntParam& rhs);

    /**
     * @brief Stream operator to print information about a `Param::IntParam`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Param::IntParam const& int_param);

    /**
     * @brief Type for float paramters.
     */
    struct FloatParam {
        std::string name{}; /**< @brief Name of the parameter */
        float value{}; /**< @brief Value of the parameter */
    };

    /**
     * @brief Equal operator to compare two `Param::FloatParam` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Param::FloatParam& lhs, const Param::FloatParam& rhs);

    /**
     * @brief Stream operator to print information about a `Param::FloatParam`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Param::FloatParam const& float_param);

    /**
     * @brief Type collecting all integer and float parameters.
     */
    struct AllParams {
        std::vector<IntParam>
            int_params{}; /**< @brief Collection of all parameter names and values of type int */
        std::vector<FloatParam> float_params{}; /**< @brief Collection of all parameter names and
                                                   values of type float */
    };

    /**
     * @brief Equal operator to compare two `Param::AllParams` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Param::AllParams& lhs, const Param::AllParams& rhs);

    /**
     * @brief Stream operator to print information about a `Param::AllParams`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Param::AllParams const& all_params);

    /**
     * @brief Possible results returned for param requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Request succeeded. */
        Timeout, /**< @brief Request timed out. */
        ConnectionError, /**< @brief Connection error. */
        WrongType, /**< @brief Wrong type. */
        ParamNameTooLong, /**< @brief Parameter name too long (> 16). */
    };

    /**
     * @brief Stream operator to print information about a `Param::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Param::Result const& result);

    /**
     * @brief Callback type for asynchronous Param calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Get an int parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    std::pair<Result, int32_t> get_param_int(std::string name) const;

    /**
     * @brief Set an int parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_param_int(std::string name, int32_t value) const;

    /**
     * @brief Get a float parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    std::pair<Result, float> get_param_float(std::string name) const;

    /**
     * @brief Set a float parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_param_float(std::string name, float value) const;

    /**
     * @brief Get all parameters.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Param::AllParams get_all_params() const;

    /**
     * @brief Copy constructor (object is not copyable).
     */
    Param(const Param& other) = delete;

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Param& operator=(const Param&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<ParamImpl> _impl;
};

} // namespace mavsdk