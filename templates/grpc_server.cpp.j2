// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to templates/grpc_server.cpp.j2
#include "grpc_server.h"

#include <grpc++/server_builder.h>
#include <grpc++/security/server_credentials.h>

#include "log.h"

namespace mavsdk {
namespace mavsdk_server {

void GrpcServer::set_port(const int port)
{
    _port = port;
}

int GrpcServer::run()
{
    grpc::ServerBuilder builder;
    setup_port(builder);

    builder.RegisterService(&_core);

{% for plugin in plugins %}
#ifdef {{ plugin|upper }}_ENABLED
    builder.RegisterService(&_{{ plugin }}_service);
#endif
{% endfor %}

#ifdef ENABLE_PROTO_REFLECTION
    grpc::reflection::InitProtoReflectionServerBuilderPlugin();
#endif

    grpc::EnableDefaultHealthCheckService(true);
    _server = builder.BuildAndStart();

    if (_bound_port != 0) {
        LogInfo() << "Server started";
        LogInfo() << "Server set to listen on 0.0.0.0:" << _bound_port;
    } else {
        LogErr() << "Failed to bind server to port " << _port;
    }

    return _bound_port;
}

void GrpcServer::wait()
{
    if (_server != nullptr) {
        _server->Wait();
    } else {
        LogWarn() << "Calling 'wait()' on a non-existing server. Did you call 'run()' before?";
    }
}

void GrpcServer::stop()
{
    if (_server != nullptr) {
        _core.stop();

{% for plugin in plugins %}
#ifdef {{ plugin|upper }}_ENABLED
        _{{ plugin }}_service.stop();
#endif
{% endfor %}
        _server->Shutdown();
    } else {
        LogWarn() << "Calling 'stop()' on a non-existing server. Did you call 'run()' before?";
    }
}

void GrpcServer::setup_port(grpc::ServerBuilder& builder)
{
    const std::string server_address("0.0.0.0:" + std::to_string(_port));
    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials(), &_bound_port);
}

} // namespace mavsdk_server
} // namespace mavsdk

