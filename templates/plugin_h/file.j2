// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/{{ plugin_name.lower_snake_case }}/{{ plugin_name.lower_snake_case }}.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

{% if is_server %}
#include "server_plugin_base.h"
{% else %}
#include "plugin_base.h"
{% endif %}
#include "handle.h"

namespace mavsdk {

{% if is_server %}
class ServerComponent;
{% else %}
class System;
{%- endif -%}
class {{ plugin_name.upper_camel_case }}Impl;

/**
 * @brief {{ class_description | replace('\n', '\n *')}}
 */
class {{ plugin_name.upper_camel_case }} : public {% if is_server %}ServerPluginBase{% else %}PluginBase{% endif %} {
public:
{% if is_server %}
    /**
     * @brief Constructor. Creates the plugin for a ServerComponent instance.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto {{ plugin_name.lower_snake_case }} = {{ plugin_name.upper_camel_case }}(server_component);
     *     ```
     *
     * @param server_component The ServerComponent instance associated with this server plugin.
     */
    explicit {{ plugin_name.upper_camel_case }}(std::shared_ptr<ServerComponent> server_component);
{% else %}
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto {{ plugin_name.lower_snake_case }} = {{ plugin_name.upper_camel_case }}(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit {{ plugin_name.upper_camel_case }}(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto {{ plugin_name.lower_snake_case }} = {{ plugin_name.upper_camel_case }}(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit {{ plugin_name.upper_camel_case }}(std::shared_ptr<System> system); // new
{% endif %}

    /**
     * @brief Destructor (internal use only).
     */
    ~{{ plugin_name.upper_camel_case }}() override;

{% for enum in enums %}
{{ indent(enum, 1) }}
{% endfor %}
{% for struct in structs %}
{{ indent(struct, 1) }}
{% endfor -%}

{% if has_result %}
    /**
     * @brief Callback type for asynchronous {{ plugin_name.upper_camel_case }} calls.
     */
    using ResultCallback = std::function<void(Result)>;
{% endif %}

{% for method in methods %}
{{ indent(method, 1) }}

{% endfor %}

    /**
     * @brief Copy constructor.
     */
    {{ plugin_name.upper_camel_case }}(const {{ plugin_name.upper_camel_case }}& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const {{ plugin_name.upper_camel_case }}& operator=(const {{ plugin_name.upper_camel_case }}&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<{{ plugin_name.upper_camel_case }}Impl> _impl;
};

} // namespace mavsdk
