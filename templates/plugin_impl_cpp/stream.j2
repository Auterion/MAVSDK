{% if is_async %}
    {% if is_finite %}
void {{ plugin_name.upper_camel_case }}Impl::{{ name.lower_snake_case }}_async({% for param in params %}{{ plugin_name.upper_camel_case }}::{{ param.type_info.name }} {{ param.name.lower_snake_case }}, {% endfor %}const {{ plugin_name.upper_camel_case }}::{{ name.upper_camel_case }}Callback& callback)
{
    {% for param in params %}
    UNUSED({{ param.name.lower_snake_case }});
    {% endfor %}
    UNUSED(callback);
}
    {% else %}
{{ plugin_name.upper_camel_case }}::{{ name.upper_camel_case }}Handle {{ plugin_name.upper_camel_case }}Impl::subscribe_{{ name.lower_snake_case }}({% for param in params %}{{ plugin_name.upper_camel_case }}::{{ param.type_info.name }} {{ param.name.lower_snake_case }}, {% endfor %}const {{ plugin_name.upper_camel_case }}::{{ name.upper_camel_case }}Callback& callback)
{
    {% for param in params %}
    UNUSED({{ param.name.lower_snake_case }});
    {% endfor %}
    UNUSED(callback);
}

void {{ plugin_name.upper_camel_case }}Impl::unsubscribe_{{ name.lower_snake_case }}({{ plugin_name.upper_camel_case }}::{{ name.upper_camel_case }}Handle handle)
{
    UNUSED(handle);
}
    {% endif %}
{% endif %}

{% if is_sync %}
{% if return_type.is_repeated %}
std::vector<{% if not return_type.is_primitive %}{{ plugin_name.upper_camel_case }}::{% endif %}{{ return_type.inner_name }}>
{% else %}
{% if not return_type.is_primitive %}{{ plugin_name.upper_camel_case }}::{% endif %}{{ return_type.name }}
{%endif -%} {{ plugin_name.upper_camel_case }}Impl::{{ name.lower_snake_case }}({% for param in params %}{{ plugin_name.upper_camel_case }}::{{ param.type_info.name }} {{ param.name.lower_snake_case }}{% if not loop.last %}, {% endif %}{% endfor %}) const
{
    {% for param in params %}
    UNUSED({{ param.name.lower_snake_case }});
    {% endfor %}

    return {};
}
{% endif %}
